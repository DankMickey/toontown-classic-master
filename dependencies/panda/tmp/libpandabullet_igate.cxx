/*
 * This file was generated by:
 * built\bin\interrogate -v -srcdir panda/src/bullet -Ipanda/src/bullet -DCPPPARSER -D__STDC__=1 -D__cplusplus=201103L -DWIN32_VC -DWIN32 -D_WIN32 -D_M_IX86 -D_MSC_VER=1600 -D__declspec(param)= -D__cdecl -D_near -D_far -D__near -D__far -D__stdcall -oc built/tmp/libpandabullet_igate.cxx -od built/pandac/input/libpandabullet.in -fnames -string -refcount -assert -python-native -Sbuilt/include/parser-inc -Ipanda/src/bullet -Sbuilt/tmp -Sbuilt/include -Sthirdparty/win-python/include -Sthirdparty/win-libs-vc10/bullet/include -Sthirdparty/win-libs-vc10/extras/include -module panda3d.bullet -library libpandabullet bulletAllHitsRayResult.h bulletBaseCharacterControllerNode.h bulletBodyNode.h bulletBoxShape.h bulletCapsuleShape.h bulletCharacterControllerNode.h bulletClosestHitRayResult.h bulletClosestHitSweepResult.h bulletConeShape.h bulletConeTwistConstraint.h bulletConstraint.h bulletContactCallbackData.h bulletContactCallbacks.h bulletContactResult.h bulletConvexHullShape.h bulletConvexPointCloudShape.h bulletCylinderShape.h bulletDebugNode.h bulletFilterCallbackData.h bulletGenericConstraint.h bulletGhostNode.h bulletHeightfieldShape.h bulletHelper.h bulletHingeConstraint.h bulletManifoldPoint.h bulletMinkowskiSumShape.h bulletMultiSphereShape.h bulletPersistentManifold.h bulletPlaneShape.h bulletRigidBodyNode.h bulletRotationalLimitMotor.h bulletShape.h bulletSliderConstraint.h bulletSoftBodyConfig.h bulletSoftBodyControl.h bulletSoftBodyMaterial.h bulletSoftBodyNode.h bulletSoftBodyShape.h bulletSoftBodyWorldInfo.h bulletSphereShape.h bulletSphericalConstraint.h bulletTickCallbackData.h bulletTranslationalLimitMotor.h bulletTriangleMesh.h bulletTriangleMeshShape.h bulletVehicle.h bulletWheel.h bulletWorld.h bullet_includes.h bullet_utils.h config_bullet.h p3bullet_composite.cxx 
 *
 */

#include "dtoolbase.h"
#include "interrogate_request.h"
#include "dconfig.h"
#include "pnotify.h"
#include <sstream>
#define PANDA_LIBRARY_NAME_libpandabullet
#include "py_panda.h"
#include "extension.h"
#include "dcast.h"

#include "boundingSphere.h"
#include "bulletAllHitsRayResult.h"
#include "bulletBaseCharacterControllerNode.h"
#include "bulletBodyNode.h"
#include "bulletBoxShape.h"
#include "bulletCapsuleShape.h"
#include "bulletCharacterControllerNode.h"
#include "bulletClosestHitRayResult.h"
#include "bulletClosestHitSweepResult.h"
#include "bulletConeShape.h"
#include "bulletConeTwistConstraint.h"
#include "bulletConstraint.h"
#include "bulletContactCallbackData.h"
#include "bulletContactCallbacks.h"
#include "bulletContactResult.h"
#include "bulletConvexHullShape.h"
#include "bulletConvexPointCloudShape.h"
#include "bulletCylinderShape.h"
#include "bulletDebugNode.h"
#include "bulletFilterCallbackData.h"
#include "bulletGenericConstraint.h"
#include "bulletGhostNode.h"
#include "bulletHeightfieldShape.h"
#include "bulletHelper.h"
#include "bulletHingeConstraint.h"
#include "bulletManifoldPoint.h"
#include "bulletMinkowskiSumShape.h"
#include "bulletMultiSphereShape.h"
#include "bulletPersistentManifold.h"
#include "bulletPlaneShape.h"
#include "bulletRigidBodyNode.h"
#include "bulletRotationalLimitMotor.h"
#include "bulletShape.h"
#include "bulletSliderConstraint.h"
#include "bulletSoftBodyConfig.h"
#include "bulletSoftBodyControl.h"
#include "bulletSoftBodyMaterial.h"
#include "bulletSoftBodyNode.h"
#include "bulletSoftBodyShape.h"
#include "bulletSoftBodyWorldInfo.h"
#include "bulletSphereShape.h"
#include "bulletSphericalConstraint.h"
#include "bulletTickCallbackData.h"
#include "bulletTranslationalLimitMotor.h"
#include "bulletTriangleMesh.h"
#include "bulletTriangleMeshShape.h"
#include "bulletVehicle.h"
#include "bulletWheel.h"
#include "bulletWorld.h"
#include "bullet_includes.h"
#include "bullet_utils.h"
#include "callbackData.h"
#include "callbackObject.h"
#include "collideMask.h"
#include "collisionBox.h"
#include "collisionNode.h"
#include "collisionPlane.h"
#include "collisionSphere.h"
#include "config_bullet.h"
#include "event.h"
#include "eventParameter.h"
#include "eventQueue.h"
#include "geom.h"
#include "luse.h"
#include "nodePath.h"
#include "nodePathCollection.h"
#include "pandaNode.h"
#include "pandabase.h"
#include "pnmImage.h"
#include "pta_LVecBase3.h"
#include "pta_int.h"
#include "pta_stdfloat.h"
#include "texture.h"
#include "texturePeeker.h"
#include "transformState.h"
#include "typedWritableReferenceCount.h"

#undef _POSIX_C_SOURCE
#undef _XOPEN_SOURCE
#define PY_SSIZE_T_CLEAN 1

#if PYTHON_FRAMEWORK
  #include <Python/Python.h>
#else
  #include "Python.h"
#endif

/**
 * Forward declarations for top-level class BulletRayHit
 */
typedef BulletRayHit BulletRayHit_localtype;
Define_Module_Class(panda3d.bullet, BulletRayHit, BulletRayHit_localtype, BulletRayHit);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletRayHit = &Dtool_BulletRayHit;
static void Dtool_PyModuleClassInit_BulletRayHit(PyObject *module);

/**
 * Forward declarations for top-level class BulletAllHitsRayResult
 */
typedef BulletAllHitsRayResult BulletAllHitsRayResult_localtype;
Define_Module_Class(panda3d.bullet, BulletAllHitsRayResult, BulletAllHitsRayResult_localtype, BulletAllHitsRayResult);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletAllHitsRayResult = &Dtool_BulletAllHitsRayResult;
static void Dtool_PyModuleClassInit_BulletAllHitsRayResult(PyObject *module);

/**
 * Forward declarations for top-level class BulletShape
 */
typedef BulletShape BulletShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletShape, BulletShape_localtype, BulletShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletShape = &Dtool_BulletShape;
static void Dtool_PyModuleClassInit_BulletShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletBaseCharacterControllerNode
 */
typedef BulletBaseCharacterControllerNode BulletBaseCharacterControllerNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletBaseCharacterControllerNode, BulletBaseCharacterControllerNode_localtype, BulletBaseCharacterControllerNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletBaseCharacterControllerNode = &Dtool_BulletBaseCharacterControllerNode;
static void Dtool_PyModuleClassInit_BulletBaseCharacterControllerNode(PyObject *module);
bool Dtool_ConstCoerce_BulletBaseCharacterControllerNode(PyObject *args, CPT(BulletBaseCharacterControllerNode) &coerced);
bool Dtool_Coerce_BulletBaseCharacterControllerNode(PyObject *args, PT(BulletBaseCharacterControllerNode) &coerced);

/**
 * Forward declarations for top-level class BulletBodyNode
 */
typedef BulletBodyNode BulletBodyNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletBodyNode, BulletBodyNode_localtype, BulletBodyNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletBodyNode = &Dtool_BulletBodyNode;
static void Dtool_PyModuleClassInit_BulletBodyNode(PyObject *module);

/**
 * Forward declarations for top-level class BulletBoxShape
 */
typedef BulletBoxShape BulletBoxShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletBoxShape, BulletBoxShape_localtype, BulletBoxShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletBoxShape = &Dtool_BulletBoxShape;
static void Dtool_PyModuleClassInit_BulletBoxShape(PyObject *module);
bool Dtool_ConstCoerce_BulletBoxShape(PyObject *args, CPT(BulletBoxShape) &coerced);
bool Dtool_Coerce_BulletBoxShape(PyObject *args, PT(BulletBoxShape) &coerced);

/**
 * Forward declarations for top-level class BulletCapsuleShape
 */
typedef BulletCapsuleShape BulletCapsuleShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletCapsuleShape, BulletCapsuleShape_localtype, BulletCapsuleShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletCapsuleShape = &Dtool_BulletCapsuleShape;
static void Dtool_PyModuleClassInit_BulletCapsuleShape(PyObject *module);
bool Dtool_ConstCoerce_BulletCapsuleShape(PyObject *args, CPT(BulletCapsuleShape) &coerced);
bool Dtool_Coerce_BulletCapsuleShape(PyObject *args, PT(BulletCapsuleShape) &coerced);

/**
 * Forward declarations for top-level class BulletCharacterControllerNode
 */
typedef BulletCharacterControllerNode BulletCharacterControllerNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletCharacterControllerNode, BulletCharacterControllerNode_localtype, BulletCharacterControllerNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletCharacterControllerNode = &Dtool_BulletCharacterControllerNode;
static void Dtool_PyModuleClassInit_BulletCharacterControllerNode(PyObject *module);
bool Dtool_ConstCoerce_BulletCharacterControllerNode(PyObject *args, CPT(BulletCharacterControllerNode) &coerced);
bool Dtool_Coerce_BulletCharacterControllerNode(PyObject *args, PT(BulletCharacterControllerNode) &coerced);

/**
 * Forward declarations for top-level class BulletClosestHitRayResult
 */
typedef BulletClosestHitRayResult BulletClosestHitRayResult_localtype;
Define_Module_Class(panda3d.bullet, BulletClosestHitRayResult, BulletClosestHitRayResult_localtype, BulletClosestHitRayResult);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletClosestHitRayResult = &Dtool_BulletClosestHitRayResult;
static void Dtool_PyModuleClassInit_BulletClosestHitRayResult(PyObject *module);

/**
 * Forward declarations for top-level class BulletClosestHitSweepResult
 */
typedef BulletClosestHitSweepResult BulletClosestHitSweepResult_localtype;
Define_Module_Class(panda3d.bullet, BulletClosestHitSweepResult, BulletClosestHitSweepResult_localtype, BulletClosestHitSweepResult);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletClosestHitSweepResult = &Dtool_BulletClosestHitSweepResult;
static void Dtool_PyModuleClassInit_BulletClosestHitSweepResult(PyObject *module);

/**
 * Forward declarations for top-level class BulletConeShape
 */
typedef BulletConeShape BulletConeShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletConeShape, BulletConeShape_localtype, BulletConeShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletConeShape = &Dtool_BulletConeShape;
static void Dtool_PyModuleClassInit_BulletConeShape(PyObject *module);
bool Dtool_ConstCoerce_BulletConeShape(PyObject *args, CPT(BulletConeShape) &coerced);
bool Dtool_Coerce_BulletConeShape(PyObject *args, PT(BulletConeShape) &coerced);

/**
 * Forward declarations for top-level class BulletConstraint
 */
typedef BulletConstraint BulletConstraint_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletConstraint, BulletConstraint_localtype, BulletConstraint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletConstraint = &Dtool_BulletConstraint;
static void Dtool_PyModuleClassInit_BulletConstraint(PyObject *module);

/**
 * Forward declarations for top-level class BulletConeTwistConstraint
 */
typedef BulletConeTwistConstraint BulletConeTwistConstraint_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletConeTwistConstraint, BulletConeTwistConstraint_localtype, BulletConeTwistConstraint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletConeTwistConstraint = &Dtool_BulletConeTwistConstraint;
static void Dtool_PyModuleClassInit_BulletConeTwistConstraint(PyObject *module);
bool Dtool_ConstCoerce_BulletConeTwistConstraint(PyObject *args, CPT(BulletConeTwistConstraint) &coerced);
bool Dtool_Coerce_BulletConeTwistConstraint(PyObject *args, PT(BulletConeTwistConstraint) &coerced);

/**
 * Forward declarations for top-level class BulletManifoldPoint
 */
typedef BulletManifoldPoint BulletManifoldPoint_localtype;
Define_Module_Class(panda3d.bullet, BulletManifoldPoint, BulletManifoldPoint_localtype, BulletManifoldPoint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletManifoldPoint = &Dtool_BulletManifoldPoint;
static void Dtool_PyModuleClassInit_BulletManifoldPoint(PyObject *module);

/**
 * Forward declarations for top-level class BulletContactCallbackData
 */
typedef BulletContactCallbackData BulletContactCallbackData_localtype;
Define_Module_Class(panda3d.bullet, BulletContactCallbackData, BulletContactCallbackData_localtype, BulletContactCallbackData);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletContactCallbackData = &Dtool_BulletContactCallbackData;
static void Dtool_PyModuleClassInit_BulletContactCallbackData(PyObject *module);
bool Dtool_ConstCoerce_BulletContactCallbackData(PyObject *args, BulletContactCallbackData const *&coerced, bool &manage);
bool Dtool_Coerce_BulletContactCallbackData(PyObject *args, BulletContactCallbackData *&coerced, bool &manage);

/**
 * Forward declarations for top-level class BulletContact
 */
typedef BulletContact BulletContact_localtype;
Define_Module_Class(panda3d.bullet, BulletContact, BulletContact_localtype, BulletContact);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletContact = &Dtool_BulletContact;
static void Dtool_PyModuleClassInit_BulletContact(PyObject *module);

/**
 * Forward declarations for top-level class BulletContactResult
 */
typedef BulletContactResult BulletContactResult_localtype;
Define_Module_Class(panda3d.bullet, BulletContactResult, BulletContactResult_localtype, BulletContactResult);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletContactResult = &Dtool_BulletContactResult;
static void Dtool_PyModuleClassInit_BulletContactResult(PyObject *module);

/**
 * Forward declarations for top-level class BulletDebugNode
 */
typedef BulletDebugNode BulletDebugNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletDebugNode, BulletDebugNode_localtype, BulletDebugNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletDebugNode = &Dtool_BulletDebugNode;
static void Dtool_PyModuleClassInit_BulletDebugNode(PyObject *module);
bool Dtool_ConstCoerce_BulletDebugNode(PyObject *args, CPT(BulletDebugNode) &coerced);
bool Dtool_Coerce_BulletDebugNode(PyObject *args, PT(BulletDebugNode) &coerced);

/**
 * Forward declarations for top-level class BulletGhostNode
 */
typedef BulletGhostNode BulletGhostNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletGhostNode, BulletGhostNode_localtype, BulletGhostNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletGhostNode = &Dtool_BulletGhostNode;
static void Dtool_PyModuleClassInit_BulletGhostNode(PyObject *module);
bool Dtool_ConstCoerce_BulletGhostNode(PyObject *args, CPT(BulletGhostNode) &coerced);
bool Dtool_Coerce_BulletGhostNode(PyObject *args, PT(BulletGhostNode) &coerced);

/**
 * Forward declarations for top-level class BulletRigidBodyNode
 */
typedef BulletRigidBodyNode BulletRigidBodyNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletRigidBodyNode, BulletRigidBodyNode_localtype, BulletRigidBodyNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletRigidBodyNode = &Dtool_BulletRigidBodyNode;
static void Dtool_PyModuleClassInit_BulletRigidBodyNode(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyNodeElement
 */
typedef BulletSoftBodyNodeElement BulletSoftBodyNodeElement_localtype;
Define_Module_Class(panda3d.bullet, BulletSoftBodyNodeElement, BulletSoftBodyNodeElement_localtype, BulletSoftBodyNodeElement);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyNodeElement = &Dtool_BulletSoftBodyNodeElement;
static void Dtool_PyModuleClassInit_BulletSoftBodyNodeElement(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyNode
 */
typedef BulletSoftBodyNode BulletSoftBodyNode_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletSoftBodyNode, BulletSoftBodyNode_localtype, BulletSoftBodyNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyNode = &Dtool_BulletSoftBodyNode;
static void Dtool_PyModuleClassInit_BulletSoftBodyNode(PyObject *module);

/**
 * Forward declarations for top-level class BulletVehicleTuning
 */
typedef BulletVehicleTuning BulletVehicleTuning_localtype;
Define_Module_Class(panda3d.bullet, BulletVehicleTuning, BulletVehicleTuning_localtype, BulletVehicleTuning);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletVehicleTuning = &Dtool_BulletVehicleTuning;
static void Dtool_PyModuleClassInit_BulletVehicleTuning(PyObject *module);

/**
 * Forward declarations for top-level class BulletVehicle
 */
typedef BulletVehicle BulletVehicle_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletVehicle, BulletVehicle_localtype, BulletVehicle);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletVehicle = &Dtool_BulletVehicle;
static void Dtool_PyModuleClassInit_BulletVehicle(PyObject *module);
bool Dtool_ConstCoerce_BulletVehicle(PyObject *args, CPT(BulletVehicle) &coerced);
bool Dtool_Coerce_BulletVehicle(PyObject *args, PT(BulletVehicle) &coerced);

/**
 * Forward declarations for top-level class BulletWorld
 */
typedef BulletWorld BulletWorld_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletWorld, BulletWorld_localtype, BulletWorld);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletWorld = &Dtool_BulletWorld;
static void Dtool_PyModuleClassInit_BulletWorld(PyObject *module);

/**
 * Forward declarations for top-level class BulletConvexHullShape
 */
typedef BulletConvexHullShape BulletConvexHullShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletConvexHullShape, BulletConvexHullShape_localtype, BulletConvexHullShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletConvexHullShape = &Dtool_BulletConvexHullShape;
static void Dtool_PyModuleClassInit_BulletConvexHullShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletConvexPointCloudShape
 */
typedef BulletConvexPointCloudShape BulletConvexPointCloudShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletConvexPointCloudShape, BulletConvexPointCloudShape_localtype, BulletConvexPointCloudShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletConvexPointCloudShape = &Dtool_BulletConvexPointCloudShape;
static void Dtool_PyModuleClassInit_BulletConvexPointCloudShape(PyObject *module);
bool Dtool_ConstCoerce_BulletConvexPointCloudShape(PyObject *args, CPT(BulletConvexPointCloudShape) &coerced);
bool Dtool_Coerce_BulletConvexPointCloudShape(PyObject *args, PT(BulletConvexPointCloudShape) &coerced);

/**
 * Forward declarations for top-level class BulletCylinderShape
 */
typedef BulletCylinderShape BulletCylinderShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletCylinderShape, BulletCylinderShape_localtype, BulletCylinderShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletCylinderShape = &Dtool_BulletCylinderShape;
static void Dtool_PyModuleClassInit_BulletCylinderShape(PyObject *module);
bool Dtool_ConstCoerce_BulletCylinderShape(PyObject *args, CPT(BulletCylinderShape) &coerced);
bool Dtool_Coerce_BulletCylinderShape(PyObject *args, PT(BulletCylinderShape) &coerced);

/**
 * Forward declarations for top-level class BulletFilterCallbackData
 */
typedef BulletFilterCallbackData BulletFilterCallbackData_localtype;
Define_Module_Class(panda3d.bullet, BulletFilterCallbackData, BulletFilterCallbackData_localtype, BulletFilterCallbackData);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletFilterCallbackData = &Dtool_BulletFilterCallbackData;
static void Dtool_PyModuleClassInit_BulletFilterCallbackData(PyObject *module);
bool Dtool_ConstCoerce_BulletFilterCallbackData(PyObject *args, BulletFilterCallbackData const *&coerced, bool &manage);
bool Dtool_Coerce_BulletFilterCallbackData(PyObject *args, BulletFilterCallbackData *&coerced, bool &manage);

/**
 * Forward declarations for top-level class BulletRotationalLimitMotor
 */
typedef BulletRotationalLimitMotor BulletRotationalLimitMotor_localtype;
Define_Module_Class(panda3d.bullet, BulletRotationalLimitMotor, BulletRotationalLimitMotor_localtype, BulletRotationalLimitMotor);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletRotationalLimitMotor = &Dtool_BulletRotationalLimitMotor;
static void Dtool_PyModuleClassInit_BulletRotationalLimitMotor(PyObject *module);

/**
 * Forward declarations for top-level class BulletTranslationalLimitMotor
 */
typedef BulletTranslationalLimitMotor BulletTranslationalLimitMotor_localtype;
Define_Module_Class(panda3d.bullet, BulletTranslationalLimitMotor, BulletTranslationalLimitMotor_localtype, BulletTranslationalLimitMotor);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletTranslationalLimitMotor = &Dtool_BulletTranslationalLimitMotor;
static void Dtool_PyModuleClassInit_BulletTranslationalLimitMotor(PyObject *module);

/**
 * Forward declarations for top-level class BulletGenericConstraint
 */
typedef BulletGenericConstraint BulletGenericConstraint_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletGenericConstraint, BulletGenericConstraint_localtype, BulletGenericConstraint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletGenericConstraint = &Dtool_BulletGenericConstraint;
static void Dtool_PyModuleClassInit_BulletGenericConstraint(PyObject *module);
bool Dtool_ConstCoerce_BulletGenericConstraint(PyObject *args, CPT(BulletGenericConstraint) &coerced);
bool Dtool_Coerce_BulletGenericConstraint(PyObject *args, PT(BulletGenericConstraint) &coerced);

/**
 * Forward declarations for top-level class BulletHeightfieldShape
 */
typedef BulletHeightfieldShape BulletHeightfieldShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletHeightfieldShape, BulletHeightfieldShape_localtype, BulletHeightfieldShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletHeightfieldShape = &Dtool_BulletHeightfieldShape;
static void Dtool_PyModuleClassInit_BulletHeightfieldShape(PyObject *module);
bool Dtool_ConstCoerce_BulletHeightfieldShape(PyObject *args, CPT(BulletHeightfieldShape) &coerced);
bool Dtool_Coerce_BulletHeightfieldShape(PyObject *args, PT(BulletHeightfieldShape) &coerced);

/**
 * Forward declarations for top-level class BulletHelper
 */
typedef BulletHelper BulletHelper_localtype;
Define_Module_Class(panda3d.bullet, BulletHelper, BulletHelper_localtype, BulletHelper);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletHelper = &Dtool_BulletHelper;
static void Dtool_PyModuleClassInit_BulletHelper(PyObject *module);

/**
 * Forward declarations for top-level class BulletHingeConstraint
 */
typedef BulletHingeConstraint BulletHingeConstraint_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletHingeConstraint, BulletHingeConstraint_localtype, BulletHingeConstraint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletHingeConstraint = &Dtool_BulletHingeConstraint;
static void Dtool_PyModuleClassInit_BulletHingeConstraint(PyObject *module);
bool Dtool_ConstCoerce_BulletHingeConstraint(PyObject *args, CPT(BulletHingeConstraint) &coerced);
bool Dtool_Coerce_BulletHingeConstraint(PyObject *args, PT(BulletHingeConstraint) &coerced);

/**
 * Forward declarations for top-level class BulletMinkowskiSumShape
 */
typedef BulletMinkowskiSumShape BulletMinkowskiSumShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletMinkowskiSumShape, BulletMinkowskiSumShape_localtype, BulletMinkowskiSumShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletMinkowskiSumShape = &Dtool_BulletMinkowskiSumShape;
static void Dtool_PyModuleClassInit_BulletMinkowskiSumShape(PyObject *module);
bool Dtool_ConstCoerce_BulletMinkowskiSumShape(PyObject *args, CPT(BulletMinkowskiSumShape) &coerced);
bool Dtool_Coerce_BulletMinkowskiSumShape(PyObject *args, PT(BulletMinkowskiSumShape) &coerced);

/**
 * Forward declarations for top-level class BulletMultiSphereShape
 */
typedef BulletMultiSphereShape BulletMultiSphereShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletMultiSphereShape, BulletMultiSphereShape_localtype, BulletMultiSphereShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletMultiSphereShape = &Dtool_BulletMultiSphereShape;
static void Dtool_PyModuleClassInit_BulletMultiSphereShape(PyObject *module);
bool Dtool_ConstCoerce_BulletMultiSphereShape(PyObject *args, CPT(BulletMultiSphereShape) &coerced);
bool Dtool_Coerce_BulletMultiSphereShape(PyObject *args, PT(BulletMultiSphereShape) &coerced);

/**
 * Forward declarations for top-level class BulletPersistentManifold
 */
typedef BulletPersistentManifold BulletPersistentManifold_localtype;
Define_Module_Class(panda3d.bullet, BulletPersistentManifold, BulletPersistentManifold_localtype, BulletPersistentManifold);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletPersistentManifold = &Dtool_BulletPersistentManifold;
static void Dtool_PyModuleClassInit_BulletPersistentManifold(PyObject *module);

/**
 * Forward declarations for top-level class BulletPlaneShape
 */
typedef BulletPlaneShape BulletPlaneShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletPlaneShape, BulletPlaneShape_localtype, BulletPlaneShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletPlaneShape = &Dtool_BulletPlaneShape;
static void Dtool_PyModuleClassInit_BulletPlaneShape(PyObject *module);
bool Dtool_ConstCoerce_BulletPlaneShape(PyObject *args, CPT(BulletPlaneShape) &coerced);
bool Dtool_Coerce_BulletPlaneShape(PyObject *args, PT(BulletPlaneShape) &coerced);

/**
 * Forward declarations for top-level class BulletSliderConstraint
 */
typedef BulletSliderConstraint BulletSliderConstraint_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletSliderConstraint, BulletSliderConstraint_localtype, BulletSliderConstraint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSliderConstraint = &Dtool_BulletSliderConstraint;
static void Dtool_PyModuleClassInit_BulletSliderConstraint(PyObject *module);
bool Dtool_ConstCoerce_BulletSliderConstraint(PyObject *args, CPT(BulletSliderConstraint) &coerced);
bool Dtool_Coerce_BulletSliderConstraint(PyObject *args, PT(BulletSliderConstraint) &coerced);

/**
 * Forward declarations for top-level class BulletSoftBodyConfig
 */
typedef BulletSoftBodyConfig BulletSoftBodyConfig_localtype;
Define_Module_Class(panda3d.bullet, BulletSoftBodyConfig, BulletSoftBodyConfig_localtype, BulletSoftBodyConfig);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyConfig = &Dtool_BulletSoftBodyConfig;
static void Dtool_PyModuleClassInit_BulletSoftBodyConfig(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyControl
 */
typedef BulletSoftBodyControl BulletSoftBodyControl_localtype;
Define_Module_Class(panda3d.bullet, BulletSoftBodyControl, BulletSoftBodyControl_localtype, BulletSoftBodyControl);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyControl = &Dtool_BulletSoftBodyControl;
static void Dtool_PyModuleClassInit_BulletSoftBodyControl(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyMaterial
 */
typedef BulletSoftBodyMaterial BulletSoftBodyMaterial_localtype;
Define_Module_Class(panda3d.bullet, BulletSoftBodyMaterial, BulletSoftBodyMaterial_localtype, BulletSoftBodyMaterial);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyMaterial = &Dtool_BulletSoftBodyMaterial;
static void Dtool_PyModuleClassInit_BulletSoftBodyMaterial(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyShape
 */
typedef BulletSoftBodyShape BulletSoftBodyShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletSoftBodyShape, BulletSoftBodyShape_localtype, BulletSoftBodyShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyShape = &Dtool_BulletSoftBodyShape;
static void Dtool_PyModuleClassInit_BulletSoftBodyShape(PyObject *module);

/**
 * Forward declarations for top-level class BulletSoftBodyWorldInfo
 */
typedef BulletSoftBodyWorldInfo BulletSoftBodyWorldInfo_localtype;
Define_Module_Class(panda3d.bullet, BulletSoftBodyWorldInfo, BulletSoftBodyWorldInfo_localtype, BulletSoftBodyWorldInfo);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSoftBodyWorldInfo = &Dtool_BulletSoftBodyWorldInfo;
static void Dtool_PyModuleClassInit_BulletSoftBodyWorldInfo(PyObject *module);

/**
 * Forward declarations for top-level class BulletSphereShape
 */
typedef BulletSphereShape BulletSphereShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletSphereShape, BulletSphereShape_localtype, BulletSphereShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSphereShape = &Dtool_BulletSphereShape;
static void Dtool_PyModuleClassInit_BulletSphereShape(PyObject *module);
bool Dtool_ConstCoerce_BulletSphereShape(PyObject *args, CPT(BulletSphereShape) &coerced);
bool Dtool_Coerce_BulletSphereShape(PyObject *args, PT(BulletSphereShape) &coerced);

/**
 * Forward declarations for top-level class BulletSphericalConstraint
 */
typedef BulletSphericalConstraint BulletSphericalConstraint_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletSphericalConstraint, BulletSphericalConstraint_localtype, BulletSphericalConstraint);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletSphericalConstraint = &Dtool_BulletSphericalConstraint;
static void Dtool_PyModuleClassInit_BulletSphericalConstraint(PyObject *module);
bool Dtool_ConstCoerce_BulletSphericalConstraint(PyObject *args, CPT(BulletSphericalConstraint) &coerced);
bool Dtool_Coerce_BulletSphericalConstraint(PyObject *args, PT(BulletSphericalConstraint) &coerced);

/**
 * Forward declarations for top-level class BulletTickCallbackData
 */
typedef BulletTickCallbackData BulletTickCallbackData_localtype;
Define_Module_Class(panda3d.bullet, BulletTickCallbackData, BulletTickCallbackData_localtype, BulletTickCallbackData);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletTickCallbackData = &Dtool_BulletTickCallbackData;
static void Dtool_PyModuleClassInit_BulletTickCallbackData(PyObject *module);
bool Dtool_ConstCoerce_BulletTickCallbackData(PyObject *args, BulletTickCallbackData const *&coerced, bool &manage);
bool Dtool_Coerce_BulletTickCallbackData(PyObject *args, BulletTickCallbackData *&coerced, bool &manage);

/**
 * Forward declarations for top-level class BulletTriangleMesh
 */
typedef BulletTriangleMesh BulletTriangleMesh_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletTriangleMesh, BulletTriangleMesh_localtype, BulletTriangleMesh);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletTriangleMesh = &Dtool_BulletTriangleMesh;
static void Dtool_PyModuleClassInit_BulletTriangleMesh(PyObject *module);

/**
 * Forward declarations for top-level class BulletTriangleMeshShape
 */
typedef BulletTriangleMeshShape BulletTriangleMeshShape_localtype;
Define_Module_ClassRef(panda3d.bullet, BulletTriangleMeshShape, BulletTriangleMeshShape_localtype, BulletTriangleMeshShape);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletTriangleMeshShape = &Dtool_BulletTriangleMeshShape;
static void Dtool_PyModuleClassInit_BulletTriangleMeshShape(PyObject *module);
bool Dtool_ConstCoerce_BulletTriangleMeshShape(PyObject *args, CPT(BulletTriangleMeshShape) &coerced);
bool Dtool_Coerce_BulletTriangleMeshShape(PyObject *args, PT(BulletTriangleMeshShape) &coerced);

/**
 * Forward declarations for top-level class BulletWheelRaycastInfo
 */
typedef BulletWheelRaycastInfo BulletWheelRaycastInfo_localtype;
Define_Module_Class(panda3d.bullet, BulletWheelRaycastInfo, BulletWheelRaycastInfo_localtype, BulletWheelRaycastInfo);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletWheelRaycastInfo = &Dtool_BulletWheelRaycastInfo;
static void Dtool_PyModuleClassInit_BulletWheelRaycastInfo(PyObject *module);

/**
 * Forward declarations for top-level class BulletWheel
 */
typedef BulletWheel BulletWheel_localtype;
Define_Module_Class(panda3d.bullet, BulletWheel, BulletWheel_localtype, BulletWheel);
static struct Dtool_PyTypedObject *const Dtool_Ptr_BulletWheel = &Dtool_BulletWheel;
static void Dtool_PyModuleClassInit_BulletWheel(PyObject *module);

/**
 * Extern declarations for imported classes
 */
// ostream
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_ostream;
#else
extern struct Dtool_PyTypedObject Dtool_ostream;
static struct Dtool_PyTypedObject *const Dtool_Ptr_ostream = &Dtool_ostream;
#endif
// TypeHandle
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_TypeHandle;
inline static TypeHandle *Dtool_Coerce_TypeHandle(PyObject *args, TypeHandle &coerced) {
  nassertr(Dtool_Ptr_TypeHandle != NULL, NULL);
  nassertr(Dtool_Ptr_TypeHandle->_Dtool_Coerce != NULL, NULL);
  return ((TypeHandle *(*)(PyObject *, TypeHandle &))Dtool_Ptr_TypeHandle->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_TypeHandle;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypeHandle = &Dtool_TypeHandle;
extern TypeHandle *Dtool_Coerce_TypeHandle(PyObject *args, TypeHandle &coerced);
#endif
// TypedObject
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_TypedObject;
#else
extern struct Dtool_PyTypedObject Dtool_TypedObject;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedObject = &Dtool_TypedObject;
#endif
// ReferenceCount
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_ReferenceCount;
#else
extern struct Dtool_PyTypedObject Dtool_ReferenceCount;
static struct Dtool_PyTypedObject *const Dtool_Ptr_ReferenceCount = &Dtool_ReferenceCount;
#endif
// LPoint3f
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_LPoint3f;
inline static LPoint3f *Dtool_Coerce_LPoint3f(PyObject *args, LPoint3f &coerced) {
  nassertr(Dtool_Ptr_LPoint3f != NULL, NULL);
  nassertr(Dtool_Ptr_LPoint3f->_Dtool_Coerce != NULL, NULL);
  return ((LPoint3f *(*)(PyObject *, LPoint3f &))Dtool_Ptr_LPoint3f->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LPoint3f;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LPoint3f = &Dtool_LPoint3f;
extern LPoint3f *Dtool_Coerce_LPoint3f(PyObject *args, LPoint3f &coerced);
#endif
// LVector3f
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_LVector3f;
inline static LVector3f *Dtool_Coerce_LVector3f(PyObject *args, LVector3f &coerced) {
  nassertr(Dtool_Ptr_LVector3f != NULL, NULL);
  nassertr(Dtool_Ptr_LVector3f->_Dtool_Coerce != NULL, NULL);
  return ((LVector3f *(*)(PyObject *, LVector3f &))Dtool_Ptr_LVector3f->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LVector3f;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LVector3f = &Dtool_LVector3f;
extern LVector3f *Dtool_Coerce_LVector3f(PyObject *args, LVector3f &coerced);
#endif
// LVecBase3f
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_LVecBase3f;
inline static LVecBase3f *Dtool_Coerce_LVecBase3f(PyObject *args, LVecBase3f &coerced) {
  nassertr(Dtool_Ptr_LVecBase3f != NULL, NULL);
  nassertr(Dtool_Ptr_LVecBase3f->_Dtool_Coerce != NULL, NULL);
  return ((LVecBase3f *(*)(PyObject *, LVecBase3f &))Dtool_Ptr_LVecBase3f->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LVecBase3f;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LVecBase3f = &Dtool_LVecBase3f;
extern LVecBase3f *Dtool_Coerce_LVecBase3f(PyObject *args, LVecBase3f &coerced);
#endif
// LMatrix3f
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_LMatrix3f;
inline static LMatrix3f *Dtool_Coerce_LMatrix3f(PyObject *args, LMatrix3f &coerced) {
  nassertr(Dtool_Ptr_LMatrix3f != NULL, NULL);
  nassertr(Dtool_Ptr_LMatrix3f->_Dtool_Coerce != NULL, NULL);
  return ((LMatrix3f *(*)(PyObject *, LMatrix3f &))Dtool_Ptr_LMatrix3f->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LMatrix3f;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LMatrix3f = &Dtool_LMatrix3f;
extern LMatrix3f *Dtool_Coerce_LMatrix3f(PyObject *args, LMatrix3f &coerced);
#endif
// LMatrix4f
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_LMatrix4f;
inline static LMatrix4f *Dtool_Coerce_LMatrix4f(PyObject *args, LMatrix4f &coerced) {
  nassertr(Dtool_Ptr_LMatrix4f != NULL, NULL);
  nassertr(Dtool_Ptr_LMatrix4f->_Dtool_Coerce != NULL, NULL);
  return ((LMatrix4f *(*)(PyObject *, LMatrix4f &))Dtool_Ptr_LMatrix4f->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LMatrix4f;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LMatrix4f = &Dtool_LMatrix4f;
extern LMatrix4f *Dtool_Coerce_LMatrix4f(PyObject *args, LMatrix4f &coerced);
#endif
// Namable
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_Namable;
#else
extern struct Dtool_PyTypedObject Dtool_Namable;
static struct Dtool_PyTypedObject *const Dtool_Ptr_Namable = &Dtool_Namable;
#endif
// TypedReferenceCount
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_TypedReferenceCount;
#else
extern struct Dtool_PyTypedObject Dtool_TypedReferenceCount;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedReferenceCount = &Dtool_TypedReferenceCount;
#endif
// LQuaternionf
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_LQuaternionf;
inline static LQuaternionf *Dtool_Coerce_LQuaternionf(PyObject *args, LQuaternionf &coerced) {
  nassertr(Dtool_Ptr_LQuaternionf != NULL, NULL);
  nassertr(Dtool_Ptr_LQuaternionf->_Dtool_Coerce != NULL, NULL);
  return ((LQuaternionf *(*)(PyObject *, LQuaternionf &))Dtool_Ptr_LQuaternionf->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_LQuaternionf;
static struct Dtool_PyTypedObject *const Dtool_Ptr_LQuaternionf = &Dtool_LQuaternionf;
extern LQuaternionf *Dtool_Coerce_LQuaternionf(PyObject *args, LQuaternionf &coerced);
#endif
// TypedWritable
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_TypedWritable;
#else
extern struct Dtool_PyTypedObject Dtool_TypedWritable;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedWritable = &Dtool_TypedWritable;
#endif
// TypedWritableReferenceCount
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_TypedWritableReferenceCount;
#else
extern struct Dtool_PyTypedObject Dtool_TypedWritableReferenceCount;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedWritableReferenceCount = &Dtool_TypedWritableReferenceCount;
#endif
// InternalName
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_InternalName;
inline static bool Dtool_ConstCoerce_InternalName(PyObject *args, CPT(InternalName) &coerced) {
  nassertr(Dtool_Ptr_InternalName != NULL, false);
  nassertr(Dtool_Ptr_InternalName->_Dtool_ConstCoerce != NULL, false);
  return ((bool (*)(PyObject *, CPT(InternalName) &))Dtool_Ptr_InternalName->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_InternalName(PyObject *args, PT(InternalName) &coerced) {
  nassertr(Dtool_Ptr_InternalName != NULL, false);
  nassertr(Dtool_Ptr_InternalName->_Dtool_Coerce != NULL, false);
  return ((bool (*)(PyObject *, PT(InternalName) &))Dtool_Ptr_InternalName->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_InternalName;
static struct Dtool_PyTypedObject *const Dtool_Ptr_InternalName = &Dtool_InternalName;
extern bool Dtool_ConstCoerce_InternalName(PyObject *args, CPT(InternalName) &coerced);
extern bool Dtool_Coerce_InternalName(PyObject *args, PT(InternalName) &coerced);
#endif
// BitMask< uint32_t, 32 >
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_BitMask_uint32_t_32;
inline static BitMask< uint32_t, 32 > *Dtool_Coerce_BitMask_uint32_t_32(PyObject *args, BitMask< uint32_t, 32 > &coerced) {
  nassertr(Dtool_Ptr_BitMask_uint32_t_32 != NULL, NULL);
  nassertr(Dtool_Ptr_BitMask_uint32_t_32->_Dtool_Coerce != NULL, NULL);
  return ((BitMask< uint32_t, 32 > *(*)(PyObject *, BitMask< uint32_t, 32 > &))Dtool_Ptr_BitMask_uint32_t_32->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_BitMask_uint32_t_32;
static struct Dtool_PyTypedObject *const Dtool_Ptr_BitMask_uint32_t_32 = &Dtool_BitMask_uint32_t_32;
extern BitMask< uint32_t, 32 > *Dtool_Coerce_BitMask_uint32_t_32(PyObject *args, BitMask< uint32_t, 32 > &coerced);
#endif
// GeomVertexFormat
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_GeomVertexFormat;
inline static bool Dtool_ConstCoerce_GeomVertexFormat(PyObject *args, CPT(GeomVertexFormat) &coerced) {
  nassertr(Dtool_Ptr_GeomVertexFormat != NULL, false);
  nassertr(Dtool_Ptr_GeomVertexFormat->_Dtool_ConstCoerce != NULL, false);
  return ((bool (*)(PyObject *, CPT(GeomVertexFormat) &))Dtool_Ptr_GeomVertexFormat->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_GeomVertexFormat(PyObject *args, PT(GeomVertexFormat) &coerced) {
  nassertr(Dtool_Ptr_GeomVertexFormat != NULL, false);
  nassertr(Dtool_Ptr_GeomVertexFormat->_Dtool_Coerce != NULL, false);
  return ((bool (*)(PyObject *, PT(GeomVertexFormat) &))Dtool_Ptr_GeomVertexFormat->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_GeomVertexFormat;
static struct Dtool_PyTypedObject *const Dtool_Ptr_GeomVertexFormat = &Dtool_GeomVertexFormat;
extern bool Dtool_ConstCoerce_GeomVertexFormat(PyObject *args, CPT(GeomVertexFormat) &coerced);
extern bool Dtool_Coerce_GeomVertexFormat(PyObject *args, PT(GeomVertexFormat) &coerced);
#endif
// PointerToArray< int >
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_PointerToArray_int;
inline static PointerToArray< int > *Dtool_Coerce_PointerToArray_int(PyObject *args, PointerToArray< int > &coerced) {
  nassertr(Dtool_Ptr_PointerToArray_int != NULL, NULL);
  nassertr(Dtool_Ptr_PointerToArray_int->_Dtool_Coerce != NULL, NULL);
  return ((PointerToArray< int > *(*)(PyObject *, PointerToArray< int > &))Dtool_Ptr_PointerToArray_int->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_PointerToArray_int;
static struct Dtool_PyTypedObject *const Dtool_Ptr_PointerToArray_int = &Dtool_PointerToArray_int;
extern PointerToArray< int > *Dtool_Coerce_PointerToArray_int(PyObject *args, PointerToArray< int > &coerced);
#endif
// Geom
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_Geom;
#else
extern struct Dtool_PyTypedObject Dtool_Geom;
static struct Dtool_PyTypedObject *const Dtool_Ptr_Geom = &Dtool_Geom;
#endif
// TransformState
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_TransformState;
#else
extern struct Dtool_PyTypedObject Dtool_TransformState;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TransformState = &Dtool_TransformState;
#endif
// PandaNode
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_PandaNode;
#else
extern struct Dtool_PyTypedObject Dtool_PandaNode;
static struct Dtool_PyTypedObject *const Dtool_Ptr_PandaNode = &Dtool_PandaNode;
#endif
// PointerToArray< float >
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_PointerToArray_float;
inline static PointerToArray< float > *Dtool_Coerce_PointerToArray_float(PyObject *args, PointerToArray< float > &coerced) {
  nassertr(Dtool_Ptr_PointerToArray_float != NULL, NULL);
  nassertr(Dtool_Ptr_PointerToArray_float->_Dtool_Coerce != NULL, NULL);
  return ((PointerToArray< float > *(*)(PyObject *, PointerToArray< float > &))Dtool_Ptr_PointerToArray_float->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_PointerToArray_float;
static struct Dtool_PyTypedObject *const Dtool_Ptr_PointerToArray_float = &Dtool_PointerToArray_float;
extern PointerToArray< float > *Dtool_Coerce_PointerToArray_float(PyObject *args, PointerToArray< float > &coerced);
#endif
// PointerToArray< LVecBase3f >
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_PointerToArray_LVecBase3f;
inline static PointerToArray< LVecBase3f > *Dtool_Coerce_PointerToArray_LVecBase3f(PyObject *args, PointerToArray< LVecBase3f > &coerced) {
  nassertr(Dtool_Ptr_PointerToArray_LVecBase3f != NULL, NULL);
  nassertr(Dtool_Ptr_PointerToArray_LVecBase3f->_Dtool_Coerce != NULL, NULL);
  return ((PointerToArray< LVecBase3f > *(*)(PyObject *, PointerToArray< LVecBase3f > &))Dtool_Ptr_PointerToArray_LVecBase3f->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_PointerToArray_LVecBase3f;
static struct Dtool_PyTypedObject *const Dtool_Ptr_PointerToArray_LVecBase3f = &Dtool_PointerToArray_LVecBase3f;
extern PointerToArray< LVecBase3f > *Dtool_Coerce_PointerToArray_LVecBase3f(PyObject *args, PointerToArray< LVecBase3f > &coerced);
#endif
// Texture
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_Texture;
#else
extern struct Dtool_PyTypedObject Dtool_Texture;
static struct Dtool_PyTypedObject *const Dtool_Ptr_Texture = &Dtool_Texture;
#endif
// NodePath
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_NodePath;
#else
extern struct Dtool_PyTypedObject Dtool_NodePath;
static struct Dtool_PyTypedObject *const Dtool_Ptr_NodePath = &Dtool_NodePath;
#endif
// GeomNode
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_GeomNode;
#else
extern struct Dtool_PyTypedObject Dtool_GeomNode;
static struct Dtool_PyTypedObject *const Dtool_Ptr_GeomNode = &Dtool_GeomNode;
#endif
// BoundingSphere
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_BoundingSphere;
inline static bool Dtool_ConstCoerce_BoundingSphere(PyObject *args, CPT(BoundingSphere) &coerced) {
  nassertr(Dtool_Ptr_BoundingSphere != NULL, false);
  nassertr(Dtool_Ptr_BoundingSphere->_Dtool_ConstCoerce != NULL, false);
  return ((bool (*)(PyObject *, CPT(BoundingSphere) &))Dtool_Ptr_BoundingSphere->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_BoundingSphere(PyObject *args, PT(BoundingSphere) &coerced) {
  nassertr(Dtool_Ptr_BoundingSphere != NULL, false);
  nassertr(Dtool_Ptr_BoundingSphere->_Dtool_Coerce != NULL, false);
  return ((bool (*)(PyObject *, PT(BoundingSphere) &))Dtool_Ptr_BoundingSphere->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_BoundingSphere;
static struct Dtool_PyTypedObject *const Dtool_Ptr_BoundingSphere = &Dtool_BoundingSphere;
extern bool Dtool_ConstCoerce_BoundingSphere(PyObject *args, CPT(BoundingSphere) &coerced);
extern bool Dtool_Coerce_BoundingSphere(PyObject *args, PT(BoundingSphere) &coerced);
#endif
// CollisionNode
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_CollisionNode;
inline static bool Dtool_ConstCoerce_CollisionNode(PyObject *args, CPT(CollisionNode) &coerced) {
  nassertr(Dtool_Ptr_CollisionNode != NULL, false);
  nassertr(Dtool_Ptr_CollisionNode->_Dtool_ConstCoerce != NULL, false);
  return ((bool (*)(PyObject *, CPT(CollisionNode) &))Dtool_Ptr_CollisionNode->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_CollisionNode(PyObject *args, PT(CollisionNode) &coerced) {
  nassertr(Dtool_Ptr_CollisionNode != NULL, false);
  nassertr(Dtool_Ptr_CollisionNode->_Dtool_Coerce != NULL, false);
  return ((bool (*)(PyObject *, PT(CollisionNode) &))Dtool_Ptr_CollisionNode->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_CollisionNode;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CollisionNode = &Dtool_CollisionNode;
extern bool Dtool_ConstCoerce_CollisionNode(PyObject *args, CPT(CollisionNode) &coerced);
extern bool Dtool_Coerce_CollisionNode(PyObject *args, PT(CollisionNode) &coerced);
#endif
// CallbackData
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_CallbackData;
#else
extern struct Dtool_PyTypedObject Dtool_CallbackData;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CallbackData = &Dtool_CallbackData;
#endif
// CollisionBox
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_CollisionBox;
inline static bool Dtool_ConstCoerce_CollisionBox(PyObject *args, CPT(CollisionBox) &coerced) {
  nassertr(Dtool_Ptr_CollisionBox != NULL, false);
  nassertr(Dtool_Ptr_CollisionBox->_Dtool_ConstCoerce != NULL, false);
  return ((bool (*)(PyObject *, CPT(CollisionBox) &))Dtool_Ptr_CollisionBox->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_CollisionBox(PyObject *args, PT(CollisionBox) &coerced) {
  nassertr(Dtool_Ptr_CollisionBox != NULL, false);
  nassertr(Dtool_Ptr_CollisionBox->_Dtool_Coerce != NULL, false);
  return ((bool (*)(PyObject *, PT(CollisionBox) &))Dtool_Ptr_CollisionBox->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_CollisionBox;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CollisionBox = &Dtool_CollisionBox;
extern bool Dtool_ConstCoerce_CollisionBox(PyObject *args, CPT(CollisionBox) &coerced);
extern bool Dtool_Coerce_CollisionBox(PyObject *args, PT(CollisionBox) &coerced);
#endif
// CallbackObject
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_CallbackObject;
inline static bool Dtool_ConstCoerce_CallbackObject(PyObject *args, CPT(CallbackObject) &coerced) {
  nassertr(Dtool_Ptr_CallbackObject != NULL, false);
  nassertr(Dtool_Ptr_CallbackObject->_Dtool_ConstCoerce != NULL, false);
  return ((bool (*)(PyObject *, CPT(CallbackObject) &))Dtool_Ptr_CallbackObject->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_CallbackObject(PyObject *args, PT(CallbackObject) &coerced) {
  nassertr(Dtool_Ptr_CallbackObject != NULL, false);
  nassertr(Dtool_Ptr_CallbackObject->_Dtool_Coerce != NULL, false);
  return ((bool (*)(PyObject *, PT(CallbackObject) &))Dtool_Ptr_CallbackObject->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_CallbackObject;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CallbackObject = &Dtool_CallbackObject;
extern bool Dtool_ConstCoerce_CallbackObject(PyObject *args, CPT(CallbackObject) &coerced);
extern bool Dtool_Coerce_CallbackObject(PyObject *args, PT(CallbackObject) &coerced);
#endif
// BoundingBox
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_BoundingBox;
inline static bool Dtool_ConstCoerce_BoundingBox(PyObject *args, CPT(BoundingBox) &coerced) {
  nassertr(Dtool_Ptr_BoundingBox != NULL, false);
  nassertr(Dtool_Ptr_BoundingBox->_Dtool_ConstCoerce != NULL, false);
  return ((bool (*)(PyObject *, CPT(BoundingBox) &))Dtool_Ptr_BoundingBox->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_BoundingBox(PyObject *args, PT(BoundingBox) &coerced) {
  nassertr(Dtool_Ptr_BoundingBox != NULL, false);
  nassertr(Dtool_Ptr_BoundingBox->_Dtool_Coerce != NULL, false);
  return ((bool (*)(PyObject *, PT(BoundingBox) &))Dtool_Ptr_BoundingBox->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_BoundingBox;
static struct Dtool_PyTypedObject *const Dtool_Ptr_BoundingBox = &Dtool_BoundingBox;
extern bool Dtool_ConstCoerce_BoundingBox(PyObject *args, CPT(BoundingBox) &coerced);
extern bool Dtool_Coerce_BoundingBox(PyObject *args, PT(BoundingBox) &coerced);
#endif
// NurbsSurfaceEvaluator
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_NurbsSurfaceEvaluator;
#else
extern struct Dtool_PyTypedObject Dtool_NurbsSurfaceEvaluator;
static struct Dtool_PyTypedObject *const Dtool_Ptr_NurbsSurfaceEvaluator = &Dtool_NurbsSurfaceEvaluator;
#endif
// NurbsCurveEvaluator
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_NurbsCurveEvaluator;
#else
extern struct Dtool_PyTypedObject Dtool_NurbsCurveEvaluator;
static struct Dtool_PyTypedObject *const Dtool_Ptr_NurbsCurveEvaluator = &Dtool_NurbsCurveEvaluator;
#endif
// PNMImage
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_PNMImage;
#else
extern struct Dtool_PyTypedObject Dtool_PNMImage;
static struct Dtool_PyTypedObject *const Dtool_Ptr_PNMImage = &Dtool_PNMImage;
#endif
// NodePathCollection
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_NodePathCollection;
inline static bool Dtool_ConstCoerce_NodePathCollection(PyObject *args, NodePathCollection const *&coerced, bool &manage) {
  nassertr(Dtool_Ptr_NodePathCollection != NULL, false);
  nassertr(Dtool_Ptr_NodePathCollection->_Dtool_ConstCoerce != NULL, false);
  return ((bool (*)(PyObject *, NodePathCollection const *&, bool&))Dtool_Ptr_NodePathCollection->_Dtool_ConstCoerce)(args, coerced, manage);
}
inline static bool Dtool_Coerce_NodePathCollection(PyObject *args, NodePathCollection *&coerced, bool &manage) {
  nassertr(Dtool_Ptr_NodePathCollection != NULL, false);
  nassertr(Dtool_Ptr_NodePathCollection->_Dtool_Coerce != NULL, false);
  return ((bool (*)(PyObject *, NodePathCollection *&, bool&))Dtool_Ptr_NodePathCollection->_Dtool_Coerce)(args, coerced, manage);
}
#else
extern struct Dtool_PyTypedObject Dtool_NodePathCollection;
static struct Dtool_PyTypedObject *const Dtool_Ptr_NodePathCollection = &Dtool_NodePathCollection;
extern bool Dtool_ConstCoerce_NodePathCollection(PyObject *args, NodePathCollection const *&coerced, bool &manage);
extern bool Dtool_Coerce_NodePathCollection(PyObject *args, NodePathCollection *&coerced, bool &manage);
#endif
// CollisionSphere
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_CollisionSphere;
inline static bool Dtool_ConstCoerce_CollisionSphere(PyObject *args, CPT(CollisionSphere) &coerced) {
  nassertr(Dtool_Ptr_CollisionSphere != NULL, false);
  nassertr(Dtool_Ptr_CollisionSphere->_Dtool_ConstCoerce != NULL, false);
  return ((bool (*)(PyObject *, CPT(CollisionSphere) &))Dtool_Ptr_CollisionSphere->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_CollisionSphere(PyObject *args, PT(CollisionSphere) &coerced) {
  nassertr(Dtool_Ptr_CollisionSphere != NULL, false);
  nassertr(Dtool_Ptr_CollisionSphere->_Dtool_Coerce != NULL, false);
  return ((bool (*)(PyObject *, PT(CollisionSphere) &))Dtool_Ptr_CollisionSphere->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_CollisionSphere;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CollisionSphere = &Dtool_CollisionSphere;
extern bool Dtool_ConstCoerce_CollisionSphere(PyObject *args, CPT(CollisionSphere) &coerced);
extern bool Dtool_Coerce_CollisionSphere(PyObject *args, PT(CollisionSphere) &coerced);
#endif
// CollisionPlane
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_CollisionPlane;
inline static bool Dtool_ConstCoerce_CollisionPlane(PyObject *args, CPT(CollisionPlane) &coerced) {
  nassertr(Dtool_Ptr_CollisionPlane != NULL, false);
  nassertr(Dtool_Ptr_CollisionPlane->_Dtool_ConstCoerce != NULL, false);
  return ((bool (*)(PyObject *, CPT(CollisionPlane) &))Dtool_Ptr_CollisionPlane->_Dtool_ConstCoerce)(args, coerced);
}
inline static bool Dtool_Coerce_CollisionPlane(PyObject *args, PT(CollisionPlane) &coerced) {
  nassertr(Dtool_Ptr_CollisionPlane != NULL, false);
  nassertr(Dtool_Ptr_CollisionPlane->_Dtool_Coerce != NULL, false);
  return ((bool (*)(PyObject *, PT(CollisionPlane) &))Dtool_Ptr_CollisionPlane->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_CollisionPlane;
static struct Dtool_PyTypedObject *const Dtool_Ptr_CollisionPlane = &Dtool_CollisionPlane;
extern bool Dtool_ConstCoerce_CollisionPlane(PyObject *args, CPT(CollisionPlane) &coerced);
extern bool Dtool_Coerce_CollisionPlane(PyObject *args, PT(CollisionPlane) &coerced);
#endif

/**
 * Python wrappers for global functions
 */
/**
 * Python function wrapper for:
 * BulletUpAxis get_default_up_axis(void)
 */
static PyObject *Dtool_get_default_up_axis_2(PyObject *, PyObject *) {
  // 1-BulletUpAxis get_default_up_axis(void)
  BulletUpAxis return_value = get_default_up_axis();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_get_default_up_axis_2_comment =
  "C++ Interface:\n"
  "get_default_up_axis()\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_get_default_up_axis_2_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int get_bullet_version(void)
 */
static PyObject *Dtool_get_bullet_version_3(PyObject *, PyObject *) {
  // 1-int get_bullet_version(void)
  int return_value = get_bullet_version();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_get_bullet_version_3_comment =
  "C++ Interface:\n"
  "get_bullet_version()\n"
  "\n"
  "/**\n"
  " * Returns the version of the linked Bullet library.\n"
  " */";
#else
static const char *Dtool_get_bullet_version_3_comment = NULL;
#endif

/**
 * Python wrappers for functions of class BulletRayHit
 */
/**
 * Python function wrapper for:
 * static inline BulletRayHit BulletRayHit::empty(void)
 */
static PyObject *Dtool_BulletRayHit_empty_5(PyObject *, PyObject *) {
  // 1-static inline BulletRayHit BulletRayHit::empty(void)
  BulletRayHit *return_value = new BulletRayHit(BulletRayHit::empty());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletRayHit, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_empty_5_comment =
  "C++ Interface:\n"
  "empty()\n"
  "\n"
  "/**\n"
  " * Named constructor intended to be used for asserts with have to return a\n"
  " * concrete value.\n"
  " */";
#else
static const char *Dtool_BulletRayHit_empty_5_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PandaNode *BulletRayHit::get_node(void) const
 */
static PyObject *Dtool_BulletRayHit_get_node_6(PyObject *self, PyObject *) {
  BulletRayHit *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRayHit, (void **)&local_this)) {
    return NULL;
  }
  // 1-PandaNode *BulletRayHit::get_node(void) const
  PandaNode *return_value = (*(const BulletRayHit*)local_this).get_node();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_get_node_6_comment =
  "C++ Interface:\n"
  "get_node(BulletRayHit self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRayHit_get_node_6_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletRayHit::get_hit_pos(void) const
 */
static PyObject *Dtool_BulletRayHit_get_hit_pos_7(PyObject *self, PyObject *) {
  BulletRayHit *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRayHit, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletRayHit::get_hit_pos(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletRayHit*)local_this).get_hit_pos());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_get_hit_pos_7_comment =
  "C++ Interface:\n"
  "get_hit_pos(BulletRayHit self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRayHit_get_hit_pos_7_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRayHit::get_hit_normal(void) const
 */
static PyObject *Dtool_BulletRayHit_get_hit_normal_8(PyObject *self, PyObject *) {
  BulletRayHit *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRayHit, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletRayHit::get_hit_normal(void) const
  LVector3 *return_value = new LVector3((*(const BulletRayHit*)local_this).get_hit_normal());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_get_hit_normal_8_comment =
  "C++ Interface:\n"
  "get_hit_normal(BulletRayHit self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRayHit_get_hit_normal_8_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRayHit::get_hit_fraction(void) const
 */
static PyObject *Dtool_BulletRayHit_get_hit_fraction_9(PyObject *self, PyObject *) {
  BulletRayHit *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRayHit, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletRayHit::get_hit_fraction(void) const
  PN_stdfloat return_value = (*(const BulletRayHit*)local_this).get_hit_fraction();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_get_hit_fraction_9_comment =
  "C++ Interface:\n"
  "get_hit_fraction(BulletRayHit self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRayHit_get_hit_fraction_9_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletRayHit::get_shape_part(void) const
 */
static PyObject *Dtool_BulletRayHit_get_shape_part_10(PyObject *self, PyObject *) {
  BulletRayHit *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRayHit, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletRayHit::get_shape_part(void) const
  int return_value = (*(const BulletRayHit*)local_this).get_shape_part();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_get_shape_part_10_comment =
  "C++ Interface:\n"
  "get_shape_part(BulletRayHit self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRayHit_get_shape_part_10_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletRayHit::get_triangle_index(void) const
 */
static PyObject *Dtool_BulletRayHit_get_triangle_index_11(PyObject *self, PyObject *) {
  BulletRayHit *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRayHit, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletRayHit::get_triangle_index(void) const
  int return_value = (*(const BulletRayHit*)local_this).get_triangle_index();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRayHit_get_triangle_index_11_comment =
  "C++ Interface:\n"
  "get_triangle_index(BulletRayHit self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRayHit_get_triangle_index_11_comment = NULL;
#endif

static int Dtool_Init_BulletRayHit(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletRayHit(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletRayHit) {
    printf("BulletRayHit ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletRayHit *local_this = (BulletRayHit *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletRayHit) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletRayHit(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletRayHit) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletAllHitsRayResult
 */
/**
 * Python function wrapper for:
 * static inline BulletAllHitsRayResult BulletAllHitsRayResult::empty(void)
 */
static PyObject *Dtool_BulletAllHitsRayResult_empty_18(PyObject *, PyObject *) {
  // 1-static inline BulletAllHitsRayResult BulletAllHitsRayResult::empty(void)
  BulletAllHitsRayResult *return_value = new BulletAllHitsRayResult(BulletAllHitsRayResult::empty());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletAllHitsRayResult, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_empty_18_comment =
  "C++ Interface:\n"
  "empty()\n"
  "\n"
  "/**\n"
  " * Named constructor intended to be used for asserts with have to return a\n"
  " * concrete value.\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_empty_18_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletAllHitsRayResult::get_from_pos(void) const
 */
static PyObject *Dtool_BulletAllHitsRayResult_get_from_pos_19(PyObject *self, PyObject *) {
  BulletAllHitsRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletAllHitsRayResult::get_from_pos(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletAllHitsRayResult*)local_this).get_from_pos());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_get_from_pos_19_comment =
  "C++ Interface:\n"
  "get_from_pos(BulletAllHitsRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_get_from_pos_19_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletAllHitsRayResult::get_to_pos(void) const
 */
static PyObject *Dtool_BulletAllHitsRayResult_get_to_pos_20(PyObject *self, PyObject *) {
  BulletAllHitsRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletAllHitsRayResult::get_to_pos(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletAllHitsRayResult*)local_this).get_to_pos());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_get_to_pos_20_comment =
  "C++ Interface:\n"
  "get_to_pos(BulletAllHitsRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_get_to_pos_20_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletAllHitsRayResult::has_hits(void) const
 */
static PyObject *Dtool_BulletAllHitsRayResult_has_hits_21(PyObject *self, PyObject *) {
  BulletAllHitsRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletAllHitsRayResult::has_hits(void) const
  bool return_value = (*(const BulletAllHitsRayResult*)local_this).has_hits();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_has_hits_21_comment =
  "C++ Interface:\n"
  "has_hits(BulletAllHitsRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_has_hits_21_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletAllHitsRayResult::get_closest_hit_fraction(void) const
 */
static PyObject *Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_22(PyObject *self, PyObject *) {
  BulletAllHitsRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletAllHitsRayResult::get_closest_hit_fraction(void) const
  PN_stdfloat return_value = (*(const BulletAllHitsRayResult*)local_this).get_closest_hit_fraction();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_22_comment =
  "C++ Interface:\n"
  "get_closest_hit_fraction(BulletAllHitsRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_22_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletAllHitsRayResult::get_num_hits(void) const
 */
static PyObject *Dtool_BulletAllHitsRayResult_get_num_hits_23(PyObject *self, PyObject *) {
  BulletAllHitsRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletAllHitsRayResult::get_num_hits(void) const
  int return_value = (*(const BulletAllHitsRayResult*)local_this).get_num_hits();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_get_num_hits_23_comment =
  "C++ Interface:\n"
  "get_num_hits(BulletAllHitsRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_get_num_hits_23_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletRayHit const BulletAllHitsRayResult::get_hit(int idx) const
 */
static PyObject *Dtool_BulletAllHitsRayResult_get_hit_24(PyObject *self, PyObject *arg) {
  BulletAllHitsRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-BulletRayHit const BulletAllHitsRayResult::get_hit(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletRayHit const *return_value = new BulletRayHit const((*(const BulletAllHitsRayResult*)local_this).get_hit((int)arg_val));
    if (return_value == NULL) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletRayHit, true, true);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_hit(BulletAllHitsRayResult self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletAllHitsRayResult_get_hit_24_comment =
  "C++ Interface:\n"
  "get_hit(BulletAllHitsRayResult self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletAllHitsRayResult_get_hit_24_comment = NULL;
#endif

static int Dtool_Init_BulletAllHitsRayResult(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletAllHitsRayResult_get_hits(PyObject *self, PyObject *) {
  BulletAllHitsRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletAllHitsRayResult, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_hits();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletAllHitsRayResult_get_hit_24(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletAllHitsRayResult(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletAllHitsRayResult) {
    printf("BulletAllHitsRayResult ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletAllHitsRayResult *local_this = (BulletAllHitsRayResult *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletAllHitsRayResult) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletAllHitsRayResult(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletAllHitsRayResult) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletShape
 */
/**
 * Python function wrapper for:
 * inline bool BulletShape::is_polyhedral(void) const
 */
static PyObject *Dtool_BulletShape_is_polyhedral_29(PyObject *self, PyObject *) {
  BulletShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletShape::is_polyhedral(void) const
  bool return_value = (*(const BulletShape*)local_this).is_polyhedral();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_polyhedral_29_comment =
  "C++ Interface:\n"
  "is_polyhedral(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_polyhedral_29_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletShape::is_convex(void) const
 */
static PyObject *Dtool_BulletShape_is_convex_30(PyObject *self, PyObject *) {
  BulletShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletShape::is_convex(void) const
  bool return_value = (*(const BulletShape*)local_this).is_convex();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_convex_30_comment =
  "C++ Interface:\n"
  "is_convex(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_convex_30_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletShape::is_convex_2d(void) const
 */
static PyObject *Dtool_BulletShape_is_convex_2d_31(PyObject *self, PyObject *) {
  BulletShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletShape::is_convex_2d(void) const
  bool return_value = (*(const BulletShape*)local_this).is_convex_2d();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_convex_2d_31_comment =
  "C++ Interface:\n"
  "is_convex_2d(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_convex_2d_31_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletShape::is_concave(void) const
 */
static PyObject *Dtool_BulletShape_is_concave_32(PyObject *self, PyObject *) {
  BulletShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletShape::is_concave(void) const
  bool return_value = (*(const BulletShape*)local_this).is_concave();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_concave_32_comment =
  "C++ Interface:\n"
  "is_concave(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_concave_32_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletShape::is_infinite(void) const
 */
static PyObject *Dtool_BulletShape_is_infinite_33(PyObject *self, PyObject *) {
  BulletShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletShape::is_infinite(void) const
  bool return_value = (*(const BulletShape*)local_this).is_infinite();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_infinite_33_comment =
  "C++ Interface:\n"
  "is_infinite(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_infinite_33_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletShape::is_non_moving(void) const
 */
static PyObject *Dtool_BulletShape_is_non_moving_34(PyObject *self, PyObject *) {
  BulletShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletShape::is_non_moving(void) const
  bool return_value = (*(const BulletShape*)local_this).is_non_moving();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_non_moving_34_comment =
  "C++ Interface:\n"
  "is_non_moving(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_non_moving_34_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletShape::is_soft_body(void) const
 */
static PyObject *Dtool_BulletShape_is_soft_body_35(PyObject *self, PyObject *) {
  BulletShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletShape::is_soft_body(void) const
  bool return_value = (*(const BulletShape*)local_this).is_soft_body();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_is_soft_body_35_comment =
  "C++ Interface:\n"
  "is_soft_body(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_is_soft_body_35_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletShape::set_margin(PN_stdfloat margin)
 */
static PyObject *Dtool_BulletShape_set_margin_36(PyObject *self, PyObject *arg) {
  BulletShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletShape, (void **)&local_this, "BulletShape.set_margin")) {
    return NULL;
  }
  // 1-void BulletShape::set_margin(PN_stdfloat margin)
  if (PyNumber_Check(arg)) {
    (*local_this).set_margin((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_margin(const BulletShape self, float margin)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_set_margin_36_comment =
  "C++ Interface:\n"
  "set_margin(const BulletShape self, float margin)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_set_margin_36_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * char const *BulletShape::get_name(void) const
 */
static PyObject *Dtool_BulletShape_get_name_37(PyObject *self, PyObject *) {
  BulletShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-char const *BulletShape::get_name(void) const
  char const *return_value = (*(const BulletShape*)local_this).get_name();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_get_name_37_comment =
  "C++ Interface:\n"
  "get_name(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_get_name_37_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletShape::get_margin(void) const
 */
static PyObject *Dtool_BulletShape_get_margin_38(PyObject *self, PyObject *) {
  BulletShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletShape::get_margin(void) const
  PN_stdfloat return_value = (*(const BulletShape*)local_this).get_margin();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_get_margin_38_comment =
  "C++ Interface:\n"
  "get_margin(BulletShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletShape_get_margin_38_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BoundingSphere BulletShape::get_shape_bounds(void) const
 */
static PyObject *Dtool_BulletShape_get_shape_bounds_39(PyObject *self, PyObject *) {
  BulletShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-BoundingSphere BulletShape::get_shape_bounds(void) const
  BoundingSphere *return_value = new BoundingSphere((*(const BulletShape*)local_this).get_shape_bounds());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (return_value != (BoundingSphere *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BoundingSphere *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BoundingSphere, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_get_shape_bounds_39_comment =
  "C++ Interface:\n"
  "get_shape_bounds(BulletShape self)\n"
  "\n"
  "/**\n"
  " * Returns the current bounds of this collision shape.\n"
  " */";
#else
static const char *Dtool_BulletShape_get_shape_bounds_39_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletShape::get_class_type(void)
 */
static PyObject *Dtool_BulletShape_get_class_type_40(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletShape_get_class_type_40_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletShape_get_class_type_40_comment = NULL;
#endif

static int Dtool_Init_BulletShape(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletShape) {
    printf("BulletShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletShape *local_this = (BulletShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletBaseCharacterControllerNode
 */
/**
 * Python function wrapper for:
 * static TypeHandle BulletBaseCharacterControllerNode::get_class_type(void)
 */
static PyObject *Dtool_BulletBaseCharacterControllerNode_get_class_type_43(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletBaseCharacterControllerNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletBaseCharacterControllerNode::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletBaseCharacterControllerNode_get_class_type_43_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletBaseCharacterControllerNode_get_class_type_43_comment = NULL;
#endif

static int Dtool_Init_BulletBaseCharacterControllerNode(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

bool Dtool_ConstCoerce_BulletBaseCharacterControllerNode(PyObject *args, CPT(BulletBaseCharacterControllerNode) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletBaseCharacterControllerNode, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  return false;
}

bool Dtool_Coerce_BulletBaseCharacterControllerNode(PyObject *args, PT(BulletBaseCharacterControllerNode) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletBaseCharacterControllerNode, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletBaseCharacterControllerNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletBaseCharacterControllerNode) {
    printf("BulletBaseCharacterControllerNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletBaseCharacterControllerNode *local_this = (BulletBaseCharacterControllerNode *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletBaseCharacterControllerNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletBaseCharacterControllerNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletBaseCharacterControllerNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletBaseCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletBaseCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletBaseCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletBaseCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletBaseCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletBaseCharacterControllerNode*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletBodyNode
 */
/**
 * Python function wrapper for:
 * void BulletBodyNode::add_shape(BulletShape *shape, TransformState const *xform = TransformState::make_identity())
 */
static PyObject *Dtool_BulletBodyNode_add_shape_46(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.add_shape")) {
    return NULL;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "shape");
      }
      if (arg == (PyObject *)NULL) {
        return Dtool_Raise_TypeError("Required argument 'shape' (pos 1) not found");
      }
      // 1-void BulletBodyNode::add_shape(BulletShape *shape, TransformState const *xform)
      BulletShape *arg_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletShape, 1, "BulletBodyNode.add_shape", false, true);
      if (arg_this != NULL) {
        (*local_this).add_shape(arg_this);
        return Dtool_Return_None();
      }
    }
    break;
  case 2:
    {
      // 1-void BulletBodyNode::add_shape(BulletShape *shape, TransformState const *xform)
      PyObject *param1;
      PyObject *param2;
      static const char *keyword_list[] = {"shape", "xform", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:add_shape", (char **)keyword_list, &param1, &param2)) {
        BulletShape *param1_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletShape, 1, "BulletBodyNode.add_shape", false, true);
        TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletBodyNode.add_shape", true, true);
        if (param1_this != NULL && param2_this != NULL) {
          (*local_this).add_shape(param1_this, param2_this);
          return Dtool_Return_None();
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "add_shape() takes 2 or 3 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_shape(const BulletBodyNode self, BulletShape shape)\n"
      "add_shape(const BulletBodyNode self, BulletShape shape, const TransformState xform)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_add_shape_46_comment =
  "C++ Interface:\n"
  "add_shape(const BulletBodyNode self, BulletShape shape)\n"
  "add_shape(const BulletBodyNode self, BulletShape shape, const TransformState xform)\n"
  "\n"
  "// Shapes\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_add_shape_46_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::remove_shape(BulletShape *shape)
 */
static PyObject *Dtool_BulletBodyNode_remove_shape_47(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.remove_shape")) {
    return NULL;
  }
  // 1-void BulletBodyNode::remove_shape(BulletShape *shape)
  BulletShape *arg_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletShape, 1, "BulletBodyNode.remove_shape", false, true);
  if (arg_this != NULL) {
    (*local_this).remove_shape(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_shape(const BulletBodyNode self, BulletShape shape)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_remove_shape_47_comment =
  "C++ Interface:\n"
  "remove_shape(const BulletBodyNode self, BulletShape shape)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_remove_shape_47_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletBodyNode::get_num_shapes(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_num_shapes_48(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletBodyNode::get_num_shapes(void) const
  int return_value = (*(const BulletBodyNode*)local_this).get_num_shapes();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_num_shapes_48_comment =
  "C++ Interface:\n"
  "get_num_shapes(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_num_shapes_48_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletShape *BulletBodyNode::get_shape(int idx) const
 */
static PyObject *Dtool_BulletBodyNode_get_shape_49(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline BulletShape *BulletBodyNode::get_shape(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletShape *return_value = (*(const BulletBodyNode*)local_this).get_shape((int)arg_val);
    if (return_value != (BulletShape *)NULL) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != (BulletShape *)NULL) {
        unref_delete(return_value);
      }
      return NULL;
    }
    if (return_value == NULL) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletShape, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_shape(BulletBodyNode self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_shape_49_comment =
  "C++ Interface:\n"
  "get_shape(BulletBodyNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_shape_49_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletBodyNode::get_shape_pos(int idx) const
 */
static PyObject *Dtool_BulletBodyNode_get_shape_pos_51(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletBodyNode::get_shape_pos(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    LPoint3 *return_value = new LPoint3((*(const BulletBodyNode*)local_this).get_shape_pos((int)arg_val));
    if (return_value == NULL) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_shape_pos(BulletBodyNode self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_shape_pos_51_comment =
  "C++ Interface:\n"
  "get_shape_pos(BulletBodyNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_shape_pos_51_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LMatrix4 BulletBodyNode::get_shape_mat(int idx) const
 */
static PyObject *Dtool_BulletBodyNode_get_shape_mat_52(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LMatrix4 BulletBodyNode::get_shape_mat(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    LMatrix4 *return_value = new LMatrix4((*(const BulletBodyNode*)local_this).get_shape_mat((int)arg_val));
    if (return_value == NULL) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LMatrix4f, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_shape_mat(BulletBodyNode self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_shape_mat_52_comment =
  "C++ Interface:\n"
  "get_shape_mat(BulletBodyNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_shape_mat_52_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * ConstPointerTo< TransformState > BulletBodyNode::get_shape_transform(int idx) const
 */
static PyObject *Dtool_BulletBodyNode_get_shape_transform_53(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-ConstPointerTo< TransformState > BulletBodyNode::get_shape_transform(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    ConstPointerTo< TransformState > return_value = (*(const BulletBodyNode*)local_this).get_shape_transform((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    // Transfer ownership of return_value.
    TransformState const *return_ptr = return_value.p();
    return_value.cheat() = NULL;
    if (return_ptr == NULL) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_TransformState, true, true, return_ptr->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_shape_transform(BulletBodyNode self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_shape_transform_53_comment =
  "C++ Interface:\n"
  "get_shape_transform(BulletBodyNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_shape_transform_53_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BoundingSphere BulletBodyNode::get_shape_bounds(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_shape_bounds_54(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-BoundingSphere BulletBodyNode::get_shape_bounds(void) const
  BoundingSphere *return_value = new BoundingSphere((*(const BulletBodyNode*)local_this).get_shape_bounds());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (return_value != (BoundingSphere *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BoundingSphere *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BoundingSphere, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_shape_bounds_54_comment =
  "C++ Interface:\n"
  "get_shape_bounds(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " * Returns the current bounds of all collision shapes owned by this body.\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_shape_bounds_54_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::add_shapes_from_collision_solids(CollisionNode *cnode)
 */
static PyObject *Dtool_BulletBodyNode_add_shapes_from_collision_solids_55(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.add_shapes_from_collision_solids")) {
    return NULL;
  }
  // 1-void BulletBodyNode::add_shapes_from_collision_solids(CollisionNode *cnode)
  PT(CollisionNode) arg_this;
  if (!Dtool_Coerce_CollisionNode(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletBodyNode.add_shapes_from_collision_solids", "CollisionNode");
  }
  (*local_this).add_shapes_from_collision_solids(MOVE(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_shapes_from_collision_solids(const BulletBodyNode self, CollisionNode cnode)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_add_shapes_from_collision_solids_55_comment =
  "C++ Interface:\n"
  "add_shapes_from_collision_solids(const BulletBodyNode self, CollisionNode cnode)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_add_shapes_from_collision_solids_55_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletBodyNode::is_static(void) const
 */
static PyObject *Dtool_BulletBodyNode_is_static_56(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletBodyNode::is_static(void) const
  bool return_value = (*(const BulletBodyNode*)local_this).is_static();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_is_static_56_comment =
  "C++ Interface:\n"
  "is_static(BulletBodyNode self)\n"
  "\n"
  "// Static and kinematic\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_is_static_56_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletBodyNode::is_kinematic(void) const
 */
static PyObject *Dtool_BulletBodyNode_is_kinematic_57(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletBodyNode::is_kinematic(void) const
  bool return_value = (*(const BulletBodyNode*)local_this).is_kinematic();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_is_kinematic_57_comment =
  "C++ Interface:\n"
  "is_kinematic(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_is_kinematic_57_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::set_static(bool value)
 */
static PyObject *Dtool_BulletBodyNode_set_static_58(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_static")) {
    return NULL;
  }
  // 1-inline void BulletBodyNode::set_static(bool value)
  (*local_this).set_static((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_static(const BulletBodyNode self, bool value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_static_58_comment =
  "C++ Interface:\n"
  "set_static(const BulletBodyNode self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_static_58_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::set_kinematic(bool value)
 */
static PyObject *Dtool_BulletBodyNode_set_kinematic_59(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_kinematic")) {
    return NULL;
  }
  // 1-inline void BulletBodyNode::set_kinematic(bool value)
  (*local_this).set_kinematic((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_kinematic(const BulletBodyNode self, bool value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_kinematic_59_comment =
  "C++ Interface:\n"
  "set_kinematic(const BulletBodyNode self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_kinematic_59_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::set_into_collide_mask(CollideMask mask)
 */
static PyObject *Dtool_BulletBodyNode_set_into_collide_mask_60(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_into_collide_mask")) {
    return NULL;
  }
  // 1-inline void BulletBodyNode::set_into_collide_mask(CollideMask mask)
  BitMask< uint32_t, 32 > arg_local;
  CollideMask *arg_this = Dtool_Coerce_BitMask_uint32_t_32(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletBodyNode.set_into_collide_mask", "BitMask");
  }
  (*local_this).set_into_collide_mask(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_into_collide_mask(const BulletBodyNode self, BitMask mask)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_into_collide_mask_60_comment =
  "C++ Interface:\n"
  "set_into_collide_mask(const BulletBodyNode self, BitMask mask)\n"
  "\n"
  "// Contacts\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_into_collide_mask_60_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::notify_collisions(bool value)
 */
static PyObject *Dtool_BulletBodyNode_notify_collisions_61(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.notify_collisions")) {
    return NULL;
  }
  // 1-inline void BulletBodyNode::notify_collisions(bool value)
  (*local_this).notify_collisions((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "notify_collisions(const BulletBodyNode self, bool value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_notify_collisions_61_comment =
  "C++ Interface:\n"
  "notify_collisions(const BulletBodyNode self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_notify_collisions_61_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletBodyNode::notifies_collisions(void) const
 */
static PyObject *Dtool_BulletBodyNode_notifies_collisions_62(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletBodyNode::notifies_collisions(void) const
  bool return_value = (*(const BulletBodyNode*)local_this).notifies_collisions();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_notifies_collisions_62_comment =
  "C++ Interface:\n"
  "notifies_collisions(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_notifies_collisions_62_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::set_collision_response(bool value)
 */
static PyObject *Dtool_BulletBodyNode_set_collision_response_63(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_collision_response")) {
    return NULL;
  }
  // 1-inline void BulletBodyNode::set_collision_response(bool value)
  (*local_this).set_collision_response((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_collision_response(const BulletBodyNode self, bool value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_collision_response_63_comment =
  "C++ Interface:\n"
  "set_collision_response(const BulletBodyNode self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_collision_response_63_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletBodyNode::get_collision_response(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_collision_response_64(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletBodyNode::get_collision_response(void) const
  bool return_value = (*(const BulletBodyNode*)local_this).get_collision_response();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_collision_response_64_comment =
  "C++ Interface:\n"
  "get_collision_response(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_collision_response_64_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletBodyNode::check_collision_with(PandaNode *node)
 */
static PyObject *Dtool_BulletBodyNode_check_collision_with_65(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.check_collision_with")) {
    return NULL;
  }
  // 1-bool BulletBodyNode::check_collision_with(PandaNode *node)
  PandaNode *arg_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_PandaNode, 1, "BulletBodyNode.check_collision_with", false, true);
  if (arg_this != NULL) {
    bool return_value = (*local_this).check_collision_with(arg_this);
    return Dtool_Return_Bool(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "check_collision_with(const BulletBodyNode self, PandaNode node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_check_collision_with_65_comment =
  "C++ Interface:\n"
  "check_collision_with(const BulletBodyNode self, PandaNode node)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_check_collision_with_65_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletBodyNode::has_contact_response(void) const
 */
static PyObject *Dtool_BulletBodyNode_has_contact_response_66(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletBodyNode::has_contact_response(void) const
  bool return_value = (*(const BulletBodyNode*)local_this).has_contact_response();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_has_contact_response_66_comment =
  "C++ Interface:\n"
  "has_contact_response(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_has_contact_response_66_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletBodyNode::get_contact_processing_threshold(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_contact_processing_threshold_67(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletBodyNode::get_contact_processing_threshold(void) const
  PN_stdfloat return_value = (*(const BulletBodyNode*)local_this).get_contact_processing_threshold();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_contact_processing_threshold_67_comment =
  "C++ Interface:\n"
  "get_contact_processing_threshold(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_contact_processing_threshold_67_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_contact_processing_threshold(PN_stdfloat threshold)
 */
static PyObject *Dtool_BulletBodyNode_set_contact_processing_threshold_68(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_contact_processing_threshold")) {
    return NULL;
  }
  // 1-void BulletBodyNode::set_contact_processing_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    (*local_this).set_contact_processing_threshold((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_contact_processing_threshold(const BulletBodyNode self, float threshold)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_contact_processing_threshold_68_comment =
  "C++ Interface:\n"
  "set_contact_processing_threshold(const BulletBodyNode self, float threshold)\n"
  "\n"
  "/**\n"
  " * The constraint solver can discard solving contacts, if the distance is\n"
  " * above this threshold.\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_contact_processing_threshold_68_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletBodyNode::is_active(void) const
 */
static PyObject *Dtool_BulletBodyNode_is_active_69(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletBodyNode::is_active(void) const
  bool return_value = (*(const BulletBodyNode*)local_this).is_active();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_is_active_69_comment =
  "C++ Interface:\n"
  "is_active(BulletBodyNode self)\n"
  "\n"
  "// Deactivation\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_is_active_69_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_active(bool active, bool force = false)
 */
static PyObject *Dtool_BulletBodyNode_set_active_70(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_active")) {
    return NULL;
  }
  // 1-void BulletBodyNode::set_active(bool active, bool force = false)
  PyObject *param1;
  PyObject *param2 = Py_False;
  static const char *keyword_list[] = {"active", "force", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:set_active", (char **)keyword_list, &param1, &param2)) {
    (*local_this).set_active((PyObject_IsTrue(param1) != 0), (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_active(const BulletBodyNode self, bool active, bool force)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_active_70_comment =
  "C++ Interface:\n"
  "set_active(const BulletBodyNode self, bool active, bool force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_active_70_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_deactivation_time(PN_stdfloat dt)
 */
static PyObject *Dtool_BulletBodyNode_set_deactivation_time_71(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_deactivation_time")) {
    return NULL;
  }
  // 1-void BulletBodyNode::set_deactivation_time(PN_stdfloat dt)
  if (PyNumber_Check(arg)) {
    (*local_this).set_deactivation_time((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_deactivation_time(const BulletBodyNode self, float dt)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_deactivation_time_71_comment =
  "C++ Interface:\n"
  "set_deactivation_time(const BulletBodyNode self, float dt)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_deactivation_time_71_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletBodyNode::get_deactivation_time(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_deactivation_time_72(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletBodyNode::get_deactivation_time(void) const
  PN_stdfloat return_value = (*(const BulletBodyNode*)local_this).get_deactivation_time();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_deactivation_time_72_comment =
  "C++ Interface:\n"
  "get_deactivation_time(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_deactivation_time_72_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_deactivation_enabled(bool enabled)
 */
static PyObject *Dtool_BulletBodyNode_set_deactivation_enabled_73(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_deactivation_enabled")) {
    return NULL;
  }
  // 1-void BulletBodyNode::set_deactivation_enabled(bool enabled)
  (*local_this).set_deactivation_enabled((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_deactivation_enabled(const BulletBodyNode self, bool enabled)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_deactivation_enabled_73_comment =
  "C++ Interface:\n"
  "set_deactivation_enabled(const BulletBodyNode self, bool enabled)\n"
  "\n"
  "/**\n"
  " * If true, this object will be deactivated after a certain amount of time has\n"
  " * passed without movement.  If false, the object will always remain active.\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_deactivation_enabled_73_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletBodyNode::is_deactivation_enabled(void) const
 */
static PyObject *Dtool_BulletBodyNode_is_deactivation_enabled_74(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletBodyNode::is_deactivation_enabled(void) const
  bool return_value = (*(const BulletBodyNode*)local_this).is_deactivation_enabled();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_is_deactivation_enabled_74_comment =
  "C++ Interface:\n"
  "is_deactivation_enabled(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_is_deactivation_enabled_74_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::set_debug_enabled(bool const enabled)
 */
static PyObject *Dtool_BulletBodyNode_set_debug_enabled_75(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_debug_enabled")) {
    return NULL;
  }
  // 1-inline void BulletBodyNode::set_debug_enabled(bool const enabled)
  (*local_this).set_debug_enabled((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_debug_enabled(const BulletBodyNode self, bool enabled)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_debug_enabled_75_comment =
  "C++ Interface:\n"
  "set_debug_enabled(const BulletBodyNode self, bool enabled)\n"
  "\n"
  "// Debug Visualistion\n"
  "\n"
  "/**\n"
  " * Enables or disables the debug visualisation for this collision object.  By\n"
  " * default the debug visualisation is enabled.\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_debug_enabled_75_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletBodyNode::is_debug_enabled(void) const
 */
static PyObject *Dtool_BulletBodyNode_is_debug_enabled_76(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletBodyNode::is_debug_enabled(void) const
  bool return_value = (*(const BulletBodyNode*)local_this).is_debug_enabled();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_is_debug_enabled_76_comment =
  "C++ Interface:\n"
  "is_debug_enabled(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " * Returns TRUE if the debug visualisation is enabled for this collision\n"
  " * object, and FALSE if the debug visualisation is disabled.\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_is_debug_enabled_76_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletBodyNode::get_restitution(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_restitution_77(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletBodyNode::get_restitution(void) const
  PN_stdfloat return_value = (*(const BulletBodyNode*)local_this).get_restitution();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_restitution_77_comment =
  "C++ Interface:\n"
  "get_restitution(BulletBodyNode self)\n"
  "\n"
  "// Friction and Restitution\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_restitution_77_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::set_restitution(PN_stdfloat restitution)
 */
static PyObject *Dtool_BulletBodyNode_set_restitution_78(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_restitution")) {
    return NULL;
  }
  // 1-inline void BulletBodyNode::set_restitution(PN_stdfloat restitution)
  if (PyNumber_Check(arg)) {
    (*local_this).set_restitution((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_restitution(const BulletBodyNode self, float restitution)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_restitution_78_comment =
  "C++ Interface:\n"
  "set_restitution(const BulletBodyNode self, float restitution)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_restitution_78_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletBodyNode::get_friction(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_friction_79(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletBodyNode::get_friction(void) const
  PN_stdfloat return_value = (*(const BulletBodyNode*)local_this).get_friction();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_friction_79_comment =
  "C++ Interface:\n"
  "get_friction(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_friction_79_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletBodyNode::set_friction(PN_stdfloat friction)
 */
static PyObject *Dtool_BulletBodyNode_set_friction_80(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_friction")) {
    return NULL;
  }
  // 1-inline void BulletBodyNode::set_friction(PN_stdfloat friction)
  if (PyNumber_Check(arg)) {
    (*local_this).set_friction((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_friction(const BulletBodyNode self, float friction)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_friction_80_comment =
  "C++ Interface:\n"
  "set_friction(const BulletBodyNode self, float friction)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_friction_80_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletBodyNode::has_anisotropic_friction(void) const
 */
static PyObject *Dtool_BulletBodyNode_has_anisotropic_friction_81(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletBodyNode::has_anisotropic_friction(void) const
  bool return_value = (*(const BulletBodyNode*)local_this).has_anisotropic_friction();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_has_anisotropic_friction_81_comment =
  "C++ Interface:\n"
  "has_anisotropic_friction(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_has_anisotropic_friction_81_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_anisotropic_friction(LVecBase3 const &friction)
 */
static PyObject *Dtool_BulletBodyNode_set_anisotropic_friction_82(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_anisotropic_friction")) {
    return NULL;
  }
  // 1-void BulletBodyNode::set_anisotropic_friction(LVecBase3 const &friction)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletBodyNode.set_anisotropic_friction", "LVecBase3f");
  }
  (*local_this).set_anisotropic_friction(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_anisotropic_friction(const BulletBodyNode self, const LVecBase3f friction)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_anisotropic_friction_82_comment =
  "C++ Interface:\n"
  "set_anisotropic_friction(const BulletBodyNode self, const LVecBase3f friction)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_anisotropic_friction_82_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVecBase3 BulletBodyNode::get_anisotropic_friction(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_anisotropic_friction_83(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVecBase3 BulletBodyNode::get_anisotropic_friction(void) const
  LVecBase3 *return_value = new LVecBase3((*(const BulletBodyNode*)local_this).get_anisotropic_friction());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_anisotropic_friction_83_comment =
  "C++ Interface:\n"
  "get_anisotropic_friction(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_anisotropic_friction_83_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletBodyNode::get_ccd_swept_sphere_radius(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_84(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletBodyNode::get_ccd_swept_sphere_radius(void) const
  PN_stdfloat return_value = (*(const BulletBodyNode*)local_this).get_ccd_swept_sphere_radius();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_84_comment =
  "C++ Interface:\n"
  "get_ccd_swept_sphere_radius(BulletBodyNode self)\n"
  "\n"
  "// CCD\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_84_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletBodyNode::get_ccd_motion_threshold(void) const
 */
static PyObject *Dtool_BulletBodyNode_get_ccd_motion_threshold_85(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletBodyNode::get_ccd_motion_threshold(void) const
  PN_stdfloat return_value = (*(const BulletBodyNode*)local_this).get_ccd_motion_threshold();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_ccd_motion_threshold_85_comment =
  "C++ Interface:\n"
  "get_ccd_motion_threshold(BulletBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_get_ccd_motion_threshold_85_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_ccd_swept_sphere_radius(PN_stdfloat radius)
 */
static PyObject *Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_86(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_ccd_swept_sphere_radius")) {
    return NULL;
  }
  // 1-void BulletBodyNode::set_ccd_swept_sphere_radius(PN_stdfloat radius)
  if (PyNumber_Check(arg)) {
    (*local_this).set_ccd_swept_sphere_radius((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_ccd_swept_sphere_radius(const BulletBodyNode self, float radius)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_86_comment =
  "C++ Interface:\n"
  "set_ccd_swept_sphere_radius(const BulletBodyNode self, float radius)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_86_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_ccd_motion_threshold(PN_stdfloat threshold)
 */
static PyObject *Dtool_BulletBodyNode_set_ccd_motion_threshold_87(PyObject *self, PyObject *arg) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_ccd_motion_threshold")) {
    return NULL;
  }
  // 1-void BulletBodyNode::set_ccd_motion_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    (*local_this).set_ccd_motion_threshold((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_ccd_motion_threshold(const BulletBodyNode self, float threshold)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_ccd_motion_threshold_87_comment =
  "C++ Interface:\n"
  "set_ccd_motion_threshold(const BulletBodyNode self, float threshold)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_ccd_motion_threshold_87_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletBodyNode::set_transform_dirty(void)
 */
static PyObject *Dtool_BulletBodyNode_set_transform_dirty_88(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBodyNode, (void **)&local_this, "BulletBodyNode.set_transform_dirty")) {
    return NULL;
  }
  // 1-void BulletBodyNode::set_transform_dirty(void)
  (*local_this).set_transform_dirty();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_set_transform_dirty_88_comment =
  "C++ Interface:\n"
  "set_transform_dirty(const BulletBodyNode self)\n"
  "\n"
  "// Special\n"
  "\n"
  "/**\n"
  " * This method enforces an update of the Bullet transform, that is copies the\n"
  " * scene graph transform to the Bullet transform.  This is achieved by alling\n"
  " * the protected PandaNode hook 'transform_changed'.\n"
  " */";
#else
static const char *Dtool_BulletBodyNode_set_transform_dirty_88_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletBodyNode::get_class_type(void)
 */
static PyObject *Dtool_BulletBodyNode_get_class_type_89(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletBodyNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletBodyNode::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletBodyNode_get_class_type_89_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletBodyNode_get_class_type_89_comment = NULL;
#endif

static int Dtool_Init_BulletBodyNode(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletBodyNode_get_shapes(PyObject *self, PyObject *) {
  BulletBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBodyNode, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_shapes();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletBodyNode_get_shape_49(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletBodyNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletBodyNode) {
    printf("BulletBodyNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletBodyNode *local_this = (BulletBodyNode *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletBodyNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletBodyNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletBodyNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletBodyNode*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletBoxShape
 */
/**
 * Python function wrapper for:
 * inline void BulletBoxShape::operator =(BulletBoxShape const &copy)
 */
static PyObject *Dtool_BulletBoxShape_operator_92(PyObject *self, PyObject *arg) {
  BulletBoxShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletBoxShape, (void **)&local_this, "BulletBoxShape.assign")) {
    return NULL;
  }
  // 1-inline void BulletBoxShape::operator =(BulletBoxShape const &copy)
  CPT(BulletBoxShape) arg_this;
  if (!Dtool_ConstCoerce_BulletBoxShape(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletBoxShape.assign", "BulletBoxShape");
  }
  (*local_this).operator =(*MOVE(arg_this));
  BulletBoxShape *return_value = local_this;
  if (return_value != (BulletBoxShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletBoxShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletBoxShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletBoxShape self, const BulletBoxShape copy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBoxShape_operator_92_comment =
  "C++ Interface:\n"
  "assign(const BulletBoxShape self, const BulletBoxShape copy)\n";
#else
static const char *Dtool_BulletBoxShape_operator_92_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVecBase3 BulletBoxShape::get_half_extents_without_margin(void) const
 */
static PyObject *Dtool_BulletBoxShape_get_half_extents_without_margin_93(PyObject *self, PyObject *) {
  BulletBoxShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBoxShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVecBase3 BulletBoxShape::get_half_extents_without_margin(void) const
  LVecBase3 *return_value = new LVecBase3((*(const BulletBoxShape*)local_this).get_half_extents_without_margin());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletBoxShape_get_half_extents_without_margin_93_comment =
  "C++ Interface:\n"
  "get_half_extents_without_margin(BulletBoxShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBoxShape_get_half_extents_without_margin_93_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVecBase3 BulletBoxShape::get_half_extents_with_margin(void) const
 */
static PyObject *Dtool_BulletBoxShape_get_half_extents_with_margin_94(PyObject *self, PyObject *) {
  BulletBoxShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletBoxShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVecBase3 BulletBoxShape::get_half_extents_with_margin(void) const
  LVecBase3 *return_value = new LVecBase3((*(const BulletBoxShape*)local_this).get_half_extents_with_margin());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletBoxShape_get_half_extents_with_margin_94_comment =
  "C++ Interface:\n"
  "get_half_extents_with_margin(BulletBoxShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBoxShape_get_half_extents_with_margin_94_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static BulletBoxShape *BulletBoxShape::make_from_solid(CollisionBox const *solid)
 */
static PyObject *Dtool_BulletBoxShape_make_from_solid_95(PyObject *, PyObject *arg) {
  // 1-static BulletBoxShape *BulletBoxShape::make_from_solid(CollisionBox const *solid)
  CPT(CollisionBox) arg_this;
  if (!Dtool_ConstCoerce_CollisionBox(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 0, "BulletBoxShape.make_from_solid", "CollisionBox");
  }
  BulletBoxShape *return_value = BulletBoxShape::make_from_solid(MOVE(arg_this));
  if (return_value != (BulletBoxShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletBoxShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletBoxShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_from_solid(const CollisionBox solid)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletBoxShape_make_from_solid_95_comment =
  "C++ Interface:\n"
  "make_from_solid(const CollisionBox solid)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletBoxShape_make_from_solid_95_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletBoxShape::get_class_type(void)
 */
static PyObject *Dtool_BulletBoxShape_get_class_type_96(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletBoxShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletBoxShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletBoxShape_get_class_type_96_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletBoxShape_get_class_type_96_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletBoxShape::BulletBoxShape(BulletBoxShape const &copy)
 * BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents)
 */
static int Dtool_Init_BulletBoxShape(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletBoxShape() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  {
    // -2 inline BulletBoxShape::BulletBoxShape(BulletBoxShape const &copy)
    PyObject *param0;
    static const char *keyword_list[] = {"copy", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletBoxShape", (char **)keyword_list, &param0)) {
      BulletBoxShape const *param0_this;
      DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletBoxShape, (void **)&param0_this);
      if (param0_this != NULL) {
        BulletBoxShape *return_value = new BulletBoxShape(*param0_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletBoxShape, true, false);
      }
    }
    PyErr_Clear();
  }

  {
    // -2 BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents)
    PyObject *param0;
    static const char *keyword_list[] = {"halfExtents", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletBoxShape", (char **)keyword_list, &param0)) {
      LVecBase3 const *param0_this;
      DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_LVecBase3f, (void **)&param0_this);
      if (param0_this != NULL) {
        BulletBoxShape *return_value = new BulletBoxShape(*param0_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletBoxShape, true, false);
      }
    }
    PyErr_Clear();
  }

  {
    // -2 inline BulletBoxShape::BulletBoxShape(BulletBoxShape const &copy)
    PyObject *param0;
    static const char *keyword_list[] = {"copy", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletBoxShape", (char **)keyword_list, &param0)) {
      CPT(BulletBoxShape) param0_this;
      if (Dtool_ConstCoerce_BulletBoxShape(param0, param0_this)) {
        BulletBoxShape *return_value = new BulletBoxShape(*MOVE(param0_this));
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletBoxShape, true, false);
      }
    }
    PyErr_Clear();
  }

  {
    // -2 BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents)
    PyObject *param0;
    static const char *keyword_list[] = {"halfExtents", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletBoxShape", (char **)keyword_list, &param0)) {
      LVecBase3f param0_local;
      LVecBase3 const *param0_this = Dtool_Coerce_LVecBase3f(param0, param0_local);
      if ((param0_this != NULL)) {
        BulletBoxShape *return_value = new BulletBoxShape(*param0_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletBoxShape, true, false);
      }
    }
    PyErr_Clear();
  }

  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletBoxShape(const BulletBoxShape copy)\n"
      "BulletBoxShape(const LVecBase3f halfExtents)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletBoxShape(PyObject *args, CPT(BulletBoxShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletBoxShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents)
    LVecBase3 const *arg_this;
    DTOOL_Call_ExtractThisPointerForType(arg, Dtool_Ptr_LVecBase3f, (void **)&arg_this);
    if (arg_this != NULL) {
      BulletBoxShape *return_value = new BulletBoxShape(*arg_this);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      return_value->ref();
      if (_PyErr_OCCURRED()) {
        unref_delete(return_value);
        return false;
      } else {
        coerced = MOVE(return_value);
        return true;
      }
    }
  }
  return false;
}

bool Dtool_Coerce_BulletBoxShape(PyObject *args, PT(BulletBoxShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletBoxShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents)
    LVecBase3 const *arg_this;
    DTOOL_Call_ExtractThisPointerForType(arg, Dtool_Ptr_LVecBase3f, (void **)&arg_this);
    if (arg_this != NULL) {
      BulletBoxShape *return_value = new BulletBoxShape(*arg_this);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      return_value->ref();
      if (_PyErr_OCCURRED()) {
        unref_delete(return_value);
        return false;
      } else {
        coerced = MOVE(return_value);
        return true;
      }
    }
  }
  return false;
}

static void *Dtool_UpcastInterface_BulletBoxShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletBoxShape) {
    printf("BulletBoxShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletBoxShape *local_this = (BulletBoxShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletBoxShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletBoxShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletBoxShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletBoxShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletBoxShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletBoxShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletBoxShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletBoxShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletCapsuleShape
 */
/**
 * Python function wrapper for:
 * inline void BulletCapsuleShape::operator =(BulletCapsuleShape const &copy)
 */
static PyObject *Dtool_BulletCapsuleShape_operator_99(PyObject *self, PyObject *arg) {
  BulletCapsuleShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCapsuleShape, (void **)&local_this, "BulletCapsuleShape.assign")) {
    return NULL;
  }
  // 1-inline void BulletCapsuleShape::operator =(BulletCapsuleShape const &copy)
  CPT(BulletCapsuleShape) arg_this;
  if (!Dtool_ConstCoerce_BulletCapsuleShape(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletCapsuleShape.assign", "BulletCapsuleShape");
  }
  (*local_this).operator =(*MOVE(arg_this));
  BulletCapsuleShape *return_value = local_this;
  if (return_value != (BulletCapsuleShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletCapsuleShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletCapsuleShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletCapsuleShape self, const BulletCapsuleShape copy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletCapsuleShape_operator_99_comment =
  "C++ Interface:\n"
  "assign(const BulletCapsuleShape self, const BulletCapsuleShape copy)\n";
#else
static const char *Dtool_BulletCapsuleShape_operator_99_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletCapsuleShape::get_radius(void) const
 */
static PyObject *Dtool_BulletCapsuleShape_get_radius_100(PyObject *self, PyObject *) {
  BulletCapsuleShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCapsuleShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletCapsuleShape::get_radius(void) const
  PN_stdfloat return_value = (*(const BulletCapsuleShape*)local_this).get_radius();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCapsuleShape_get_radius_100_comment =
  "C++ Interface:\n"
  "get_radius(BulletCapsuleShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCapsuleShape_get_radius_100_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletCapsuleShape::get_half_height(void) const
 */
static PyObject *Dtool_BulletCapsuleShape_get_half_height_101(PyObject *self, PyObject *) {
  BulletCapsuleShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCapsuleShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletCapsuleShape::get_half_height(void) const
  PN_stdfloat return_value = (*(const BulletCapsuleShape*)local_this).get_half_height();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCapsuleShape_get_half_height_101_comment =
  "C++ Interface:\n"
  "get_half_height(BulletCapsuleShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCapsuleShape_get_half_height_101_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletCapsuleShape::get_class_type(void)
 */
static PyObject *Dtool_BulletCapsuleShape_get_class_type_102(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletCapsuleShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletCapsuleShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletCapsuleShape_get_class_type_102_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletCapsuleShape_get_class_type_102_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletCapsuleShape::BulletCapsuleShape(BulletCapsuleShape const &copy)
 * BulletCapsuleShape::BulletCapsuleShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
 */
static int Dtool_Init_BulletCapsuleShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "copy");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'copy' (pos 1) not found");
        return -1;
      }
      // 1-inline BulletCapsuleShape::BulletCapsuleShape(BulletCapsuleShape const &copy)
      CPT(BulletCapsuleShape) arg_this;
      if (!Dtool_ConstCoerce_BulletCapsuleShape(arg, arg_this)) {
        Dtool_Raise_ArgTypeError(arg, 0, "BulletCapsuleShape.BulletCapsuleShape", "BulletCapsuleShape");
        return -1;
      }
      BulletCapsuleShape *return_value = new BulletCapsuleShape(*MOVE(arg_this));
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCapsuleShape, true, false);
    }
    break;
  case 2:
  case 3:
    {
      // 1-BulletCapsuleShape::BulletCapsuleShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
      float param0;
      float param1;
      int param2 = ::Z_up;
      static const char *keyword_list[] = {"radius", "height", "up", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "ff|i:BulletCapsuleShape", (char **)keyword_list, &param0, &param1, &param2)) {
        BulletCapsuleShape *return_value = new BulletCapsuleShape((PN_stdfloat)param0, (PN_stdfloat)param1, (BulletUpAxis)param2);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCapsuleShape, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletCapsuleShape() takes 1, 2 or 3 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletCapsuleShape(const BulletCapsuleShape copy)\n"
      "BulletCapsuleShape(float radius, float height, int up)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletCapsuleShape(PyObject *args, CPT(BulletCapsuleShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletCapsuleShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    Py_ssize_t size = PyTuple_GET_SIZE(args);
    if (size >= 2 && size <= 3) {
      // 1-BulletCapsuleShape::BulletCapsuleShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
      float param0;
      float param1;
      int param2 = ::Z_up;
      if (PyArg_ParseTuple(args, "ff|i:BulletCapsuleShape", &param0, &param1, &param2)) {
        BulletCapsuleShape *return_value = new BulletCapsuleShape((PN_stdfloat)param0, (PN_stdfloat)param1, (BulletUpAxis)param2);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return false;
        }
        return_value->ref();
        if (_PyErr_OCCURRED()) {
          unref_delete(return_value);
          return false;
        } else {
          coerced = MOVE(return_value);
          return true;
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

bool Dtool_Coerce_BulletCapsuleShape(PyObject *args, PT(BulletCapsuleShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletCapsuleShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    Py_ssize_t size = PyTuple_GET_SIZE(args);
    if (size >= 2 && size <= 3) {
      // 1-BulletCapsuleShape::BulletCapsuleShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
      float param0;
      float param1;
      int param2 = ::Z_up;
      if (PyArg_ParseTuple(args, "ff|i:BulletCapsuleShape", &param0, &param1, &param2)) {
        BulletCapsuleShape *return_value = new BulletCapsuleShape((PN_stdfloat)param0, (PN_stdfloat)param1, (BulletUpAxis)param2);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return false;
        }
        return_value->ref();
        if (_PyErr_OCCURRED()) {
          unref_delete(return_value);
          return false;
        } else {
          coerced = MOVE(return_value);
          return true;
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletCapsuleShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletCapsuleShape) {
    printf("BulletCapsuleShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletCapsuleShape *local_this = (BulletCapsuleShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletCapsuleShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletCapsuleShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletCapsuleShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletCapsuleShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletCapsuleShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletCapsuleShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletCapsuleShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletCapsuleShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletCharacterControllerNode
 */
/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_linear_movement(LVector3 const &velocity, bool is_local)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_linear_movement_105(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_linear_movement")) {
    return NULL;
  }
  // 1-void BulletCharacterControllerNode::set_linear_movement(LVector3 const &velocity, bool is_local)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"velocity", "is_local", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:set_linear_movement", (char **)keyword_list, &param1, &param2)) {
    LVector3f param1_local;
    LVector3 const *param1_this = Dtool_Coerce_LVector3f(param1, param1_local);
    if (!(param1_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletCharacterControllerNode.set_linear_movement", "LVector3f");
    }
    (*local_this).set_linear_movement(*param1_this, (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_movement(const BulletCharacterControllerNode self, const LVector3f velocity, bool is_local)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_linear_movement_105_comment =
  "C++ Interface:\n"
  "set_linear_movement(const BulletCharacterControllerNode self, const LVector3f velocity, bool is_local)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_linear_movement_105_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_angular_movement(PN_stdfloat omega)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_angular_movement_106(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_angular_movement")) {
    return NULL;
  }
  // 1-void BulletCharacterControllerNode::set_angular_movement(PN_stdfloat omega)
  if (PyNumber_Check(arg)) {
    (*local_this).set_angular_movement((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_movement(const BulletCharacterControllerNode self, float omega)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_angular_movement_106_comment =
  "C++ Interface:\n"
  "set_angular_movement(const BulletCharacterControllerNode self, float omega)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_angular_movement_106_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletShape *BulletCharacterControllerNode::get_shape(void) const
 */
static PyObject *Dtool_BulletCharacterControllerNode_get_shape_107(PyObject *self, PyObject *) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCharacterControllerNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-BulletShape *BulletCharacterControllerNode::get_shape(void) const
  BulletShape *return_value = (*(const BulletCharacterControllerNode*)local_this).get_shape();
  if (return_value != (BulletShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletShape, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_get_shape_107_comment =
  "C++ Interface:\n"
  "get_shape(BulletCharacterControllerNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_get_shape_107_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletCharacterControllerNode::get_gravity(void) const
 */
static PyObject *Dtool_BulletCharacterControllerNode_get_gravity_108(PyObject *self, PyObject *) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCharacterControllerNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletCharacterControllerNode::get_gravity(void) const
  PN_stdfloat return_value = (*(const BulletCharacterControllerNode*)local_this).get_gravity();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_get_gravity_108_comment =
  "C++ Interface:\n"
  "get_gravity(BulletCharacterControllerNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_get_gravity_108_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletCharacterControllerNode::get_max_slope(void) const
 */
static PyObject *Dtool_BulletCharacterControllerNode_get_max_slope_109(PyObject *self, PyObject *) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCharacterControllerNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletCharacterControllerNode::get_max_slope(void) const
  PN_stdfloat return_value = (*(const BulletCharacterControllerNode*)local_this).get_max_slope();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_get_max_slope_109_comment =
  "C++ Interface:\n"
  "get_max_slope(BulletCharacterControllerNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_get_max_slope_109_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_fall_speed(PN_stdfloat fall_speed)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_fall_speed_110(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_fall_speed")) {
    return NULL;
  }
  // 1-void BulletCharacterControllerNode::set_fall_speed(PN_stdfloat fall_speed)
  if (PyNumber_Check(arg)) {
    (*local_this).set_fall_speed((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_fall_speed(const BulletCharacterControllerNode self, float fall_speed)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_fall_speed_110_comment =
  "C++ Interface:\n"
  "set_fall_speed(const BulletCharacterControllerNode self, float fall_speed)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_fall_speed_110_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_jump_speed(PN_stdfloat jump_speed)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_jump_speed_111(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_jump_speed")) {
    return NULL;
  }
  // 1-void BulletCharacterControllerNode::set_jump_speed(PN_stdfloat jump_speed)
  if (PyNumber_Check(arg)) {
    (*local_this).set_jump_speed((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_jump_speed(const BulletCharacterControllerNode self, float jump_speed)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_jump_speed_111_comment =
  "C++ Interface:\n"
  "set_jump_speed(const BulletCharacterControllerNode self, float jump_speed)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_jump_speed_111_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_max_jump_height(PN_stdfloat max_jump_height)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_max_jump_height_112(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_max_jump_height")) {
    return NULL;
  }
  // 1-void BulletCharacterControllerNode::set_max_jump_height(PN_stdfloat max_jump_height)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_jump_height((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_jump_height(const BulletCharacterControllerNode self, float max_jump_height)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_max_jump_height_112_comment =
  "C++ Interface:\n"
  "set_max_jump_height(const BulletCharacterControllerNode self, float max_jump_height)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_max_jump_height_112_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_max_slope(PN_stdfloat max_slope)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_max_slope_113(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_max_slope")) {
    return NULL;
  }
  // 1-void BulletCharacterControllerNode::set_max_slope(PN_stdfloat max_slope)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_slope((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_slope(const BulletCharacterControllerNode self, float max_slope)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_max_slope_113_comment =
  "C++ Interface:\n"
  "set_max_slope(const BulletCharacterControllerNode self, float max_slope)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_max_slope_113_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_gravity(PN_stdfloat gravity)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_gravity_114(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_gravity")) {
    return NULL;
  }
  // 1-void BulletCharacterControllerNode::set_gravity(PN_stdfloat gravity)
  if (PyNumber_Check(arg)) {
    (*local_this).set_gravity((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_gravity(const BulletCharacterControllerNode self, float gravity)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_gravity_114_comment =
  "C++ Interface:\n"
  "set_gravity(const BulletCharacterControllerNode self, float gravity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_gravity_114_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::set_use_ghost_sweep_test(bool value)
 */
static PyObject *Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_115(PyObject *self, PyObject *arg) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.set_use_ghost_sweep_test")) {
    return NULL;
  }
  // 1-void BulletCharacterControllerNode::set_use_ghost_sweep_test(bool value)
  (*local_this).set_use_ghost_sweep_test((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_use_ghost_sweep_test(const BulletCharacterControllerNode self, bool value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_115_comment =
  "C++ Interface:\n"
  "set_use_ghost_sweep_test(const BulletCharacterControllerNode self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_115_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletCharacterControllerNode::is_on_ground(void) const
 */
static PyObject *Dtool_BulletCharacterControllerNode_is_on_ground_116(PyObject *self, PyObject *) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCharacterControllerNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletCharacterControllerNode::is_on_ground(void) const
  bool return_value = (*(const BulletCharacterControllerNode*)local_this).is_on_ground();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_is_on_ground_116_comment =
  "C++ Interface:\n"
  "is_on_ground(BulletCharacterControllerNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_is_on_ground_116_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletCharacterControllerNode::can_jump(void) const
 */
static PyObject *Dtool_BulletCharacterControllerNode_can_jump_117(PyObject *self, PyObject *) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCharacterControllerNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletCharacterControllerNode::can_jump(void) const
  bool return_value = (*(const BulletCharacterControllerNode*)local_this).can_jump();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_can_jump_117_comment =
  "C++ Interface:\n"
  "can_jump(BulletCharacterControllerNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_can_jump_117_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletCharacterControllerNode::do_jump(void)
 */
static PyObject *Dtool_BulletCharacterControllerNode_do_jump_118(PyObject *self, PyObject *) {
  BulletCharacterControllerNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCharacterControllerNode, (void **)&local_this, "BulletCharacterControllerNode.do_jump")) {
    return NULL;
  }
  // 1-void BulletCharacterControllerNode::do_jump(void)
  (*local_this).do_jump();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_do_jump_118_comment =
  "C++ Interface:\n"
  "do_jump(const BulletCharacterControllerNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCharacterControllerNode_do_jump_118_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletCharacterControllerNode::get_class_type(void)
 */
static PyObject *Dtool_BulletCharacterControllerNode_get_class_type_119(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletCharacterControllerNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletCharacterControllerNode::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletCharacterControllerNode_get_class_type_119_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletCharacterControllerNode_get_class_type_119_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletCharacterControllerNode::BulletCharacterControllerNode(BulletShape *shape, PN_stdfloat step_height, char const *name = "character")
 */
static int Dtool_Init_BulletCharacterControllerNode(PyObject *self, PyObject *args, PyObject *kwds) {
  // 1-BulletCharacterControllerNode::BulletCharacterControllerNode(BulletShape *shape, PN_stdfloat step_height, char const *name = "character")
  PyObject *param0;
  float param1;
  char const *param2 = "character";
  static const char *keyword_list[] = {"shape", "step_height", "name", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "Of|z:BulletCharacterControllerNode", (char **)keyword_list, &param0, &param1, &param2)) {
    BulletShape *param0_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletShape, 0, "BulletCharacterControllerNode.BulletCharacterControllerNode", false, true);
    if (param0_this != NULL) {
      BulletCharacterControllerNode *return_value = new BulletCharacterControllerNode(param0_this, (PN_stdfloat)param1, (char const *)param2);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCharacterControllerNode, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletCharacterControllerNode(BulletShape shape, float step_height, str name)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletCharacterControllerNode(PyObject *args, CPT(BulletCharacterControllerNode) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletCharacterControllerNode, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    Py_ssize_t size = PyTuple_GET_SIZE(args);
    if (size >= 2 && size <= 3) {
      // 1-BulletCharacterControllerNode::BulletCharacterControllerNode(BulletShape *shape, PN_stdfloat step_height, char const *name = "character")
      PyObject *param0;
      float param1;
      char const *param2 = "character";
      if (PyArg_ParseTuple(args, "Of|z:BulletCharacterControllerNode", &param0, &param1, &param2)) {
        BulletShape *param0_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletShape, 0, "BulletCharacterControllerNode.BulletCharacterControllerNode", false, false);
        if (param0_this != NULL) {
          BulletCharacterControllerNode *return_value = new BulletCharacterControllerNode(param0_this, (PN_stdfloat)param1, (char const *)param2);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

bool Dtool_Coerce_BulletCharacterControllerNode(PyObject *args, PT(BulletCharacterControllerNode) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletCharacterControllerNode, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    Py_ssize_t size = PyTuple_GET_SIZE(args);
    if (size >= 2 && size <= 3) {
      // 1-BulletCharacterControllerNode::BulletCharacterControllerNode(BulletShape *shape, PN_stdfloat step_height, char const *name = "character")
      PyObject *param0;
      float param1;
      char const *param2 = "character";
      if (PyArg_ParseTuple(args, "Of|z:BulletCharacterControllerNode", &param0, &param1, &param2)) {
        BulletShape *param0_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletShape, 0, "BulletCharacterControllerNode.BulletCharacterControllerNode", false, false);
        if (param0_this != NULL) {
          BulletCharacterControllerNode *return_value = new BulletCharacterControllerNode(param0_this, (PN_stdfloat)param1, (char const *)param2);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletCharacterControllerNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletCharacterControllerNode) {
    printf("BulletCharacterControllerNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletCharacterControllerNode *local_this = (BulletCharacterControllerNode *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletCharacterControllerNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletBaseCharacterControllerNode) {
    return (BulletBaseCharacterControllerNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *)(BulletBaseCharacterControllerNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *)(BulletBaseCharacterControllerNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBaseCharacterControllerNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBaseCharacterControllerNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBaseCharacterControllerNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *)(BulletBaseCharacterControllerNode *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletCharacterControllerNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletCharacterControllerNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletBaseCharacterControllerNode) {
    BulletBaseCharacterControllerNode* other_this = (BulletBaseCharacterControllerNode*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletCharacterControllerNode*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletClosestHitRayResult
 */
/**
 * Python function wrapper for:
 * static inline BulletClosestHitRayResult BulletClosestHitRayResult::empty(void)
 */
static PyObject *Dtool_BulletClosestHitRayResult_empty_124(PyObject *, PyObject *) {
  // 1-static inline BulletClosestHitRayResult BulletClosestHitRayResult::empty(void)
  BulletClosestHitRayResult *return_value = new BulletClosestHitRayResult(BulletClosestHitRayResult::empty());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletClosestHitRayResult, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_empty_124_comment =
  "C++ Interface:\n"
  "empty()\n"
  "\n"
  "/**\n"
  " * Named constructor intended to be used for asserts with have to return a\n"
  " * concrete value.\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_empty_124_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletClosestHitRayResult::get_from_pos(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_from_pos_125(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletClosestHitRayResult::get_from_pos(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletClosestHitRayResult*)local_this).get_from_pos());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_from_pos_125_comment =
  "C++ Interface:\n"
  "get_from_pos(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_from_pos_125_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletClosestHitRayResult::get_to_pos(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_to_pos_126(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletClosestHitRayResult::get_to_pos(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletClosestHitRayResult*)local_this).get_to_pos());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_to_pos_126_comment =
  "C++ Interface:\n"
  "get_to_pos(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_to_pos_126_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletClosestHitRayResult::has_hit(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_has_hit_127(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletClosestHitRayResult::has_hit(void) const
  bool return_value = (*(const BulletClosestHitRayResult*)local_this).has_hit();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_has_hit_127_comment =
  "C++ Interface:\n"
  "has_hit(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_has_hit_127_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PandaNode *BulletClosestHitRayResult::get_node(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_node_128(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-PandaNode *BulletClosestHitRayResult::get_node(void) const
  PandaNode *return_value = (*(const BulletClosestHitRayResult*)local_this).get_node();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_node_128_comment =
  "C++ Interface:\n"
  "get_node(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_node_128_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletClosestHitRayResult::get_hit_pos(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_hit_pos_129(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletClosestHitRayResult::get_hit_pos(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletClosestHitRayResult*)local_this).get_hit_pos());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_hit_pos_129_comment =
  "C++ Interface:\n"
  "get_hit_pos(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_hit_pos_129_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletClosestHitRayResult::get_hit_normal(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_hit_normal_130(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletClosestHitRayResult::get_hit_normal(void) const
  LVector3 *return_value = new LVector3((*(const BulletClosestHitRayResult*)local_this).get_hit_normal());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_hit_normal_130_comment =
  "C++ Interface:\n"
  "get_hit_normal(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_hit_normal_130_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletClosestHitRayResult::get_hit_fraction(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_hit_fraction_131(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletClosestHitRayResult::get_hit_fraction(void) const
  PN_stdfloat return_value = (*(const BulletClosestHitRayResult*)local_this).get_hit_fraction();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_hit_fraction_131_comment =
  "C++ Interface:\n"
  "get_hit_fraction(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_hit_fraction_131_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletClosestHitRayResult::get_shape_part(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_shape_part_132(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletClosestHitRayResult::get_shape_part(void) const
  int return_value = (*(const BulletClosestHitRayResult*)local_this).get_shape_part();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_shape_part_132_comment =
  "C++ Interface:\n"
  "get_shape_part(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_shape_part_132_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletClosestHitRayResult::get_triangle_index(void) const
 */
static PyObject *Dtool_BulletClosestHitRayResult_get_triangle_index_133(PyObject *self, PyObject *) {
  BulletClosestHitRayResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitRayResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletClosestHitRayResult::get_triangle_index(void) const
  int return_value = (*(const BulletClosestHitRayResult*)local_this).get_triangle_index();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitRayResult_get_triangle_index_133_comment =
  "C++ Interface:\n"
  "get_triangle_index(BulletClosestHitRayResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitRayResult_get_triangle_index_133_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletClosestHitRayResult::BulletClosestHitRayResult(BulletClosestHitRayResult const &) = default
 */
static int Dtool_Init_BulletClosestHitRayResult(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletClosestHitRayResult() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg = NULL;
  if (PyTuple_GET_SIZE(args) == 1) {
    arg = PyTuple_GET_ITEM(args, 0);
  } else if (kwds != NULL) {
    arg = PyDict_GetItemString(kwds, "param0");
  }
  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
    return -1;
  }
  // 1-inline BulletClosestHitRayResult::BulletClosestHitRayResult(BulletClosestHitRayResult const &) = default
  BulletClosestHitRayResult const *arg_this = (BulletClosestHitRayResult *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletClosestHitRayResult, 0, "BulletClosestHitRayResult.BulletClosestHitRayResult", true, true);
  if (arg_this != NULL) {
    BulletClosestHitRayResult *return_value = new BulletClosestHitRayResult(*arg_this);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletClosestHitRayResult, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletClosestHitRayResult(const BulletClosestHitRayResult param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletClosestHitRayResult(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletClosestHitRayResult) {
    printf("BulletClosestHitRayResult ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletClosestHitRayResult *local_this = (BulletClosestHitRayResult *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletClosestHitRayResult) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletClosestHitRayResult(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletClosestHitRayResult) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletClosestHitSweepResult
 */
/**
 * Python function wrapper for:
 * static inline BulletClosestHitSweepResult BulletClosestHitSweepResult::empty(void)
 */
static PyObject *Dtool_BulletClosestHitSweepResult_empty_140(PyObject *, PyObject *) {
  // 1-static inline BulletClosestHitSweepResult BulletClosestHitSweepResult::empty(void)
  BulletClosestHitSweepResult *return_value = new BulletClosestHitSweepResult(BulletClosestHitSweepResult::empty());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletClosestHitSweepResult, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_empty_140_comment =
  "C++ Interface:\n"
  "empty()\n"
  "\n"
  "/**\n"
  " * Named constructor intended to be used for asserts with have to return a\n"
  " * concrete value.\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_empty_140_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletClosestHitSweepResult::get_from_pos(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_get_from_pos_141(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletClosestHitSweepResult::get_from_pos(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletClosestHitSweepResult*)local_this).get_from_pos());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_get_from_pos_141_comment =
  "C++ Interface:\n"
  "get_from_pos(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_get_from_pos_141_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletClosestHitSweepResult::get_to_pos(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_get_to_pos_142(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletClosestHitSweepResult::get_to_pos(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletClosestHitSweepResult*)local_this).get_to_pos());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_get_to_pos_142_comment =
  "C++ Interface:\n"
  "get_to_pos(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_get_to_pos_142_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletClosestHitSweepResult::has_hit(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_has_hit_143(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletClosestHitSweepResult::has_hit(void) const
  bool return_value = (*(const BulletClosestHitSweepResult*)local_this).has_hit();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_has_hit_143_comment =
  "C++ Interface:\n"
  "has_hit(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_has_hit_143_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PandaNode *BulletClosestHitSweepResult::get_node(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_get_node_144(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-PandaNode *BulletClosestHitSweepResult::get_node(void) const
  PandaNode *return_value = (*(const BulletClosestHitSweepResult*)local_this).get_node();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_get_node_144_comment =
  "C++ Interface:\n"
  "get_node(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_get_node_144_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletClosestHitSweepResult::get_hit_pos(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_get_hit_pos_145(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletClosestHitSweepResult::get_hit_pos(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletClosestHitSweepResult*)local_this).get_hit_pos());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_get_hit_pos_145_comment =
  "C++ Interface:\n"
  "get_hit_pos(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_get_hit_pos_145_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletClosestHitSweepResult::get_hit_normal(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_get_hit_normal_146(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletClosestHitSweepResult::get_hit_normal(void) const
  LVector3 *return_value = new LVector3((*(const BulletClosestHitSweepResult*)local_this).get_hit_normal());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_get_hit_normal_146_comment =
  "C++ Interface:\n"
  "get_hit_normal(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_get_hit_normal_146_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletClosestHitSweepResult::get_hit_fraction(void) const
 */
static PyObject *Dtool_BulletClosestHitSweepResult_get_hit_fraction_147(PyObject *self, PyObject *) {
  BulletClosestHitSweepResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletClosestHitSweepResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletClosestHitSweepResult::get_hit_fraction(void) const
  PN_stdfloat return_value = (*(const BulletClosestHitSweepResult*)local_this).get_hit_fraction();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletClosestHitSweepResult_get_hit_fraction_147_comment =
  "C++ Interface:\n"
  "get_hit_fraction(BulletClosestHitSweepResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletClosestHitSweepResult_get_hit_fraction_147_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletClosestHitSweepResult::BulletClosestHitSweepResult(BulletClosestHitSweepResult const &) = default
 */
static int Dtool_Init_BulletClosestHitSweepResult(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletClosestHitSweepResult() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg = NULL;
  if (PyTuple_GET_SIZE(args) == 1) {
    arg = PyTuple_GET_ITEM(args, 0);
  } else if (kwds != NULL) {
    arg = PyDict_GetItemString(kwds, "param0");
  }
  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
    return -1;
  }
  // 1-inline BulletClosestHitSweepResult::BulletClosestHitSweepResult(BulletClosestHitSweepResult const &) = default
  BulletClosestHitSweepResult const *arg_this = (BulletClosestHitSweepResult *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletClosestHitSweepResult, 0, "BulletClosestHitSweepResult.BulletClosestHitSweepResult", true, true);
  if (arg_this != NULL) {
    BulletClosestHitSweepResult *return_value = new BulletClosestHitSweepResult(*arg_this);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletClosestHitSweepResult, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletClosestHitSweepResult(const BulletClosestHitSweepResult param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletClosestHitSweepResult(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletClosestHitSweepResult) {
    printf("BulletClosestHitSweepResult ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletClosestHitSweepResult *local_this = (BulletClosestHitSweepResult *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletClosestHitSweepResult) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletClosestHitSweepResult(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletClosestHitSweepResult) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletConeShape
 */
/**
 * Python function wrapper for:
 * inline void BulletConeShape::operator =(BulletConeShape const &copy)
 */
static PyObject *Dtool_BulletConeShape_operator_152(PyObject *self, PyObject *arg) {
  BulletConeShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeShape, (void **)&local_this, "BulletConeShape.assign")) {
    return NULL;
  }
  // 1-inline void BulletConeShape::operator =(BulletConeShape const &copy)
  CPT(BulletConeShape) arg_this;
  if (!Dtool_ConstCoerce_BulletConeShape(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletConeShape.assign", "BulletConeShape");
  }
  (*local_this).operator =(*MOVE(arg_this));
  BulletConeShape *return_value = local_this;
  if (return_value != (BulletConeShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletConeShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletConeShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletConeShape self, const BulletConeShape copy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeShape_operator_152_comment =
  "C++ Interface:\n"
  "assign(const BulletConeShape self, const BulletConeShape copy)\n";
#else
static const char *Dtool_BulletConeShape_operator_152_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletConeShape::get_radius(void) const
 */
static PyObject *Dtool_BulletConeShape_get_radius_153(PyObject *self, PyObject *) {
  BulletConeShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConeShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletConeShape::get_radius(void) const
  PN_stdfloat return_value = (*(const BulletConeShape*)local_this).get_radius();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConeShape_get_radius_153_comment =
  "C++ Interface:\n"
  "get_radius(BulletConeShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeShape_get_radius_153_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletConeShape::get_height(void) const
 */
static PyObject *Dtool_BulletConeShape_get_height_154(PyObject *self, PyObject *) {
  BulletConeShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConeShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletConeShape::get_height(void) const
  PN_stdfloat return_value = (*(const BulletConeShape*)local_this).get_height();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConeShape_get_height_154_comment =
  "C++ Interface:\n"
  "get_height(BulletConeShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeShape_get_height_154_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletConeShape::get_class_type(void)
 */
static PyObject *Dtool_BulletConeShape_get_class_type_155(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletConeShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletConeShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletConeShape_get_class_type_155_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletConeShape_get_class_type_155_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletConeShape::BulletConeShape(BulletConeShape const &copy)
 * BulletConeShape::BulletConeShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
 */
static int Dtool_Init_BulletConeShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "copy");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'copy' (pos 1) not found");
        return -1;
      }
      // 1-inline BulletConeShape::BulletConeShape(BulletConeShape const &copy)
      CPT(BulletConeShape) arg_this;
      if (!Dtool_ConstCoerce_BulletConeShape(arg, arg_this)) {
        Dtool_Raise_ArgTypeError(arg, 0, "BulletConeShape.BulletConeShape", "BulletConeShape");
        return -1;
      }
      BulletConeShape *return_value = new BulletConeShape(*MOVE(arg_this));
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConeShape, true, false);
    }
    break;
  case 2:
  case 3:
    {
      // 1-BulletConeShape::BulletConeShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
      float param0;
      float param1;
      int param2 = ::Z_up;
      static const char *keyword_list[] = {"radius", "height", "up", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "ff|i:BulletConeShape", (char **)keyword_list, &param0, &param1, &param2)) {
        BulletConeShape *return_value = new BulletConeShape((PN_stdfloat)param0, (PN_stdfloat)param1, (BulletUpAxis)param2);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConeShape, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletConeShape() takes 1, 2 or 3 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletConeShape(const BulletConeShape copy)\n"
      "BulletConeShape(float radius, float height, int up)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletConeShape(PyObject *args, CPT(BulletConeShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletConeShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    Py_ssize_t size = PyTuple_GET_SIZE(args);
    if (size >= 2 && size <= 3) {
      // 1-BulletConeShape::BulletConeShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
      float param0;
      float param1;
      int param2 = ::Z_up;
      if (PyArg_ParseTuple(args, "ff|i:BulletConeShape", &param0, &param1, &param2)) {
        BulletConeShape *return_value = new BulletConeShape((PN_stdfloat)param0, (PN_stdfloat)param1, (BulletUpAxis)param2);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return false;
        }
        return_value->ref();
        if (_PyErr_OCCURRED()) {
          unref_delete(return_value);
          return false;
        } else {
          coerced = MOVE(return_value);
          return true;
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

bool Dtool_Coerce_BulletConeShape(PyObject *args, PT(BulletConeShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletConeShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    Py_ssize_t size = PyTuple_GET_SIZE(args);
    if (size >= 2 && size <= 3) {
      // 1-BulletConeShape::BulletConeShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
      float param0;
      float param1;
      int param2 = ::Z_up;
      if (PyArg_ParseTuple(args, "ff|i:BulletConeShape", &param0, &param1, &param2)) {
        BulletConeShape *return_value = new BulletConeShape((PN_stdfloat)param0, (PN_stdfloat)param1, (BulletUpAxis)param2);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return false;
        }
        return_value->ref();
        if (_PyErr_OCCURRED()) {
          unref_delete(return_value);
          return false;
        } else {
          coerced = MOVE(return_value);
          return true;
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletConeShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletConeShape) {
    printf("BulletConeShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletConeShape *local_this = (BulletConeShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletConeShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletConeShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletConeShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletConeShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletConeShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletConeShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletConeShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletConeShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletConstraint
 */
/**
 * Python function wrapper for:
 * BulletRigidBodyNode *BulletConstraint::get_rigid_body_a(void)
 */
static PyObject *Dtool_BulletConstraint_get_rigid_body_a_158(PyObject *self, PyObject *) {
  BulletConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.get_rigid_body_a")) {
    return NULL;
  }
  // 1-BulletRigidBodyNode *BulletConstraint::get_rigid_body_a(void)
  BulletRigidBodyNode *return_value = (*local_this).get_rigid_body_a();
  if (return_value != (BulletRigidBodyNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletRigidBodyNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletRigidBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_rigid_body_a_158_comment =
  "C++ Interface:\n"
  "get_rigid_body_a(const BulletConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_get_rigid_body_a_158_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletRigidBodyNode *BulletConstraint::get_rigid_body_b(void)
 */
static PyObject *Dtool_BulletConstraint_get_rigid_body_b_159(PyObject *self, PyObject *) {
  BulletConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.get_rigid_body_b")) {
    return NULL;
  }
  // 1-BulletRigidBodyNode *BulletConstraint::get_rigid_body_b(void)
  BulletRigidBodyNode *return_value = (*local_this).get_rigid_body_b();
  if (return_value != (BulletRigidBodyNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletRigidBodyNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletRigidBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_rigid_body_b_159_comment =
  "C++ Interface:\n"
  "get_rigid_body_b(const BulletConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_get_rigid_body_b_159_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConstraint::enable_feedback(bool value)
 */
static PyObject *Dtool_BulletConstraint_enable_feedback_160(PyObject *self, PyObject *arg) {
  BulletConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.enable_feedback")) {
    return NULL;
  }
  // 1-void BulletConstraint::enable_feedback(bool value)
  (*local_this).enable_feedback((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "enable_feedback(const BulletConstraint self, bool value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_enable_feedback_160_comment =
  "C++ Interface:\n"
  "enable_feedback(const BulletConstraint self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_enable_feedback_160_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConstraint::set_debug_draw_size(PN_stdfloat size)
 */
static PyObject *Dtool_BulletConstraint_set_debug_draw_size_161(PyObject *self, PyObject *arg) {
  BulletConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.set_debug_draw_size")) {
    return NULL;
  }
  // 1-void BulletConstraint::set_debug_draw_size(PN_stdfloat size)
  if (PyNumber_Check(arg)) {
    (*local_this).set_debug_draw_size((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_debug_draw_size(const BulletConstraint self, float size)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_set_debug_draw_size_161_comment =
  "C++ Interface:\n"
  "set_debug_draw_size(const BulletConstraint self, float size)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_set_debug_draw_size_161_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletConstraint::get_applied_impulse(void) const
 */
static PyObject *Dtool_BulletConstraint_get_applied_impulse_162(PyObject *self, PyObject *) {
  BulletConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletConstraint::get_applied_impulse(void) const
  PN_stdfloat return_value = (*(const BulletConstraint*)local_this).get_applied_impulse();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_applied_impulse_162_comment =
  "C++ Interface:\n"
  "get_applied_impulse(BulletConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_get_applied_impulse_162_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletConstraint::get_debug_draw_size(void)
 */
static PyObject *Dtool_BulletConstraint_get_debug_draw_size_163(PyObject *self, PyObject *) {
  BulletConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.get_debug_draw_size")) {
    return NULL;
  }
  // 1-PN_stdfloat BulletConstraint::get_debug_draw_size(void)
  PN_stdfloat return_value = (*local_this).get_debug_draw_size();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_debug_draw_size_163_comment =
  "C++ Interface:\n"
  "get_debug_draw_size(const BulletConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_get_debug_draw_size_163_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletConstraint::set_breaking_threshold(void) const
 * inline void BulletConstraint::set_breaking_threshold(PN_stdfloat threshold)
 */
static PyObject *Dtool_BulletConstraint_set_breaking_threshold_164(PyObject *self, PyObject *args) {
  BulletConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConstraint, (void **)&local_this)) {
    return NULL;
  }
  int parameter_count = (int)PyTuple_Size(args);
  switch (parameter_count) {
  case 0:
    {
      // 1-inline PN_stdfloat BulletConstraint::set_breaking_threshold(void) const
      PN_stdfloat return_value = (*(const BulletConstraint*)local_this).set_breaking_threshold();
      if (Dtool_CheckErrorOccurred()) {
        return NULL;
      }
      return Dtool_WrapValue(return_value);
    }
    break;
  case 1:
    {
        PyObject *arg = PyTuple_GET_ITEM(args, 0);
      if (!((Dtool_PyInstDef *)self)->_is_const) {
        // 1-inline void BulletConstraint::set_breaking_threshold(PN_stdfloat threshold)
        if (PyNumber_Check(arg)) {
          (*local_this).set_breaking_threshold((PN_stdfloat)PyFloat_AsDouble(arg));
          return Dtool_Return_None();
        }
      } else {
#ifdef NDEBUG
        return Dtool_Raise_TypeError("non-const method called on const object");
#else
        return Dtool_Raise_TypeError("Cannot call BulletConstraint.set_breaking_threshold() on a const object.");
#endif
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "set_breaking_threshold() takes 1 or 2 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_breaking_threshold(BulletConstraint self)\n"
      "set_breaking_threshold(const BulletConstraint self, float threshold)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_set_breaking_threshold_164_comment =
  "C++ Interface:\n"
  "set_breaking_threshold(BulletConstraint self)\n"
  "set_breaking_threshold(const BulletConstraint self, float threshold)\n"
  "\n"
  "/**\n"
  " * Sets the applied impulse limit for breaking the constraint.  If the limit\n"
  " * is exceeded the constraint will be disabled.  Disabled constraints are not\n"
  " * removed from the world, and can be re-enabled.\n"
  " */\n"
  "\n"
  "/**\n"
  " * Returns the applied impluse limit for breaking the constraint.\n"
  " */";
#else
static const char *Dtool_BulletConstraint_set_breaking_threshold_164_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletConstraint::set_enabled(bool enabled)
 */
static PyObject *Dtool_BulletConstraint_set_enabled_165(PyObject *self, PyObject *arg) {
  BulletConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.set_enabled")) {
    return NULL;
  }
  // 1-inline void BulletConstraint::set_enabled(bool enabled)
  (*local_this).set_enabled((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_enabled(const BulletConstraint self, bool enabled)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_set_enabled_165_comment =
  "C++ Interface:\n"
  "set_enabled(const BulletConstraint self, bool enabled)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_set_enabled_165_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletConstraint::is_enabled(void) const
 */
static PyObject *Dtool_BulletConstraint_is_enabled_166(PyObject *self, PyObject *) {
  BulletConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletConstraint::is_enabled(void) const
  bool return_value = (*(const BulletConstraint*)local_this).is_enabled();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_is_enabled_166_comment =
  "C++ Interface:\n"
  "is_enabled(BulletConstraint self)\n"
  "\n"
  "/**\n"
  " * Returns TRUE if the constraint is enabled.\n"
  " */";
#else
static const char *Dtool_BulletConstraint_is_enabled_166_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConstraint::set_param(BulletConstraint::ConstraintParam num, PN_stdfloat value, int axis = -1)
 */
static PyObject *Dtool_BulletConstraint_set_param_168(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.set_param")) {
    return NULL;
  }
  // 1-void BulletConstraint::set_param(BulletConstraint::ConstraintParam num, PN_stdfloat value, int axis = -1)
  int param1;
  float param2;
  int param3 = -1;
  static const char *keyword_list[] = {"num", "value", "axis", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "if|i:set_param", (char **)keyword_list, &param1, &param2, &param3)) {
    (*local_this).set_param((BulletConstraint::ConstraintParam)param1, (PN_stdfloat)param2, (int)param3);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_param(const BulletConstraint self, int num, float value, int axis)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_set_param_168_comment =
  "C++ Interface:\n"
  "set_param(const BulletConstraint self, int num, float value, int axis)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_set_param_168_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletConstraint::get_param(BulletConstraint::ConstraintParam num, int axis = -1)
 */
static PyObject *Dtool_BulletConstraint_get_param_169(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConstraint, (void **)&local_this, "BulletConstraint.get_param")) {
    return NULL;
  }
  // 1-PN_stdfloat BulletConstraint::get_param(BulletConstraint::ConstraintParam num, int axis = -1)
  int param1;
  int param2 = -1;
  static const char *keyword_list[] = {"num", "axis", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "i|i:get_param", (char **)keyword_list, &param1, &param2)) {
    PN_stdfloat return_value = (*local_this).get_param((BulletConstraint::ConstraintParam)param1, (int)param2);
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_param(const BulletConstraint self, int num, int axis)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_param_169_comment =
  "C++ Interface:\n"
  "get_param(const BulletConstraint self, int num, int axis)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConstraint_get_param_169_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletConstraint::get_class_type(void)
 */
static PyObject *Dtool_BulletConstraint_get_class_type_170(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletConstraint::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletConstraint::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletConstraint_get_class_type_170_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletConstraint_get_class_type_170_comment = NULL;
#endif

static int Dtool_Init_BulletConstraint(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletConstraint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletConstraint) {
    printf("BulletConstraint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletConstraint *local_this = (BulletConstraint *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletConstraint) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletConstraint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletConstraint) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletConstraint*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletConeTwistConstraint
 */
/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_limit(PN_stdfloat swing1, PN_stdfloat swing2, PN_stdfloat twist, PN_stdfloat softness = 1.0, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0)
 * void BulletConeTwistConstraint::set_limit(int index, PN_stdfloat value)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_limit_173(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletConeTwistConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_limit")) {
    return NULL;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-void BulletConeTwistConstraint::set_limit(int index, PN_stdfloat value)
      int param1;
      float param2;
      static const char *keyword_list[] = {"index", "value", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "if:set_limit", (char **)keyword_list, &param1, &param2)) {
        (*local_this).set_limit((int)param1, (PN_stdfloat)param2);
        return Dtool_Return_None();
      }
    }
    break;
  case 3:
  case 4:
  case 5:
  case 6:
    {
      // 1-void BulletConeTwistConstraint::set_limit(PN_stdfloat swing1, PN_stdfloat swing2, PN_stdfloat twist, PN_stdfloat softness = 1.0, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0)
      float param1;
      float param2;
      float param3;
      float param4 = 1.0;
      float param5 = 0.30000000000000007;
      float param6 = 1.0;
      static const char *keyword_list[] = {"swing1", "swing2", "twist", "softness", "bias", "relaxation", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "fff|fff:set_limit", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5, &param6)) {
        (*local_this).set_limit((PN_stdfloat)param1, (PN_stdfloat)param2, (PN_stdfloat)param3, (PN_stdfloat)param4, (PN_stdfloat)param5, (PN_stdfloat)param6);
        return Dtool_Return_None();
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "set_limit() takes 3, 4, 5, 6 or 7 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_limit(const BulletConeTwistConstraint self, int index, float value)\n"
      "set_limit(const BulletConeTwistConstraint self, float swing1, float swing2, float twist, float softness, float bias, float relaxation)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_limit_173_comment =
  "C++ Interface:\n"
  "set_limit(const BulletConeTwistConstraint self, int index, float value)\n"
  "set_limit(const BulletConeTwistConstraint self, float swing1, float swing2, float twist, float softness, float bias, float relaxation)\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_limit_173_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_damping(PN_stdfloat damping)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_damping_174(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_damping")) {
    return NULL;
  }
  // 1-void BulletConeTwistConstraint::set_damping(PN_stdfloat damping)
  if (PyNumber_Check(arg)) {
    (*local_this).set_damping((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_damping(const BulletConeTwistConstraint self, float damping)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_damping_174_comment =
  "C++ Interface:\n"
  "set_damping(const BulletConeTwistConstraint self, float damping)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_damping_174_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletConeTwistConstraint::get_fix_threshold(void) const
 */
static PyObject *Dtool_BulletConeTwistConstraint_get_fix_threshold_175(PyObject *self, PyObject *) {
  BulletConeTwistConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConeTwistConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletConeTwistConstraint::get_fix_threshold(void) const
  PN_stdfloat return_value = (*(const BulletConeTwistConstraint*)local_this).get_fix_threshold();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_get_fix_threshold_175_comment =
  "C++ Interface:\n"
  "get_fix_threshold(BulletConeTwistConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_get_fix_threshold_175_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_fix_threshold(PN_stdfloat threshold)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_fix_threshold_176(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_fix_threshold")) {
    return NULL;
  }
  // 1-void BulletConeTwistConstraint::set_fix_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    (*local_this).set_fix_threshold((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_fix_threshold(const BulletConeTwistConstraint self, float threshold)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_fix_threshold_176_comment =
  "C++ Interface:\n"
  "set_fix_threshold(const BulletConeTwistConstraint self, float threshold)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_fix_threshold_176_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::enable_motor(bool enable)
 */
static PyObject *Dtool_BulletConeTwistConstraint_enable_motor_177(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.enable_motor")) {
    return NULL;
  }
  // 1-void BulletConeTwistConstraint::enable_motor(bool enable)
  (*local_this).enable_motor((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "enable_motor(const BulletConeTwistConstraint self, bool enable)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_enable_motor_177_comment =
  "C++ Interface:\n"
  "enable_motor(const BulletConeTwistConstraint self, bool enable)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_enable_motor_177_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_max_motor_impulse(PN_stdfloat max_impulse)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_max_motor_impulse_178(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_max_motor_impulse")) {
    return NULL;
  }
  // 1-void BulletConeTwistConstraint::set_max_motor_impulse(PN_stdfloat max_impulse)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_motor_impulse((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_motor_impulse(const BulletConeTwistConstraint self, float max_impulse)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_max_motor_impulse_178_comment =
  "C++ Interface:\n"
  "set_max_motor_impulse(const BulletConeTwistConstraint self, float max_impulse)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_max_motor_impulse_178_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_max_motor_impulse_normalized(PN_stdfloat max_impulse)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_179(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_max_motor_impulse_normalized")) {
    return NULL;
  }
  // 1-void BulletConeTwistConstraint::set_max_motor_impulse_normalized(PN_stdfloat max_impulse)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_motor_impulse_normalized((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_motor_impulse_normalized(const BulletConeTwistConstraint self, float max_impulse)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_179_comment =
  "C++ Interface:\n"
  "set_max_motor_impulse_normalized(const BulletConeTwistConstraint self, float max_impulse)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_179_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_motor_target(LQuaternion const &quat)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_motor_target_180(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_motor_target")) {
    return NULL;
  }
  // 1-void BulletConeTwistConstraint::set_motor_target(LQuaternion const &quat)
  LQuaternionf arg_local;
  LQuaternion const *arg_this = Dtool_Coerce_LQuaternionf(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletConeTwistConstraint.set_motor_target", "LQuaternionf");
  }
  (*local_this).set_motor_target(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_motor_target(const BulletConeTwistConstraint self, const LQuaternionf quat)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_motor_target_180_comment =
  "C++ Interface:\n"
  "set_motor_target(const BulletConeTwistConstraint self, const LQuaternionf quat)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_motor_target_180_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_motor_target_in_constraint_space(LQuaternion const &quat)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_181(PyObject *self, PyObject *arg) {
  BulletConeTwistConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_motor_target_in_constraint_space")) {
    return NULL;
  }
  // 1-void BulletConeTwistConstraint::set_motor_target_in_constraint_space(LQuaternion const &quat)
  LQuaternionf arg_local;
  LQuaternion const *arg_this = Dtool_Coerce_LQuaternionf(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletConeTwistConstraint.set_motor_target_in_constraint_space", "LQuaternionf");
  }
  (*local_this).set_motor_target_in_constraint_space(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_motor_target_in_constraint_space(const BulletConeTwistConstraint self, const LQuaternionf quat)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_181_comment =
  "C++ Interface:\n"
  "set_motor_target_in_constraint_space(const BulletConeTwistConstraint self, const LQuaternionf quat)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_181_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConeTwistConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
 */
static PyObject *Dtool_BulletConeTwistConstraint_set_frames_182(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletConeTwistConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConeTwistConstraint, (void **)&local_this, "BulletConeTwistConstraint.set_frames")) {
    return NULL;
  }
  // 1-void BulletConeTwistConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"ts_a", "ts_b", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:set_frames", (char **)keyword_list, &param1, &param2)) {
    TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletConeTwistConstraint.set_frames", true, true);
    TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletConeTwistConstraint.set_frames", true, true);
    if (param1_this != NULL && param2_this != NULL) {
      (*local_this).set_frames(param1_this, param2_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_frames(const BulletConeTwistConstraint self, const TransformState ts_a, const TransformState ts_b)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_set_frames_182_comment =
  "C++ Interface:\n"
  "set_frames(const BulletConeTwistConstraint self, const TransformState ts_a, const TransformState ts_b)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_set_frames_182_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_a(void) const
 */
static PyObject *Dtool_BulletConeTwistConstraint_get_frame_a_183(PyObject *self, PyObject *) {
  BulletConeTwistConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConeTwistConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_a(void) const
  ConstPointerTo< TransformState > return_value = (*(const BulletConeTwistConstraint*)local_this).get_frame_a();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_TransformState, true, true, return_ptr->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_get_frame_a_183_comment =
  "C++ Interface:\n"
  "get_frame_a(BulletConeTwistConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_get_frame_a_183_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_b(void) const
 */
static PyObject *Dtool_BulletConeTwistConstraint_get_frame_b_184(PyObject *self, PyObject *) {
  BulletConeTwistConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConeTwistConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_b(void) const
  ConstPointerTo< TransformState > return_value = (*(const BulletConeTwistConstraint*)local_this).get_frame_b();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_TransformState, true, true, return_ptr->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_get_frame_b_184_comment =
  "C++ Interface:\n"
  "get_frame_b(BulletConeTwistConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConeTwistConstraint_get_frame_b_184_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletConeTwistConstraint::get_class_type(void)
 */
static PyObject *Dtool_BulletConeTwistConstraint_get_class_type_185(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletConeTwistConstraint::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletConeTwistConstraint::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletConeTwistConstraint_get_class_type_185_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletConeTwistConstraint_get_class_type_185_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b)
 * BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a)
 */
static int Dtool_Init_BulletConeTwistConstraint(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"node_a", "frame_a", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletConeTwistConstraint", (char **)keyword_list, &param0, &param1)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletConeTwistConstraint.BulletConeTwistConstraint", true, true);
        TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletConeTwistConstraint.BulletConeTwistConstraint", true, true);
        if (param0_this != NULL && param1_this != NULL) {
          BulletConeTwistConstraint *return_value = new BulletConeTwistConstraint(param0_this, param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConeTwistConstraint, true, false);
        }
      }
    }
    break;
  case 4:
    {
      // 1-BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      static const char *keyword_list[] = {"node_a", "node_b", "frame_a", "frame_b", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:BulletConeTwistConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletConeTwistConstraint.BulletConeTwistConstraint", true, true);
        BulletRigidBodyNode const *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletConeTwistConstraint.BulletConeTwistConstraint", true, true);
        TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletConeTwistConstraint.BulletConeTwistConstraint", true, true);
        TransformState const *param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletConeTwistConstraint.BulletConeTwistConstraint", true, true);
        if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
          BulletConeTwistConstraint *return_value = new BulletConeTwistConstraint(param0_this, param1_this, param2_this, param3_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConeTwistConstraint, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletConeTwistConstraint() takes 2 or 4 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletConeTwistConstraint(const BulletRigidBodyNode node_a, const TransformState frame_a)\n"
      "BulletConeTwistConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const TransformState frame_a, const TransformState frame_b)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletConeTwistConstraint(PyObject *args, CPT(BulletConeTwistConstraint) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletConeTwistConstraint, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    switch (PyTuple_GET_SIZE(args)) {
      case 2: {
        // 1-BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a)
        PyObject *param0;
        PyObject *param1;
        if (PyArg_UnpackTuple(args, "BulletConeTwistConstraint", 2, 2, &param0, &param1)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          TransformState const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_TransformState, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletConeTwistConstraint *return_value = new BulletConeTwistConstraint(param0_this, param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
      case 4: {
        // 1-BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        if (PyArg_UnpackTuple(args, "BulletConeTwistConstraint", 4, 4, &param0, &param1, &param2, &param3)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          TransformState const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_TransformState, (void **)&param2_this);
          TransformState const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_TransformState, (void **)&param3_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
            BulletConeTwistConstraint *return_value = new BulletConeTwistConstraint(param0_this, param1_this, param2_this, param3_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
    }
  }

  return false;
}

bool Dtool_Coerce_BulletConeTwistConstraint(PyObject *args, PT(BulletConeTwistConstraint) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletConeTwistConstraint, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    switch (PyTuple_GET_SIZE(args)) {
      case 2: {
        // 1-BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a)
        PyObject *param0;
        PyObject *param1;
        if (PyArg_UnpackTuple(args, "BulletConeTwistConstraint", 2, 2, &param0, &param1)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          TransformState const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_TransformState, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletConeTwistConstraint *return_value = new BulletConeTwistConstraint(param0_this, param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
      case 4: {
        // 1-BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        if (PyArg_UnpackTuple(args, "BulletConeTwistConstraint", 4, 4, &param0, &param1, &param2, &param3)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          TransformState const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_TransformState, (void **)&param2_this);
          TransformState const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_TransformState, (void **)&param3_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
            BulletConeTwistConstraint *return_value = new BulletConeTwistConstraint(param0_this, param1_this, param2_this, param3_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletConeTwistConstraint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletConeTwistConstraint) {
    printf("BulletConeTwistConstraint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletConeTwistConstraint *local_this = (BulletConeTwistConstraint *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletConeTwistConstraint) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletConstraint) {
    return (BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletConeTwistConstraint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletConeTwistConstraint) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletConstraint) {
    BulletConstraint* other_this = (BulletConstraint*)from_this;
    return (BulletConeTwistConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletConeTwistConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletConeTwistConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletConeTwistConstraint*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletManifoldPoint
 */
/**
 * Python function wrapper for:
 * int BulletManifoldPoint::get_life_time(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_life_time_188(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletManifoldPoint::get_life_time(void) const
  int return_value = (*(const BulletManifoldPoint*)local_this).get_life_time();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_life_time_188_comment =
  "C++ Interface:\n"
  "get_life_time(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_life_time_188_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletManifoldPoint::get_distance(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_distance_189(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletManifoldPoint::get_distance(void) const
  PN_stdfloat return_value = (*(const BulletManifoldPoint*)local_this).get_distance();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_distance_189_comment =
  "C++ Interface:\n"
  "get_distance(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_distance_189_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletManifoldPoint::get_applied_impulse(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_applied_impulse_190(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletManifoldPoint::get_applied_impulse(void) const
  PN_stdfloat return_value = (*(const BulletManifoldPoint*)local_this).get_applied_impulse();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_applied_impulse_190_comment =
  "C++ Interface:\n"
  "get_applied_impulse(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_applied_impulse_190_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletManifoldPoint::get_position_world_on_a(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_position_world_on_a_191(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletManifoldPoint::get_position_world_on_a(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletManifoldPoint*)local_this).get_position_world_on_a());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_position_world_on_a_191_comment =
  "C++ Interface:\n"
  "get_position_world_on_a(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_position_world_on_a_191_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletManifoldPoint::get_position_world_on_b(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_position_world_on_b_192(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletManifoldPoint::get_position_world_on_b(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletManifoldPoint*)local_this).get_position_world_on_b());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_position_world_on_b_192_comment =
  "C++ Interface:\n"
  "get_position_world_on_b(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_position_world_on_b_192_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletManifoldPoint::get_normal_world_on_b(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_normal_world_on_b_193(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletManifoldPoint::get_normal_world_on_b(void) const
  LVector3 *return_value = new LVector3((*(const BulletManifoldPoint*)local_this).get_normal_world_on_b());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_normal_world_on_b_193_comment =
  "C++ Interface:\n"
  "get_normal_world_on_b(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_normal_world_on_b_193_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletManifoldPoint::get_local_point_a(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_local_point_a_194(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletManifoldPoint::get_local_point_a(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletManifoldPoint*)local_this).get_local_point_a());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_local_point_a_194_comment =
  "C++ Interface:\n"
  "get_local_point_a(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_local_point_a_194_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletManifoldPoint::get_local_point_b(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_local_point_b_195(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletManifoldPoint::get_local_point_b(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletManifoldPoint*)local_this).get_local_point_b());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_local_point_b_195_comment =
  "C++ Interface:\n"
  "get_local_point_b(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_local_point_b_195_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletManifoldPoint::get_part_id0(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_part_id0_196(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletManifoldPoint::get_part_id0(void) const
  int return_value = (*(const BulletManifoldPoint*)local_this).get_part_id0();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_part_id0_196_comment =
  "C++ Interface:\n"
  "get_part_id0(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_part_id0_196_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletManifoldPoint::get_part_id1(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_part_id1_197(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletManifoldPoint::get_part_id1(void) const
  int return_value = (*(const BulletManifoldPoint*)local_this).get_part_id1();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_part_id1_197_comment =
  "C++ Interface:\n"
  "get_part_id1(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_part_id1_197_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletManifoldPoint::get_index0(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_index0_198(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletManifoldPoint::get_index0(void) const
  int return_value = (*(const BulletManifoldPoint*)local_this).get_index0();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_index0_198_comment =
  "C++ Interface:\n"
  "get_index0(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_index0_198_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletManifoldPoint::get_index1(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_index1_199(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletManifoldPoint::get_index1(void) const
  int return_value = (*(const BulletManifoldPoint*)local_this).get_index1();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_index1_199_comment =
  "C++ Interface:\n"
  "get_index1(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_index1_199_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletManifoldPoint::set_lateral_friction_initialized(bool value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_lateral_friction_initialized_200(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_lateral_friction_initialized")) {
    return NULL;
  }
  // 1-inline void BulletManifoldPoint::set_lateral_friction_initialized(bool value)
  (*local_this).set_lateral_friction_initialized((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_lateral_friction_initialized(const BulletManifoldPoint self, bool value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_lateral_friction_initialized_200_comment =
  "C++ Interface:\n"
  "set_lateral_friction_initialized(const BulletManifoldPoint self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_lateral_friction_initialized_200_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletManifoldPoint::set_lateral_friction_dir1(LVecBase3 const &dir)
 */
static PyObject *Dtool_BulletManifoldPoint_set_lateral_friction_dir1_201(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_lateral_friction_dir1")) {
    return NULL;
  }
  // 1-inline void BulletManifoldPoint::set_lateral_friction_dir1(LVecBase3 const &dir)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletManifoldPoint.set_lateral_friction_dir1", "LVecBase3f");
  }
  (*local_this).set_lateral_friction_dir1(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_lateral_friction_dir1(const BulletManifoldPoint self, const LVecBase3f dir)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_lateral_friction_dir1_201_comment =
  "C++ Interface:\n"
  "set_lateral_friction_dir1(const BulletManifoldPoint self, const LVecBase3f dir)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_lateral_friction_dir1_201_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletManifoldPoint::set_lateral_friction_dir2(LVecBase3 const &dir)
 */
static PyObject *Dtool_BulletManifoldPoint_set_lateral_friction_dir2_202(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_lateral_friction_dir2")) {
    return NULL;
  }
  // 1-inline void BulletManifoldPoint::set_lateral_friction_dir2(LVecBase3 const &dir)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletManifoldPoint.set_lateral_friction_dir2", "LVecBase3f");
  }
  (*local_this).set_lateral_friction_dir2(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_lateral_friction_dir2(const BulletManifoldPoint self, const LVecBase3f dir)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_lateral_friction_dir2_202_comment =
  "C++ Interface:\n"
  "set_lateral_friction_dir2(const BulletManifoldPoint self, const LVecBase3f dir)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_lateral_friction_dir2_202_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletManifoldPoint::set_contact_motion1(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_contact_motion1_203(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_contact_motion1")) {
    return NULL;
  }
  // 1-inline void BulletManifoldPoint::set_contact_motion1(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_contact_motion1((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_contact_motion1(const BulletManifoldPoint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_contact_motion1_203_comment =
  "C++ Interface:\n"
  "set_contact_motion1(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_contact_motion1_203_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletManifoldPoint::set_contact_motion2(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_contact_motion2_204(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_contact_motion2")) {
    return NULL;
  }
  // 1-inline void BulletManifoldPoint::set_contact_motion2(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_contact_motion2((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_contact_motion2(const BulletManifoldPoint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_contact_motion2_204_comment =
  "C++ Interface:\n"
  "set_contact_motion2(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_contact_motion2_204_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletManifoldPoint::set_combined_friction(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_combined_friction_205(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_combined_friction")) {
    return NULL;
  }
  // 1-inline void BulletManifoldPoint::set_combined_friction(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_combined_friction((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_combined_friction(const BulletManifoldPoint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_combined_friction_205_comment =
  "C++ Interface:\n"
  "set_combined_friction(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_combined_friction_205_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletManifoldPoint::set_combined_restitution(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_combined_restitution_206(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_combined_restitution")) {
    return NULL;
  }
  // 1-inline void BulletManifoldPoint::set_combined_restitution(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_combined_restitution((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_combined_restitution(const BulletManifoldPoint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_combined_restitution_206_comment =
  "C++ Interface:\n"
  "set_combined_restitution(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_combined_restitution_206_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletManifoldPoint::set_applied_impulse(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_applied_impulse_207(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_applied_impulse")) {
    return NULL;
  }
  // 1-inline void BulletManifoldPoint::set_applied_impulse(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_applied_impulse((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_applied_impulse(const BulletManifoldPoint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_applied_impulse_207_comment =
  "C++ Interface:\n"
  "set_applied_impulse(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_applied_impulse_207_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletManifoldPoint::set_applied_impulse_lateral1(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_208(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_applied_impulse_lateral1")) {
    return NULL;
  }
  // 1-inline void BulletManifoldPoint::set_applied_impulse_lateral1(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_applied_impulse_lateral1((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_applied_impulse_lateral1(const BulletManifoldPoint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_208_comment =
  "C++ Interface:\n"
  "set_applied_impulse_lateral1(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_208_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletManifoldPoint::set_applied_impulse_lateral2(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_209(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_applied_impulse_lateral2")) {
    return NULL;
  }
  // 1-inline void BulletManifoldPoint::set_applied_impulse_lateral2(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_applied_impulse_lateral2((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_applied_impulse_lateral2(const BulletManifoldPoint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_209_comment =
  "C++ Interface:\n"
  "set_applied_impulse_lateral2(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_209_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletManifoldPoint::set_contact_cfm1(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_contact_cfm1_210(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_contact_cfm1")) {
    return NULL;
  }
  // 1-inline void BulletManifoldPoint::set_contact_cfm1(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_contact_cfm1((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_contact_cfm1(const BulletManifoldPoint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_contact_cfm1_210_comment =
  "C++ Interface:\n"
  "set_contact_cfm1(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_contact_cfm1_210_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletManifoldPoint::set_contact_cfm2(PN_stdfloat value)
 */
static PyObject *Dtool_BulletManifoldPoint_set_contact_cfm2_211(PyObject *self, PyObject *arg) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletManifoldPoint, (void **)&local_this, "BulletManifoldPoint.set_contact_cfm2")) {
    return NULL;
  }
  // 1-inline void BulletManifoldPoint::set_contact_cfm2(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_contact_cfm2((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_contact_cfm2(const BulletManifoldPoint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_set_contact_cfm2_211_comment =
  "C++ Interface:\n"
  "set_contact_cfm2(const BulletManifoldPoint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_set_contact_cfm2_211_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletManifoldPoint::get_lateral_friction_initialized(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_lateral_friction_initialized_212(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletManifoldPoint::get_lateral_friction_initialized(void) const
  bool return_value = (*(const BulletManifoldPoint*)local_this).get_lateral_friction_initialized();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_lateral_friction_initialized_212_comment =
  "C++ Interface:\n"
  "get_lateral_friction_initialized(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_lateral_friction_initialized_212_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LVector3 BulletManifoldPoint::get_lateral_friction_dir1(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_lateral_friction_dir1_213(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LVector3 BulletManifoldPoint::get_lateral_friction_dir1(void) const
  LVector3 *return_value = new LVector3((*(const BulletManifoldPoint*)local_this).get_lateral_friction_dir1());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_lateral_friction_dir1_213_comment =
  "C++ Interface:\n"
  "get_lateral_friction_dir1(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_lateral_friction_dir1_213_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LVector3 BulletManifoldPoint::get_lateral_friction_dir2(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_lateral_friction_dir2_214(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LVector3 BulletManifoldPoint::get_lateral_friction_dir2(void) const
  LVector3 *return_value = new LVector3((*(const BulletManifoldPoint*)local_this).get_lateral_friction_dir2());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_lateral_friction_dir2_214_comment =
  "C++ Interface:\n"
  "get_lateral_friction_dir2(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_lateral_friction_dir2_214_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletManifoldPoint::get_contact_motion1(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_contact_motion1_215(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletManifoldPoint::get_contact_motion1(void) const
  PN_stdfloat return_value = (*(const BulletManifoldPoint*)local_this).get_contact_motion1();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_contact_motion1_215_comment =
  "C++ Interface:\n"
  "get_contact_motion1(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_contact_motion1_215_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletManifoldPoint::get_contact_motion2(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_contact_motion2_216(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletManifoldPoint::get_contact_motion2(void) const
  PN_stdfloat return_value = (*(const BulletManifoldPoint*)local_this).get_contact_motion2();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_contact_motion2_216_comment =
  "C++ Interface:\n"
  "get_contact_motion2(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_contact_motion2_216_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletManifoldPoint::get_combined_friction(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_combined_friction_217(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletManifoldPoint::get_combined_friction(void) const
  PN_stdfloat return_value = (*(const BulletManifoldPoint*)local_this).get_combined_friction();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_combined_friction_217_comment =
  "C++ Interface:\n"
  "get_combined_friction(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_combined_friction_217_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletManifoldPoint::get_combined_restitution(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_combined_restitution_218(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletManifoldPoint::get_combined_restitution(void) const
  PN_stdfloat return_value = (*(const BulletManifoldPoint*)local_this).get_combined_restitution();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_combined_restitution_218_comment =
  "C++ Interface:\n"
  "get_combined_restitution(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_combined_restitution_218_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral1(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_219(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral1(void) const
  PN_stdfloat return_value = (*(const BulletManifoldPoint*)local_this).get_applied_impulse_lateral1();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_219_comment =
  "C++ Interface:\n"
  "get_applied_impulse_lateral1(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_219_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral2(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_220(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral2(void) const
  PN_stdfloat return_value = (*(const BulletManifoldPoint*)local_this).get_applied_impulse_lateral2();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_220_comment =
  "C++ Interface:\n"
  "get_applied_impulse_lateral2(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_220_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletManifoldPoint::get_contact_cfm1(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_contact_cfm1_221(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletManifoldPoint::get_contact_cfm1(void) const
  PN_stdfloat return_value = (*(const BulletManifoldPoint*)local_this).get_contact_cfm1();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_contact_cfm1_221_comment =
  "C++ Interface:\n"
  "get_contact_cfm1(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_contact_cfm1_221_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletManifoldPoint::get_contact_cfm2(void) const
 */
static PyObject *Dtool_BulletManifoldPoint_get_contact_cfm2_222(PyObject *self, PyObject *) {
  BulletManifoldPoint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletManifoldPoint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletManifoldPoint::get_contact_cfm2(void) const
  PN_stdfloat return_value = (*(const BulletManifoldPoint*)local_this).get_contact_cfm2();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletManifoldPoint_get_contact_cfm2_222_comment =
  "C++ Interface:\n"
  "get_contact_cfm2(BulletManifoldPoint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletManifoldPoint_get_contact_cfm2_222_comment = NULL;
#endif

static int Dtool_Init_BulletManifoldPoint(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletManifoldPoint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletManifoldPoint) {
    printf("BulletManifoldPoint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletManifoldPoint *local_this = (BulletManifoldPoint *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletManifoldPoint) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletManifoldPoint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletManifoldPoint) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletContactCallbackData
 */
/**
 * Python function wrapper for:
 * inline BulletManifoldPoint &BulletContactCallbackData::get_manifold(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_manifold_226(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline BulletManifoldPoint &BulletContactCallbackData::get_manifold(void) const
  BulletManifoldPoint *return_value = &((*(const BulletContactCallbackData*)local_this).get_manifold());
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletManifoldPoint, false, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_manifold_226_comment =
  "C++ Interface:\n"
  "get_manifold(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_manifold_226_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PandaNode *BulletContactCallbackData::get_node0(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_node0_227(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PandaNode *BulletContactCallbackData::get_node0(void) const
  PandaNode *return_value = (*(const BulletContactCallbackData*)local_this).get_node0();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_node0_227_comment =
  "C++ Interface:\n"
  "get_node0(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_node0_227_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PandaNode *BulletContactCallbackData::get_node1(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_node1_228(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PandaNode *BulletContactCallbackData::get_node1(void) const
  PandaNode *return_value = (*(const BulletContactCallbackData*)local_this).get_node1();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_node1_228_comment =
  "C++ Interface:\n"
  "get_node1(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_node1_228_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContactCallbackData::get_part_id0(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_part_id0_229(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletContactCallbackData::get_part_id0(void) const
  int return_value = (*(const BulletContactCallbackData*)local_this).get_part_id0();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_part_id0_229_comment =
  "C++ Interface:\n"
  "get_part_id0(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_part_id0_229_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContactCallbackData::get_part_id1(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_part_id1_230(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletContactCallbackData::get_part_id1(void) const
  int return_value = (*(const BulletContactCallbackData*)local_this).get_part_id1();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_part_id1_230_comment =
  "C++ Interface:\n"
  "get_part_id1(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_part_id1_230_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContactCallbackData::get_index0(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_index0_231(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletContactCallbackData::get_index0(void) const
  int return_value = (*(const BulletContactCallbackData*)local_this).get_index0();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_index0_231_comment =
  "C++ Interface:\n"
  "get_index0(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_index0_231_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContactCallbackData::get_index1(void) const
 */
static PyObject *Dtool_BulletContactCallbackData_get_index1_232(PyObject *self, PyObject *) {
  BulletContactCallbackData *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactCallbackData, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletContactCallbackData::get_index1(void) const
  int return_value = (*(const BulletContactCallbackData*)local_this).get_index1();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_index1_232_comment =
  "C++ Interface:\n"
  "get_index1(BulletContactCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactCallbackData_get_index1_232_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletContactCallbackData::get_class_type(void)
 */
static PyObject *Dtool_BulletContactCallbackData_get_class_type_233(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletContactCallbackData::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletContactCallbackData::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactCallbackData_get_class_type_233_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletContactCallbackData_get_class_type_233_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletContactCallbackData::BulletContactCallbackData(BulletContactCallbackData const &) = default
 * inline BulletContactCallbackData::BulletContactCallbackData(BulletManifoldPoint &mp, PandaNode *node0, PandaNode *node1, int id0, int id1, int index0, int index1)
 */
static int Dtool_Init_BulletContactCallbackData(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "param0");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
        return -1;
      }
      // 1-inline BulletContactCallbackData::BulletContactCallbackData(BulletContactCallbackData const &) = default
      BulletContactCallbackData const *arg_this;
      bool arg_manage = false;
      if (!Dtool_ConstCoerce_BulletContactCallbackData(arg, arg_this, arg_manage)) {
        Dtool_Raise_ArgTypeError(arg, 0, "BulletContactCallbackData.BulletContactCallbackData", "BulletContactCallbackData");
        return -1;
      }
      BulletContactCallbackData *return_value = new BulletContactCallbackData(*arg_this);
      if (arg_manage) {
        delete arg_this;
      }
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletContactCallbackData, true, false);
    }
    break;
  case 7:
    {
      // 1-inline BulletContactCallbackData::BulletContactCallbackData(BulletManifoldPoint &mp, PandaNode *node0, PandaNode *node1, int id0, int id1, int index0, int index1)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      int param3;
      int param4;
      int param5;
      int param6;
      static const char *keyword_list[] = {"mp", "node0", "node1", "id0", "id1", "index0", "index1", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOiiii:BulletContactCallbackData", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4, &param5, &param6)) {
        BulletManifoldPoint *param0_this = (BulletManifoldPoint *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletManifoldPoint, 0, "BulletContactCallbackData.BulletContactCallbackData", false, true);
        PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletContactCallbackData.BulletContactCallbackData", false, true);
        PandaNode *param2_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_PandaNode, 2, "BulletContactCallbackData.BulletContactCallbackData", false, true);
        if (param0_this != NULL && param1_this != NULL && param2_this != NULL) {
          BulletContactCallbackData *return_value = new BulletContactCallbackData(*param0_this, param1_this, param2_this, (int)param3, (int)param4, (int)param5, (int)param6);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          if (Dtool_CheckErrorOccurred()) {
            delete return_value;
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletContactCallbackData, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletContactCallbackData() takes 1 or 7 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletContactCallbackData(const BulletContactCallbackData param0)\n"
      "BulletContactCallbackData(BulletManifoldPoint mp, PandaNode node0, PandaNode node1, int id0, int id1, int index0, int index1)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletContactCallbackData(PyObject *args, BulletContactCallbackData const *&coerced, bool &manage) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletContactCallbackData, (void**)&coerced);
  if (coerced != NULL) {
    return true;
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 7) {
      // 1-inline BulletContactCallbackData::BulletContactCallbackData(BulletManifoldPoint &mp, PandaNode *node0, PandaNode *node1, int id0, int id1, int index0, int index1)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      int param3;
      int param4;
      int param5;
      int param6;
      if (PyArg_ParseTuple(args, "OOOiiii:BulletContactCallbackData", &param0, &param1, &param2, &param3, &param4, &param5, &param6)) {
        BulletManifoldPoint *param0_this = (BulletManifoldPoint *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletManifoldPoint, 0, "BulletContactCallbackData.BulletContactCallbackData", false, false);
        PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletContactCallbackData.BulletContactCallbackData", false, false);
        PandaNode *param2_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_PandaNode, 2, "BulletContactCallbackData.BulletContactCallbackData", false, false);
        if (param0_this != NULL && param1_this != NULL && param2_this != NULL) {
          BulletContactCallbackData *return_value = new BulletContactCallbackData(*param0_this, param1_this, param2_this, (int)param3, (int)param4, (int)param5, (int)param6);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          if (_PyErr_OCCURRED()) {
            delete return_value;
            return false;
          } else {
            coerced = return_value;
            manage = true;
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

bool Dtool_Coerce_BulletContactCallbackData(PyObject *args, BulletContactCallbackData *&coerced, bool &manage) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletContactCallbackData, (void**)&coerced);
  if (coerced != NULL) {
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 7) {
      // 1-inline BulletContactCallbackData::BulletContactCallbackData(BulletManifoldPoint &mp, PandaNode *node0, PandaNode *node1, int id0, int id1, int index0, int index1)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      int param3;
      int param4;
      int param5;
      int param6;
      if (PyArg_ParseTuple(args, "OOOiiii:BulletContactCallbackData", &param0, &param1, &param2, &param3, &param4, &param5, &param6)) {
        BulletManifoldPoint *param0_this = (BulletManifoldPoint *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletManifoldPoint, 0, "BulletContactCallbackData.BulletContactCallbackData", false, false);
        PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletContactCallbackData.BulletContactCallbackData", false, false);
        PandaNode *param2_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_PandaNode, 2, "BulletContactCallbackData.BulletContactCallbackData", false, false);
        if (param0_this != NULL && param1_this != NULL && param2_this != NULL) {
          BulletContactCallbackData *return_value = new BulletContactCallbackData(*param0_this, param1_this, param2_this, (int)param3, (int)param4, (int)param5, (int)param6);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          if (_PyErr_OCCURRED()) {
            delete return_value;
            return false;
          } else {
            coerced = return_value;
            manage = true;
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletContactCallbackData(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletContactCallbackData) {
    printf("BulletContactCallbackData ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletContactCallbackData *local_this = (BulletContactCallbackData *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletContactCallbackData) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_CallbackData) {
    return (CallbackData *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(CallbackData *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletContactCallbackData(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletContactCallbackData) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_CallbackData) {
    CallbackData* other_this = (CallbackData*)from_this;
    return (BulletContactCallbackData*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletContactCallbackData*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletContact
 */
/**
 * Python function wrapper for:
 * inline BulletManifoldPoint &BulletContact::get_manifold_point(void)
 */
static PyObject *Dtool_BulletContact_get_manifold_point_236(PyObject *self, PyObject *) {
  BulletContact *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletContact, (void **)&local_this, "BulletContact.get_manifold_point")) {
    return NULL;
  }
  // 1-inline BulletManifoldPoint &BulletContact::get_manifold_point(void)
  BulletManifoldPoint *return_value = &((*local_this).get_manifold_point());
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletManifoldPoint, false, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_manifold_point_236_comment =
  "C++ Interface:\n"
  "get_manifold_point(const BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_manifold_point_236_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PandaNode *BulletContact::get_node0(void) const
 */
static PyObject *Dtool_BulletContact_get_node0_237(PyObject *self, PyObject *) {
  BulletContact *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContact, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PandaNode *BulletContact::get_node0(void) const
  PandaNode *return_value = (*(const BulletContact*)local_this).get_node0();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_node0_237_comment =
  "C++ Interface:\n"
  "get_node0(BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_node0_237_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PandaNode *BulletContact::get_node1(void) const
 */
static PyObject *Dtool_BulletContact_get_node1_238(PyObject *self, PyObject *) {
  BulletContact *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContact, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PandaNode *BulletContact::get_node1(void) const
  PandaNode *return_value = (*(const BulletContact*)local_this).get_node1();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_node1_238_comment =
  "C++ Interface:\n"
  "get_node1(BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_node1_238_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContact::get_idx0(void) const
 */
static PyObject *Dtool_BulletContact_get_idx0_239(PyObject *self, PyObject *) {
  BulletContact *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContact, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletContact::get_idx0(void) const
  int return_value = (*(const BulletContact*)local_this).get_idx0();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_idx0_239_comment =
  "C++ Interface:\n"
  "get_idx0(BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_idx0_239_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContact::get_idx1(void) const
 */
static PyObject *Dtool_BulletContact_get_idx1_240(PyObject *self, PyObject *) {
  BulletContact *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContact, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletContact::get_idx1(void) const
  int return_value = (*(const BulletContact*)local_this).get_idx1();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_idx1_240_comment =
  "C++ Interface:\n"
  "get_idx1(BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_idx1_240_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContact::get_part_id0(void) const
 */
static PyObject *Dtool_BulletContact_get_part_id0_241(PyObject *self, PyObject *) {
  BulletContact *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContact, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletContact::get_part_id0(void) const
  int return_value = (*(const BulletContact*)local_this).get_part_id0();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_part_id0_241_comment =
  "C++ Interface:\n"
  "get_part_id0(BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_part_id0_241_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletContact::get_part_id1(void) const
 */
static PyObject *Dtool_BulletContact_get_part_id1_242(PyObject *self, PyObject *) {
  BulletContact *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContact, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletContact::get_part_id1(void) const
  int return_value = (*(const BulletContact*)local_this).get_part_id1();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContact_get_part_id1_242_comment =
  "C++ Interface:\n"
  "get_part_id1(BulletContact self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContact_get_part_id1_242_comment = NULL;
#endif

static int Dtool_Init_BulletContact(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletContact(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletContact) {
    printf("BulletContact ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletContact *local_this = (BulletContact *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletContact) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletContact(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletContact) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletContactResult
 */
/**
 * Python function wrapper for:
 * inline int BulletContactResult::get_num_contacts(void) const
 */
static PyObject *Dtool_BulletContactResult_get_num_contacts_248(PyObject *self, PyObject *) {
  BulletContactResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactResult, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletContactResult::get_num_contacts(void) const
  int return_value = (*(const BulletContactResult*)local_this).get_num_contacts();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletContactResult_get_num_contacts_248_comment =
  "C++ Interface:\n"
  "get_num_contacts(BulletContactResult self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactResult_get_num_contacts_248_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletContact BulletContactResult::get_contact(int idx)
 */
static PyObject *Dtool_BulletContactResult_get_contact_249(PyObject *self, PyObject *arg) {
  BulletContactResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletContactResult, (void **)&local_this, "BulletContactResult.get_contact")) {
    return NULL;
  }
  // 1-inline BulletContact BulletContactResult::get_contact(int idx)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletContact *return_value = new BulletContact((*local_this).get_contact((int)arg_val));
    if (return_value == NULL) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletContact, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_contact(const BulletContactResult self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletContactResult_get_contact_249_comment =
  "C++ Interface:\n"
  "get_contact(const BulletContactResult self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletContactResult_get_contact_249_comment = NULL;
#endif

static int Dtool_Init_BulletContactResult(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletContactResult_get_contacts(PyObject *self, PyObject *) {
  BulletContactResult *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletContactResult, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_contacts();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletContactResult_get_contact_249(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletContactResult(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletContactResult) {
    printf("BulletContactResult ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletContactResult *local_this = (BulletContactResult *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletContactResult) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletContactResult(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletContactResult) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletDebugNode
 */
/**
 * Python function wrapper for:
 * virtual void BulletDebugNode::draw_mask_changed(void)
 */
static PyObject *Dtool_BulletDebugNode_draw_mask_changed_255(PyObject *self, PyObject *) {
  BulletDebugNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.draw_mask_changed")) {
    return NULL;
  }
  // 1-virtual void BulletDebugNode::draw_mask_changed(void)
  (*local_this).draw_mask_changed();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_draw_mask_changed_255_comment =
  "C++ Interface:\n"
  "draw_mask_changed(const BulletDebugNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_draw_mask_changed_255_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletDebugNode::show_wireframe(bool show)
 */
static PyObject *Dtool_BulletDebugNode_show_wireframe_256(PyObject *self, PyObject *arg) {
  BulletDebugNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.show_wireframe")) {
    return NULL;
  }
  // 1-inline void BulletDebugNode::show_wireframe(bool show)
  (*local_this).show_wireframe((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "show_wireframe(const BulletDebugNode self, bool show)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_show_wireframe_256_comment =
  "C++ Interface:\n"
  "show_wireframe(const BulletDebugNode self, bool show)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_show_wireframe_256_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletDebugNode::show_constraints(bool show)
 */
static PyObject *Dtool_BulletDebugNode_show_constraints_257(PyObject *self, PyObject *arg) {
  BulletDebugNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.show_constraints")) {
    return NULL;
  }
  // 1-inline void BulletDebugNode::show_constraints(bool show)
  (*local_this).show_constraints((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "show_constraints(const BulletDebugNode self, bool show)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_show_constraints_257_comment =
  "C++ Interface:\n"
  "show_constraints(const BulletDebugNode self, bool show)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_show_constraints_257_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletDebugNode::show_bounding_boxes(bool show)
 */
static PyObject *Dtool_BulletDebugNode_show_bounding_boxes_258(PyObject *self, PyObject *arg) {
  BulletDebugNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.show_bounding_boxes")) {
    return NULL;
  }
  // 1-inline void BulletDebugNode::show_bounding_boxes(bool show)
  (*local_this).show_bounding_boxes((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "show_bounding_boxes(const BulletDebugNode self, bool show)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_show_bounding_boxes_258_comment =
  "C++ Interface:\n"
  "show_bounding_boxes(const BulletDebugNode self, bool show)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_show_bounding_boxes_258_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletDebugNode::show_normals(bool show)
 */
static PyObject *Dtool_BulletDebugNode_show_normals_259(PyObject *self, PyObject *arg) {
  BulletDebugNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletDebugNode, (void **)&local_this, "BulletDebugNode.show_normals")) {
    return NULL;
  }
  // 1-inline void BulletDebugNode::show_normals(bool show)
  (*local_this).show_normals((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "show_normals(const BulletDebugNode self, bool show)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_show_normals_259_comment =
  "C++ Interface:\n"
  "show_normals(const BulletDebugNode self, bool show)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletDebugNode_show_normals_259_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletDebugNode::get_class_type(void)
 */
static PyObject *Dtool_BulletDebugNode_get_class_type_260(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletDebugNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletDebugNode::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletDebugNode_get_class_type_260_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletDebugNode_get_class_type_260_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletDebugNode::BulletDebugNode(BulletDebugNode const &) = default
 * BulletDebugNode::BulletDebugNode(char const *name = "debug")
 */
static int Dtool_Init_BulletDebugNode(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 0:
    {
      // 1-BulletDebugNode::BulletDebugNode(char const *name)
      BulletDebugNode *return_value = new BulletDebugNode();
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletDebugNode, true, false);
    }
    break;
  case 1:
    {
      {
        // -2 inline BulletDebugNode::BulletDebugNode(BulletDebugNode const &) = default
        PyObject *param0;
        static const char *keyword_list[] = {"param0", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletDebugNode", (char **)keyword_list, &param0)) {
          BulletDebugNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletDebugNode, (void **)&param0_this);
          if (param0_this != NULL) {
            BulletDebugNode *return_value = new BulletDebugNode(*param0_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletDebugNode, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletDebugNode::BulletDebugNode(char const *name)
        char const *param0;
        static const char *keyword_list[] = {"name", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "z:BulletDebugNode", (char **)keyword_list, &param0)) {
          BulletDebugNode *return_value = new BulletDebugNode((char const *)param0);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletDebugNode, true, false);
        }
        PyErr_Clear();
      }

      {
        // -2 inline BulletDebugNode::BulletDebugNode(BulletDebugNode const &) = default
        PyObject *param0;
        static const char *keyword_list[] = {"param0", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletDebugNode", (char **)keyword_list, &param0)) {
          CPT(BulletDebugNode) param0_this;
          if (Dtool_ConstCoerce_BulletDebugNode(param0, param0_this)) {
            BulletDebugNode *return_value = new BulletDebugNode(*MOVE(param0_this));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletDebugNode, true, false);
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: BulletDebugNode::BulletDebugNode(char const *name)
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletDebugNode() takes 0 or 1 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletDebugNode()\n"
      "BulletDebugNode(const BulletDebugNode param0)\n"
      "BulletDebugNode(str name)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletDebugNode(PyObject *args, CPT(BulletDebugNode) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletDebugNode, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-BulletDebugNode::BulletDebugNode(char const *name)
    char const *param0;
    if (PyArg_Parse(arg, "z:BulletDebugNode", &param0)) {
      BulletDebugNode *return_value = new BulletDebugNode((char const *)param0);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      return_value->ref();
      if (_PyErr_OCCURRED()) {
        unref_delete(return_value);
        return false;
      } else {
        coerced = MOVE(return_value);
        return true;
      }
    }
    PyErr_Clear();
  }
  return false;
}

bool Dtool_Coerce_BulletDebugNode(PyObject *args, PT(BulletDebugNode) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletDebugNode, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-BulletDebugNode::BulletDebugNode(char const *name)
    char const *param0;
    if (PyArg_Parse(arg, "z:BulletDebugNode", &param0)) {
      BulletDebugNode *return_value = new BulletDebugNode((char const *)param0);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      return_value->ref();
      if (_PyErr_OCCURRED()) {
        unref_delete(return_value);
        return false;
      } else {
        coerced = MOVE(return_value);
        return true;
      }
    }
    PyErr_Clear();
  }
  return false;
}

static void *Dtool_UpcastInterface_BulletDebugNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletDebugNode) {
    printf("BulletDebugNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletDebugNode *local_this = (BulletDebugNode *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletDebugNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_GeomNode) {
    return (GeomNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *)(GeomNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *)(GeomNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *)(GeomNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(GeomNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(GeomNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *)(GeomNode *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletDebugNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletDebugNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_GeomNode) {
    GeomNode* other_this = (GeomNode*)from_this;
    return (BulletDebugNode*)other_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletDebugNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletDebugNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletDebugNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletDebugNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletDebugNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletDebugNode*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletGhostNode
 */
/**
 * Python function wrapper for:
 * inline int BulletGhostNode::get_num_overlapping_nodes(void) const
 */
static PyObject *Dtool_BulletGhostNode_get_num_overlapping_nodes_263(PyObject *self, PyObject *) {
  BulletGhostNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGhostNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletGhostNode::get_num_overlapping_nodes(void) const
  int return_value = (*(const BulletGhostNode*)local_this).get_num_overlapping_nodes();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletGhostNode_get_num_overlapping_nodes_263_comment =
  "C++ Interface:\n"
  "get_num_overlapping_nodes(BulletGhostNode self)\n"
  "\n"
  "// Overlapping\n"
  "\n"
  "// Overlapping\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGhostNode_get_num_overlapping_nodes_263_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PandaNode *BulletGhostNode::get_overlapping_node(int idx) const
 */
static PyObject *Dtool_BulletGhostNode_get_overlapping_node_264(PyObject *self, PyObject *arg) {
  BulletGhostNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGhostNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PandaNode *BulletGhostNode::get_overlapping_node(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    PandaNode *return_value = (*(const BulletGhostNode*)local_this).get_overlapping_node((int)arg_val);
    if (return_value != (PandaNode *)NULL) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != (PandaNode *)NULL) {
        unref_delete(return_value);
      }
      return NULL;
    }
    if (return_value == NULL) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_overlapping_node(BulletGhostNode self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletGhostNode_get_overlapping_node_264_comment =
  "C++ Interface:\n"
  "get_overlapping_node(BulletGhostNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGhostNode_get_overlapping_node_264_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletGhostNode::get_class_type(void)
 */
static PyObject *Dtool_BulletGhostNode_get_class_type_266(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletGhostNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletGhostNode::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletGhostNode_get_class_type_266_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletGhostNode_get_class_type_266_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletGhostNode::BulletGhostNode(char const *name = "ghost")
 */
static int Dtool_Init_BulletGhostNode(PyObject *self, PyObject *args, PyObject *kwds) {
  // 1-BulletGhostNode::BulletGhostNode(char const *name = "ghost")
  char const *param0 = "ghost";
  static const char *keyword_list[] = {"name", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "|z:BulletGhostNode", (char **)keyword_list, &param0)) {
    BulletGhostNode *return_value = new BulletGhostNode((char const *)param0);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    return_value->ref();
    if (Dtool_CheckErrorOccurred()) {
      unref_delete(return_value);
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletGhostNode, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletGhostNode(str name)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletGhostNode(PyObject *args, CPT(BulletGhostNode) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletGhostNode, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-BulletGhostNode::BulletGhostNode(char const *name)
    char const *param0;
    if (PyArg_Parse(arg, "z:BulletGhostNode", &param0)) {
      BulletGhostNode *return_value = new BulletGhostNode((char const *)param0);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      return_value->ref();
      if (_PyErr_OCCURRED()) {
        unref_delete(return_value);
        return false;
      } else {
        coerced = MOVE(return_value);
        return true;
      }
    }
    PyErr_Clear();
  }
  return false;
}

bool Dtool_Coerce_BulletGhostNode(PyObject *args, PT(BulletGhostNode) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletGhostNode, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-BulletGhostNode::BulletGhostNode(char const *name)
    char const *param0;
    if (PyArg_Parse(arg, "z:BulletGhostNode", &param0)) {
      BulletGhostNode *return_value = new BulletGhostNode((char const *)param0);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      return_value->ref();
      if (_PyErr_OCCURRED()) {
        unref_delete(return_value);
        return false;
      } else {
        coerced = MOVE(return_value);
        return true;
      }
    }
    PyErr_Clear();
  }
  return false;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletGhostNode_get_overlapping_nodes(PyObject *self, PyObject *) {
  BulletGhostNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGhostNode, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_overlapping_nodes();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletGhostNode_get_overlapping_node_264(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletGhostNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletGhostNode) {
    printf("BulletGhostNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletGhostNode *local_this = (BulletGhostNode *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletGhostNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletBodyNode) {
    return (BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletGhostNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletGhostNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletBodyNode) {
    BulletBodyNode* other_this = (BulletBodyNode*)from_this;
    return (BulletGhostNode*)other_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletGhostNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletGhostNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletGhostNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletGhostNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletGhostNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletGhostNode*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletRigidBodyNode
 */
/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_mass(PN_stdfloat mass)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_mass_269(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_mass")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::set_mass(PN_stdfloat mass)
  if (PyNumber_Check(arg)) {
    (*local_this).set_mass((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_mass(const BulletRigidBodyNode self, float mass)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_mass_269_comment =
  "C++ Interface:\n"
  "set_mass(const BulletRigidBodyNode self, float mass)\n"
  "\n"
  "// Mass & inertia\n"
  "\n"
  "/**\n"
  " * Sets the mass of a rigid body.  This also modifies the inertia, which is\n"
  " * automatically computed from the shape of the body.  Setting a value of zero\n"
  " * for mass will make the body static.  A value of zero can be considered an\n"
  " * infinite mass.\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_mass_269_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRigidBodyNode::get_mass(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_mass_270(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletRigidBodyNode::get_mass(void) const
  PN_stdfloat return_value = (*(const BulletRigidBodyNode*)local_this).get_mass();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_mass_270_comment =
  "C++ Interface:\n"
  "get_mass(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " * Returns the total mass of a rigid body.  A value of zero means that the\n"
  " * body is staic, i.e.  has an infinite mass.\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_mass_270_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRigidBodyNode::get_inv_mass(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_inv_mass_271(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletRigidBodyNode::get_inv_mass(void) const
  PN_stdfloat return_value = (*(const BulletRigidBodyNode*)local_this).get_inv_mass();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_inv_mass_271_comment =
  "C++ Interface:\n"
  "get_inv_mass(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " * Returns the inverse mass of a rigid body.\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_inv_mass_271_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_inertia(LVecBase3 const &inertia)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_inertia_272(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_inertia")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::set_inertia(LVecBase3 const &inertia)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_inertia", "LVecBase3f");
  }
  (*local_this).set_inertia(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_inertia(const BulletRigidBodyNode self, const LVecBase3f inertia)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_inertia_272_comment =
  "C++ Interface:\n"
  "set_inertia(const BulletRigidBodyNode self, const LVecBase3f inertia)\n"
  "\n"
  "/**\n"
  " * Sets the inertia of a rigid body.  Inertia is given as a three-component\n"
  " * vector.  A component value of zero means infinite inertia along this\n"
  " * direction.  Setting the intertia will override the value which is\n"
  " * automatically calculated from the rigid bodies shape.  However, it is\n"
  " * possible that automatic calculation of intertia is trigger after calling\n"
  " * this method, and thus overwriting the explicitly set value again.  This\n"
  " * happens when: (a) the mass is set after the inertia.  (b) a shape is added\n"
  " * or removed from the body.  (c) the scale of the body changed.\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_inertia_272_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_inertia(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_inertia_273(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletRigidBodyNode::get_inertia(void) const
  LVector3 *return_value = new LVector3((*(const BulletRigidBodyNode*)local_this).get_inertia());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_inertia_273_comment =
  "C++ Interface:\n"
  "get_inertia(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " * Returns the inertia of the rigid body.  Inertia is given as a three\n"
  " * component vector.  A component value of zero means infinite inertia along\n"
  " * this direction.\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_inertia_273_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_inv_inertia_diag_local(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_274(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletRigidBodyNode::get_inv_inertia_diag_local(void) const
  LVector3 *return_value = new LVector3((*(const BulletRigidBodyNode*)local_this).get_inv_inertia_diag_local());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_274_comment =
  "C++ Interface:\n"
  "get_inv_inertia_diag_local(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_274_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LMatrix3 BulletRigidBodyNode::get_inv_inertia_tensor_world(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_275(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LMatrix3 BulletRigidBodyNode::get_inv_inertia_tensor_world(void) const
  LMatrix3 *return_value = new LMatrix3((*(const BulletRigidBodyNode*)local_this).get_inv_inertia_tensor_world());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LMatrix3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_275_comment =
  "C++ Interface:\n"
  "get_inv_inertia_tensor_world(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_275_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_linear_velocity(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_linear_velocity_276(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletRigidBodyNode::get_linear_velocity(void) const
  LVector3 *return_value = new LVector3((*(const BulletRigidBodyNode*)local_this).get_linear_velocity());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_linear_velocity_276_comment =
  "C++ Interface:\n"
  "get_linear_velocity(BulletRigidBodyNode self)\n"
  "\n"
  "// Velocity\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_linear_velocity_276_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_angular_velocity(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_angular_velocity_277(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletRigidBodyNode::get_angular_velocity(void) const
  LVector3 *return_value = new LVector3((*(const BulletRigidBodyNode*)local_this).get_angular_velocity());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_angular_velocity_277_comment =
  "C++ Interface:\n"
  "get_angular_velocity(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_angular_velocity_277_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_linear_velocity(LVector3 const &velocity)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_linear_velocity_278(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_linear_velocity")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::set_linear_velocity(LVector3 const &velocity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_linear_velocity", "LVector3f");
  }
  (*local_this).set_linear_velocity(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_velocity(const BulletRigidBodyNode self, const LVector3f velocity)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_linear_velocity_278_comment =
  "C++ Interface:\n"
  "set_linear_velocity(const BulletRigidBodyNode self, const LVector3f velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_linear_velocity_278_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_angular_velocity(LVector3 const &velocity)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_angular_velocity_279(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_angular_velocity")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::set_angular_velocity(LVector3 const &velocity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_angular_velocity", "LVector3f");
  }
  (*local_this).set_angular_velocity(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_velocity(const BulletRigidBodyNode self, const LVector3f velocity)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_angular_velocity_279_comment =
  "C++ Interface:\n"
  "set_angular_velocity(const BulletRigidBodyNode self, const LVector3f velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_angular_velocity_279_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletRigidBodyNode::get_linear_damping(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_linear_damping_280(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletRigidBodyNode::get_linear_damping(void) const
  PN_stdfloat return_value = (*(const BulletRigidBodyNode*)local_this).get_linear_damping();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_linear_damping_280_comment =
  "C++ Interface:\n"
  "get_linear_damping(BulletRigidBodyNode self)\n"
  "\n"
  "// Damping\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_linear_damping_280_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletRigidBodyNode::get_angular_damping(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_angular_damping_281(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletRigidBodyNode::get_angular_damping(void) const
  PN_stdfloat return_value = (*(const BulletRigidBodyNode*)local_this).get_angular_damping();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_angular_damping_281_comment =
  "C++ Interface:\n"
  "get_angular_damping(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_angular_damping_281_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRigidBodyNode::set_linear_damping(PN_stdfloat value)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_linear_damping_282(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_linear_damping")) {
    return NULL;
  }
  // 1-inline void BulletRigidBodyNode::set_linear_damping(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_linear_damping((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_damping(const BulletRigidBodyNode self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_linear_damping_282_comment =
  "C++ Interface:\n"
  "set_linear_damping(const BulletRigidBodyNode self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_linear_damping_282_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRigidBodyNode::set_angular_damping(PN_stdfloat value)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_angular_damping_283(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_angular_damping")) {
    return NULL;
  }
  // 1-inline void BulletRigidBodyNode::set_angular_damping(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_angular_damping((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_damping(const BulletRigidBodyNode self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_angular_damping_283_comment =
  "C++ Interface:\n"
  "set_angular_damping(const BulletRigidBodyNode self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_angular_damping_283_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::clear_forces(void)
 */
static PyObject *Dtool_BulletRigidBodyNode_clear_forces_284(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.clear_forces")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::clear_forces(void)
  (*local_this).clear_forces();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_clear_forces_284_comment =
  "C++ Interface:\n"
  "clear_forces(const BulletRigidBodyNode self)\n"
  "\n"
  "// Forces\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_clear_forces_284_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::apply_force(LVector3 const &force, LPoint3 const &pos)
 */
static PyObject *Dtool_BulletRigidBodyNode_apply_force_285(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.apply_force")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::apply_force(LVector3 const &force, LPoint3 const &pos)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"force", "pos", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:apply_force", (char **)keyword_list, &param1, &param2)) {
    LVector3f param1_local;
    LVector3 const *param1_this = Dtool_Coerce_LVector3f(param1, param1_local);
    if (!(param1_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletRigidBodyNode.apply_force", "LVector3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletRigidBodyNode.apply_force", "LPoint3f");
    }
    (*local_this).apply_force(*param1_this, *param2_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_force(const BulletRigidBodyNode self, const LVector3f force, const LPoint3f pos)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_apply_force_285_comment =
  "C++ Interface:\n"
  "apply_force(const BulletRigidBodyNode self, const LVector3f force, const LPoint3f pos)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_apply_force_285_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::apply_central_force(LVector3 const &force)
 */
static PyObject *Dtool_BulletRigidBodyNode_apply_central_force_286(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.apply_central_force")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::apply_central_force(LVector3 const &force)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.apply_central_force", "LVector3f");
  }
  (*local_this).apply_central_force(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_central_force(const BulletRigidBodyNode self, const LVector3f force)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_apply_central_force_286_comment =
  "C++ Interface:\n"
  "apply_central_force(const BulletRigidBodyNode self, const LVector3f force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_apply_central_force_286_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::apply_impulse(LVector3 const &impulse, LPoint3 const &pos)
 */
static PyObject *Dtool_BulletRigidBodyNode_apply_impulse_287(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.apply_impulse")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::apply_impulse(LVector3 const &impulse, LPoint3 const &pos)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"impulse", "pos", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:apply_impulse", (char **)keyword_list, &param1, &param2)) {
    LVector3f param1_local;
    LVector3 const *param1_this = Dtool_Coerce_LVector3f(param1, param1_local);
    if (!(param1_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletRigidBodyNode.apply_impulse", "LVector3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletRigidBodyNode.apply_impulse", "LPoint3f");
    }
    (*local_this).apply_impulse(*param1_this, *param2_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_impulse(const BulletRigidBodyNode self, const LVector3f impulse, const LPoint3f pos)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_apply_impulse_287_comment =
  "C++ Interface:\n"
  "apply_impulse(const BulletRigidBodyNode self, const LVector3f impulse, const LPoint3f pos)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_apply_impulse_287_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::apply_central_impulse(LVector3 const &impulse)
 */
static PyObject *Dtool_BulletRigidBodyNode_apply_central_impulse_288(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.apply_central_impulse")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::apply_central_impulse(LVector3 const &impulse)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.apply_central_impulse", "LVector3f");
  }
  (*local_this).apply_central_impulse(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_central_impulse(const BulletRigidBodyNode self, const LVector3f impulse)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_apply_central_impulse_288_comment =
  "C++ Interface:\n"
  "apply_central_impulse(const BulletRigidBodyNode self, const LVector3f impulse)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_apply_central_impulse_288_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::apply_torque(LVector3 const &torque)
 */
static PyObject *Dtool_BulletRigidBodyNode_apply_torque_289(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.apply_torque")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::apply_torque(LVector3 const &torque)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.apply_torque", "LVector3f");
  }
  (*local_this).apply_torque(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_torque(const BulletRigidBodyNode self, const LVector3f torque)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_apply_torque_289_comment =
  "C++ Interface:\n"
  "apply_torque(const BulletRigidBodyNode self, const LVector3f torque)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_apply_torque_289_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::apply_torque_impulse(LVector3 const &torque)
 */
static PyObject *Dtool_BulletRigidBodyNode_apply_torque_impulse_290(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.apply_torque_impulse")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::apply_torque_impulse(LVector3 const &torque)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.apply_torque_impulse", "LVector3f");
  }
  (*local_this).apply_torque_impulse(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_torque_impulse(const BulletRigidBodyNode self, const LVector3f torque)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_apply_torque_impulse_290_comment =
  "C++ Interface:\n"
  "apply_torque_impulse(const BulletRigidBodyNode self, const LVector3f torque)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_apply_torque_impulse_290_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_total_force(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_total_force_291(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletRigidBodyNode::get_total_force(void) const
  LVector3 *return_value = new LVector3((*(const BulletRigidBodyNode*)local_this).get_total_force());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_total_force_291_comment =
  "C++ Interface:\n"
  "get_total_force(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_total_force_291_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_total_torque(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_total_torque_292(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletRigidBodyNode::get_total_torque(void) const
  LVector3 *return_value = new LVector3((*(const BulletRigidBodyNode*)local_this).get_total_torque());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_total_torque_292_comment =
  "C++ Interface:\n"
  "get_total_torque(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_total_torque_292_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRigidBodyNode::get_linear_sleep_threshold(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_293(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletRigidBodyNode::get_linear_sleep_threshold(void) const
  PN_stdfloat return_value = (*(const BulletRigidBodyNode*)local_this).get_linear_sleep_threshold();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_293_comment =
  "C++ Interface:\n"
  "get_linear_sleep_threshold(BulletRigidBodyNode self)\n"
  "\n"
  "// Deactivation thresholds\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_293_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletRigidBodyNode::get_angular_sleep_threshold(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_294(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletRigidBodyNode::get_angular_sleep_threshold(void) const
  PN_stdfloat return_value = (*(const BulletRigidBodyNode*)local_this).get_angular_sleep_threshold();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_294_comment =
  "C++ Interface:\n"
  "get_angular_sleep_threshold(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_294_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_linear_sleep_threshold(PN_stdfloat threshold)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_295(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_linear_sleep_threshold")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::set_linear_sleep_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    (*local_this).set_linear_sleep_threshold((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_sleep_threshold(const BulletRigidBodyNode self, float threshold)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_295_comment =
  "C++ Interface:\n"
  "set_linear_sleep_threshold(const BulletRigidBodyNode self, float threshold)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_295_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_angular_sleep_threshold(PN_stdfloat threshold)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_296(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_angular_sleep_threshold")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::set_angular_sleep_threshold(PN_stdfloat threshold)
  if (PyNumber_Check(arg)) {
    (*local_this).set_angular_sleep_threshold((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_sleep_threshold(const BulletRigidBodyNode self, float threshold)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_296_comment =
  "C++ Interface:\n"
  "set_angular_sleep_threshold(const BulletRigidBodyNode self, float threshold)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_296_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_gravity(LVector3 const &gravity)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_gravity_297(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_gravity")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::set_gravity(LVector3 const &gravity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_gravity", "LVector3f");
  }
  (*local_this).set_gravity(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_gravity(const BulletRigidBodyNode self, const LVector3f gravity)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_gravity_297_comment =
  "C++ Interface:\n"
  "set_gravity(const BulletRigidBodyNode self, const LVector3f gravity)\n"
  "\n"
  "// Gravity\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_gravity_297_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_gravity(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_gravity_298(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletRigidBodyNode::get_gravity(void) const
  LVector3 *return_value = new LVector3((*(const BulletRigidBodyNode*)local_this).get_gravity());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_gravity_298_comment =
  "C++ Interface:\n"
  "get_gravity(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_gravity_298_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_linear_factor(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_linear_factor_299(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletRigidBodyNode::get_linear_factor(void) const
  LVector3 *return_value = new LVector3((*(const BulletRigidBodyNode*)local_this).get_linear_factor());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_linear_factor_299_comment =
  "C++ Interface:\n"
  "get_linear_factor(BulletRigidBodyNode self)\n"
  "\n"
  "// Restrict movement\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_linear_factor_299_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletRigidBodyNode::get_angular_factor(void) const
 */
static PyObject *Dtool_BulletRigidBodyNode_get_angular_factor_300(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRigidBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletRigidBodyNode::get_angular_factor(void) const
  LVector3 *return_value = new LVector3((*(const BulletRigidBodyNode*)local_this).get_angular_factor());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_angular_factor_300_comment =
  "C++ Interface:\n"
  "get_angular_factor(BulletRigidBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_get_angular_factor_300_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_linear_factor(LVector3 const &factor)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_linear_factor_301(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_linear_factor")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::set_linear_factor(LVector3 const &factor)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_linear_factor", "LVector3f");
  }
  (*local_this).set_linear_factor(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_factor(const BulletRigidBodyNode self, const LVector3f factor)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_linear_factor_301_comment =
  "C++ Interface:\n"
  "set_linear_factor(const BulletRigidBodyNode self, const LVector3f factor)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_linear_factor_301_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletRigidBodyNode::set_angular_factor(LVector3 const &factor)
 */
static PyObject *Dtool_BulletRigidBodyNode_set_angular_factor_302(PyObject *self, PyObject *arg) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.set_angular_factor")) {
    return NULL;
  }
  // 1-void BulletRigidBodyNode::set_angular_factor(LVector3 const &factor)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletRigidBodyNode.set_angular_factor", "LVector3f");
  }
  (*local_this).set_angular_factor(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_factor(const BulletRigidBodyNode self, const LVector3f factor)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_set_angular_factor_302_comment =
  "C++ Interface:\n"
  "set_angular_factor(const BulletRigidBodyNode self, const LVector3f factor)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_set_angular_factor_302_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletRigidBodyNode::pick_dirty_flag(void)
 */
static PyObject *Dtool_BulletRigidBodyNode_pick_dirty_flag_303(PyObject *self, PyObject *) {
  BulletRigidBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRigidBodyNode, (void **)&local_this, "BulletRigidBodyNode.pick_dirty_flag")) {
    return NULL;
  }
  // 1-bool BulletRigidBodyNode::pick_dirty_flag(void)
  bool return_value = (*local_this).pick_dirty_flag();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_pick_dirty_flag_303_comment =
  "C++ Interface:\n"
  "pick_dirty_flag(const BulletRigidBodyNode self)\n"
  "\n"
  "// Special\n"
  "\n"
  "/**\n"
  " * Returns TRUE if the transform of the rigid body has changed at least once\n"
  " * since the last call to this method.\n"
  " */";
#else
static const char *Dtool_BulletRigidBodyNode_pick_dirty_flag_303_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletRigidBodyNode::get_class_type(void)
 */
static PyObject *Dtool_BulletRigidBodyNode_get_class_type_304(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletRigidBodyNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletRigidBodyNode::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletRigidBodyNode_get_class_type_304_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletRigidBodyNode_get_class_type_304_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * explicit BulletRigidBodyNode::BulletRigidBodyNode(char const *name = "rigid")
 */
static int Dtool_Init_BulletRigidBodyNode(PyObject *self, PyObject *args, PyObject *kwds) {
  // 1-explicit BulletRigidBodyNode::BulletRigidBodyNode(char const *name = "rigid")
  char const *param0 = "rigid";
  static const char *keyword_list[] = {"name", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "|z:BulletRigidBodyNode", (char **)keyword_list, &param0)) {
    BulletRigidBodyNode *return_value = new BulletRigidBodyNode((char const *)param0);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    return_value->ref();
    if (Dtool_CheckErrorOccurred()) {
      unref_delete(return_value);
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletRigidBodyNode, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletRigidBodyNode(str name)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletRigidBodyNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletRigidBodyNode) {
    printf("BulletRigidBodyNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletRigidBodyNode *local_this = (BulletRigidBodyNode *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletRigidBodyNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletBodyNode) {
    return (BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletRigidBodyNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletRigidBodyNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletBodyNode) {
    BulletBodyNode* other_this = (BulletBodyNode*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletRigidBodyNode*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletSoftBodyNodeElement
 */
/**
 * Python function wrapper for:
 * static inline BulletSoftBodyNodeElement BulletSoftBodyNodeElement::empty(void)
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_empty_307(PyObject *, PyObject *) {
  // 1-static inline BulletSoftBodyNodeElement BulletSoftBodyNodeElement::empty(void)
  BulletSoftBodyNodeElement *return_value = new BulletSoftBodyNodeElement(BulletSoftBodyNodeElement::empty());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyNodeElement, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_empty_307_comment =
  "C++ Interface:\n"
  "empty()\n"
  "\n"
  "/**\n"
  " * Named constructor intended to be used for asserts with have to return a\n"
  " * concrete value.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_empty_307_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LPoint3 BulletSoftBodyNodeElement::get_pos(void) const
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_get_pos_308(PyObject *self, PyObject *) {
  BulletSoftBodyNodeElement *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNodeElement, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LPoint3 BulletSoftBodyNodeElement::get_pos(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletSoftBodyNodeElement*)local_this).get_pos());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_get_pos_308_comment =
  "C++ Interface:\n"
  "get_pos(BulletSoftBodyNodeElement self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_get_pos_308_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LVector3 BulletSoftBodyNodeElement::get_velocity(void) const
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_get_velocity_309(PyObject *self, PyObject *) {
  BulletSoftBodyNodeElement *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNodeElement, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LVector3 BulletSoftBodyNodeElement::get_velocity(void) const
  LVector3 *return_value = new LVector3((*(const BulletSoftBodyNodeElement*)local_this).get_velocity());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_get_velocity_309_comment =
  "C++ Interface:\n"
  "get_velocity(BulletSoftBodyNodeElement self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_get_velocity_309_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LVector3 BulletSoftBodyNodeElement::get_normal(void) const
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_get_normal_310(PyObject *self, PyObject *) {
  BulletSoftBodyNodeElement *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNodeElement, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LVector3 BulletSoftBodyNodeElement::get_normal(void) const
  LVector3 *return_value = new LVector3((*(const BulletSoftBodyNodeElement*)local_this).get_normal());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_get_normal_310_comment =
  "C++ Interface:\n"
  "get_normal(BulletSoftBodyNodeElement self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_get_normal_310_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyNodeElement::get_inv_mass(void) const
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_get_inv_mass_311(PyObject *self, PyObject *) {
  BulletSoftBodyNodeElement *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNodeElement, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyNodeElement::get_inv_mass(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyNodeElement*)local_this).get_inv_mass();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_get_inv_mass_311_comment =
  "C++ Interface:\n"
  "get_inv_mass(BulletSoftBodyNodeElement self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_get_inv_mass_311_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyNodeElement::get_area(void) const
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_get_area_312(PyObject *self, PyObject *) {
  BulletSoftBodyNodeElement *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNodeElement, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyNodeElement::get_area(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyNodeElement*)local_this).get_area();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_get_area_312_comment =
  "C++ Interface:\n"
  "get_area(BulletSoftBodyNodeElement self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_get_area_312_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletSoftBodyNodeElement::is_attached(void) const
 */
static PyObject *Dtool_BulletSoftBodyNodeElement_is_attached_313(PyObject *self, PyObject *) {
  BulletSoftBodyNodeElement *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNodeElement, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletSoftBodyNodeElement::is_attached(void) const
  int return_value = (*(const BulletSoftBodyNodeElement*)local_this).is_attached();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNodeElement_is_attached_313_comment =
  "C++ Interface:\n"
  "is_attached(BulletSoftBodyNodeElement self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNodeElement_is_attached_313_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletSoftBodyNodeElement::BulletSoftBodyNodeElement(BulletSoftBodyNodeElement const &) = default
 */
static int Dtool_Init_BulletSoftBodyNodeElement(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletSoftBodyNodeElement() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg = NULL;
  if (PyTuple_GET_SIZE(args) == 1) {
    arg = PyTuple_GET_ITEM(args, 0);
  } else if (kwds != NULL) {
    arg = PyDict_GetItemString(kwds, "param0");
  }
  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
    return -1;
  }
  // 1-inline BulletSoftBodyNodeElement::BulletSoftBodyNodeElement(BulletSoftBodyNodeElement const &) = default
  BulletSoftBodyNodeElement const *arg_this = (BulletSoftBodyNodeElement *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletSoftBodyNodeElement, 0, "BulletSoftBodyNodeElement.BulletSoftBodyNodeElement", true, true);
  if (arg_this != NULL) {
    BulletSoftBodyNodeElement *return_value = new BulletSoftBodyNodeElement(*arg_this);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSoftBodyNodeElement, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSoftBodyNodeElement(const BulletSoftBodyNodeElement param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSoftBodyNodeElement(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletSoftBodyNodeElement) {
    printf("BulletSoftBodyNodeElement ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletSoftBodyNodeElement *local_this = (BulletSoftBodyNodeElement *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletSoftBodyNodeElement) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletSoftBodyNodeElement(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyNodeElement) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletSoftBodyNode
 */
/**
 * Python function wrapper for:
 * BulletSoftBodyConfig BulletSoftBodyNode::get_cfg(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_get_cfg_316(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.get_cfg")) {
    return NULL;
  }
  // 1-BulletSoftBodyConfig BulletSoftBodyNode::get_cfg(void)
  BulletSoftBodyConfig *return_value = new BulletSoftBodyConfig((*local_this).get_cfg());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyConfig, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_cfg_316_comment =
  "C++ Interface:\n"
  "get_cfg(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_cfg_316_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyWorldInfo BulletSoftBodyNode::get_world_info(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_get_world_info_317(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.get_world_info")) {
    return NULL;
  }
  // 1-BulletSoftBodyWorldInfo BulletSoftBodyNode::get_world_info(void)
  BulletSoftBodyWorldInfo *return_value = new BulletSoftBodyWorldInfo((*local_this).get_world_info());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyWorldInfo, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_world_info_317_comment =
  "C++ Interface:\n"
  "get_world_info(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_world_info_317_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::generate_bending_constraints(int distance, BulletSoftBodyMaterial *material = 0)
 */
static PyObject *Dtool_BulletSoftBodyNode_generate_bending_constraints_318(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.generate_bending_constraints")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::generate_bending_constraints(int distance, BulletSoftBodyMaterial *material = 0)
  int param1;
  PyObject *param2 = NULL;
  static const char *keyword_list[] = {"distance", "material", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "i|O:generate_bending_constraints", (char **)keyword_list, &param1, &param2)) {
    BulletSoftBodyMaterial *param2_this = 0;
    if (param2 != (PyObject *)NULL) {
      param2_this = (BulletSoftBodyMaterial *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_BulletSoftBodyMaterial, 2, "BulletSoftBodyNode.generate_bending_constraints", false, true);
    }
    if ((param2 == NULL || param2_this != NULL)) {
      (*local_this).generate_bending_constraints((int)param1, param2_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "generate_bending_constraints(const BulletSoftBodyNode self, int distance, BulletSoftBodyMaterial material)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_generate_bending_constraints_318_comment =
  "C++ Interface:\n"
  "generate_bending_constraints(const BulletSoftBodyNode self, int distance, BulletSoftBodyMaterial material)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_generate_bending_constraints_318_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::randomize_constraints(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_randomize_constraints_319(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.randomize_constraints")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::randomize_constraints(void)
  (*local_this).randomize_constraints();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_randomize_constraints_319_comment =
  "C++ Interface:\n"
  "randomize_constraints(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_randomize_constraints_319_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_volume_mass(PN_stdfloat mass)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_volume_mass_320(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_volume_mass")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::set_volume_mass(PN_stdfloat mass)
  if (PyNumber_Check(arg)) {
    (*local_this).set_volume_mass((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_volume_mass(const BulletSoftBodyNode self, float mass)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_volume_mass_320_comment =
  "C++ Interface:\n"
  "set_volume_mass(const BulletSoftBodyNode self, float mass)\n"
  "\n"
  "// Mass, volume, density\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_volume_mass_320_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_volume_density(PN_stdfloat density)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_volume_density_321(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_volume_density")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::set_volume_density(PN_stdfloat density)
  if (PyNumber_Check(arg)) {
    (*local_this).set_volume_density((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_volume_density(const BulletSoftBodyNode self, float density)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_volume_density_321_comment =
  "C++ Interface:\n"
  "set_volume_density(const BulletSoftBodyNode self, float density)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_volume_density_321_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_total_mass(PN_stdfloat mass, bool fromfaces = false)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_total_mass_322(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_total_mass")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::set_total_mass(PN_stdfloat mass, bool fromfaces = false)
  float param1;
  PyObject *param2 = Py_False;
  static const char *keyword_list[] = {"mass", "fromfaces", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "f|O:set_total_mass", (char **)keyword_list, &param1, &param2)) {
    (*local_this).set_total_mass((PN_stdfloat)param1, (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_total_mass(const BulletSoftBodyNode self, float mass, bool fromfaces)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_total_mass_322_comment =
  "C++ Interface:\n"
  "set_total_mass(const BulletSoftBodyNode self, float mass, bool fromfaces)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_total_mass_322_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_total_density(PN_stdfloat density)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_total_density_323(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_total_density")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::set_total_density(PN_stdfloat density)
  if (PyNumber_Check(arg)) {
    (*local_this).set_total_density((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_total_density(const BulletSoftBodyNode self, float density)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_total_density_323_comment =
  "C++ Interface:\n"
  "set_total_density(const BulletSoftBodyNode self, float density)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_total_density_323_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_mass(int node, PN_stdfloat mass)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_mass_324(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_mass")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::set_mass(int node, PN_stdfloat mass)
  int param1;
  float param2;
  static const char *keyword_list[] = {"node", "mass", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "if:set_mass", (char **)keyword_list, &param1, &param2)) {
    (*local_this).set_mass((int)param1, (PN_stdfloat)param2);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_mass(const BulletSoftBodyNode self, int node, float mass)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_mass_324_comment =
  "C++ Interface:\n"
  "set_mass(const BulletSoftBodyNode self, int node, float mass)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_mass_324_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyNode::get_mass(int node) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_mass_325(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSoftBodyNode::get_mass(int node) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    PN_stdfloat return_value = (*(const BulletSoftBodyNode*)local_this).get_mass((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_mass(BulletSoftBodyNode self, int node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_mass_325_comment =
  "C++ Interface:\n"
  "get_mass(BulletSoftBodyNode self, int node)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_mass_325_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyNode::get_total_mass(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_total_mass_326(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSoftBodyNode::get_total_mass(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyNode*)local_this).get_total_mass();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_total_mass_326_comment =
  "C++ Interface:\n"
  "get_total_mass(BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_total_mass_326_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyNode::get_volume(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_volume_327(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSoftBodyNode::get_volume(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyNode*)local_this).get_volume();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_volume_327_comment =
  "C++ Interface:\n"
  "get_volume(BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_volume_327_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::add_force(LVector3 const &force)
 * void BulletSoftBodyNode::add_force(LVector3 const &force, int node)
 */
static PyObject *Dtool_BulletSoftBodyNode_add_force_328(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.add_force")) {
    return NULL;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "force");
      }
      if (arg == (PyObject *)NULL) {
        return Dtool_Raise_TypeError("Required argument 'force' (pos 1) not found");
      }
      // 1-void BulletSoftBodyNode::add_force(LVector3 const &force)
      LVector3f arg_local;
      LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
      if (!(arg_this != NULL)) {
        return Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyNode.add_force", "LVector3f");
      }
      (*local_this).add_force(*arg_this);
      return Dtool_Return_None();
    }
    break;
  case 2:
    {
      // 1-void BulletSoftBodyNode::add_force(LVector3 const &force, int node)
      PyObject *param1;
      int param2;
      static const char *keyword_list[] = {"force", "node", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "Oi:add_force", (char **)keyword_list, &param1, &param2)) {
        LVector3f param1_local;
        LVector3 const *param1_this = Dtool_Coerce_LVector3f(param1, param1_local);
        if (!(param1_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.add_force", "LVector3f");
        }
        (*local_this).add_force(*param1_this, (int)param2);
        return Dtool_Return_None();
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "add_force() takes 2 or 3 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_force(const BulletSoftBodyNode self, const LVector3f force)\n"
      "add_force(const BulletSoftBodyNode self, const LVector3f force, int node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_add_force_328_comment =
  "C++ Interface:\n"
  "add_force(const BulletSoftBodyNode self, const LVector3f force)\n"
  "add_force(const BulletSoftBodyNode self, const LVector3f force, int node)\n"
  "\n"
  "// Force\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_add_force_328_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_velocity(LVector3 const &velocity)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_velocity_329(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_velocity")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::set_velocity(LVector3 const &velocity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyNode.set_velocity", "LVector3f");
  }
  (*local_this).set_velocity(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_velocity_329_comment =
  "C++ Interface:\n"
  "set_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_velocity_329_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::add_velocity(LVector3 const &velocity)
 * void BulletSoftBodyNode::add_velocity(LVector3 const &velocity, int node)
 */
static PyObject *Dtool_BulletSoftBodyNode_add_velocity_330(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.add_velocity")) {
    return NULL;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "velocity");
      }
      if (arg == (PyObject *)NULL) {
        return Dtool_Raise_TypeError("Required argument 'velocity' (pos 1) not found");
      }
      // 1-void BulletSoftBodyNode::add_velocity(LVector3 const &velocity)
      LVector3f arg_local;
      LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
      if (!(arg_this != NULL)) {
        return Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyNode.add_velocity", "LVector3f");
      }
      (*local_this).add_velocity(*arg_this);
      return Dtool_Return_None();
    }
    break;
  case 2:
    {
      // 1-void BulletSoftBodyNode::add_velocity(LVector3 const &velocity, int node)
      PyObject *param1;
      int param2;
      static const char *keyword_list[] = {"velocity", "node", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "Oi:add_velocity", (char **)keyword_list, &param1, &param2)) {
        LVector3f param1_local;
        LVector3 const *param1_this = Dtool_Coerce_LVector3f(param1, param1_local);
        if (!(param1_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.add_velocity", "LVector3f");
        }
        (*local_this).add_velocity(*param1_this, (int)param2);
        return Dtool_Return_None();
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "add_velocity() takes 2 or 3 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n"
      "add_velocity(const BulletSoftBodyNode self, const LVector3f velocity, int node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_add_velocity_330_comment =
  "C++ Interface:\n"
  "add_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n"
  "add_velocity(const BulletSoftBodyNode self, const LVector3f velocity, int node)\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_add_velocity_330_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_wind_velocity(LVector3 const &velocity)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_wind_velocity_331(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_wind_velocity")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::set_wind_velocity(LVector3 const &velocity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyNode.set_wind_velocity", "LVector3f");
  }
  (*local_this).set_wind_velocity(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wind_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_wind_velocity_331_comment =
  "C++ Interface:\n"
  "set_wind_velocity(const BulletSoftBodyNode self, const LVector3f velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_wind_velocity_331_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletSoftBodyNode::get_wind_velocity(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_wind_velocity_332(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletSoftBodyNode::get_wind_velocity(void) const
  LVector3 *return_value = new LVector3((*(const BulletSoftBodyNode*)local_this).get_wind_velocity());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_wind_velocity_332_comment =
  "C++ Interface:\n"
  "get_wind_velocity(BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_wind_velocity_332_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::set_pose(bool bvolume, bool bframe)
 */
static PyObject *Dtool_BulletSoftBodyNode_set_pose_333(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.set_pose")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::set_pose(bool bvolume, bool bframe)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"bvolume", "bframe", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:set_pose", (char **)keyword_list, &param1, &param2)) {
    (*local_this).set_pose((PyObject_IsTrue(param1) != 0), (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_pose(const BulletSoftBodyNode self, bool bvolume, bool bframe)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_set_pose_333_comment =
  "C++ Interface:\n"
  "set_pose(const BulletSoftBodyNode self, bool bvolume, bool bframe)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_set_pose_333_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BoundingBox BulletSoftBodyNode::get_aabb(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_aabb_334(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-BoundingBox BulletSoftBodyNode::get_aabb(void) const
  BoundingBox *return_value = new BoundingBox((*(const BulletSoftBodyNode*)local_this).get_aabb());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (return_value != (BoundingBox *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BoundingBox *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BoundingBox, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_aabb_334_comment =
  "C++ Interface:\n"
  "get_aabb(BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_aabb_334_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::generate_clusters(int k, int maxiterations = 8192)
 */
static PyObject *Dtool_BulletSoftBodyNode_generate_clusters_335(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.generate_clusters")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::generate_clusters(int k, int maxiterations = 8192)
  int param1;
  int param2 = 8192;
  static const char *keyword_list[] = {"k", "maxiterations", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "i|i:generate_clusters", (char **)keyword_list, &param1, &param2)) {
    (*local_this).generate_clusters((int)param1, (int)param2);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "generate_clusters(const BulletSoftBodyNode self, int k, int maxiterations)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_generate_clusters_335_comment =
  "C++ Interface:\n"
  "generate_clusters(const BulletSoftBodyNode self, int k, int maxiterations)\n"
  "\n"
  "// Cluster\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_generate_clusters_335_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::release_cluster(int index)
 */
static PyObject *Dtool_BulletSoftBodyNode_release_cluster_336(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.release_cluster")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::release_cluster(int index)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    (*local_this).release_cluster((int)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "release_cluster(const BulletSoftBodyNode self, int index)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_release_cluster_336_comment =
  "C++ Interface:\n"
  "release_cluster(const BulletSoftBodyNode self, int index)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_release_cluster_336_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::release_clusters(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_release_clusters_337(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.release_clusters")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::release_clusters(void)
  (*local_this).release_clusters();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_release_clusters_337_comment =
  "C++ Interface:\n"
  "release_clusters(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_release_clusters_337_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyNode::get_num_clusters(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_num_clusters_338(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletSoftBodyNode::get_num_clusters(void) const
  int return_value = (*(const BulletSoftBodyNode*)local_this).get_num_clusters();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_num_clusters_338_comment =
  "C++ Interface:\n"
  "get_num_clusters(BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_num_clusters_338_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVecBase3 BulletSoftBodyNode::cluster_com(int cluster) const
 */
static PyObject *Dtool_BulletSoftBodyNode_cluster_com_339(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVecBase3 BulletSoftBodyNode::cluster_com(int cluster) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    LVecBase3 *return_value = new LVecBase3((*(const BulletSoftBodyNode*)local_this).cluster_com((int)arg_val));
    if (return_value == NULL) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "cluster_com(BulletSoftBodyNode self, int cluster)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_cluster_com_339_comment =
  "C++ Interface:\n"
  "cluster_com(BulletSoftBodyNode self, int cluster)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_cluster_com_339_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::link_geom(Geom *geom)
 */
static PyObject *Dtool_BulletSoftBodyNode_link_geom_340(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.link_geom")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::link_geom(Geom *geom)
  Geom *arg_this = (Geom *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_Geom, 1, "BulletSoftBodyNode.link_geom", false, true);
  if (arg_this != NULL) {
    (*local_this).link_geom(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "link_geom(const BulletSoftBodyNode self, Geom geom)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_link_geom_340_comment =
  "C++ Interface:\n"
  "link_geom(const BulletSoftBodyNode self, Geom geom)\n"
  "\n"
  "// Rendering\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_link_geom_340_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::unlink_geom(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_unlink_geom_341(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.unlink_geom")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::unlink_geom(void)
  (*local_this).unlink_geom();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_unlink_geom_341_comment =
  "C++ Interface:\n"
  "unlink_geom(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_unlink_geom_341_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::link_curve(NurbsCurveEvaluator *curve)
 */
static PyObject *Dtool_BulletSoftBodyNode_link_curve_342(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.link_curve")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::link_curve(NurbsCurveEvaluator *curve)
  NurbsCurveEvaluator *arg_this = (NurbsCurveEvaluator *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_NurbsCurveEvaluator, 1, "BulletSoftBodyNode.link_curve", false, true);
  if (arg_this != NULL) {
    (*local_this).link_curve(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "link_curve(const BulletSoftBodyNode self, NurbsCurveEvaluator curve)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_link_curve_342_comment =
  "C++ Interface:\n"
  "link_curve(const BulletSoftBodyNode self, NurbsCurveEvaluator curve)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_link_curve_342_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::unlink_curve(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_unlink_curve_343(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.unlink_curve")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::unlink_curve(void)
  (*local_this).unlink_curve();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_unlink_curve_343_comment =
  "C++ Interface:\n"
  "unlink_curve(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_unlink_curve_343_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::link_surface(NurbsSurfaceEvaluator *surface)
 */
static PyObject *Dtool_BulletSoftBodyNode_link_surface_344(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.link_surface")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::link_surface(NurbsSurfaceEvaluator *surface)
  NurbsSurfaceEvaluator *arg_this = (NurbsSurfaceEvaluator *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_NurbsSurfaceEvaluator, 1, "BulletSoftBodyNode.link_surface", false, true);
  if (arg_this != NULL) {
    (*local_this).link_surface(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "link_surface(const BulletSoftBodyNode self, NurbsSurfaceEvaluator surface)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_link_surface_344_comment =
  "C++ Interface:\n"
  "link_surface(const BulletSoftBodyNode self, NurbsSurfaceEvaluator surface)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_link_surface_344_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::unlink_surface(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_unlink_surface_345(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.unlink_surface")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::unlink_surface(void)
  (*local_this).unlink_surface();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_unlink_surface_345_comment =
  "C++ Interface:\n"
  "unlink_surface(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_unlink_surface_345_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, LVector3 const &pivot, bool disable = false)
 * void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable = false)
 */
static PyObject *Dtool_BulletSoftBodyNode_append_anchor_346(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.append_anchor")) {
    return NULL;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable)
      int param1;
      PyObject *param2;
      static const char *keyword_list[] = {"node", "body", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "iO:append_anchor", (char **)keyword_list, &param1, &param2)) {
        BulletRigidBodyNode *param2_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_BulletRigidBodyNode, 2, "BulletSoftBodyNode.append_anchor", false, true);
        if (param2_this != NULL) {
          (*local_this).append_anchor((int)param1, param2_this);
          return Dtool_Return_None();
        }
      }
    }
    break;
  case 3:
  case 4:
    {
      {
        // -2 void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, LVector3 const &pivot, bool disable = false)
        int param1;
        PyObject *param2;
        PyObject *param3;
        PyObject *param4 = Py_False;
        static const char *keyword_list[] = {"node", "body", "pivot", "disable", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "iOO|O:append_anchor", (char **)keyword_list, &param1, &param2, &param3, &param4)) {
          BulletRigidBodyNode *param2_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_BulletRigidBodyNode, 2, "BulletSoftBodyNode.append_anchor", false, false);
          LVector3 const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_LVector3f, (void **)&param3_this);
          if (param2_this != NULL && param3_this != NULL) {
            (*local_this).append_anchor((int)param1, param2_this, *param3_this, (PyObject_IsTrue(param4) != 0));
            return Dtool_Return_None();
          }
        }
        PyErr_Clear();
      }

      {
        // -2 void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable = false)
        int param1;
        PyObject *param2;
        PyObject *param3;
        static const char *keyword_list[] = {"node", "body", "disable", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "iOO:append_anchor", (char **)keyword_list, &param1, &param2, &param3)) {
          BulletRigidBodyNode *param2_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_BulletRigidBodyNode, 2, "BulletSoftBodyNode.append_anchor", false, false);
          if (param2_this != NULL) {
            (*local_this).append_anchor((int)param1, param2_this, (PyObject_IsTrue(param3) != 0));
            return Dtool_Return_None();
          }
        }
        PyErr_Clear();
      }

      {
        // -2 void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, LVector3 const &pivot, bool disable = false)
        int param1;
        PyObject *param2;
        PyObject *param3;
        PyObject *param4 = Py_False;
        static const char *keyword_list[] = {"node", "body", "pivot", "disable", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "iOO|O:append_anchor", (char **)keyword_list, &param1, &param2, &param3, &param4)) {
          BulletRigidBodyNode *param2_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_BulletRigidBodyNode, 2, "BulletSoftBodyNode.append_anchor", false, false);
          LVector3f param3_local;
          LVector3 const *param3_this = Dtool_Coerce_LVector3f(param3, param3_local);
          if (param2_this != NULL && (param3_this != NULL)) {
            (*local_this).append_anchor((int)param1, param2_this, *param3_this, (PyObject_IsTrue(param4) != 0));
            return Dtool_Return_None();
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable = false)
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "append_anchor() takes 3, 4 or 5 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "append_anchor(const BulletSoftBodyNode self, int node, BulletRigidBodyNode body)\n"
      "append_anchor(const BulletSoftBodyNode self, int node, BulletRigidBodyNode body, const LVector3f pivot, bool disable)\n"
      "append_anchor(const BulletSoftBodyNode self, int node, BulletRigidBodyNode body, bool disable)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_append_anchor_346_comment =
  "C++ Interface:\n"
  "append_anchor(const BulletSoftBodyNode self, int node, BulletRigidBodyNode body)\n"
  "append_anchor(const BulletSoftBodyNode self, int node, BulletRigidBodyNode body, const LVector3f pivot, bool disable)\n"
  "append_anchor(const BulletSoftBodyNode self, int node, BulletRigidBodyNode body, bool disable)\n"
  "\n"
  "// Anchors\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_append_anchor_346_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, LPoint3 const &pos, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0)
 * void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, int cluster, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0)
 */
static PyObject *Dtool_BulletSoftBodyNode_append_linear_joint_347(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.append_linear_joint")) {
    return NULL;
  }
  {
    // -2 void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, LPoint3 const &pos, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0)
    PyObject *param1;
    PyObject *param2;
    float param3 = 1.0;
    float param4 = 1.0;
    float param5 = 1.0;
    static const char *keyword_list[] = {"body", "pos", "erp", "cfm", "split", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "OO|fff:append_linear_joint", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5)) {
      BulletBodyNode *param1_this = (BulletBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletBodyNode, 1, "BulletSoftBodyNode.append_linear_joint", false, false);
      LPoint3 const *param2_this;
      DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_LPoint3f, (void **)&param2_this);
      if (param1_this != NULL && param2_this != NULL) {
        (*local_this).append_linear_joint(param1_this, *param2_this, (PN_stdfloat)param3, (PN_stdfloat)param4, (PN_stdfloat)param5);
        return Dtool_Return_None();
      }
    }
    PyErr_Clear();
  }

  {
    // -2 void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, int cluster, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0)
    PyObject *param1;
    int param2;
    float param3 = 1.0;
    float param4 = 1.0;
    float param5 = 1.0;
    static const char *keyword_list[] = {"body", "cluster", "erp", "cfm", "split", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "Oi|fff:append_linear_joint", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5)) {
      BulletBodyNode *param1_this = (BulletBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletBodyNode, 1, "BulletSoftBodyNode.append_linear_joint", false, false);
      if (param1_this != NULL) {
        (*local_this).append_linear_joint(param1_this, (int)param2, (PN_stdfloat)param3, (PN_stdfloat)param4, (PN_stdfloat)param5);
        return Dtool_Return_None();
      }
    }
    PyErr_Clear();
  }

  {
    // -2 void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, LPoint3 const &pos, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0)
    PyObject *param1;
    PyObject *param2;
    float param3 = 1.0;
    float param4 = 1.0;
    float param5 = 1.0;
    static const char *keyword_list[] = {"body", "pos", "erp", "cfm", "split", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "OO|fff:append_linear_joint", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5)) {
      BulletBodyNode *param1_this = (BulletBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletBodyNode, 1, "BulletSoftBodyNode.append_linear_joint", false, false);
      LPoint3f param2_local;
      LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
      if (param1_this != NULL && (param2_this != NULL)) {
        (*local_this).append_linear_joint(param1_this, *param2_this, (PN_stdfloat)param3, (PN_stdfloat)param4, (PN_stdfloat)param5);
        return Dtool_Return_None();
      }
    }
    PyErr_Clear();
  }

  // No coercion possible: void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, int cluster, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0)
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "append_linear_joint(const BulletSoftBodyNode self, BulletBodyNode body, const LPoint3f pos, float erp, float cfm, float split)\n"
      "append_linear_joint(const BulletSoftBodyNode self, BulletBodyNode body, int cluster, float erp, float cfm, float split)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_append_linear_joint_347_comment =
  "C++ Interface:\n"
  "append_linear_joint(const BulletSoftBodyNode self, BulletBodyNode body, const LPoint3f pos, float erp, float cfm, float split)\n"
  "append_linear_joint(const BulletSoftBodyNode self, BulletBodyNode body, int cluster, float erp, float cfm, float split)\n"
  "\n"
  "// Links\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_append_linear_joint_347_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyNode::append_angular_joint(BulletBodyNode *body, LVector3 const &axis, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0, BulletSoftBodyControl *control = 0)
 */
static PyObject *Dtool_BulletSoftBodyNode_append_angular_joint_348(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.append_angular_joint")) {
    return NULL;
  }
  // 1-void BulletSoftBodyNode::append_angular_joint(BulletBodyNode *body, LVector3 const &axis, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0, BulletSoftBodyControl *control = 0)
  PyObject *param1;
  PyObject *param2;
  float param3 = 1.0;
  float param4 = 1.0;
  float param5 = 1.0;
  PyObject *param6 = NULL;
  static const char *keyword_list[] = {"body", "axis", "erp", "cfm", "split", "control", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO|fffO:append_angular_joint", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5, &param6)) {
    BulletBodyNode *param1_this = (BulletBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletBodyNode, 1, "BulletSoftBodyNode.append_angular_joint", false, true);
    LVector3f param2_local;
    LVector3 const *param2_this = Dtool_Coerce_LVector3f(param2, param2_local);
    if (!(param2_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletSoftBodyNode.append_angular_joint", "LVector3f");
    }
    BulletSoftBodyControl *param6_this = 0;
    if (param6 != (PyObject *)NULL) {
      param6_this = (BulletSoftBodyControl *)DTOOL_Call_GetPointerThisClass(param6, Dtool_Ptr_BulletSoftBodyControl, 6, "BulletSoftBodyNode.append_angular_joint", false, true);
    }
    if (param1_this != NULL && (param6 == NULL || param6_this != NULL)) {
      (*local_this).append_angular_joint(param1_this, *param2_this, (PN_stdfloat)param3, (PN_stdfloat)param4, (PN_stdfloat)param5, param6_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "append_angular_joint(const BulletSoftBodyNode self, BulletBodyNode body, const LVector3f axis, float erp, float cfm, float split, BulletSoftBodyControl control)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_append_angular_joint_348_comment =
  "C++ Interface:\n"
  "append_angular_joint(const BulletSoftBodyNode self, BulletBodyNode body, const LVector3f axis, float erp, float cfm, float split, BulletSoftBodyControl control)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_append_angular_joint_348_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyNode::get_num_materials(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_num_materials_349(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletSoftBodyNode::get_num_materials(void) const
  int return_value = (*(const BulletSoftBodyNode*)local_this).get_num_materials();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_num_materials_349_comment =
  "C++ Interface:\n"
  "get_num_materials(BulletSoftBodyNode self)\n"
  "\n"
  "// Materials\n"
  "\n"
  "// Materials\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_num_materials_349_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyMaterial BulletSoftBodyNode::get_material(int idx) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_material_350(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-BulletSoftBodyMaterial BulletSoftBodyNode::get_material(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletSoftBodyMaterial *return_value = new BulletSoftBodyMaterial((*(const BulletSoftBodyNode*)local_this).get_material((int)arg_val));
    if (return_value == NULL) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyMaterial, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_material(BulletSoftBodyNode self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_material_350_comment =
  "C++ Interface:\n"
  "get_material(BulletSoftBodyNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_material_350_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyMaterial BulletSoftBodyNode::append_material(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_append_material_352(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.append_material")) {
    return NULL;
  }
  // 1-BulletSoftBodyMaterial BulletSoftBodyNode::append_material(void)
  BulletSoftBodyMaterial *return_value = new BulletSoftBodyMaterial((*local_this).append_material());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyMaterial, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_append_material_352_comment =
  "C++ Interface:\n"
  "append_material(const BulletSoftBodyNode self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_append_material_352_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyNode::get_num_nodes(void) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_num_nodes_353(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletSoftBodyNode::get_num_nodes(void) const
  int return_value = (*(const BulletSoftBodyNode*)local_this).get_num_nodes();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_num_nodes_353_comment =
  "C++ Interface:\n"
  "get_num_nodes(BulletSoftBodyNode self)\n"
  "\n"
  "// Nodes\n"
  "\n"
  "// Nodes\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_num_nodes_353_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyNodeElement BulletSoftBodyNode::get_node(int idx) const
 */
static PyObject *Dtool_BulletSoftBodyNode_get_node_354(PyObject *self, PyObject *arg) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-BulletSoftBodyNodeElement BulletSoftBodyNode::get_node(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletSoftBodyNodeElement *return_value = new BulletSoftBodyNodeElement((*(const BulletSoftBodyNode*)local_this).get_node((int)arg_val));
    if (return_value == NULL) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyNodeElement, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_node(BulletSoftBodyNode self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_node_354_comment =
  "C++ Interface:\n"
  "get_node(BulletSoftBodyNode self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_node_354_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletSoftBodyNode::get_closest_node_index(LVecBase3 point, bool local)
 */
static PyObject *Dtool_BulletSoftBodyNode_get_closest_node_index_356(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyNode, (void **)&local_this, "BulletSoftBodyNode.get_closest_node_index")) {
    return NULL;
  }
  // 1-int BulletSoftBodyNode::get_closest_node_index(LVecBase3 point, bool local)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"point", "local", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:get_closest_node_index", (char **)keyword_list, &param1, &param2)) {
    LVecBase3f param1_local;
    LVecBase3 *param1_this = Dtool_Coerce_LVecBase3f(param1, param1_local);
    if (!(param1_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.get_closest_node_index", "LVecBase3f");
    }
    int return_value = (*local_this).get_closest_node_index(*param1_this, (PyObject_IsTrue(param2) != 0));
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_closest_node_index(const BulletSoftBodyNode self, LVecBase3f point, bool local)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_closest_node_index_356_comment =
  "C++ Interface:\n"
  "get_closest_node_index(const BulletSoftBodyNode self, LVecBase3f point, bool local)\n"
  "\n"
  "/**\n"
  " * Returns the index of the node which is closest to the given point.  The\n"
  " * distance between each node and the given point is computed in world space\n"
  " * if local=false, and in local space if local=true.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_get_closest_node_index_356_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_rope(BulletSoftBodyWorldInfo &info, LPoint3 const &from, LPoint3 const &to, int res, int fixeds)
 */
static PyObject *Dtool_BulletSoftBodyNode_make_rope_357(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_rope(BulletSoftBodyWorldInfo &info, LPoint3 const &from, LPoint3 const &to, int res, int fixeds)
  PyObject *param0;
  PyObject *param1;
  PyObject *param2;
  int param3;
  int param4;
  static const char *keyword_list[] = {"info", "from", "to", "res", "fixeds", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOii:make_rope", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4)) {
    BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_rope", false, true);
    LPoint3f param1_local;
    LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
    if (!(param1_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.make_rope", "LPoint3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletSoftBodyNode.make_rope", "LPoint3f");
    }
    if (param0_this != NULL) {
      PointerTo< BulletSoftBodyNode > return_value = BulletSoftBodyNode::make_rope(*param0_this, *param1_this, *param2_this, (int)param3, (int)param4);
      if (Dtool_CheckErrorOccurred()) {
        return NULL;
      }
      // Transfer ownership of return_value.
      BulletSoftBodyNode *return_ptr = return_value.p();
      return_value.cheat() = NULL;
      if (return_ptr == NULL) {
        Py_INCREF(Py_None);
        return Py_None;
      } else {
        return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
      }
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_rope(BulletSoftBodyWorldInfo info, const LPoint3f from, const LPoint3f to, int res, int fixeds)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_make_rope_357_comment =
  "C++ Interface:\n"
  "make_rope(BulletSoftBodyWorldInfo info, const LPoint3f from, const LPoint3f to, int res, int fixeds)\n"
  "\n"
  "// Factory\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_make_rope_357_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_patch(BulletSoftBodyWorldInfo &info, LPoint3 const &corner00, LPoint3 const &corner10, LPoint3 const &corner01, LPoint3 const &corner11, int resx, int resy, int fixeds, bool gendiags)
 */
static PyObject *Dtool_BulletSoftBodyNode_make_patch_358(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_patch(BulletSoftBodyWorldInfo &info, LPoint3 const &corner00, LPoint3 const &corner10, LPoint3 const &corner01, LPoint3 const &corner11, int resx, int resy, int fixeds, bool gendiags)
  PyObject *param0;
  PyObject *param1;
  PyObject *param2;
  PyObject *param3;
  PyObject *param4;
  int param5;
  int param6;
  int param7;
  PyObject *param8;
  static const char *keyword_list[] = {"info", "corner00", "corner10", "corner01", "corner11", "resx", "resy", "fixeds", "gendiags", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOiiiO:make_patch", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4, &param5, &param6, &param7, &param8)) {
    BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_patch", false, true);
    LPoint3f param1_local;
    LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
    if (!(param1_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.make_patch", "LPoint3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletSoftBodyNode.make_patch", "LPoint3f");
    }
    LPoint3f param3_local;
    LPoint3 const *param3_this = Dtool_Coerce_LPoint3f(param3, param3_local);
    if (!(param3_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param3, 3, "BulletSoftBodyNode.make_patch", "LPoint3f");
    }
    LPoint3f param4_local;
    LPoint3 const *param4_this = Dtool_Coerce_LPoint3f(param4, param4_local);
    if (!(param4_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param4, 4, "BulletSoftBodyNode.make_patch", "LPoint3f");
    }
    if (param0_this != NULL) {
      PointerTo< BulletSoftBodyNode > return_value = BulletSoftBodyNode::make_patch(*param0_this, *param1_this, *param2_this, *param3_this, *param4_this, (int)param5, (int)param6, (int)param7, (PyObject_IsTrue(param8) != 0));
      if (Dtool_CheckErrorOccurred()) {
        return NULL;
      }
      // Transfer ownership of return_value.
      BulletSoftBodyNode *return_ptr = return_value.p();
      return_value.cheat() = NULL;
      if (return_ptr == NULL) {
        Py_INCREF(Py_None);
        return Py_None;
      } else {
        return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
      }
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_patch(BulletSoftBodyWorldInfo info, const LPoint3f corner00, const LPoint3f corner10, const LPoint3f corner01, const LPoint3f corner11, int resx, int resy, int fixeds, bool gendiags)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_make_patch_358_comment =
  "C++ Interface:\n"
  "make_patch(BulletSoftBodyWorldInfo info, const LPoint3f corner00, const LPoint3f corner10, const LPoint3f corner01, const LPoint3f corner11, int resx, int resy, int fixeds, bool gendiags)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_make_patch_358_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_ellipsoid(BulletSoftBodyWorldInfo &info, LPoint3 const &center, LVecBase3 const &radius, int res)
 */
static PyObject *Dtool_BulletSoftBodyNode_make_ellipsoid_359(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_ellipsoid(BulletSoftBodyWorldInfo &info, LPoint3 const &center, LVecBase3 const &radius, int res)
  PyObject *param0;
  PyObject *param1;
  PyObject *param2;
  int param3;
  static const char *keyword_list[] = {"info", "center", "radius", "res", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOi:make_ellipsoid", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
    BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_ellipsoid", false, true);
    LPoint3f param1_local;
    LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
    if (!(param1_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.make_ellipsoid", "LPoint3f");
    }
    LVecBase3f param2_local;
    LVecBase3 const *param2_this = Dtool_Coerce_LVecBase3f(param2, param2_local);
    if (!(param2_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletSoftBodyNode.make_ellipsoid", "LVecBase3f");
    }
    if (param0_this != NULL) {
      PointerTo< BulletSoftBodyNode > return_value = BulletSoftBodyNode::make_ellipsoid(*param0_this, *param1_this, *param2_this, (int)param3);
      if (Dtool_CheckErrorOccurred()) {
        return NULL;
      }
      // Transfer ownership of return_value.
      BulletSoftBodyNode *return_ptr = return_value.p();
      return_value.cheat() = NULL;
      if (return_ptr == NULL) {
        Py_INCREF(Py_None);
        return Py_None;
      } else {
        return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
      }
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_ellipsoid(BulletSoftBodyWorldInfo info, const LPoint3f center, const LVecBase3f radius, int res)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_make_ellipsoid_359_comment =
  "C++ Interface:\n"
  "make_ellipsoid(BulletSoftBodyWorldInfo info, const LPoint3f center, const LVecBase3f radius, int res)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_make_ellipsoid_359_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints = true)
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool randomizeConstraints = true)
 */
static PyObject *Dtool_BulletSoftBodyNode_make_tri_mesh_360(PyObject *, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"info", "geom", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:make_tri_mesh", (char **)keyword_list, &param0, &param1)) {
        BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tri_mesh", false, true);
        Geom const *param1_this = (Geom *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_Geom, 1, "BulletSoftBodyNode.make_tri_mesh", true, true);
        if (param0_this != NULL && param1_this != NULL) {
          PointerTo< BulletSoftBodyNode > return_value = BulletSoftBodyNode::make_tri_mesh(*param0_this, param1_this);
          if (Dtool_CheckErrorOccurred()) {
            return NULL;
          }
          // Transfer ownership of return_value.
          BulletSoftBodyNode *return_ptr = return_value.p();
          return_value.cheat() = NULL;
          if (return_ptr == NULL) {
            Py_INCREF(Py_None);
            return Py_None;
          } else {
            return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
          }
        }
      }
    }
    break;
  case 3:
  case 4:
    {
      {
        // -2 static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool randomizeConstraints = true)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3 = Py_True;
        static const char *keyword_list[] = {"info", "points", "indices", "randomizeConstraints", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO|O:make_tri_mesh", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tri_mesh", false, false);
          PTA_LVecBase3 *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_PointerToArray_LVecBase3f, (void **)&param1_this);
          PTA_int *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_PointerToArray_int, (void **)&param2_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL) {
            PointerTo< BulletSoftBodyNode > return_value = BulletSoftBodyNode::make_tri_mesh(*param0_this, *param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
            if (Dtool_CheckErrorOccurred()) {
              return NULL;
            }
            // Transfer ownership of return_value.
            BulletSoftBodyNode *return_ptr = return_value.p();
            return_value.cheat() = NULL;
            if (return_ptr == NULL) {
              Py_INCREF(Py_None);
              return Py_None;
            } else {
              return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
            }
          }
        }
        PyErr_Clear();
      }

      {
        // -2 static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints = true)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        static const char *keyword_list[] = {"info", "geom", "randomizeConstraints", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:make_tri_mesh", (char **)keyword_list, &param0, &param1, &param2)) {
          BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tri_mesh", false, false);
          Geom const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_Geom, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            PointerTo< BulletSoftBodyNode > return_value = BulletSoftBodyNode::make_tri_mesh(*param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
            if (Dtool_CheckErrorOccurred()) {
              return NULL;
            }
            // Transfer ownership of return_value.
            BulletSoftBodyNode *return_ptr = return_value.p();
            return_value.cheat() = NULL;
            if (return_ptr == NULL) {
              Py_INCREF(Py_None);
              return Py_None;
            } else {
              return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
            }
          }
        }
        PyErr_Clear();
      }

      {
        // -2 static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool randomizeConstraints = true)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3 = Py_True;
        static const char *keyword_list[] = {"info", "points", "indices", "randomizeConstraints", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO|O:make_tri_mesh", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tri_mesh", false, false);
          PointerToArray< LVecBase3f > param1_local;
          PTA_LVecBase3 *param1_this = Dtool_Coerce_PointerToArray_LVecBase3f(param1, param1_local);
          PointerToArray< int > param2_local;
          PTA_int *param2_this = Dtool_Coerce_PointerToArray_int(param2, param2_local);
          if (param0_this != NULL && (param1_this != NULL) && (param2_this != NULL)) {
            PointerTo< BulletSoftBodyNode > return_value = BulletSoftBodyNode::make_tri_mesh(*param0_this, *param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
            if (Dtool_CheckErrorOccurred()) {
              return NULL;
            }
            // Transfer ownership of return_value.
            BulletSoftBodyNode *return_ptr = return_value.p();
            return_value.cheat() = NULL;
            if (return_ptr == NULL) {
              Py_INCREF(Py_None);
              return Py_None;
            } else {
              return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
            }
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints = true)
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "make_tri_mesh() takes 2, 3 or 4 arguments (%d given)",
                        parameter_count);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_tri_mesh(BulletSoftBodyWorldInfo info, const Geom geom)\n"
      "make_tri_mesh(BulletSoftBodyWorldInfo info, PointerToArray points, PointerToArray indices, bool randomizeConstraints)\n"
      "make_tri_mesh(BulletSoftBodyWorldInfo info, const Geom geom, bool randomizeConstraints)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_make_tri_mesh_360_comment =
  "C++ Interface:\n"
  "make_tri_mesh(BulletSoftBodyWorldInfo info, const Geom geom)\n"
  "make_tri_mesh(BulletSoftBodyWorldInfo info, PointerToArray points, PointerToArray indices, bool randomizeConstraints)\n"
  "make_tri_mesh(BulletSoftBodyWorldInfo info, const Geom geom, bool randomizeConstraints)\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_make_tri_mesh_360_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks = true)
 * static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, char const *ele, char const *face, char const *node)
 */
static PyObject *Dtool_BulletSoftBodyNode_make_tet_mesh_361(PyObject *, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 3:
    {
      // 1-static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      static const char *keyword_list[] = {"info", "points", "indices", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:make_tet_mesh", (char **)keyword_list, &param0, &param1, &param2)) {
        BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tet_mesh", false, true);
        PointerToArray< LVecBase3f > param1_local;
        PTA_LVecBase3 *param1_this = Dtool_Coerce_PointerToArray_LVecBase3f(param1, param1_local);
        if (!(param1_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param1, 1, "BulletSoftBodyNode.make_tet_mesh", "PointerToArray");
        }
        PointerToArray< int > param2_local;
        PTA_int *param2_this = Dtool_Coerce_PointerToArray_int(param2, param2_local);
        if (!(param2_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param2, 2, "BulletSoftBodyNode.make_tet_mesh", "PointerToArray");
        }
        if (param0_this != NULL) {
          PointerTo< BulletSoftBodyNode > return_value = BulletSoftBodyNode::make_tet_mesh(*param0_this, *param1_this, *param2_this);
          if (Dtool_CheckErrorOccurred()) {
            return NULL;
          }
          // Transfer ownership of return_value.
          BulletSoftBodyNode *return_ptr = return_value.p();
          return_value.cheat() = NULL;
          if (return_ptr == NULL) {
            Py_INCREF(Py_None);
            return Py_None;
          } else {
            return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
          }
        }
      }
    }
    break;
  case 4:
    {
      {
        // -2 static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        static const char *keyword_list[] = {"info", "points", "indices", "tetralinks", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:make_tet_mesh", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tet_mesh", false, false);
          PTA_LVecBase3 *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_PointerToArray_LVecBase3f, (void **)&param1_this);
          PTA_int *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_PointerToArray_int, (void **)&param2_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL) {
            PointerTo< BulletSoftBodyNode > return_value = BulletSoftBodyNode::make_tet_mesh(*param0_this, *param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
            if (Dtool_CheckErrorOccurred()) {
              return NULL;
            }
            // Transfer ownership of return_value.
            BulletSoftBodyNode *return_ptr = return_value.p();
            return_value.cheat() = NULL;
            if (return_ptr == NULL) {
              Py_INCREF(Py_None);
              return Py_None;
            } else {
              return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
            }
          }
        }
        PyErr_Clear();
      }

      {
        // -2 static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, char const *ele, char const *face, char const *node)
        PyObject *param0;
        char const *param1;
        char const *param2;
        char const *param3;
        static const char *keyword_list[] = {"info", "ele", "face", "node", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "Ozzz:make_tet_mesh", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tet_mesh", false, false);
          if (param0_this != NULL) {
            PointerTo< BulletSoftBodyNode > return_value = BulletSoftBodyNode::make_tet_mesh(*param0_this, (char const *)param1, (char const *)param2, (char const *)param3);
            if (Dtool_CheckErrorOccurred()) {
              return NULL;
            }
            // Transfer ownership of return_value.
            BulletSoftBodyNode *return_ptr = return_value.p();
            return_value.cheat() = NULL;
            if (return_ptr == NULL) {
              Py_INCREF(Py_None);
              return Py_None;
            } else {
              return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
            }
          }
        }
        PyErr_Clear();
      }

      {
        // -2 static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        static const char *keyword_list[] = {"info", "points", "indices", "tetralinks", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:make_tet_mesh", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletSoftBodyWorldInfo *param0_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyNode.make_tet_mesh", false, false);
          PointerToArray< LVecBase3f > param1_local;
          PTA_LVecBase3 *param1_this = Dtool_Coerce_PointerToArray_LVecBase3f(param1, param1_local);
          PointerToArray< int > param2_local;
          PTA_int *param2_this = Dtool_Coerce_PointerToArray_int(param2, param2_local);
          if (param0_this != NULL && (param1_this != NULL) && (param2_this != NULL)) {
            PointerTo< BulletSoftBodyNode > return_value = BulletSoftBodyNode::make_tet_mesh(*param0_this, *param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
            if (Dtool_CheckErrorOccurred()) {
              return NULL;
            }
            // Transfer ownership of return_value.
            BulletSoftBodyNode *return_ptr = return_value.p();
            return_value.cheat() = NULL;
            if (return_ptr == NULL) {
              Py_INCREF(Py_None);
              return Py_None;
            } else {
              return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_ptr->as_typed_object()->get_type_index());
            }
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, char const *ele, char const *face, char const *node)
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "make_tet_mesh() takes 3 or 4 arguments (%d given)",
                        parameter_count);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_tet_mesh(BulletSoftBodyWorldInfo info, PointerToArray points, PointerToArray indices)\n"
      "make_tet_mesh(BulletSoftBodyWorldInfo info, PointerToArray points, PointerToArray indices, bool tetralinks)\n"
      "make_tet_mesh(BulletSoftBodyWorldInfo info, str ele, str face, str node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_make_tet_mesh_361_comment =
  "C++ Interface:\n"
  "make_tet_mesh(BulletSoftBodyWorldInfo info, PointerToArray points, PointerToArray indices)\n"
  "make_tet_mesh(BulletSoftBodyWorldInfo info, PointerToArray points, PointerToArray indices, bool tetralinks)\n"
  "make_tet_mesh(BulletSoftBodyWorldInfo info, str ele, str face, str node)\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyNode_make_tet_mesh_361_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletSoftBodyNode::get_class_type(void)
 */
static PyObject *Dtool_BulletSoftBodyNode_get_class_type_362(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletSoftBodyNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletSoftBodyNode::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyNode_get_class_type_362_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletSoftBodyNode_get_class_type_362_comment = NULL;
#endif

static int Dtool_Init_BulletSoftBodyNode(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletSoftBodyNode_get_materials(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_materials();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletSoftBodyNode_get_material_350(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletSoftBodyNode_get_nodes(PyObject *self, PyObject *) {
  BulletSoftBodyNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyNode, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_nodes();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletSoftBodyNode_get_node_354(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletSoftBodyNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletSoftBodyNode) {
    printf("BulletSoftBodyNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletSoftBodyNode *local_this = (BulletSoftBodyNode *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletSoftBodyNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletBodyNode) {
    return (BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *)(BulletBodyNode *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletSoftBodyNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletBodyNode) {
    BulletBodyNode* other_this = (BulletBodyNode*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletSoftBodyNode*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletVehicleTuning
 */
/**
 * Python function wrapper for:
 * inline void BulletVehicleTuning::set_suspension_stiffness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletVehicleTuning_set_suspension_stiffness_364(PyObject *self, PyObject *arg) {
  BulletVehicleTuning *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.set_suspension_stiffness")) {
    return NULL;
  }
  // 1-inline void BulletVehicleTuning::set_suspension_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_suspension_stiffness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_suspension_stiffness(const BulletVehicleTuning self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_set_suspension_stiffness_364_comment =
  "C++ Interface:\n"
  "set_suspension_stiffness(const BulletVehicleTuning self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_set_suspension_stiffness_364_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletVehicleTuning::set_suspension_compression(PN_stdfloat value)
 */
static PyObject *Dtool_BulletVehicleTuning_set_suspension_compression_365(PyObject *self, PyObject *arg) {
  BulletVehicleTuning *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.set_suspension_compression")) {
    return NULL;
  }
  // 1-inline void BulletVehicleTuning::set_suspension_compression(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_suspension_compression((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_suspension_compression(const BulletVehicleTuning self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_set_suspension_compression_365_comment =
  "C++ Interface:\n"
  "set_suspension_compression(const BulletVehicleTuning self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_set_suspension_compression_365_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletVehicleTuning::set_suspension_damping(PN_stdfloat value)
 */
static PyObject *Dtool_BulletVehicleTuning_set_suspension_damping_366(PyObject *self, PyObject *arg) {
  BulletVehicleTuning *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.set_suspension_damping")) {
    return NULL;
  }
  // 1-inline void BulletVehicleTuning::set_suspension_damping(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_suspension_damping((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_suspension_damping(const BulletVehicleTuning self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_set_suspension_damping_366_comment =
  "C++ Interface:\n"
  "set_suspension_damping(const BulletVehicleTuning self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_set_suspension_damping_366_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletVehicleTuning::set_max_suspension_travel_cm(PN_stdfloat value)
 */
static PyObject *Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_367(PyObject *self, PyObject *arg) {
  BulletVehicleTuning *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.set_max_suspension_travel_cm")) {
    return NULL;
  }
  // 1-inline void BulletVehicleTuning::set_max_suspension_travel_cm(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_suspension_travel_cm((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_suspension_travel_cm(const BulletVehicleTuning self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_367_comment =
  "C++ Interface:\n"
  "set_max_suspension_travel_cm(const BulletVehicleTuning self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_367_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletVehicleTuning::set_friction_slip(PN_stdfloat value)
 */
static PyObject *Dtool_BulletVehicleTuning_set_friction_slip_368(PyObject *self, PyObject *arg) {
  BulletVehicleTuning *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.set_friction_slip")) {
    return NULL;
  }
  // 1-inline void BulletVehicleTuning::set_friction_slip(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_friction_slip((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_friction_slip(const BulletVehicleTuning self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_set_friction_slip_368_comment =
  "C++ Interface:\n"
  "set_friction_slip(const BulletVehicleTuning self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_set_friction_slip_368_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletVehicleTuning::set_max_suspension_force(PN_stdfloat value)
 */
static PyObject *Dtool_BulletVehicleTuning_set_max_suspension_force_369(PyObject *self, PyObject *arg) {
  BulletVehicleTuning *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicleTuning, (void **)&local_this, "BulletVehicleTuning.set_max_suspension_force")) {
    return NULL;
  }
  // 1-inline void BulletVehicleTuning::set_max_suspension_force(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_suspension_force((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_suspension_force(const BulletVehicleTuning self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_set_max_suspension_force_369_comment =
  "C++ Interface:\n"
  "set_max_suspension_force(const BulletVehicleTuning self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_set_max_suspension_force_369_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletVehicleTuning::get_suspension_stiffness(void) const
 */
static PyObject *Dtool_BulletVehicleTuning_get_suspension_stiffness_370(PyObject *self, PyObject *) {
  BulletVehicleTuning *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicleTuning, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletVehicleTuning::get_suspension_stiffness(void) const
  PN_stdfloat return_value = (*(const BulletVehicleTuning*)local_this).get_suspension_stiffness();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_get_suspension_stiffness_370_comment =
  "C++ Interface:\n"
  "get_suspension_stiffness(BulletVehicleTuning self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_get_suspension_stiffness_370_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletVehicleTuning::get_suspension_compression(void) const
 */
static PyObject *Dtool_BulletVehicleTuning_get_suspension_compression_371(PyObject *self, PyObject *) {
  BulletVehicleTuning *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicleTuning, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletVehicleTuning::get_suspension_compression(void) const
  PN_stdfloat return_value = (*(const BulletVehicleTuning*)local_this).get_suspension_compression();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_get_suspension_compression_371_comment =
  "C++ Interface:\n"
  "get_suspension_compression(BulletVehicleTuning self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_get_suspension_compression_371_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletVehicleTuning::get_suspension_damping(void) const
 */
static PyObject *Dtool_BulletVehicleTuning_get_suspension_damping_372(PyObject *self, PyObject *) {
  BulletVehicleTuning *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicleTuning, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletVehicleTuning::get_suspension_damping(void) const
  PN_stdfloat return_value = (*(const BulletVehicleTuning*)local_this).get_suspension_damping();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_get_suspension_damping_372_comment =
  "C++ Interface:\n"
  "get_suspension_damping(BulletVehicleTuning self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_get_suspension_damping_372_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletVehicleTuning::get_max_suspension_travel_cm(void) const
 */
static PyObject *Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_373(PyObject *self, PyObject *) {
  BulletVehicleTuning *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicleTuning, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletVehicleTuning::get_max_suspension_travel_cm(void) const
  PN_stdfloat return_value = (*(const BulletVehicleTuning*)local_this).get_max_suspension_travel_cm();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_373_comment =
  "C++ Interface:\n"
  "get_max_suspension_travel_cm(BulletVehicleTuning self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_373_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletVehicleTuning::get_friction_slip(void) const
 */
static PyObject *Dtool_BulletVehicleTuning_get_friction_slip_374(PyObject *self, PyObject *) {
  BulletVehicleTuning *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicleTuning, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletVehicleTuning::get_friction_slip(void) const
  PN_stdfloat return_value = (*(const BulletVehicleTuning*)local_this).get_friction_slip();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_get_friction_slip_374_comment =
  "C++ Interface:\n"
  "get_friction_slip(BulletVehicleTuning self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_get_friction_slip_374_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletVehicleTuning::get_max_suspension_force(void) const
 */
static PyObject *Dtool_BulletVehicleTuning_get_max_suspension_force_375(PyObject *self, PyObject *) {
  BulletVehicleTuning *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicleTuning, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletVehicleTuning::get_max_suspension_force(void) const
  PN_stdfloat return_value = (*(const BulletVehicleTuning*)local_this).get_max_suspension_force();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicleTuning_get_max_suspension_force_375_comment =
  "C++ Interface:\n"
  "get_max_suspension_force(BulletVehicleTuning self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicleTuning_get_max_suspension_force_375_comment = NULL;
#endif

static int Dtool_Init_BulletVehicleTuning(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletVehicleTuning(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletVehicleTuning) {
    printf("BulletVehicleTuning ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletVehicleTuning *local_this = (BulletVehicleTuning *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletVehicleTuning) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletVehicleTuning(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletVehicleTuning) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletVehicle
 */
/**
 * Python function wrapper for:
 * void BulletVehicle::set_coordinate_system(BulletUpAxis up)
 */
static PyObject *Dtool_BulletVehicle_set_coordinate_system_379(PyObject *self, PyObject *arg) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.set_coordinate_system")) {
    return NULL;
  }
  // 1-void BulletVehicle::set_coordinate_system(BulletUpAxis up)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    (*local_this).set_coordinate_system((BulletUpAxis)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_coordinate_system(const BulletVehicle self, int up)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_set_coordinate_system_379_comment =
  "C++ Interface:\n"
  "set_coordinate_system(const BulletVehicle self, int up)\n"
  "\n"
  "/**\n"
  " * Specifies which axis is \"up\". Nessecary for the vehicle's suspension to\n"
  " * work properly!\n"
  " */";
#else
static const char *Dtool_BulletVehicle_set_coordinate_system_379_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicle::set_steering_value(PN_stdfloat steering, int idx)
 */
static PyObject *Dtool_BulletVehicle_set_steering_value_380(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.set_steering_value")) {
    return NULL;
  }
  // 1-void BulletVehicle::set_steering_value(PN_stdfloat steering, int idx)
  float param1;
  int param2;
  static const char *keyword_list[] = {"steering", "idx", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "fi:set_steering_value", (char **)keyword_list, &param1, &param2)) {
    (*local_this).set_steering_value((PN_stdfloat)param1, (int)param2);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_steering_value(const BulletVehicle self, float steering, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_set_steering_value_380_comment =
  "C++ Interface:\n"
  "set_steering_value(const BulletVehicle self, float steering, int idx)\n"
  "\n"
  "/**\n"
  " * Sets the steering value (in degrees) of the wheel with index idx.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_set_steering_value_380_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicle::set_brake(PN_stdfloat brake, int idx)
 */
static PyObject *Dtool_BulletVehicle_set_brake_381(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.set_brake")) {
    return NULL;
  }
  // 1-void BulletVehicle::set_brake(PN_stdfloat brake, int idx)
  float param1;
  int param2;
  static const char *keyword_list[] = {"brake", "idx", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "fi:set_brake", (char **)keyword_list, &param1, &param2)) {
    (*local_this).set_brake((PN_stdfloat)param1, (int)param2);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_brake(const BulletVehicle self, float brake, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_set_brake_381_comment =
  "C++ Interface:\n"
  "set_brake(const BulletVehicle self, float brake, int idx)\n"
  "\n"
  "/**\n"
  " * Applies braking force to the wheel with index idx.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_set_brake_381_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicle::set_pitch_control(PN_stdfloat pitch)
 */
static PyObject *Dtool_BulletVehicle_set_pitch_control_382(PyObject *self, PyObject *arg) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.set_pitch_control")) {
    return NULL;
  }
  // 1-void BulletVehicle::set_pitch_control(PN_stdfloat pitch)
  if (PyNumber_Check(arg)) {
    (*local_this).set_pitch_control((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_pitch_control(const BulletVehicle self, float pitch)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_set_pitch_control_382_comment =
  "C++ Interface:\n"
  "set_pitch_control(const BulletVehicle self, float pitch)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletVehicle_set_pitch_control_382_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletRigidBodyNode *BulletVehicle::get_chassis(void)
 */
static PyObject *Dtool_BulletVehicle_get_chassis_383(PyObject *self, PyObject *) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.get_chassis")) {
    return NULL;
  }
  // 1-BulletRigidBodyNode *BulletVehicle::get_chassis(void)
  BulletRigidBodyNode *return_value = (*local_this).get_chassis();
  if (return_value != (BulletRigidBodyNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletRigidBodyNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletRigidBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_chassis_383_comment =
  "C++ Interface:\n"
  "get_chassis(const BulletVehicle self)\n"
  "\n"
  "/**\n"
  " * Returns the chassis of this vehicle.  The chassis is a rigid body node.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_chassis_383_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletVehicle::get_current_speed_km_hour(void) const
 */
static PyObject *Dtool_BulletVehicle_get_current_speed_km_hour_384(PyObject *self, PyObject *) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicle, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletVehicle::get_current_speed_km_hour(void) const
  PN_stdfloat return_value = (*(const BulletVehicle*)local_this).get_current_speed_km_hour();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_current_speed_km_hour_384_comment =
  "C++ Interface:\n"
  "get_current_speed_km_hour(BulletVehicle self)\n"
  "\n"
  "/**\n"
  " * Returns the current speed in kilometers per hour.  Convert to miles using:\n"
  " * km/h * 0.62 = mph\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_current_speed_km_hour_384_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletVehicle::get_steering_value(int idx) const
 */
static PyObject *Dtool_BulletVehicle_get_steering_value_385(PyObject *self, PyObject *arg) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicle, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletVehicle::get_steering_value(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    PN_stdfloat return_value = (*(const BulletVehicle*)local_this).get_steering_value((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_steering_value(BulletVehicle self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_steering_value_385_comment =
  "C++ Interface:\n"
  "get_steering_value(BulletVehicle self, int idx)\n"
  "\n"
  "/**\n"
  " * Returns the steering angle of the wheel with index idx in degrees.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_steering_value_385_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletVehicle::get_forward_vector(void) const
 */
static PyObject *Dtool_BulletVehicle_get_forward_vector_386(PyObject *self, PyObject *) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicle, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletVehicle::get_forward_vector(void) const
  LVector3 *return_value = new LVector3((*(const BulletVehicle*)local_this).get_forward_vector());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_forward_vector_386_comment =
  "C++ Interface:\n"
  "get_forward_vector(BulletVehicle self)\n"
  "\n"
  "/**\n"
  " * Returns the forward vector representing the car's actual direction of\n"
  " * movement.  The forward vetcor is given in global coordinates.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_forward_vector_386_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicle::reset_suspension(void)
 */
static PyObject *Dtool_BulletVehicle_reset_suspension_387(PyObject *self, PyObject *) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.reset_suspension")) {
    return NULL;
  }
  // 1-void BulletVehicle::reset_suspension(void)
  (*local_this).reset_suspension();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_reset_suspension_387_comment =
  "C++ Interface:\n"
  "reset_suspension(const BulletVehicle self)\n"
  "\n"
  "/**\n"
  " * Resets the vehicle's suspension.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_reset_suspension_387_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletVehicle::apply_engine_force(PN_stdfloat force, int idx)
 */
static PyObject *Dtool_BulletVehicle_apply_engine_force_388(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.apply_engine_force")) {
    return NULL;
  }
  // 1-void BulletVehicle::apply_engine_force(PN_stdfloat force, int idx)
  float param1;
  int param2;
  static const char *keyword_list[] = {"force", "idx", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "fi:apply_engine_force", (char **)keyword_list, &param1, &param2)) {
    (*local_this).apply_engine_force((PN_stdfloat)param1, (int)param2);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "apply_engine_force(const BulletVehicle self, float force, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_apply_engine_force_388_comment =
  "C++ Interface:\n"
  "apply_engine_force(const BulletVehicle self, float force, int idx)\n"
  "\n"
  "/**\n"
  " * Applies force at the wheel with index idx for acceleration.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_apply_engine_force_388_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletWheel BulletVehicle::create_wheel(void)
 */
static PyObject *Dtool_BulletVehicle_create_wheel_389(PyObject *self, PyObject *) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.create_wheel")) {
    return NULL;
  }
  // 1-BulletWheel BulletVehicle::create_wheel(void)
  BulletWheel *return_value = new BulletWheel((*local_this).create_wheel());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletWheel, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_create_wheel_389_comment =
  "C++ Interface:\n"
  "create_wheel(const BulletVehicle self)\n"
  "\n"
  "// Wheels\n"
  "\n"
  "/**\n"
  " * Factory method for creating wheels for this vehicle instance.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_create_wheel_389_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletVehicle::get_num_wheels(void) const
 */
static PyObject *Dtool_BulletVehicle_get_num_wheels_390(PyObject *self, PyObject *) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicle, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletVehicle::get_num_wheels(void) const
  int return_value = (*(const BulletVehicle*)local_this).get_num_wheels();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_num_wheels_390_comment =
  "C++ Interface:\n"
  "get_num_wheels(BulletVehicle self)\n"
  "\n"
  "/**\n"
  " * Returns the number of wheels this vehicle has.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_num_wheels_390_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletWheel BulletVehicle::get_wheel(int idx) const
 */
static PyObject *Dtool_BulletVehicle_get_wheel_391(PyObject *self, PyObject *arg) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicle, (void **)&local_this)) {
    return NULL;
  }
  // 1-BulletWheel BulletVehicle::get_wheel(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletWheel *return_value = new BulletWheel((*(const BulletVehicle*)local_this).get_wheel((int)arg_val));
    if (return_value == NULL) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletWheel, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_wheel(BulletVehicle self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_wheel_391_comment =
  "C++ Interface:\n"
  "get_wheel(BulletVehicle self, int idx)\n"
  "\n"
  "/**\n"
  " * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is\n"
  " * equal or larger than the number of wheels.\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_wheel_391_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletVehicleTuning &BulletVehicle::get_tuning(void)
 */
static PyObject *Dtool_BulletVehicle_get_tuning_393(PyObject *self, PyObject *) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletVehicle, (void **)&local_this, "BulletVehicle.get_tuning")) {
    return NULL;
  }
  // 1-inline BulletVehicleTuning &BulletVehicle::get_tuning(void)
  BulletVehicleTuning *return_value = &((*local_this).get_tuning());
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletVehicleTuning, false, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_tuning_393_comment =
  "C++ Interface:\n"
  "get_tuning(const BulletVehicle self)\n"
  "\n"
  "// Tuning\n"
  "\n"
  "/**\n"
  " * Returns a reference to the BulletVehicleTuning object of this vehicle which\n"
  " * offers various vehicle-global tuning options.  Make sure to configure this\n"
  " * before adding wheels!\n"
  " */";
#else
static const char *Dtool_BulletVehicle_get_tuning_393_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletVehicle::get_class_type(void)
 */
static PyObject *Dtool_BulletVehicle_get_class_type_394(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletVehicle::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletVehicle::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletVehicle_get_class_type_394_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletVehicle_get_class_type_394_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis)
 */
static int Dtool_Init_BulletVehicle(PyObject *self, PyObject *args, PyObject *kwds) {
  // 1-BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis)
  PyObject *param0;
  PyObject *param1;
  static const char *keyword_list[] = {"world", "chassis", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletVehicle", (char **)keyword_list, &param0, &param1)) {
    BulletWorld *param0_this = (BulletWorld *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletWorld, 0, "BulletVehicle.BulletVehicle", false, true);
    BulletRigidBodyNode *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletVehicle.BulletVehicle", false, true);
    if (param0_this != NULL && param1_this != NULL) {
      BulletVehicle *return_value = new BulletVehicle(param0_this, param1_this);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletVehicle, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletVehicle(BulletWorld world, BulletRigidBodyNode chassis)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletVehicle(PyObject *args, CPT(BulletVehicle) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletVehicle, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 2) {
      // 1-BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis)
      PyObject *param0;
      PyObject *param1;
      if (PyArg_UnpackTuple(args, "BulletVehicle", 2, 2, &param0, &param1)) {
        BulletWorld *param0_this = (BulletWorld *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletWorld, 0, "BulletVehicle.BulletVehicle", false, false);
        BulletRigidBodyNode *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletVehicle.BulletVehicle", false, false);
        if (param0_this != NULL && param1_this != NULL) {
          BulletVehicle *return_value = new BulletVehicle(param0_this, param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

bool Dtool_Coerce_BulletVehicle(PyObject *args, PT(BulletVehicle) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletVehicle, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 2) {
      // 1-BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis)
      PyObject *param0;
      PyObject *param1;
      if (PyArg_UnpackTuple(args, "BulletVehicle", 2, 2, &param0, &param1)) {
        BulletWorld *param0_this = (BulletWorld *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletWorld, 0, "BulletVehicle.BulletVehicle", false, false);
        BulletRigidBodyNode *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletVehicle.BulletVehicle", false, false);
        if (param0_this != NULL && param1_this != NULL) {
          BulletVehicle *return_value = new BulletVehicle(param0_this, param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletVehicle_get_wheels(PyObject *self, PyObject *) {
  BulletVehicle *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletVehicle, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_wheels();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletVehicle_get_wheel_391(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletVehicle(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletVehicle) {
    printf("BulletVehicle ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletVehicle *local_this = (BulletVehicle *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletVehicle) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletVehicle(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletVehicle) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletVehicle*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletVehicle*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletVehicle*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletWorld
 */
/**
 * Python function wrapper for:
 * void BulletWorld::set_gravity(LVector3 const &gravity)
 * void BulletWorld::set_gravity(PN_stdfloat gx, PN_stdfloat gy, PN_stdfloat gz)
 */
static PyObject *Dtool_BulletWorld_set_gravity_397(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_gravity")) {
    return NULL;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "gravity");
      }
      if (arg == (PyObject *)NULL) {
        return Dtool_Raise_TypeError("Required argument 'gravity' (pos 1) not found");
      }
      // 1-void BulletWorld::set_gravity(LVector3 const &gravity)
      LVector3f arg_local;
      LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
      if (!(arg_this != NULL)) {
        return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.set_gravity", "LVector3f");
      }
      (*local_this).set_gravity(*arg_this);
      return Dtool_Return_None();
    }
    break;
  case 3:
    {
      // 1-void BulletWorld::set_gravity(PN_stdfloat gx, PN_stdfloat gy, PN_stdfloat gz)
      float param1;
      float param2;
      float param3;
      static const char *keyword_list[] = {"gx", "gy", "gz", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "fff:set_gravity", (char **)keyword_list, &param1, &param2, &param3)) {
        (*local_this).set_gravity((PN_stdfloat)param1, (PN_stdfloat)param2, (PN_stdfloat)param3);
        return Dtool_Return_None();
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "set_gravity() takes 2 or 4 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_gravity(const BulletWorld self, const LVector3f gravity)\n"
      "set_gravity(const BulletWorld self, float gx, float gy, float gz)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_gravity_397_comment =
  "C++ Interface:\n"
  "set_gravity(const BulletWorld self, const LVector3f gravity)\n"
  "set_gravity(const BulletWorld self, float gx, float gy, float gz)\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_gravity_397_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 const BulletWorld::get_gravity(void) const
 */
static PyObject *Dtool_BulletWorld_get_gravity_398(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 const BulletWorld::get_gravity(void) const
  LVector3 const *return_value = new LVector3 const((*(const BulletWorld*)local_this).get_gravity());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, true);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_gravity_398_comment =
  "C++ Interface:\n"
  "get_gravity(BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_gravity_398_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletWorld::do_physics(PN_stdfloat dt, int max_substeps = 1, PN_stdfloat stepsize = (1.0 / 60.0))
 */
static PyObject *Dtool_BulletWorld_do_physics_399(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.do_physics")) {
    return NULL;
  }
  // 1-int BulletWorld::do_physics(PN_stdfloat dt, int max_substeps = 1, PN_stdfloat stepsize = (1.0 / 60.0))
  float param1;
  int param2 = 1;
  float param3 = (1.0 / 60.0);
  static const char *keyword_list[] = {"dt", "max_substeps", "stepsize", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "f|if:do_physics", (char **)keyword_list, &param1, &param2, &param3)) {
    int return_value = (*local_this).do_physics((PN_stdfloat)param1, (int)param2, (PN_stdfloat)param3);
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "do_physics(const BulletWorld self, float dt, int max_substeps, float stepsize)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_do_physics_399_comment =
  "C++ Interface:\n"
  "do_physics(const BulletWorld self, float dt, int max_substeps, float stepsize)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_do_physics_399_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyWorldInfo BulletWorld::get_world_info(void)
 */
static PyObject *Dtool_BulletWorld_get_world_info_400(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.get_world_info")) {
    return NULL;
  }
  // 1-BulletSoftBodyWorldInfo BulletWorld::get_world_info(void)
  BulletSoftBodyWorldInfo *return_value = new BulletSoftBodyWorldInfo((*local_this).get_world_info());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyWorldInfo, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_world_info_400_comment =
  "C++ Interface:\n"
  "get_world_info(const BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_world_info_400_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletWorld::set_debug_node(BulletDebugNode *node)
 */
static PyObject *Dtool_BulletWorld_set_debug_node_401(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_debug_node")) {
    return NULL;
  }
  // 1-inline void BulletWorld::set_debug_node(BulletDebugNode *node)
  PT(BulletDebugNode) arg_this;
  if (!Dtool_Coerce_BulletDebugNode(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.set_debug_node", "BulletDebugNode");
  }
  (*local_this).set_debug_node(MOVE(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_debug_node(const BulletWorld self, BulletDebugNode node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_debug_node_401_comment =
  "C++ Interface:\n"
  "set_debug_node(const BulletWorld self, BulletDebugNode node)\n"
  "\n"
  "// Debug\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_debug_node_401_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletWorld::clear_debug_node(void)
 */
static PyObject *Dtool_BulletWorld_clear_debug_node_402(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.clear_debug_node")) {
    return NULL;
  }
  // 1-inline void BulletWorld::clear_debug_node(void)
  (*local_this).clear_debug_node();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_clear_debug_node_402_comment =
  "C++ Interface:\n"
  "clear_debug_node(const BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_clear_debug_node_402_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletDebugNode *BulletWorld::get_debug_node(void) const
 */
static PyObject *Dtool_BulletWorld_get_debug_node_403(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline BulletDebugNode *BulletWorld::get_debug_node(void) const
  BulletDebugNode *return_value = (*(const BulletWorld*)local_this).get_debug_node();
  if (return_value != (BulletDebugNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletDebugNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletDebugNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_debug_node_403_comment =
  "C++ Interface:\n"
  "get_debug_node(BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_debug_node_403_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach(TypedObject *object)
 */
static PyObject *Dtool_BulletWorld_attach_404(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach")) {
    return NULL;
  }
  // 1-void BulletWorld::attach(TypedObject *object)
  TypedObject *arg_this = (TypedObject *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_TypedObject, 1, "BulletWorld.attach", false, true);
  if (arg_this != NULL) {
    (*local_this).attach(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach(const BulletWorld self, TypedObject object)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_404_comment =
  "C++ Interface:\n"
  "attach(const BulletWorld self, TypedObject object)\n"
  "\n"
  "// AttachRemove\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_404_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach_constraint(BulletConstraint *constraint, bool linked_collision = false)
 */
static PyObject *Dtool_BulletWorld_attach_constraint_405(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach_constraint")) {
    return NULL;
  }
  // 1-void BulletWorld::attach_constraint(BulletConstraint *constraint, bool linked_collision = false)
  PyObject *param1;
  PyObject *param2 = Py_False;
  static const char *keyword_list[] = {"constraint", "linked_collision", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:attach_constraint", (char **)keyword_list, &param1, &param2)) {
    BulletConstraint *param1_this = (BulletConstraint *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletConstraint, 1, "BulletWorld.attach_constraint", false, true);
    if (param1_this != NULL) {
      (*local_this).attach_constraint(param1_this, (PyObject_IsTrue(param2) != 0));
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach_constraint(const BulletWorld self, BulletConstraint constraint, bool linked_collision)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_constraint_405_comment =
  "C++ Interface:\n"
  "attach_constraint(const BulletWorld self, BulletConstraint constraint, bool linked_collision)\n"
  "\n"
  "/**\n"
  " * Attaches a single constraint to a world.  Collision checks between the\n"
  " * linked objects will be disabled if the second parameter is set to TRUE.\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_constraint_405_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove(TypedObject *object)
 */
static PyObject *Dtool_BulletWorld_remove_406(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove")) {
    return NULL;
  }
  // 1-void BulletWorld::remove(TypedObject *object)
  TypedObject *arg_this = (TypedObject *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_TypedObject, 1, "BulletWorld.remove", false, true);
  if (arg_this != NULL) {
    (*local_this).remove(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove(const BulletWorld self, TypedObject object)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_406_comment =
  "C++ Interface:\n"
  "remove(const BulletWorld self, TypedObject object)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_406_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletWorld::get_num_ghosts(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_ghosts_407(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletWorld::get_num_ghosts(void) const
  int return_value = (*(const BulletWorld*)local_this).get_num_ghosts();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_ghosts_407_comment =
  "C++ Interface:\n"
  "get_num_ghosts(BulletWorld self)\n"
  "\n"
  "// Ghost object\n"
  "\n"
  "// Ghost object\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_ghosts_407_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletGhostNode *BulletWorld::get_ghost(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_ghost_408(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline BulletGhostNode *BulletWorld::get_ghost(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletGhostNode *return_value = (*(const BulletWorld*)local_this).get_ghost((int)arg_val);
    if (return_value != (BulletGhostNode *)NULL) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != (BulletGhostNode *)NULL) {
        unref_delete(return_value);
      }
      return NULL;
    }
    if (return_value == NULL) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletGhostNode, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_ghost(BulletWorld self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_ghost_408_comment =
  "C++ Interface:\n"
  "get_ghost(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_ghost_408_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletWorld::get_num_rigid_bodies(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_rigid_bodies_410(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletWorld::get_num_rigid_bodies(void) const
  int return_value = (*(const BulletWorld*)local_this).get_num_rigid_bodies();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_rigid_bodies_410_comment =
  "C++ Interface:\n"
  "get_num_rigid_bodies(BulletWorld self)\n"
  "\n"
  "// Rigid body\n"
  "\n"
  "// Rigid body\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_rigid_bodies_410_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletRigidBodyNode *BulletWorld::get_rigid_body(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_rigid_body_411(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline BulletRigidBodyNode *BulletWorld::get_rigid_body(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletRigidBodyNode *return_value = (*(const BulletWorld*)local_this).get_rigid_body((int)arg_val);
    if (return_value != (BulletRigidBodyNode *)NULL) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != (BulletRigidBodyNode *)NULL) {
        unref_delete(return_value);
      }
      return NULL;
    }
    if (return_value == NULL) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletRigidBodyNode, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_rigid_body(BulletWorld self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_rigid_body_411_comment =
  "C++ Interface:\n"
  "get_rigid_body(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_rigid_body_411_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletWorld::get_num_soft_bodies(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_soft_bodies_413(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletWorld::get_num_soft_bodies(void) const
  int return_value = (*(const BulletWorld*)local_this).get_num_soft_bodies();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_soft_bodies_413_comment =
  "C++ Interface:\n"
  "get_num_soft_bodies(BulletWorld self)\n"
  "\n"
  "// Soft body\n"
  "\n"
  "// Soft body\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_soft_bodies_413_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletSoftBodyNode *BulletWorld::get_soft_body(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_soft_body_414(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline BulletSoftBodyNode *BulletWorld::get_soft_body(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletSoftBodyNode *return_value = (*(const BulletWorld*)local_this).get_soft_body((int)arg_val);
    if (return_value != (BulletSoftBodyNode *)NULL) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != (BulletSoftBodyNode *)NULL) {
        unref_delete(return_value);
      }
      return NULL;
    }
    if (return_value == NULL) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_soft_body(BulletWorld self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_soft_body_414_comment =
  "C++ Interface:\n"
  "get_soft_body(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_soft_body_414_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletWorld::get_num_characters(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_characters_416(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletWorld::get_num_characters(void) const
  int return_value = (*(const BulletWorld*)local_this).get_num_characters();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_characters_416_comment =
  "C++ Interface:\n"
  "get_num_characters(BulletWorld self)\n"
  "\n"
  "// Character controller\n"
  "\n"
  "// Character controller\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_characters_416_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletBaseCharacterControllerNode *BulletWorld::get_character(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_character_417(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline BulletBaseCharacterControllerNode *BulletWorld::get_character(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletBaseCharacterControllerNode *return_value = (*(const BulletWorld*)local_this).get_character((int)arg_val);
    if (return_value != (BulletBaseCharacterControllerNode *)NULL) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != (BulletBaseCharacterControllerNode *)NULL) {
        unref_delete(return_value);
      }
      return NULL;
    }
    if (return_value == NULL) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletBaseCharacterControllerNode, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_character(BulletWorld self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_character_417_comment =
  "C++ Interface:\n"
  "get_character(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_character_417_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach_vehicle(BulletVehicle *vehicle)
 */
static PyObject *Dtool_BulletWorld_attach_vehicle_419(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach_vehicle")) {
    return NULL;
  }
  // 1-void BulletWorld::attach_vehicle(BulletVehicle *vehicle)
  PT(BulletVehicle) arg_this;
  if (!Dtool_Coerce_BulletVehicle(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.attach_vehicle", "BulletVehicle");
  }
  (*local_this).attach_vehicle(MOVE(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach_vehicle(const BulletWorld self, BulletVehicle vehicle)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_vehicle_419_comment =
  "C++ Interface:\n"
  "attach_vehicle(const BulletWorld self, BulletVehicle vehicle)\n"
  "\n"
  "// Vehicle\n"
  "\n"
  "/**\n"
  " * Deprecated!  Please use BulletWorld::attach\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_vehicle_419_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove_vehicle(BulletVehicle *vehicle)
 */
static PyObject *Dtool_BulletWorld_remove_vehicle_420(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove_vehicle")) {
    return NULL;
  }
  // 1-void BulletWorld::remove_vehicle(BulletVehicle *vehicle)
  PT(BulletVehicle) arg_this;
  if (!Dtool_Coerce_BulletVehicle(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.remove_vehicle", "BulletVehicle");
  }
  (*local_this).remove_vehicle(MOVE(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_vehicle(const BulletWorld self, BulletVehicle vehicle)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_vehicle_420_comment =
  "C++ Interface:\n"
  "remove_vehicle(const BulletWorld self, BulletVehicle vehicle)\n"
  "\n"
  "/**\n"
  " * Deprecated.! Please use BulletWorld::remove\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_vehicle_420_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletWorld::get_num_vehicles(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_vehicles_421(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletWorld::get_num_vehicles(void) const
  int return_value = (*(const BulletWorld*)local_this).get_num_vehicles();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_vehicles_421_comment =
  "C++ Interface:\n"
  "get_num_vehicles(BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_vehicles_421_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletVehicle *BulletWorld::get_vehicle(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_vehicle_422(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline BulletVehicle *BulletWorld::get_vehicle(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletVehicle *return_value = (*(const BulletWorld*)local_this).get_vehicle((int)arg_val);
    if (return_value != (BulletVehicle *)NULL) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != (BulletVehicle *)NULL) {
        unref_delete(return_value);
      }
      return NULL;
    }
    if (return_value == NULL) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletVehicle, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_vehicle(BulletWorld self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_vehicle_422_comment =
  "C++ Interface:\n"
  "get_vehicle(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_vehicle_422_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletWorld::get_num_constraints(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_constraints_424(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletWorld::get_num_constraints(void) const
  int return_value = (*(const BulletWorld*)local_this).get_num_constraints();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_constraints_424_comment =
  "C++ Interface:\n"
  "get_num_constraints(BulletWorld self)\n"
  "\n"
  "// Constraint\n"
  "\n"
  "// Constraint\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_constraints_424_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletConstraint *BulletWorld::get_constraint(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_constraint_425(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline BulletConstraint *BulletWorld::get_constraint(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletConstraint *return_value = (*(const BulletWorld*)local_this).get_constraint((int)arg_val);
    if (return_value != (BulletConstraint *)NULL) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != (BulletConstraint *)NULL) {
        unref_delete(return_value);
      }
      return NULL;
    }
    if (return_value == NULL) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletConstraint, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_constraint(BulletWorld self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_constraint_425_comment =
  "C++ Interface:\n"
  "get_constraint(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_constraint_425_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletClosestHitRayResult BulletWorld::ray_test_closest(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const
 */
static PyObject *Dtool_BulletWorld_ray_test_closest_427(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-BulletClosestHitRayResult BulletWorld::ray_test_closest(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask) const
      PyObject *param1;
      PyObject *param2;
      static const char *keyword_list[] = {"from_pos", "to_pos", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:ray_test_closest", (char **)keyword_list, &param1, &param2)) {
        LPoint3f param1_local;
        LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
        if (!(param1_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param1, 1, "BulletWorld.ray_test_closest", "LPoint3f");
        }
        LPoint3f param2_local;
        LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
        if (!(param2_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param2, 2, "BulletWorld.ray_test_closest", "LPoint3f");
        }
        BulletClosestHitRayResult *return_value = new BulletClosestHitRayResult((*(const BulletWorld*)local_this).ray_test_closest(*param1_this, *param2_this));
        if (return_value == NULL) {
          return PyErr_NoMemory();
        }
        if (Dtool_CheckErrorOccurred()) {
          delete return_value;
          return NULL;
        }
        return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletClosestHitRayResult, true, false);
      }
    }
    break;
  case 3:
    {
      // 1-BulletClosestHitRayResult BulletWorld::ray_test_closest(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask) const
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      static const char *keyword_list[] = {"from_pos", "to_pos", "mask", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:ray_test_closest", (char **)keyword_list, &param1, &param2, &param3)) {
        LPoint3f param1_local;
        LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
        if (!(param1_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param1, 1, "BulletWorld.ray_test_closest", "LPoint3f");
        }
        LPoint3f param2_local;
        LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
        if (!(param2_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param2, 2, "BulletWorld.ray_test_closest", "LPoint3f");
        }
        BitMask< uint32_t, 32 > param3_local;
        CollideMask const *param3_this = Dtool_Coerce_BitMask_uint32_t_32(param3, param3_local);
        if (!(param3_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param3, 3, "BulletWorld.ray_test_closest", "BitMask");
        }
        BulletClosestHitRayResult *return_value = new BulletClosestHitRayResult((*(const BulletWorld*)local_this).ray_test_closest(*param1_this, *param2_this, *param3_this));
        if (return_value == NULL) {
          return PyErr_NoMemory();
        }
        if (Dtool_CheckErrorOccurred()) {
          delete return_value;
          return NULL;
        }
        return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletClosestHitRayResult, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "ray_test_closest() takes 3 or 4 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "ray_test_closest(BulletWorld self, const LPoint3f from_pos, const LPoint3f to_pos)\n"
      "ray_test_closest(BulletWorld self, const LPoint3f from_pos, const LPoint3f to_pos, const BitMask mask)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_ray_test_closest_427_comment =
  "C++ Interface:\n"
  "ray_test_closest(BulletWorld self, const LPoint3f from_pos, const LPoint3f to_pos)\n"
  "ray_test_closest(BulletWorld self, const LPoint3f from_pos, const LPoint3f to_pos, const BitMask mask)\n"
  "\n"
  "// Raycast and other queries\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_ray_test_closest_427_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletAllHitsRayResult BulletWorld::ray_test_all(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const
 */
static PyObject *Dtool_BulletWorld_ray_test_all_428(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-BulletAllHitsRayResult BulletWorld::ray_test_all(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask) const
      PyObject *param1;
      PyObject *param2;
      static const char *keyword_list[] = {"from_pos", "to_pos", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:ray_test_all", (char **)keyword_list, &param1, &param2)) {
        LPoint3f param1_local;
        LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
        if (!(param1_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param1, 1, "BulletWorld.ray_test_all", "LPoint3f");
        }
        LPoint3f param2_local;
        LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
        if (!(param2_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param2, 2, "BulletWorld.ray_test_all", "LPoint3f");
        }
        BulletAllHitsRayResult *return_value = new BulletAllHitsRayResult((*(const BulletWorld*)local_this).ray_test_all(*param1_this, *param2_this));
        if (return_value == NULL) {
          return PyErr_NoMemory();
        }
        if (Dtool_CheckErrorOccurred()) {
          delete return_value;
          return NULL;
        }
        return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletAllHitsRayResult, true, false);
      }
    }
    break;
  case 3:
    {
      // 1-BulletAllHitsRayResult BulletWorld::ray_test_all(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask) const
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      static const char *keyword_list[] = {"from_pos", "to_pos", "mask", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:ray_test_all", (char **)keyword_list, &param1, &param2, &param3)) {
        LPoint3f param1_local;
        LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
        if (!(param1_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param1, 1, "BulletWorld.ray_test_all", "LPoint3f");
        }
        LPoint3f param2_local;
        LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
        if (!(param2_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param2, 2, "BulletWorld.ray_test_all", "LPoint3f");
        }
        BitMask< uint32_t, 32 > param3_local;
        CollideMask const *param3_this = Dtool_Coerce_BitMask_uint32_t_32(param3, param3_local);
        if (!(param3_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param3, 3, "BulletWorld.ray_test_all", "BitMask");
        }
        BulletAllHitsRayResult *return_value = new BulletAllHitsRayResult((*(const BulletWorld*)local_this).ray_test_all(*param1_this, *param2_this, *param3_this));
        if (return_value == NULL) {
          return PyErr_NoMemory();
        }
        if (Dtool_CheckErrorOccurred()) {
          delete return_value;
          return NULL;
        }
        return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletAllHitsRayResult, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "ray_test_all() takes 3 or 4 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "ray_test_all(BulletWorld self, const LPoint3f from_pos, const LPoint3f to_pos)\n"
      "ray_test_all(BulletWorld self, const LPoint3f from_pos, const LPoint3f to_pos, const BitMask mask)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_ray_test_all_428_comment =
  "C++ Interface:\n"
  "ray_test_all(BulletWorld self, const LPoint3f from_pos, const LPoint3f to_pos)\n"
  "ray_test_all(BulletWorld self, const LPoint3f from_pos, const LPoint3f to_pos, const BitMask mask)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_ray_test_all_428_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletClosestHitSweepResult BulletWorld::sweep_test_closest(BulletShape *shape, TransformState const &from_ts, TransformState const &to_ts, CollideMask const &mask = CollideMask::all_on(), PN_stdfloat penetration = 0.0) const
 */
static PyObject *Dtool_BulletWorld_sweep_test_closest_429(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 3:
    {
      // 1-BulletClosestHitSweepResult BulletWorld::sweep_test_closest(BulletShape *shape, TransformState const &from_ts, TransformState const &to_ts, CollideMask const &mask, PN_stdfloat penetration) const
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      static const char *keyword_list[] = {"shape", "from_ts", "to_ts", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:sweep_test_closest", (char **)keyword_list, &param1, &param2, &param3)) {
        BulletShape *param1_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletShape, 1, "BulletWorld.sweep_test_closest", false, true);
        TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletWorld.sweep_test_closest", true, true);
        TransformState const *param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletWorld.sweep_test_closest", true, true);
        if (param1_this != NULL && param2_this != NULL && param3_this != NULL) {
          BulletClosestHitSweepResult *return_value = new BulletClosestHitSweepResult((*(const BulletWorld*)local_this).sweep_test_closest(param1_this, *param2_this, *param3_this));
          if (return_value == NULL) {
            return PyErr_NoMemory();
          }
          if (Dtool_CheckErrorOccurred()) {
            delete return_value;
            return NULL;
          }
          return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletClosestHitSweepResult, true, false);
        }
      }
    }
    break;
  case 4:
  case 5:
    {
      // 1-BulletClosestHitSweepResult BulletWorld::sweep_test_closest(BulletShape *shape, TransformState const &from_ts, TransformState const &to_ts, CollideMask const &mask, PN_stdfloat penetration = 0.0) const
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      PyObject *param4;
      float param5 = 0.0;
      static const char *keyword_list[] = {"shape", "from_ts", "to_ts", "mask", "penetration", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO|f:sweep_test_closest", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5)) {
        BulletShape *param1_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletShape, 1, "BulletWorld.sweep_test_closest", false, true);
        TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletWorld.sweep_test_closest", true, true);
        TransformState const *param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletWorld.sweep_test_closest", true, true);
        BitMask< uint32_t, 32 > param4_local;
        CollideMask const *param4_this = Dtool_Coerce_BitMask_uint32_t_32(param4, param4_local);
        if (!(param4_this != NULL)) {
          return Dtool_Raise_ArgTypeError(param4, 4, "BulletWorld.sweep_test_closest", "BitMask");
        }
        if (param1_this != NULL && param2_this != NULL && param3_this != NULL) {
          BulletClosestHitSweepResult *return_value = new BulletClosestHitSweepResult((*(const BulletWorld*)local_this).sweep_test_closest(param1_this, *param2_this, *param3_this, *param4_this, (PN_stdfloat)param5));
          if (return_value == NULL) {
            return PyErr_NoMemory();
          }
          if (Dtool_CheckErrorOccurred()) {
            delete return_value;
            return NULL;
          }
          return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletClosestHitSweepResult, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "sweep_test_closest() takes 4, 5 or 6 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "sweep_test_closest(BulletWorld self, BulletShape shape, const TransformState from_ts, const TransformState to_ts)\n"
      "sweep_test_closest(BulletWorld self, BulletShape shape, const TransformState from_ts, const TransformState to_ts, const BitMask mask, float penetration)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_sweep_test_closest_429_comment =
  "C++ Interface:\n"
  "sweep_test_closest(BulletWorld self, BulletShape shape, const TransformState from_ts, const TransformState to_ts)\n"
  "sweep_test_closest(BulletWorld self, BulletShape shape, const TransformState from_ts, const TransformState to_ts, const BitMask mask, float penetration)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_sweep_test_closest_429_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletContactResult BulletWorld::contact_test(PandaNode *node, bool use_filter = false) const
 */
static PyObject *Dtool_BulletWorld_contact_test_430(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-BulletContactResult BulletWorld::contact_test(PandaNode *node, bool use_filter = false) const
  PyObject *param1;
  PyObject *param2 = Py_False;
  static const char *keyword_list[] = {"node", "use_filter", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:contact_test", (char **)keyword_list, &param1, &param2)) {
    PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletWorld.contact_test", false, true);
    if (param1_this != NULL) {
      BulletContactResult *return_value = new BulletContactResult((*(const BulletWorld*)local_this).contact_test(param1_this, (PyObject_IsTrue(param2) != 0)));
      if (return_value == NULL) {
        return PyErr_NoMemory();
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return NULL;
      }
      return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletContactResult, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "contact_test(BulletWorld self, PandaNode node, bool use_filter)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_contact_test_430_comment =
  "C++ Interface:\n"
  "contact_test(BulletWorld self, PandaNode node, bool use_filter)\n"
  "\n"
  "/**\n"
  " * Performas a test for all bodies which are currently in contact with the\n"
  " * given body.  The test returns a BulletContactResult object which may\n"
  " * contain zero, one or more contacts.\n"
  " *\n"
  " * If the optional parameter use_filter is set to TRUE this test will consider\n"
  " * filter settings.  Otherwise all objects in contact are reported, no matter\n"
  " * if they would collide or not.\n"
  " */";
#else
static const char *Dtool_BulletWorld_contact_test_430_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletContactResult BulletWorld::contact_test_pair(PandaNode *node0, PandaNode *node1) const
 */
static PyObject *Dtool_BulletWorld_contact_test_pair_431(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-BulletContactResult BulletWorld::contact_test_pair(PandaNode *node0, PandaNode *node1) const
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"node0", "node1", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:contact_test_pair", (char **)keyword_list, &param1, &param2)) {
    PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletWorld.contact_test_pair", false, true);
    PandaNode *param2_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_PandaNode, 2, "BulletWorld.contact_test_pair", false, true);
    if (param1_this != NULL && param2_this != NULL) {
      BulletContactResult *return_value = new BulletContactResult((*(const BulletWorld*)local_this).contact_test_pair(param1_this, param2_this));
      if (return_value == NULL) {
        return PyErr_NoMemory();
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return NULL;
      }
      return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletContactResult, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "contact_test_pair(BulletWorld self, PandaNode node0, PandaNode node1)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_contact_test_pair_431_comment =
  "C++ Interface:\n"
  "contact_test_pair(BulletWorld self, PandaNode node0, PandaNode node1)\n"
  "\n"
  "/**\n"
  " * Performas a test if the two bodies given as parameters are in contact or\n"
  " * not.  The test returns a BulletContactResult object which may contain zero\n"
  " * or one contacts.\n"
  " */";
#else
static const char *Dtool_BulletWorld_contact_test_pair_431_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletWorld::filter_test(PandaNode *node0, PandaNode *node1) const
 */
static PyObject *Dtool_BulletWorld_filter_test_432(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletWorld::filter_test(PandaNode *node0, PandaNode *node1) const
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"node0", "node1", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:filter_test", (char **)keyword_list, &param1, &param2)) {
    PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletWorld.filter_test", false, true);
    PandaNode *param2_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_PandaNode, 2, "BulletWorld.filter_test", false, true);
    if (param1_this != NULL && param2_this != NULL) {
      bool return_value = (*(const BulletWorld*)local_this).filter_test(param1_this, param2_this);
      return Dtool_Return_Bool(return_value);
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "filter_test(BulletWorld self, PandaNode node0, PandaNode node1)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_filter_test_432_comment =
  "C++ Interface:\n"
  "filter_test(BulletWorld self, PandaNode node0, PandaNode node1)\n"
  "\n"
  "/**\n"
  " * Performs a test if two bodies should collide or not, based on the collision\n"
  " * filter setting.\n"
  " */";
#else
static const char *Dtool_BulletWorld_filter_test_432_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletWorld::get_num_manifolds(void) const
 */
static PyObject *Dtool_BulletWorld_get_num_manifolds_433(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletWorld::get_num_manifolds(void) const
  int return_value = (*(const BulletWorld*)local_this).get_num_manifolds();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_num_manifolds_433_comment =
  "C++ Interface:\n"
  "get_num_manifolds(BulletWorld self)\n"
  "\n"
  "// Manifolds\n"
  "\n"
  "// Manifolds\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_num_manifolds_433_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletPersistentManifold *BulletWorld::get_manifold(int idx) const
 */
static PyObject *Dtool_BulletWorld_get_manifold_434(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-BulletPersistentManifold *BulletWorld::get_manifold(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletPersistentManifold *return_value = (*(const BulletWorld*)local_this).get_manifold((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletPersistentManifold, false, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_manifold(BulletWorld self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_manifold_434_comment =
  "C++ Interface:\n"
  "get_manifold(BulletWorld self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_manifold_434_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::set_group_collision_flag(unsigned int group1, unsigned int group2, bool enable)
 */
static PyObject *Dtool_BulletWorld_set_group_collision_flag_436(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_group_collision_flag")) {
    return NULL;
  }
  // 1-void BulletWorld::set_group_collision_flag(unsigned int group1, unsigned int group2, bool enable)
  unsigned long param1;
  unsigned long param2;
  PyObject *param3;
  static const char *keyword_list[] = {"group1", "group2", "enable", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "kkO:set_group_collision_flag", (char **)keyword_list, &param1, &param2, &param3)) {
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (param1 > UINT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %lu out of range for unsigned integer",
                          param1);
    }
#endif
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (param2 > UINT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %lu out of range for unsigned integer",
                          param2);
    }
#endif
    (*local_this).set_group_collision_flag((unsigned int)param1, (unsigned int)param2, (PyObject_IsTrue(param3) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_group_collision_flag(const BulletWorld self, int group1, int group2, bool enable)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_group_collision_flag_436_comment =
  "C++ Interface:\n"
  "set_group_collision_flag(const BulletWorld self, int group1, int group2, bool enable)\n"
  "\n"
  "// Collision filtering\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_group_collision_flag_436_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletWorld::get_group_collision_flag(unsigned int group1, unsigned int group2) const
 */
static PyObject *Dtool_BulletWorld_get_group_collision_flag_437(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletWorld::get_group_collision_flag(unsigned int group1, unsigned int group2) const
  unsigned long param1;
  unsigned long param2;
  static const char *keyword_list[] = {"group1", "group2", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "kk:get_group_collision_flag", (char **)keyword_list, &param1, &param2)) {
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (param1 > UINT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %lu out of range for unsigned integer",
                          param1);
    }
#endif
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (param2 > UINT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %lu out of range for unsigned integer",
                          param2);
    }
#endif
    bool return_value = (*(const BulletWorld*)local_this).get_group_collision_flag((unsigned int)param1, (unsigned int)param2);
    return Dtool_Return_Bool(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_group_collision_flag(BulletWorld self, int group1, int group2)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_group_collision_flag_437_comment =
  "C++ Interface:\n"
  "get_group_collision_flag(BulletWorld self, int group1, int group2)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_get_group_collision_flag_437_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::set_contact_added_callback(CallbackObject *obj)
 */
static PyObject *Dtool_BulletWorld_set_contact_added_callback_438(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_contact_added_callback")) {
    return NULL;
  }
  // 1-void BulletWorld::set_contact_added_callback(CallbackObject *obj)
  PT(CallbackObject) arg_this;
  if (!Dtool_Coerce_CallbackObject(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.set_contact_added_callback", "CallbackObject");
  }
  (*local_this).set_contact_added_callback(MOVE(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_contact_added_callback(const BulletWorld self, CallbackObject obj)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_contact_added_callback_438_comment =
  "C++ Interface:\n"
  "set_contact_added_callback(const BulletWorld self, CallbackObject obj)\n"
  "\n"
  "// Callbacks\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_contact_added_callback_438_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::clear_contact_added_callback(void)
 */
static PyObject *Dtool_BulletWorld_clear_contact_added_callback_439(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.clear_contact_added_callback")) {
    return NULL;
  }
  // 1-void BulletWorld::clear_contact_added_callback(void)
  (*local_this).clear_contact_added_callback();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_clear_contact_added_callback_439_comment =
  "C++ Interface:\n"
  "clear_contact_added_callback(const BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_clear_contact_added_callback_439_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::set_tick_callback(CallbackObject *obj, bool is_pretick = false)
 */
static PyObject *Dtool_BulletWorld_set_tick_callback_440(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_tick_callback")) {
    return NULL;
  }
  // 1-void BulletWorld::set_tick_callback(CallbackObject *obj, bool is_pretick = false)
  PyObject *param1;
  PyObject *param2 = Py_False;
  static const char *keyword_list[] = {"obj", "is_pretick", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:set_tick_callback", (char **)keyword_list, &param1, &param2)) {
    PT(CallbackObject) param1_this;
    if (!Dtool_Coerce_CallbackObject(param1, param1_this)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletWorld.set_tick_callback", "CallbackObject");
    }
    (*local_this).set_tick_callback(MOVE(param1_this), (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_tick_callback(const BulletWorld self, CallbackObject obj, bool is_pretick)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_tick_callback_440_comment =
  "C++ Interface:\n"
  "set_tick_callback(const BulletWorld self, CallbackObject obj, bool is_pretick)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_tick_callback_440_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::clear_tick_callback(void)
 */
static PyObject *Dtool_BulletWorld_clear_tick_callback_441(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.clear_tick_callback")) {
    return NULL;
  }
  // 1-void BulletWorld::clear_tick_callback(void)
  (*local_this).clear_tick_callback();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_clear_tick_callback_441_comment =
  "C++ Interface:\n"
  "clear_tick_callback(const BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_clear_tick_callback_441_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::set_filter_callback(CallbackObject *obj)
 */
static PyObject *Dtool_BulletWorld_set_filter_callback_442(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.set_filter_callback")) {
    return NULL;
  }
  // 1-void BulletWorld::set_filter_callback(CallbackObject *obj)
  PT(CallbackObject) arg_this;
  if (!Dtool_Coerce_CallbackObject(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.set_filter_callback", "CallbackObject");
  }
  (*local_this).set_filter_callback(MOVE(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_filter_callback(const BulletWorld self, CallbackObject obj)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_set_filter_callback_442_comment =
  "C++ Interface:\n"
  "set_filter_callback(const BulletWorld self, CallbackObject obj)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_set_filter_callback_442_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::clear_filter_callback(void)
 */
static PyObject *Dtool_BulletWorld_clear_filter_callback_443(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.clear_filter_callback")) {
    return NULL;
  }
  // 1-void BulletWorld::clear_filter_callback(void)
  (*local_this).clear_filter_callback();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_clear_filter_callback_443_comment =
  "C++ Interface:\n"
  "clear_filter_callback(const BulletWorld self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWorld_clear_filter_callback_443_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach_ghost(BulletGhostNode *node)
 */
static PyObject *Dtool_BulletWorld_attach_ghost_446(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach_ghost")) {
    return NULL;
  }
  // 1-void BulletWorld::attach_ghost(BulletGhostNode *node)
  PT(BulletGhostNode) arg_this;
  if (!Dtool_Coerce_BulletGhostNode(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.attach_ghost", "BulletGhostNode");
  }
  (*local_this).attach_ghost(MOVE(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach_ghost(const BulletWorld self, BulletGhostNode node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_ghost_446_comment =
  "C++ Interface:\n"
  "attach_ghost(const BulletWorld self, BulletGhostNode node)\n"
  "\n"
  "// Deprecated methods, will become private soon\n"
  "\n"
  "/**\n"
  " * Deprecated!  Please use BulletWorld::attach\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_ghost_446_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove_ghost(BulletGhostNode *node)
 */
static PyObject *Dtool_BulletWorld_remove_ghost_447(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove_ghost")) {
    return NULL;
  }
  // 1-void BulletWorld::remove_ghost(BulletGhostNode *node)
  PT(BulletGhostNode) arg_this;
  if (!Dtool_Coerce_BulletGhostNode(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.remove_ghost", "BulletGhostNode");
  }
  (*local_this).remove_ghost(MOVE(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_ghost(const BulletWorld self, BulletGhostNode node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_ghost_447_comment =
  "C++ Interface:\n"
  "remove_ghost(const BulletWorld self, BulletGhostNode node)\n"
  "\n"
  "/**\n"
  " * Deprecated.! Please use BulletWorld::remove\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_ghost_447_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach_rigid_body(BulletRigidBodyNode *node)
 */
static PyObject *Dtool_BulletWorld_attach_rigid_body_448(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach_rigid_body")) {
    return NULL;
  }
  // 1-void BulletWorld::attach_rigid_body(BulletRigidBodyNode *node)
  BulletRigidBodyNode *arg_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletWorld.attach_rigid_body", false, true);
  if (arg_this != NULL) {
    (*local_this).attach_rigid_body(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach_rigid_body(const BulletWorld self, BulletRigidBodyNode node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_rigid_body_448_comment =
  "C++ Interface:\n"
  "attach_rigid_body(const BulletWorld self, BulletRigidBodyNode node)\n"
  "\n"
  "/**\n"
  " * Deprecated!  Please use BulletWorld::attach\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_rigid_body_448_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove_rigid_body(BulletRigidBodyNode *node)
 */
static PyObject *Dtool_BulletWorld_remove_rigid_body_449(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove_rigid_body")) {
    return NULL;
  }
  // 1-void BulletWorld::remove_rigid_body(BulletRigidBodyNode *node)
  BulletRigidBodyNode *arg_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletWorld.remove_rigid_body", false, true);
  if (arg_this != NULL) {
    (*local_this).remove_rigid_body(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_rigid_body(const BulletWorld self, BulletRigidBodyNode node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_rigid_body_449_comment =
  "C++ Interface:\n"
  "remove_rigid_body(const BulletWorld self, BulletRigidBodyNode node)\n"
  "\n"
  "/**\n"
  " * Deprecated.! Please use BulletWorld::remove\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_rigid_body_449_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach_soft_body(BulletSoftBodyNode *node)
 */
static PyObject *Dtool_BulletWorld_attach_soft_body_450(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach_soft_body")) {
    return NULL;
  }
  // 1-void BulletWorld::attach_soft_body(BulletSoftBodyNode *node)
  BulletSoftBodyNode *arg_this = (BulletSoftBodyNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletSoftBodyNode, 1, "BulletWorld.attach_soft_body", false, true);
  if (arg_this != NULL) {
    (*local_this).attach_soft_body(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach_soft_body(const BulletWorld self, BulletSoftBodyNode node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_soft_body_450_comment =
  "C++ Interface:\n"
  "attach_soft_body(const BulletWorld self, BulletSoftBodyNode node)\n"
  "\n"
  "/**\n"
  " * Deprecated!  Please use BulletWorld::attach\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_soft_body_450_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove_soft_body(BulletSoftBodyNode *node)
 */
static PyObject *Dtool_BulletWorld_remove_soft_body_451(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove_soft_body")) {
    return NULL;
  }
  // 1-void BulletWorld::remove_soft_body(BulletSoftBodyNode *node)
  BulletSoftBodyNode *arg_this = (BulletSoftBodyNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletSoftBodyNode, 1, "BulletWorld.remove_soft_body", false, true);
  if (arg_this != NULL) {
    (*local_this).remove_soft_body(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_soft_body(const BulletWorld self, BulletSoftBodyNode node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_soft_body_451_comment =
  "C++ Interface:\n"
  "remove_soft_body(const BulletWorld self, BulletSoftBodyNode node)\n"
  "\n"
  "/**\n"
  " * Deprecated.! Please use BulletWorld::remove\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_soft_body_451_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::attach_character(BulletBaseCharacterControllerNode *node)
 */
static PyObject *Dtool_BulletWorld_attach_character_452(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.attach_character")) {
    return NULL;
  }
  // 1-void BulletWorld::attach_character(BulletBaseCharacterControllerNode *node)
  PT(BulletBaseCharacterControllerNode) arg_this;
  if (!Dtool_Coerce_BulletBaseCharacterControllerNode(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.attach_character", "BulletBaseCharacterControllerNode");
  }
  (*local_this).attach_character(MOVE(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "attach_character(const BulletWorld self, BulletBaseCharacterControllerNode node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_attach_character_452_comment =
  "C++ Interface:\n"
  "attach_character(const BulletWorld self, BulletBaseCharacterControllerNode node)\n"
  "\n"
  "/**\n"
  " * Deprecated!  Please use BulletWorld::attach\n"
  " */";
#else
static const char *Dtool_BulletWorld_attach_character_452_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove_character(BulletBaseCharacterControllerNode *node)
 */
static PyObject *Dtool_BulletWorld_remove_character_453(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove_character")) {
    return NULL;
  }
  // 1-void BulletWorld::remove_character(BulletBaseCharacterControllerNode *node)
  PT(BulletBaseCharacterControllerNode) arg_this;
  if (!Dtool_Coerce_BulletBaseCharacterControllerNode(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWorld.remove_character", "BulletBaseCharacterControllerNode");
  }
  (*local_this).remove_character(MOVE(arg_this));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_character(const BulletWorld self, BulletBaseCharacterControllerNode node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_character_453_comment =
  "C++ Interface:\n"
  "remove_character(const BulletWorld self, BulletBaseCharacterControllerNode node)\n"
  "\n"
  "/**\n"
  " * Deprecated.! Please use BulletWorld::remove\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_character_453_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWorld::remove_constraint(BulletConstraint *constraint)
 */
static PyObject *Dtool_BulletWorld_remove_constraint_454(PyObject *self, PyObject *arg) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWorld, (void **)&local_this, "BulletWorld.remove_constraint")) {
    return NULL;
  }
  // 1-void BulletWorld::remove_constraint(BulletConstraint *constraint)
  BulletConstraint *arg_this = (BulletConstraint *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletConstraint, 1, "BulletWorld.remove_constraint", false, true);
  if (arg_this != NULL) {
    (*local_this).remove_constraint(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "remove_constraint(const BulletWorld self, BulletConstraint constraint)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_remove_constraint_454_comment =
  "C++ Interface:\n"
  "remove_constraint(const BulletWorld self, BulletConstraint constraint)\n"
  "\n"
  "/**\n"
  " * Deprecated.! Please use BulletWorld::remove\n"
  " */";
#else
static const char *Dtool_BulletWorld_remove_constraint_454_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletWorld::get_class_type(void)
 */
static PyObject *Dtool_BulletWorld_get_class_type_455(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletWorld::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletWorld::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWorld_get_class_type_455_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletWorld_get_class_type_455_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletWorld::BulletWorld(void)
 */
static int Dtool_Init_BulletWorld(PyObject *self, PyObject *args, PyObject *kwds) {
  if (PyTuple_Size(args) > 0 || (kwds != NULL && PyDict_Size(kwds) > 0)) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no arguments");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletWorld() takes no arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  // 1-BulletWorld::BulletWorld(void)
  BulletWorld *return_value = new BulletWorld();
  if (return_value == NULL) {
    PyErr_NoMemory();
    return -1;
  }
  return_value->ref();
  if (Dtool_CheckErrorOccurred()) {
    unref_delete(return_value);
    return -1;
  }
  return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletWorld, true, false);
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletWorld()\n");
  }
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_ghosts(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_ghosts();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_ghost_408(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_rigid_bodies(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_rigid_bodies();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_rigid_body_411(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_soft_bodies(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_soft_bodies();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_soft_body_414(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_characters(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_characters();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_character_417(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_vehicles(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_vehicles();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_vehicle_422(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_constraints(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_constraints();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_constraint_425(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletWorld_get_manifolds(PyObject *self, PyObject *) {
  BulletWorld *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWorld, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_manifolds();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletWorld_get_manifold_434(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletWorld(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletWorld) {
    printf("BulletWorld ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletWorld *local_this = (BulletWorld *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletWorld) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletWorld(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletWorld) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletWorld*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletWorld*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletWorld*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletConvexHullShape
 */
/**
 * Python function wrapper for:
 * inline void BulletConvexHullShape::operator =(BulletConvexHullShape const &copy)
 */
static PyObject *Dtool_BulletConvexHullShape_operator_458(PyObject *self, PyObject *arg) {
  BulletConvexHullShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConvexHullShape, (void **)&local_this, "BulletConvexHullShape.assign")) {
    return NULL;
  }
  // 1-inline void BulletConvexHullShape::operator =(BulletConvexHullShape const &copy)
  BulletConvexHullShape const *arg_this = (BulletConvexHullShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletConvexHullShape, 1, "BulletConvexHullShape.assign", true, true);
  if (arg_this != NULL) {
    (*local_this).operator =(*arg_this);
    BulletConvexHullShape *return_value = local_this;
    if (return_value != (BulletConvexHullShape *)NULL) {
      return_value->ref();
    }
    if (Dtool_CheckErrorOccurred()) {
      if (return_value != (BulletConvexHullShape *)NULL) {
        unref_delete(return_value);
      }
      return NULL;
    }
    if (return_value == NULL) {
      Py_INCREF(Py_None);
      return Py_None;
    } else {
      return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletConvexHullShape, true, false, return_value->as_typed_object()->get_type_index());
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletConvexHullShape self, const BulletConvexHullShape copy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexHullShape_operator_458_comment =
  "C++ Interface:\n"
  "assign(const BulletConvexHullShape self, const BulletConvexHullShape copy)\n";
#else
static const char *Dtool_BulletConvexHullShape_operator_458_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConvexHullShape::add_point(LPoint3 const &p)
 */
static PyObject *Dtool_BulletConvexHullShape_add_point_459(PyObject *self, PyObject *arg) {
  BulletConvexHullShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConvexHullShape, (void **)&local_this, "BulletConvexHullShape.add_point")) {
    return NULL;
  }
  // 1-void BulletConvexHullShape::add_point(LPoint3 const &p)
  LPoint3f arg_local;
  LPoint3 const *arg_this = Dtool_Coerce_LPoint3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletConvexHullShape.add_point", "LPoint3f");
  }
  (*local_this).add_point(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_point(const BulletConvexHullShape self, const LPoint3f p)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexHullShape_add_point_459_comment =
  "C++ Interface:\n"
  "add_point(const BulletConvexHullShape self, const LPoint3f p)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConvexHullShape_add_point_459_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConvexHullShape::add_array(PTA_LVecBase3 const &points)
 */
static PyObject *Dtool_BulletConvexHullShape_add_array_460(PyObject *self, PyObject *arg) {
  BulletConvexHullShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConvexHullShape, (void **)&local_this, "BulletConvexHullShape.add_array")) {
    return NULL;
  }
  // 1-void BulletConvexHullShape::add_array(PTA_LVecBase3 const &points)
  PointerToArray< LVecBase3f > arg_local;
  PTA_LVecBase3 const *arg_this = Dtool_Coerce_PointerToArray_LVecBase3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletConvexHullShape.add_array", "PointerToArray");
  }
  (*local_this).add_array(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_array(const BulletConvexHullShape self, const PointerToArray points)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexHullShape_add_array_460_comment =
  "C++ Interface:\n"
  "add_array(const BulletConvexHullShape self, const PointerToArray points)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConvexHullShape_add_array_460_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletConvexHullShape::add_geom(Geom const *geom, TransformState const *ts = TransformState::make_identity())
 */
static PyObject *Dtool_BulletConvexHullShape_add_geom_461(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletConvexHullShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConvexHullShape, (void **)&local_this, "BulletConvexHullShape.add_geom")) {
    return NULL;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "geom");
      }
      if (arg == (PyObject *)NULL) {
        return Dtool_Raise_TypeError("Required argument 'geom' (pos 1) not found");
      }
      // 1-void BulletConvexHullShape::add_geom(Geom const *geom, TransformState const *ts)
      Geom const *arg_this = (Geom *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_Geom, 1, "BulletConvexHullShape.add_geom", true, true);
      if (arg_this != NULL) {
        (*local_this).add_geom(arg_this);
        return Dtool_Return_None();
      }
    }
    break;
  case 2:
    {
      // 1-void BulletConvexHullShape::add_geom(Geom const *geom, TransformState const *ts)
      PyObject *param1;
      PyObject *param2;
      static const char *keyword_list[] = {"geom", "ts", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:add_geom", (char **)keyword_list, &param1, &param2)) {
        Geom const *param1_this = (Geom *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_Geom, 1, "BulletConvexHullShape.add_geom", true, true);
        TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletConvexHullShape.add_geom", true, true);
        if (param1_this != NULL && param2_this != NULL) {
          (*local_this).add_geom(param1_this, param2_this);
          return Dtool_Return_None();
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "add_geom() takes 2 or 3 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_geom(const BulletConvexHullShape self, const Geom geom)\n"
      "add_geom(const BulletConvexHullShape self, const Geom geom, const TransformState ts)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexHullShape_add_geom_461_comment =
  "C++ Interface:\n"
  "add_geom(const BulletConvexHullShape self, const Geom geom)\n"
  "add_geom(const BulletConvexHullShape self, const Geom geom, const TransformState ts)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConvexHullShape_add_geom_461_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletConvexHullShape::get_class_type(void)
 */
static PyObject *Dtool_BulletConvexHullShape_get_class_type_462(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletConvexHullShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletConvexHullShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexHullShape_get_class_type_462_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletConvexHullShape_get_class_type_462_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletConvexHullShape::BulletConvexHullShape(void)
 * inline BulletConvexHullShape::BulletConvexHullShape(BulletConvexHullShape const &copy)
 */
static int Dtool_Init_BulletConvexHullShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 0:
    {
      // 1-BulletConvexHullShape::BulletConvexHullShape(void)
      BulletConvexHullShape *return_value = new BulletConvexHullShape();
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexHullShape, true, false);
    }
    break;
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "copy");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'copy' (pos 1) not found");
        return -1;
      }
      // 1-inline BulletConvexHullShape::BulletConvexHullShape(BulletConvexHullShape const &copy)
      BulletConvexHullShape const *arg_this = (BulletConvexHullShape *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletConvexHullShape, 0, "BulletConvexHullShape.BulletConvexHullShape", true, true);
      if (arg_this != NULL) {
        BulletConvexHullShape *return_value = new BulletConvexHullShape(*arg_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexHullShape, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletConvexHullShape() takes 0 or 1 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletConvexHullShape()\n"
      "BulletConvexHullShape(const BulletConvexHullShape copy)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletConvexHullShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletConvexHullShape) {
    printf("BulletConvexHullShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletConvexHullShape *local_this = (BulletConvexHullShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletConvexHullShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletConvexHullShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletConvexHullShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletConvexHullShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletConvexHullShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletConvexHullShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletConvexHullShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletConvexHullShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletConvexPointCloudShape
 */
/**
 * Python function wrapper for:
 * inline void BulletConvexPointCloudShape::operator =(BulletConvexPointCloudShape const &copy)
 */
static PyObject *Dtool_BulletConvexPointCloudShape_operator_465(PyObject *self, PyObject *arg) {
  BulletConvexPointCloudShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletConvexPointCloudShape, (void **)&local_this, "BulletConvexPointCloudShape.assign")) {
    return NULL;
  }
  // 1-inline void BulletConvexPointCloudShape::operator =(BulletConvexPointCloudShape const &copy)
  CPT(BulletConvexPointCloudShape) arg_this;
  if (!Dtool_ConstCoerce_BulletConvexPointCloudShape(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletConvexPointCloudShape.assign", "BulletConvexPointCloudShape");
  }
  (*local_this).operator =(*MOVE(arg_this));
  BulletConvexPointCloudShape *return_value = local_this;
  if (return_value != (BulletConvexPointCloudShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletConvexPointCloudShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletConvexPointCloudShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletConvexPointCloudShape self, const BulletConvexPointCloudShape copy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexPointCloudShape_operator_465_comment =
  "C++ Interface:\n"
  "assign(const BulletConvexPointCloudShape self, const BulletConvexPointCloudShape copy)\n";
#else
static const char *Dtool_BulletConvexPointCloudShape_operator_465_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletConvexPointCloudShape::get_num_points(void) const
 */
static PyObject *Dtool_BulletConvexPointCloudShape_get_num_points_466(PyObject *self, PyObject *) {
  BulletConvexPointCloudShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletConvexPointCloudShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletConvexPointCloudShape::get_num_points(void) const
  int return_value = (*(const BulletConvexPointCloudShape*)local_this).get_num_points();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexPointCloudShape_get_num_points_466_comment =
  "C++ Interface:\n"
  "get_num_points(BulletConvexPointCloudShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletConvexPointCloudShape_get_num_points_466_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletConvexPointCloudShape::get_class_type(void)
 */
static PyObject *Dtool_BulletConvexPointCloudShape_get_class_type_467(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletConvexPointCloudShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletConvexPointCloudShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletConvexPointCloudShape_get_class_type_467_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletConvexPointCloudShape_get_class_type_467_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletConvexPointCloudShape::BulletConvexPointCloudShape(BulletConvexPointCloudShape const &copy)
 * BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale = LVecBase3(1.0))
 * BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale = LVecBase3(1.0))
 */
static int Dtool_Init_BulletConvexPointCloudShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      {
        // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale)
        PyObject *param0;
        static const char *keyword_list[] = {"geom", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletConvexPointCloudShape", (char **)keyword_list, &param0)) {
          Geom const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_Geom, (void **)&param0_this);
          if (param0_this != NULL) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(param0_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale)
        PyObject *param0;
        static const char *keyword_list[] = {"points", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletConvexPointCloudShape", (char **)keyword_list, &param0)) {
          PTA_LVecBase3 const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_PointerToArray_LVecBase3f, (void **)&param0_this);
          if (param0_this != NULL) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*param0_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 inline BulletConvexPointCloudShape::BulletConvexPointCloudShape(BulletConvexPointCloudShape const &copy)
        PyObject *param0;
        static const char *keyword_list[] = {"copy", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletConvexPointCloudShape", (char **)keyword_list, &param0)) {
          BulletConvexPointCloudShape const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletConvexPointCloudShape, (void **)&param0_this);
          if (param0_this != NULL) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*param0_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale)
        PyObject *param0;
        static const char *keyword_list[] = {"geom", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletConvexPointCloudShape", (char **)keyword_list, &param0)) {
          Geom const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_Geom, (void **)&param0_this);
          if (param0_this != NULL) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(param0_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale)
        PyObject *param0;
        static const char *keyword_list[] = {"points", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletConvexPointCloudShape", (char **)keyword_list, &param0)) {
          PointerToArray< LVecBase3f > param0_local;
          PTA_LVecBase3 const *param0_this = Dtool_Coerce_PointerToArray_LVecBase3f(param0, param0_local);
          if ((param0_this != NULL)) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*param0_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 inline BulletConvexPointCloudShape::BulletConvexPointCloudShape(BulletConvexPointCloudShape const &copy)
        PyObject *param0;
        static const char *keyword_list[] = {"copy", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletConvexPointCloudShape", (char **)keyword_list, &param0)) {
          CPT(BulletConvexPointCloudShape) param0_this;
          if (Dtool_ConstCoerce_BulletConvexPointCloudShape(param0, param0_this)) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*MOVE(param0_this));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
          }
        }
        PyErr_Clear();
      }

    }
    break;
  case 2:
    {
      {
        // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale)
        PyObject *param0;
        PyObject *param1;
        static const char *keyword_list[] = {"geom", "scale", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletConvexPointCloudShape", (char **)keyword_list, &param0, &param1)) {
          Geom const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_Geom, (void **)&param0_this);
          LVecBase3 *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LVecBase3f, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(param0_this, *param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale)
        PyObject *param0;
        PyObject *param1;
        static const char *keyword_list[] = {"points", "scale", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletConvexPointCloudShape", (char **)keyword_list, &param0, &param1)) {
          PTA_LVecBase3 const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_PointerToArray_LVecBase3f, (void **)&param0_this);
          LVecBase3 *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LVecBase3f, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*param0_this, *param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale)
        PyObject *param0;
        PyObject *param1;
        static const char *keyword_list[] = {"geom", "scale", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletConvexPointCloudShape", (char **)keyword_list, &param0, &param1)) {
          Geom const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_Geom, (void **)&param0_this);
          LVecBase3f param1_local;
          LVecBase3 *param1_this = Dtool_Coerce_LVecBase3f(param1, param1_local);
          if (param0_this != NULL && (param1_this != NULL)) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(param0_this, *param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale)
        PyObject *param0;
        PyObject *param1;
        static const char *keyword_list[] = {"points", "scale", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletConvexPointCloudShape", (char **)keyword_list, &param0, &param1)) {
          PointerToArray< LVecBase3f > param0_local;
          PTA_LVecBase3 const *param0_this = Dtool_Coerce_PointerToArray_LVecBase3f(param0, param0_local);
          LVecBase3f param1_local;
          LVecBase3 *param1_this = Dtool_Coerce_LVecBase3f(param1, param1_local);
          if ((param0_this != NULL) && (param1_this != NULL)) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*param0_this, *param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletConvexPointCloudShape, true, false);
          }
        }
        PyErr_Clear();
      }

    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletConvexPointCloudShape() takes 1 or 2 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletConvexPointCloudShape(const Geom geom)\n"
      "BulletConvexPointCloudShape(const PointerToArray points)\n"
      "BulletConvexPointCloudShape(const BulletConvexPointCloudShape copy)\n"
      "BulletConvexPointCloudShape(const Geom geom, LVecBase3f scale)\n"
      "BulletConvexPointCloudShape(const PointerToArray points, LVecBase3f scale)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletConvexPointCloudShape(PyObject *args, CPT(BulletConvexPointCloudShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletConvexPointCloudShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    {
      // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale)
      Geom const *arg_this;
      DTOOL_Call_ExtractThisPointerForType(arg, Dtool_Ptr_Geom, (void **)&arg_this);
      if (arg_this != NULL) {
        BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(arg_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return false;
        }
        return_value->ref();
        if (_PyErr_OCCURRED()) {
          unref_delete(return_value);
          return false;
        } else {
          coerced = MOVE(return_value);
          return true;
        }
      }
    }

    {
      // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale)
      PTA_LVecBase3 const *arg_this;
      DTOOL_Call_ExtractThisPointerForType(arg, Dtool_Ptr_PointerToArray_LVecBase3f, (void **)&arg_this);
      if (arg_this != NULL) {
        BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*arg_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return false;
        }
        return_value->ref();
        if (_PyErr_OCCURRED()) {
          unref_delete(return_value);
          return false;
        } else {
          coerced = MOVE(return_value);
          return true;
        }
      }
    }

  } else {
    if (PyTuple_GET_SIZE(args) == 2) {
      {
        // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale)
        PyObject *param0;
        PyObject *param1;
        if (PyArg_UnpackTuple(args, "BulletConvexPointCloudShape", 2, 2, &param0, &param1)) {
          Geom const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_Geom, (void **)&param0_this);
          LVecBase3 *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LVecBase3f, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(param0_this, *param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale)
        PyObject *param0;
        PyObject *param1;
        if (PyArg_UnpackTuple(args, "BulletConvexPointCloudShape", 2, 2, &param0, &param1)) {
          PTA_LVecBase3 const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_PointerToArray_LVecBase3f, (void **)&param0_this);
          LVecBase3 *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LVecBase3f, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*param0_this, *param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
      }

    }
  }

  return false;
}

bool Dtool_Coerce_BulletConvexPointCloudShape(PyObject *args, PT(BulletConvexPointCloudShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletConvexPointCloudShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    {
      // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale)
      Geom const *arg_this;
      DTOOL_Call_ExtractThisPointerForType(arg, Dtool_Ptr_Geom, (void **)&arg_this);
      if (arg_this != NULL) {
        BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(arg_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return false;
        }
        return_value->ref();
        if (_PyErr_OCCURRED()) {
          unref_delete(return_value);
          return false;
        } else {
          coerced = MOVE(return_value);
          return true;
        }
      }
    }

    {
      // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale)
      PTA_LVecBase3 const *arg_this;
      DTOOL_Call_ExtractThisPointerForType(arg, Dtool_Ptr_PointerToArray_LVecBase3f, (void **)&arg_this);
      if (arg_this != NULL) {
        BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*arg_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return false;
        }
        return_value->ref();
        if (_PyErr_OCCURRED()) {
          unref_delete(return_value);
          return false;
        } else {
          coerced = MOVE(return_value);
          return true;
        }
      }
    }

  } else {
    if (PyTuple_GET_SIZE(args) == 2) {
      {
        // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale)
        PyObject *param0;
        PyObject *param1;
        if (PyArg_UnpackTuple(args, "BulletConvexPointCloudShape", 2, 2, &param0, &param1)) {
          Geom const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_Geom, (void **)&param0_this);
          LVecBase3 *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LVecBase3f, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(param0_this, *param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale)
        PyObject *param0;
        PyObject *param1;
        if (PyArg_UnpackTuple(args, "BulletConvexPointCloudShape", 2, 2, &param0, &param1)) {
          PTA_LVecBase3 const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_PointerToArray_LVecBase3f, (void **)&param0_this);
          LVecBase3 *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LVecBase3f, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletConvexPointCloudShape *return_value = new BulletConvexPointCloudShape(*param0_this, *param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
      }

    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletConvexPointCloudShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletConvexPointCloudShape) {
    printf("BulletConvexPointCloudShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletConvexPointCloudShape *local_this = (BulletConvexPointCloudShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletConvexPointCloudShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletConvexPointCloudShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletConvexPointCloudShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletConvexPointCloudShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletConvexPointCloudShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletConvexPointCloudShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletConvexPointCloudShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletConvexPointCloudShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletCylinderShape
 */
/**
 * Python function wrapper for:
 * inline void BulletCylinderShape::operator =(BulletCylinderShape const &copy)
 */
static PyObject *Dtool_BulletCylinderShape_operator_470(PyObject *self, PyObject *arg) {
  BulletCylinderShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletCylinderShape, (void **)&local_this, "BulletCylinderShape.assign")) {
    return NULL;
  }
  // 1-inline void BulletCylinderShape::operator =(BulletCylinderShape const &copy)
  CPT(BulletCylinderShape) arg_this;
  if (!Dtool_ConstCoerce_BulletCylinderShape(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletCylinderShape.assign", "BulletCylinderShape");
  }
  (*local_this).operator =(*MOVE(arg_this));
  BulletCylinderShape *return_value = local_this;
  if (return_value != (BulletCylinderShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletCylinderShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletCylinderShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletCylinderShape self, const BulletCylinderShape copy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletCylinderShape_operator_470_comment =
  "C++ Interface:\n"
  "assign(const BulletCylinderShape self, const BulletCylinderShape copy)\n";
#else
static const char *Dtool_BulletCylinderShape_operator_470_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletCylinderShape::get_radius(void) const
 */
static PyObject *Dtool_BulletCylinderShape_get_radius_471(PyObject *self, PyObject *) {
  BulletCylinderShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCylinderShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletCylinderShape::get_radius(void) const
  PN_stdfloat return_value = (*(const BulletCylinderShape*)local_this).get_radius();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletCylinderShape_get_radius_471_comment =
  "C++ Interface:\n"
  "get_radius(BulletCylinderShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCylinderShape_get_radius_471_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LVecBase3 BulletCylinderShape::get_half_extents_without_margin(void) const
 */
static PyObject *Dtool_BulletCylinderShape_get_half_extents_without_margin_472(PyObject *self, PyObject *) {
  BulletCylinderShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCylinderShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LVecBase3 BulletCylinderShape::get_half_extents_without_margin(void) const
  LVecBase3 *return_value = new LVecBase3((*(const BulletCylinderShape*)local_this).get_half_extents_without_margin());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletCylinderShape_get_half_extents_without_margin_472_comment =
  "C++ Interface:\n"
  "get_half_extents_without_margin(BulletCylinderShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCylinderShape_get_half_extents_without_margin_472_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LVecBase3 BulletCylinderShape::get_half_extents_with_margin(void) const
 */
static PyObject *Dtool_BulletCylinderShape_get_half_extents_with_margin_473(PyObject *self, PyObject *) {
  BulletCylinderShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletCylinderShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LVecBase3 BulletCylinderShape::get_half_extents_with_margin(void) const
  LVecBase3 *return_value = new LVecBase3((*(const BulletCylinderShape*)local_this).get_half_extents_with_margin());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVecBase3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletCylinderShape_get_half_extents_with_margin_473_comment =
  "C++ Interface:\n"
  "get_half_extents_with_margin(BulletCylinderShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletCylinderShape_get_half_extents_with_margin_473_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletCylinderShape::get_class_type(void)
 */
static PyObject *Dtool_BulletCylinderShape_get_class_type_474(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletCylinderShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletCylinderShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletCylinderShape_get_class_type_474_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletCylinderShape_get_class_type_474_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletCylinderShape::BulletCylinderShape(BulletCylinderShape const &copy)
 * BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up = ::Z_up)
 * BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
 */
static int Dtool_Init_BulletCylinderShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      {
        // -2 BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up)
        PyObject *param0;
        static const char *keyword_list[] = {"half_extents", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletCylinderShape", (char **)keyword_list, &param0)) {
          LVector3 const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_LVector3f, (void **)&param0_this);
          if (param0_this != NULL) {
            BulletCylinderShape *return_value = new BulletCylinderShape(*param0_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCylinderShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 inline BulletCylinderShape::BulletCylinderShape(BulletCylinderShape const &copy)
        PyObject *param0;
        static const char *keyword_list[] = {"copy", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletCylinderShape", (char **)keyword_list, &param0)) {
          BulletCylinderShape const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletCylinderShape, (void **)&param0_this);
          if (param0_this != NULL) {
            BulletCylinderShape *return_value = new BulletCylinderShape(*param0_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCylinderShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up)
        PyObject *param0;
        static const char *keyword_list[] = {"half_extents", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletCylinderShape", (char **)keyword_list, &param0)) {
          LVector3f param0_local;
          LVector3 const *param0_this = Dtool_Coerce_LVector3f(param0, param0_local);
          if ((param0_this != NULL)) {
            BulletCylinderShape *return_value = new BulletCylinderShape(*param0_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCylinderShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 inline BulletCylinderShape::BulletCylinderShape(BulletCylinderShape const &copy)
        PyObject *param0;
        static const char *keyword_list[] = {"copy", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletCylinderShape", (char **)keyword_list, &param0)) {
          CPT(BulletCylinderShape) param0_this;
          if (Dtool_ConstCoerce_BulletCylinderShape(param0, param0_this)) {
            BulletCylinderShape *return_value = new BulletCylinderShape(*MOVE(param0_this));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCylinderShape, true, false);
          }
        }
        PyErr_Clear();
      }

    }
    break;
  case 2:
  case 3:
    {
      {
        // -2 BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
        float param0;
        float param1;
        int param2 = ::Z_up;
        static const char *keyword_list[] = {"radius", "height", "up", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "ff|i:BulletCylinderShape", (char **)keyword_list, &param0, &param1, &param2)) {
          BulletCylinderShape *return_value = new BulletCylinderShape((PN_stdfloat)param0, (PN_stdfloat)param1, (BulletUpAxis)param2);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCylinderShape, true, false);
        }
        PyErr_Clear();
      }

      // No coercion possible: BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
      {
        // -2 BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up = ::Z_up)
        PyObject *param0;
        int param1;
        static const char *keyword_list[] = {"half_extents", "up", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "Oi:BulletCylinderShape", (char **)keyword_list, &param0, &param1)) {
          LVector3f param0_local;
          LVector3 const *param0_this = Dtool_Coerce_LVector3f(param0, param0_local);
          if ((param0_this != NULL)) {
            BulletCylinderShape *return_value = new BulletCylinderShape(*param0_this, (BulletUpAxis)param1);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletCylinderShape, true, false);
          }
        }
        PyErr_Clear();
      }

    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletCylinderShape() takes 1, 2 or 3 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletCylinderShape(const LVector3f half_extents)\n"
      "BulletCylinderShape(const BulletCylinderShape copy)\n"
      "BulletCylinderShape(float radius, float height, int up)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletCylinderShape(PyObject *args, CPT(BulletCylinderShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletCylinderShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up)
    LVector3 const *arg_this;
    DTOOL_Call_ExtractThisPointerForType(arg, Dtool_Ptr_LVector3f, (void **)&arg_this);
    if (arg_this != NULL) {
      BulletCylinderShape *return_value = new BulletCylinderShape(*arg_this);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      return_value->ref();
      if (_PyErr_OCCURRED()) {
        unref_delete(return_value);
        return false;
      } else {
        coerced = MOVE(return_value);
        return true;
      }
    }
  } else {
    Py_ssize_t size = PyTuple_GET_SIZE(args);
    if (size >= 2 && size <= 3) {
      {
        // -2 BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
        float param0;
        float param1;
        int param2 = ::Z_up;
        if (PyArg_ParseTuple(args, "ff|i:BulletCylinderShape", &param0, &param1, &param2)) {
          BulletCylinderShape *return_value = new BulletCylinderShape((PN_stdfloat)param0, (PN_stdfloat)param1, (BulletUpAxis)param2);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up = ::Z_up)
        PyObject *param0;
        int param1;
        if (PyArg_ParseTuple(args, "Oi:BulletCylinderShape", &param0, &param1)) {
          LVector3 const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_LVector3f, (void **)&param0_this);
          if (param0_this != NULL) {
            BulletCylinderShape *return_value = new BulletCylinderShape(*param0_this, (BulletUpAxis)param1);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
      }

    }
  }

  return false;
}

bool Dtool_Coerce_BulletCylinderShape(PyObject *args, PT(BulletCylinderShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletCylinderShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up)
    LVector3 const *arg_this;
    DTOOL_Call_ExtractThisPointerForType(arg, Dtool_Ptr_LVector3f, (void **)&arg_this);
    if (arg_this != NULL) {
      BulletCylinderShape *return_value = new BulletCylinderShape(*arg_this);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      return_value->ref();
      if (_PyErr_OCCURRED()) {
        unref_delete(return_value);
        return false;
      } else {
        coerced = MOVE(return_value);
        return true;
      }
    }
  } else {
    Py_ssize_t size = PyTuple_GET_SIZE(args);
    if (size >= 2 && size <= 3) {
      {
        // -2 BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up)
        float param0;
        float param1;
        int param2 = ::Z_up;
        if (PyArg_ParseTuple(args, "ff|i:BulletCylinderShape", &param0, &param1, &param2)) {
          BulletCylinderShape *return_value = new BulletCylinderShape((PN_stdfloat)param0, (PN_stdfloat)param1, (BulletUpAxis)param2);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up = ::Z_up)
        PyObject *param0;
        int param1;
        if (PyArg_ParseTuple(args, "Oi:BulletCylinderShape", &param0, &param1)) {
          LVector3 const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_LVector3f, (void **)&param0_this);
          if (param0_this != NULL) {
            BulletCylinderShape *return_value = new BulletCylinderShape(*param0_this, (BulletUpAxis)param1);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
      }

    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletCylinderShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletCylinderShape) {
    printf("BulletCylinderShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletCylinderShape *local_this = (BulletCylinderShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletCylinderShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletCylinderShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletCylinderShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletCylinderShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletCylinderShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletCylinderShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletCylinderShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletCylinderShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletFilterCallbackData
 */
/**
 * Python function wrapper for:
 * inline PandaNode *BulletFilterCallbackData::get_node_0(void) const
 */
static PyObject *Dtool_BulletFilterCallbackData_get_node_0_477(PyObject *self, PyObject *) {
  BulletFilterCallbackData *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletFilterCallbackData, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PandaNode *BulletFilterCallbackData::get_node_0(void) const
  PandaNode *return_value = (*(const BulletFilterCallbackData*)local_this).get_node_0();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletFilterCallbackData_get_node_0_477_comment =
  "C++ Interface:\n"
  "get_node_0(BulletFilterCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletFilterCallbackData_get_node_0_477_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PandaNode *BulletFilterCallbackData::get_node_1(void) const
 */
static PyObject *Dtool_BulletFilterCallbackData_get_node_1_478(PyObject *self, PyObject *) {
  BulletFilterCallbackData *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletFilterCallbackData, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PandaNode *BulletFilterCallbackData::get_node_1(void) const
  PandaNode *return_value = (*(const BulletFilterCallbackData*)local_this).get_node_1();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletFilterCallbackData_get_node_1_478_comment =
  "C++ Interface:\n"
  "get_node_1(BulletFilterCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletFilterCallbackData_get_node_1_478_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletFilterCallbackData::set_collide(bool collide)
 */
static PyObject *Dtool_BulletFilterCallbackData_set_collide_479(PyObject *self, PyObject *arg) {
  BulletFilterCallbackData *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletFilterCallbackData, (void **)&local_this, "BulletFilterCallbackData.set_collide")) {
    return NULL;
  }
  // 1-inline void BulletFilterCallbackData::set_collide(bool collide)
  (*local_this).set_collide((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_collide(const BulletFilterCallbackData self, bool collide)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletFilterCallbackData_set_collide_479_comment =
  "C++ Interface:\n"
  "set_collide(const BulletFilterCallbackData self, bool collide)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletFilterCallbackData_set_collide_479_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletFilterCallbackData::get_collide(void) const
 */
static PyObject *Dtool_BulletFilterCallbackData_get_collide_480(PyObject *self, PyObject *) {
  BulletFilterCallbackData *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletFilterCallbackData, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletFilterCallbackData::get_collide(void) const
  bool return_value = (*(const BulletFilterCallbackData*)local_this).get_collide();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletFilterCallbackData_get_collide_480_comment =
  "C++ Interface:\n"
  "get_collide(BulletFilterCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletFilterCallbackData_get_collide_480_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletFilterCallbackData::get_class_type(void)
 */
static PyObject *Dtool_BulletFilterCallbackData_get_class_type_481(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletFilterCallbackData::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletFilterCallbackData::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletFilterCallbackData_get_class_type_481_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletFilterCallbackData_get_class_type_481_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletFilterCallbackData::BulletFilterCallbackData(BulletFilterCallbackData const &) = default
 * inline BulletFilterCallbackData::BulletFilterCallbackData(PandaNode *node0, PandaNode *node1)
 */
static int Dtool_Init_BulletFilterCallbackData(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "param0");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
        return -1;
      }
      // 1-inline BulletFilterCallbackData::BulletFilterCallbackData(BulletFilterCallbackData const &) = default
      BulletFilterCallbackData const *arg_this;
      bool arg_manage = false;
      if (!Dtool_ConstCoerce_BulletFilterCallbackData(arg, arg_this, arg_manage)) {
        Dtool_Raise_ArgTypeError(arg, 0, "BulletFilterCallbackData.BulletFilterCallbackData", "BulletFilterCallbackData");
        return -1;
      }
      BulletFilterCallbackData *return_value = new BulletFilterCallbackData(*arg_this);
      if (arg_manage) {
        delete arg_this;
      }
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletFilterCallbackData, true, false);
    }
    break;
  case 2:
    {
      // 1-inline BulletFilterCallbackData::BulletFilterCallbackData(PandaNode *node0, PandaNode *node1)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"node0", "node1", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletFilterCallbackData", (char **)keyword_list, &param0, &param1)) {
        PandaNode *param0_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_PandaNode, 0, "BulletFilterCallbackData.BulletFilterCallbackData", false, true);
        PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletFilterCallbackData.BulletFilterCallbackData", false, true);
        if (param0_this != NULL && param1_this != NULL) {
          BulletFilterCallbackData *return_value = new BulletFilterCallbackData(param0_this, param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          if (Dtool_CheckErrorOccurred()) {
            delete return_value;
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletFilterCallbackData, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletFilterCallbackData() takes 1 or 2 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletFilterCallbackData(const BulletFilterCallbackData param0)\n"
      "BulletFilterCallbackData(PandaNode node0, PandaNode node1)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletFilterCallbackData(PyObject *args, BulletFilterCallbackData const *&coerced, bool &manage) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletFilterCallbackData, (void**)&coerced);
  if (coerced != NULL) {
    return true;
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 2) {
      // 1-inline BulletFilterCallbackData::BulletFilterCallbackData(PandaNode *node0, PandaNode *node1)
      PyObject *param0;
      PyObject *param1;
      if (PyArg_UnpackTuple(args, "BulletFilterCallbackData", 2, 2, &param0, &param1)) {
        PandaNode *param0_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_PandaNode, 0, "BulletFilterCallbackData.BulletFilterCallbackData", false, false);
        PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletFilterCallbackData.BulletFilterCallbackData", false, false);
        if (param0_this != NULL && param1_this != NULL) {
          BulletFilterCallbackData *return_value = new BulletFilterCallbackData(param0_this, param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          if (_PyErr_OCCURRED()) {
            delete return_value;
            return false;
          } else {
            coerced = return_value;
            manage = true;
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

bool Dtool_Coerce_BulletFilterCallbackData(PyObject *args, BulletFilterCallbackData *&coerced, bool &manage) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletFilterCallbackData, (void**)&coerced);
  if (coerced != NULL) {
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 2) {
      // 1-inline BulletFilterCallbackData::BulletFilterCallbackData(PandaNode *node0, PandaNode *node1)
      PyObject *param0;
      PyObject *param1;
      if (PyArg_UnpackTuple(args, "BulletFilterCallbackData", 2, 2, &param0, &param1)) {
        PandaNode *param0_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_PandaNode, 0, "BulletFilterCallbackData.BulletFilterCallbackData", false, false);
        PandaNode *param1_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_PandaNode, 1, "BulletFilterCallbackData.BulletFilterCallbackData", false, false);
        if (param0_this != NULL && param1_this != NULL) {
          BulletFilterCallbackData *return_value = new BulletFilterCallbackData(param0_this, param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          if (_PyErr_OCCURRED()) {
            delete return_value;
            return false;
          } else {
            coerced = return_value;
            manage = true;
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletFilterCallbackData(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletFilterCallbackData) {
    printf("BulletFilterCallbackData ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletFilterCallbackData *local_this = (BulletFilterCallbackData *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletFilterCallbackData) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_CallbackData) {
    return (CallbackData *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(CallbackData *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletFilterCallbackData(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletFilterCallbackData) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_CallbackData) {
    CallbackData* other_this = (CallbackData*)from_this;
    return (BulletFilterCallbackData*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletFilterCallbackData*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletRotationalLimitMotor
 */
/**
 * Python function wrapper for:
 * inline void BulletRotationalLimitMotor::set_motor_enabled(bool enable)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_motor_enabled_486(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_motor_enabled")) {
    return NULL;
  }
  // 1-inline void BulletRotationalLimitMotor::set_motor_enabled(bool enable)
  (*local_this).set_motor_enabled((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_motor_enabled(const BulletRotationalLimitMotor self, bool enable)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_motor_enabled_486_comment =
  "C++ Interface:\n"
  "set_motor_enabled(const BulletRotationalLimitMotor self, bool enable)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_motor_enabled_486_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRotationalLimitMotor::set_low_limit(PN_stdfloat limit)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_low_limit_487(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_low_limit")) {
    return NULL;
  }
  // 1-inline void BulletRotationalLimitMotor::set_low_limit(PN_stdfloat limit)
  if (PyNumber_Check(arg)) {
    (*local_this).set_low_limit((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_low_limit(const BulletRotationalLimitMotor self, float limit)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_low_limit_487_comment =
  "C++ Interface:\n"
  "set_low_limit(const BulletRotationalLimitMotor self, float limit)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_low_limit_487_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRotationalLimitMotor::set_high_limit(PN_stdfloat limit)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_high_limit_488(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_high_limit")) {
    return NULL;
  }
  // 1-inline void BulletRotationalLimitMotor::set_high_limit(PN_stdfloat limit)
  if (PyNumber_Check(arg)) {
    (*local_this).set_high_limit((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_high_limit(const BulletRotationalLimitMotor self, float limit)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_high_limit_488_comment =
  "C++ Interface:\n"
  "set_high_limit(const BulletRotationalLimitMotor self, float limit)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_high_limit_488_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRotationalLimitMotor::set_target_velocity(PN_stdfloat velocity)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_target_velocity_489(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_target_velocity")) {
    return NULL;
  }
  // 1-inline void BulletRotationalLimitMotor::set_target_velocity(PN_stdfloat velocity)
  if (PyNumber_Check(arg)) {
    (*local_this).set_target_velocity((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_target_velocity(const BulletRotationalLimitMotor self, float velocity)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_target_velocity_489_comment =
  "C++ Interface:\n"
  "set_target_velocity(const BulletRotationalLimitMotor self, float velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_target_velocity_489_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRotationalLimitMotor::set_max_motor_force(PN_stdfloat force)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_max_motor_force_490(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_max_motor_force")) {
    return NULL;
  }
  // 1-inline void BulletRotationalLimitMotor::set_max_motor_force(PN_stdfloat force)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_motor_force((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_motor_force(const BulletRotationalLimitMotor self, float force)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_max_motor_force_490_comment =
  "C++ Interface:\n"
  "set_max_motor_force(const BulletRotationalLimitMotor self, float force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_max_motor_force_490_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRotationalLimitMotor::set_max_limit_force(PN_stdfloat force)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_max_limit_force_491(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_max_limit_force")) {
    return NULL;
  }
  // 1-inline void BulletRotationalLimitMotor::set_max_limit_force(PN_stdfloat force)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_limit_force((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_limit_force(const BulletRotationalLimitMotor self, float force)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_max_limit_force_491_comment =
  "C++ Interface:\n"
  "set_max_limit_force(const BulletRotationalLimitMotor self, float force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_max_limit_force_491_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRotationalLimitMotor::set_damping(PN_stdfloat damping)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_damping_492(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_damping")) {
    return NULL;
  }
  // 1-inline void BulletRotationalLimitMotor::set_damping(PN_stdfloat damping)
  if (PyNumber_Check(arg)) {
    (*local_this).set_damping((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_damping(const BulletRotationalLimitMotor self, float damping)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_damping_492_comment =
  "C++ Interface:\n"
  "set_damping(const BulletRotationalLimitMotor self, float damping)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_damping_492_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRotationalLimitMotor::set_softness(PN_stdfloat softness)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_softness_493(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_softness")) {
    return NULL;
  }
  // 1-inline void BulletRotationalLimitMotor::set_softness(PN_stdfloat softness)
  if (PyNumber_Check(arg)) {
    (*local_this).set_softness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_softness(const BulletRotationalLimitMotor self, float softness)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_softness_493_comment =
  "C++ Interface:\n"
  "set_softness(const BulletRotationalLimitMotor self, float softness)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_softness_493_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRotationalLimitMotor::set_bounce(PN_stdfloat bounce)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_bounce_494(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_bounce")) {
    return NULL;
  }
  // 1-inline void BulletRotationalLimitMotor::set_bounce(PN_stdfloat bounce)
  if (PyNumber_Check(arg)) {
    (*local_this).set_bounce((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_bounce(const BulletRotationalLimitMotor self, float bounce)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_bounce_494_comment =
  "C++ Interface:\n"
  "set_bounce(const BulletRotationalLimitMotor self, float bounce)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_bounce_494_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRotationalLimitMotor::set_normal_cfm(PN_stdfloat cfm)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_normal_cfm_495(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_normal_cfm")) {
    return NULL;
  }
  // 1-inline void BulletRotationalLimitMotor::set_normal_cfm(PN_stdfloat cfm)
  if (PyNumber_Check(arg)) {
    (*local_this).set_normal_cfm((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_normal_cfm(const BulletRotationalLimitMotor self, float cfm)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_normal_cfm_495_comment =
  "C++ Interface:\n"
  "set_normal_cfm(const BulletRotationalLimitMotor self, float cfm)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_normal_cfm_495_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRotationalLimitMotor::set_stop_cfm(PN_stdfloat cfm)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_stop_cfm_496(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_stop_cfm")) {
    return NULL;
  }
  // 1-inline void BulletRotationalLimitMotor::set_stop_cfm(PN_stdfloat cfm)
  if (PyNumber_Check(arg)) {
    (*local_this).set_stop_cfm((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_stop_cfm(const BulletRotationalLimitMotor self, float cfm)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_stop_cfm_496_comment =
  "C++ Interface:\n"
  "set_stop_cfm(const BulletRotationalLimitMotor self, float cfm)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_stop_cfm_496_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletRotationalLimitMotor::set_stop_erp(PN_stdfloat erp)
 */
static PyObject *Dtool_BulletRotationalLimitMotor_set_stop_erp_497(PyObject *self, PyObject *arg) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this, "BulletRotationalLimitMotor.set_stop_erp")) {
    return NULL;
  }
  // 1-inline void BulletRotationalLimitMotor::set_stop_erp(PN_stdfloat erp)
  if (PyNumber_Check(arg)) {
    (*local_this).set_stop_erp((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_stop_erp(const BulletRotationalLimitMotor self, float erp)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_set_stop_erp_497_comment =
  "C++ Interface:\n"
  "set_stop_erp(const BulletRotationalLimitMotor self, float erp)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_set_stop_erp_497_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletRotationalLimitMotor::is_limited(void) const
 */
static PyObject *Dtool_BulletRotationalLimitMotor_is_limited_498(PyObject *self, PyObject *) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletRotationalLimitMotor::is_limited(void) const
  bool return_value = (*(const BulletRotationalLimitMotor*)local_this).is_limited();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_is_limited_498_comment =
  "C++ Interface:\n"
  "is_limited(BulletRotationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_is_limited_498_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletRotationalLimitMotor::get_motor_enabled(void) const
 */
static PyObject *Dtool_BulletRotationalLimitMotor_get_motor_enabled_499(PyObject *self, PyObject *) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletRotationalLimitMotor::get_motor_enabled(void) const
  bool return_value = (*(const BulletRotationalLimitMotor*)local_this).get_motor_enabled();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_get_motor_enabled_499_comment =
  "C++ Interface:\n"
  "get_motor_enabled(BulletRotationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_get_motor_enabled_499_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletRotationalLimitMotor::get_current_limit(void) const
 */
static PyObject *Dtool_BulletRotationalLimitMotor_get_current_limit_500(PyObject *self, PyObject *) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletRotationalLimitMotor::get_current_limit(void) const
  int return_value = (*(const BulletRotationalLimitMotor*)local_this).get_current_limit();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_get_current_limit_500_comment =
  "C++ Interface:\n"
  "get_current_limit(BulletRotationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at\n"
  " * high limit.\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_get_current_limit_500_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletRotationalLimitMotor::get_current_error(void) const
 */
static PyObject *Dtool_BulletRotationalLimitMotor_get_current_error_501(PyObject *self, PyObject *) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletRotationalLimitMotor::get_current_error(void) const
  PN_stdfloat return_value = (*(const BulletRotationalLimitMotor*)local_this).get_current_error();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_get_current_error_501_comment =
  "C++ Interface:\n"
  "get_current_error(BulletRotationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_get_current_error_501_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletRotationalLimitMotor::get_current_position(void) const
 */
static PyObject *Dtool_BulletRotationalLimitMotor_get_current_position_502(PyObject *self, PyObject *) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletRotationalLimitMotor::get_current_position(void) const
  PN_stdfloat return_value = (*(const BulletRotationalLimitMotor*)local_this).get_current_position();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_get_current_position_502_comment =
  "C++ Interface:\n"
  "get_current_position(BulletRotationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_get_current_position_502_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletRotationalLimitMotor::get_accumulated_impulse(void) const
 */
static PyObject *Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_503(PyObject *self, PyObject *) {
  BulletRotationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletRotationalLimitMotor, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletRotationalLimitMotor::get_accumulated_impulse(void) const
  PN_stdfloat return_value = (*(const BulletRotationalLimitMotor*)local_this).get_accumulated_impulse();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_503_comment =
  "C++ Interface:\n"
  "get_accumulated_impulse(BulletRotationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_503_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletRotationalLimitMotor::BulletRotationalLimitMotor(BulletRotationalLimitMotor const &copy)
 */
static int Dtool_Init_BulletRotationalLimitMotor(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletRotationalLimitMotor() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg = NULL;
  if (PyTuple_GET_SIZE(args) == 1) {
    arg = PyTuple_GET_ITEM(args, 0);
  } else if (kwds != NULL) {
    arg = PyDict_GetItemString(kwds, "copy");
  }
  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("Required argument 'copy' (pos 1) not found");
    return -1;
  }
  // 1-BulletRotationalLimitMotor::BulletRotationalLimitMotor(BulletRotationalLimitMotor const &copy)
  BulletRotationalLimitMotor const *arg_this = (BulletRotationalLimitMotor *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletRotationalLimitMotor, 0, "BulletRotationalLimitMotor.BulletRotationalLimitMotor", true, true);
  if (arg_this != NULL) {
    BulletRotationalLimitMotor *return_value = new BulletRotationalLimitMotor(*arg_this);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletRotationalLimitMotor, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletRotationalLimitMotor(const BulletRotationalLimitMotor copy)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletRotationalLimitMotor(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletRotationalLimitMotor) {
    printf("BulletRotationalLimitMotor ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletRotationalLimitMotor *local_this = (BulletRotationalLimitMotor *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletRotationalLimitMotor) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletRotationalLimitMotor(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletRotationalLimitMotor) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletTranslationalLimitMotor
 */
/**
 * Python function wrapper for:
 * inline void BulletTranslationalLimitMotor::set_motor_enabled(int axis, bool enable)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_motor_enabled_507(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_motor_enabled")) {
    return NULL;
  }
  // 1-inline void BulletTranslationalLimitMotor::set_motor_enabled(int axis, bool enable)
  int param1;
  PyObject *param2;
  static const char *keyword_list[] = {"axis", "enable", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "iO:set_motor_enabled", (char **)keyword_list, &param1, &param2)) {
    (*local_this).set_motor_enabled((int)param1, (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_motor_enabled(const BulletTranslationalLimitMotor self, int axis, bool enable)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_motor_enabled_507_comment =
  "C++ Interface:\n"
  "set_motor_enabled(const BulletTranslationalLimitMotor self, int axis, bool enable)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_motor_enabled_507_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletTranslationalLimitMotor::set_low_limit(LVecBase3 const &limit)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_low_limit_508(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_low_limit")) {
    return NULL;
  }
  // 1-inline void BulletTranslationalLimitMotor::set_low_limit(LVecBase3 const &limit)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_low_limit", "LVecBase3f");
  }
  (*local_this).set_low_limit(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_low_limit(const BulletTranslationalLimitMotor self, const LVecBase3f limit)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_low_limit_508_comment =
  "C++ Interface:\n"
  "set_low_limit(const BulletTranslationalLimitMotor self, const LVecBase3f limit)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_low_limit_508_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletTranslationalLimitMotor::set_high_limit(LVecBase3 const &limit)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_high_limit_509(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_high_limit")) {
    return NULL;
  }
  // 1-inline void BulletTranslationalLimitMotor::set_high_limit(LVecBase3 const &limit)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_high_limit", "LVecBase3f");
  }
  (*local_this).set_high_limit(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_high_limit(const BulletTranslationalLimitMotor self, const LVecBase3f limit)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_high_limit_509_comment =
  "C++ Interface:\n"
  "set_high_limit(const BulletTranslationalLimitMotor self, const LVecBase3f limit)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_high_limit_509_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletTranslationalLimitMotor::set_target_velocity(LVecBase3 const &velocity)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_target_velocity_510(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_target_velocity")) {
    return NULL;
  }
  // 1-inline void BulletTranslationalLimitMotor::set_target_velocity(LVecBase3 const &velocity)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_target_velocity", "LVecBase3f");
  }
  (*local_this).set_target_velocity(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_target_velocity(const BulletTranslationalLimitMotor self, const LVecBase3f velocity)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_target_velocity_510_comment =
  "C++ Interface:\n"
  "set_target_velocity(const BulletTranslationalLimitMotor self, const LVecBase3f velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_target_velocity_510_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletTranslationalLimitMotor::set_max_motor_force(LVecBase3 const &force)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_max_motor_force_511(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_max_motor_force")) {
    return NULL;
  }
  // 1-inline void BulletTranslationalLimitMotor::set_max_motor_force(LVecBase3 const &force)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_max_motor_force", "LVecBase3f");
  }
  (*local_this).set_max_motor_force(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_motor_force(const BulletTranslationalLimitMotor self, const LVecBase3f force)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_max_motor_force_511_comment =
  "C++ Interface:\n"
  "set_max_motor_force(const BulletTranslationalLimitMotor self, const LVecBase3f force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_max_motor_force_511_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletTranslationalLimitMotor::set_damping(PN_stdfloat damping)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_damping_512(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_damping")) {
    return NULL;
  }
  // 1-inline void BulletTranslationalLimitMotor::set_damping(PN_stdfloat damping)
  if (PyNumber_Check(arg)) {
    (*local_this).set_damping((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_damping(const BulletTranslationalLimitMotor self, float damping)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_damping_512_comment =
  "C++ Interface:\n"
  "set_damping(const BulletTranslationalLimitMotor self, float damping)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_damping_512_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletTranslationalLimitMotor::set_softness(PN_stdfloat softness)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_softness_513(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_softness")) {
    return NULL;
  }
  // 1-inline void BulletTranslationalLimitMotor::set_softness(PN_stdfloat softness)
  if (PyNumber_Check(arg)) {
    (*local_this).set_softness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_softness(const BulletTranslationalLimitMotor self, float softness)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_softness_513_comment =
  "C++ Interface:\n"
  "set_softness(const BulletTranslationalLimitMotor self, float softness)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_softness_513_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletTranslationalLimitMotor::set_restitution(PN_stdfloat restitution)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_restitution_514(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_restitution")) {
    return NULL;
  }
  // 1-inline void BulletTranslationalLimitMotor::set_restitution(PN_stdfloat restitution)
  if (PyNumber_Check(arg)) {
    (*local_this).set_restitution((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_restitution(const BulletTranslationalLimitMotor self, float restitution)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_restitution_514_comment =
  "C++ Interface:\n"
  "set_restitution(const BulletTranslationalLimitMotor self, float restitution)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_restitution_514_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletTranslationalLimitMotor::set_normal_cfm(LVecBase3 const &cfm)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_normal_cfm_515(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_normal_cfm")) {
    return NULL;
  }
  // 1-inline void BulletTranslationalLimitMotor::set_normal_cfm(LVecBase3 const &cfm)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_normal_cfm", "LVecBase3f");
  }
  (*local_this).set_normal_cfm(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_normal_cfm(const BulletTranslationalLimitMotor self, const LVecBase3f cfm)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_normal_cfm_515_comment =
  "C++ Interface:\n"
  "set_normal_cfm(const BulletTranslationalLimitMotor self, const LVecBase3f cfm)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_normal_cfm_515_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletTranslationalLimitMotor::set_stop_erp(LVecBase3 const &erp)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_stop_erp_516(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_stop_erp")) {
    return NULL;
  }
  // 1-inline void BulletTranslationalLimitMotor::set_stop_erp(LVecBase3 const &erp)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_stop_erp", "LVecBase3f");
  }
  (*local_this).set_stop_erp(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_stop_erp(const BulletTranslationalLimitMotor self, const LVecBase3f erp)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_stop_erp_516_comment =
  "C++ Interface:\n"
  "set_stop_erp(const BulletTranslationalLimitMotor self, const LVecBase3f erp)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_stop_erp_516_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletTranslationalLimitMotor::set_stop_cfm(LVecBase3 const &cfm)
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_set_stop_cfm_517(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this, "BulletTranslationalLimitMotor.set_stop_cfm")) {
    return NULL;
  }
  // 1-inline void BulletTranslationalLimitMotor::set_stop_cfm(LVecBase3 const &cfm)
  LVecBase3f arg_local;
  LVecBase3 const *arg_this = Dtool_Coerce_LVecBase3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTranslationalLimitMotor.set_stop_cfm", "LVecBase3f");
  }
  (*local_this).set_stop_cfm(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_stop_cfm(const BulletTranslationalLimitMotor self, const LVecBase3f cfm)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_set_stop_cfm_517_comment =
  "C++ Interface:\n"
  "set_stop_cfm(const BulletTranslationalLimitMotor self, const LVecBase3f cfm)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_set_stop_cfm_517_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletTranslationalLimitMotor::is_limited(int axis) const
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_is_limited_518(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletTranslationalLimitMotor::is_limited(int axis) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    bool return_value = (*(const BulletTranslationalLimitMotor*)local_this).is_limited((int)arg_val);
    return Dtool_Return_Bool(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "is_limited(BulletTranslationalLimitMotor self, int axis)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_is_limited_518_comment =
  "C++ Interface:\n"
  "is_limited(BulletTranslationalLimitMotor self, int axis)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_is_limited_518_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletTranslationalLimitMotor::get_motor_enabled(int axis) const
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_get_motor_enabled_519(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletTranslationalLimitMotor::get_motor_enabled(int axis) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    bool return_value = (*(const BulletTranslationalLimitMotor*)local_this).get_motor_enabled((int)arg_val);
    return Dtool_Return_Bool(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_motor_enabled(BulletTranslationalLimitMotor self, int axis)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_get_motor_enabled_519_comment =
  "C++ Interface:\n"
  "get_motor_enabled(BulletTranslationalLimitMotor self, int axis)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_get_motor_enabled_519_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletTranslationalLimitMotor::get_current_limit(int axis) const
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_get_current_limit_520(PyObject *self, PyObject *arg) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletTranslationalLimitMotor::get_current_limit(int axis) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    int return_value = (*(const BulletTranslationalLimitMotor*)local_this).get_current_limit((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_current_limit(BulletTranslationalLimitMotor self, int axis)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_get_current_limit_520_comment =
  "C++ Interface:\n"
  "get_current_limit(BulletTranslationalLimitMotor self, int axis)\n"
  "\n"
  "/**\n"
  " * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at\n"
  " * high limit.\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_get_current_limit_520_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LVector3 BulletTranslationalLimitMotor::get_current_error(void) const
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_get_current_error_521(PyObject *self, PyObject *) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LVector3 BulletTranslationalLimitMotor::get_current_error(void) const
  LVector3 *return_value = new LVector3((*(const BulletTranslationalLimitMotor*)local_this).get_current_error());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_get_current_error_521_comment =
  "C++ Interface:\n"
  "get_current_error(BulletTranslationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_get_current_error_521_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LPoint3 BulletTranslationalLimitMotor::get_current_diff(void) const
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_get_current_diff_522(PyObject *self, PyObject *) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LPoint3 BulletTranslationalLimitMotor::get_current_diff(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletTranslationalLimitMotor*)local_this).get_current_diff());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_get_current_diff_522_comment =
  "C++ Interface:\n"
  "get_current_diff(BulletTranslationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_get_current_diff_522_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LVector3 BulletTranslationalLimitMotor::get_accumulated_impulse(void) const
 */
static PyObject *Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_523(PyObject *self, PyObject *) {
  BulletTranslationalLimitMotor *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTranslationalLimitMotor, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LVector3 BulletTranslationalLimitMotor::get_accumulated_impulse(void) const
  LVector3 *return_value = new LVector3((*(const BulletTranslationalLimitMotor*)local_this).get_accumulated_impulse());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_523_comment =
  "C++ Interface:\n"
  "get_accumulated_impulse(BulletTranslationalLimitMotor self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_523_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletTranslationalLimitMotor::BulletTranslationalLimitMotor(BulletTranslationalLimitMotor const &copy)
 */
static int Dtool_Init_BulletTranslationalLimitMotor(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletTranslationalLimitMotor() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg = NULL;
  if (PyTuple_GET_SIZE(args) == 1) {
    arg = PyTuple_GET_ITEM(args, 0);
  } else if (kwds != NULL) {
    arg = PyDict_GetItemString(kwds, "copy");
  }
  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("Required argument 'copy' (pos 1) not found");
    return -1;
  }
  // 1-BulletTranslationalLimitMotor::BulletTranslationalLimitMotor(BulletTranslationalLimitMotor const &copy)
  BulletTranslationalLimitMotor const *arg_this = (BulletTranslationalLimitMotor *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletTranslationalLimitMotor, 0, "BulletTranslationalLimitMotor.BulletTranslationalLimitMotor", true, true);
  if (arg_this != NULL) {
    BulletTranslationalLimitMotor *return_value = new BulletTranslationalLimitMotor(*arg_this);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletTranslationalLimitMotor, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletTranslationalLimitMotor(const BulletTranslationalLimitMotor copy)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletTranslationalLimitMotor(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletTranslationalLimitMotor) {
    printf("BulletTranslationalLimitMotor ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletTranslationalLimitMotor *local_this = (BulletTranslationalLimitMotor *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletTranslationalLimitMotor) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletTranslationalLimitMotor(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletTranslationalLimitMotor) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletGenericConstraint
 */
/**
 * Python function wrapper for:
 * LVector3 BulletGenericConstraint::get_axis(int axis) const
 */
static PyObject *Dtool_BulletGenericConstraint_get_axis_526(PyObject *self, PyObject *arg) {
  BulletGenericConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGenericConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletGenericConstraint::get_axis(int axis) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    LVector3 *return_value = new LVector3((*(const BulletGenericConstraint*)local_this).get_axis((int)arg_val));
    if (return_value == NULL) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_axis(BulletGenericConstraint self, int axis)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_axis_526_comment =
  "C++ Interface:\n"
  "get_axis(BulletGenericConstraint self, int axis)\n"
  "\n"
  "// Geometry\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_axis_526_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletGenericConstraint::get_pivot(int axis) const
 */
static PyObject *Dtool_BulletGenericConstraint_get_pivot_527(PyObject *self, PyObject *arg) {
  BulletGenericConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGenericConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletGenericConstraint::get_pivot(int axis) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    PN_stdfloat return_value = (*(const BulletGenericConstraint*)local_this).get_pivot((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_pivot(BulletGenericConstraint self, int axis)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_pivot_527_comment =
  "C++ Interface:\n"
  "get_pivot(BulletGenericConstraint self, int axis)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_pivot_527_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletGenericConstraint::get_angle(int axis) const
 */
static PyObject *Dtool_BulletGenericConstraint_get_angle_528(PyObject *self, PyObject *arg) {
  BulletGenericConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGenericConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletGenericConstraint::get_angle(int axis) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    PN_stdfloat return_value = (*(const BulletGenericConstraint*)local_this).get_angle((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_angle(BulletGenericConstraint self, int axis)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_angle_528_comment =
  "C++ Interface:\n"
  "get_angle(BulletGenericConstraint self, int axis)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_angle_528_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletGenericConstraint::set_linear_limit(int axis, PN_stdfloat low, PN_stdfloat high)
 */
static PyObject *Dtool_BulletGenericConstraint_set_linear_limit_529(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletGenericConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletGenericConstraint, (void **)&local_this, "BulletGenericConstraint.set_linear_limit")) {
    return NULL;
  }
  // 1-void BulletGenericConstraint::set_linear_limit(int axis, PN_stdfloat low, PN_stdfloat high)
  int param1;
  float param2;
  float param3;
  static const char *keyword_list[] = {"axis", "low", "high", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "iff:set_linear_limit", (char **)keyword_list, &param1, &param2, &param3)) {
    (*local_this).set_linear_limit((int)param1, (PN_stdfloat)param2, (PN_stdfloat)param3);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_limit(const BulletGenericConstraint self, int axis, float low, float high)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_set_linear_limit_529_comment =
  "C++ Interface:\n"
  "set_linear_limit(const BulletGenericConstraint self, int axis, float low, float high)\n"
  "\n"
  "// Limit\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_set_linear_limit_529_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletGenericConstraint::set_angular_limit(int axis, PN_stdfloat low, PN_stdfloat high)
 */
static PyObject *Dtool_BulletGenericConstraint_set_angular_limit_530(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletGenericConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletGenericConstraint, (void **)&local_this, "BulletGenericConstraint.set_angular_limit")) {
    return NULL;
  }
  // 1-void BulletGenericConstraint::set_angular_limit(int axis, PN_stdfloat low, PN_stdfloat high)
  int param1;
  float param2;
  float param3;
  static const char *keyword_list[] = {"axis", "low", "high", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "iff:set_angular_limit", (char **)keyword_list, &param1, &param2, &param3)) {
    (*local_this).set_angular_limit((int)param1, (PN_stdfloat)param2, (PN_stdfloat)param3);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_limit(const BulletGenericConstraint self, int axis, float low, float high)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_set_angular_limit_530_comment =
  "C++ Interface:\n"
  "set_angular_limit(const BulletGenericConstraint self, int axis, float low, float high)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_set_angular_limit_530_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletRotationalLimitMotor BulletGenericConstraint::get_rotational_limit_motor(int axis)
 */
static PyObject *Dtool_BulletGenericConstraint_get_rotational_limit_motor_531(PyObject *self, PyObject *arg) {
  BulletGenericConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletGenericConstraint, (void **)&local_this, "BulletGenericConstraint.get_rotational_limit_motor")) {
    return NULL;
  }
  // 1-BulletRotationalLimitMotor BulletGenericConstraint::get_rotational_limit_motor(int axis)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletRotationalLimitMotor *return_value = new BulletRotationalLimitMotor((*local_this).get_rotational_limit_motor((int)arg_val));
    if (return_value == NULL) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletRotationalLimitMotor, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_rotational_limit_motor(const BulletGenericConstraint self, int axis)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_rotational_limit_motor_531_comment =
  "C++ Interface:\n"
  "get_rotational_limit_motor(const BulletGenericConstraint self, int axis)\n"
  "\n"
  "// Motors\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_rotational_limit_motor_531_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletTranslationalLimitMotor BulletGenericConstraint::get_translational_limit_motor(void)
 */
static PyObject *Dtool_BulletGenericConstraint_get_translational_limit_motor_532(PyObject *self, PyObject *) {
  BulletGenericConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletGenericConstraint, (void **)&local_this, "BulletGenericConstraint.get_translational_limit_motor")) {
    return NULL;
  }
  // 1-BulletTranslationalLimitMotor BulletGenericConstraint::get_translational_limit_motor(void)
  BulletTranslationalLimitMotor *return_value = new BulletTranslationalLimitMotor((*local_this).get_translational_limit_motor());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletTranslationalLimitMotor, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_translational_limit_motor_532_comment =
  "C++ Interface:\n"
  "get_translational_limit_motor(const BulletGenericConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_translational_limit_motor_532_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletGenericConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
 */
static PyObject *Dtool_BulletGenericConstraint_set_frames_533(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletGenericConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletGenericConstraint, (void **)&local_this, "BulletGenericConstraint.set_frames")) {
    return NULL;
  }
  // 1-void BulletGenericConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"ts_a", "ts_b", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:set_frames", (char **)keyword_list, &param1, &param2)) {
    TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletGenericConstraint.set_frames", true, true);
    TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletGenericConstraint.set_frames", true, true);
    if (param1_this != NULL && param2_this != NULL) {
      (*local_this).set_frames(param1_this, param2_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_frames(const BulletGenericConstraint self, const TransformState ts_a, const TransformState ts_b)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_set_frames_533_comment =
  "C++ Interface:\n"
  "set_frames(const BulletGenericConstraint self, const TransformState ts_a, const TransformState ts_b)\n"
  "\n"
  "// Frames\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_set_frames_533_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_a(void) const
 */
static PyObject *Dtool_BulletGenericConstraint_get_frame_a_534(PyObject *self, PyObject *) {
  BulletGenericConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGenericConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_a(void) const
  ConstPointerTo< TransformState > return_value = (*(const BulletGenericConstraint*)local_this).get_frame_a();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_TransformState, true, true, return_ptr->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_frame_a_534_comment =
  "C++ Interface:\n"
  "get_frame_a(BulletGenericConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_frame_a_534_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_b(void) const
 */
static PyObject *Dtool_BulletGenericConstraint_get_frame_b_535(PyObject *self, PyObject *) {
  BulletGenericConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletGenericConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_b(void) const
  ConstPointerTo< TransformState > return_value = (*(const BulletGenericConstraint*)local_this).get_frame_b();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_TransformState, true, true, return_ptr->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_frame_b_535_comment =
  "C++ Interface:\n"
  "get_frame_b(BulletGenericConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletGenericConstraint_get_frame_b_535_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletGenericConstraint::get_class_type(void)
 */
static PyObject *Dtool_BulletGenericConstraint_get_class_type_536(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletGenericConstraint::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletGenericConstraint::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletGenericConstraint_get_class_type_536_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletGenericConstraint_get_class_type_536_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a)
 * BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool use_frame_a)
 */
static int Dtool_Init_BulletGenericConstraint(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 3:
    {
      // 1-BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool use_frame_a)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      static const char *keyword_list[] = {"node_a", "frame_a", "use_frame_a", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:BulletGenericConstraint", (char **)keyword_list, &param0, &param1, &param2)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletGenericConstraint.BulletGenericConstraint", true, true);
        TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletGenericConstraint.BulletGenericConstraint", true, true);
        if (param0_this != NULL && param1_this != NULL) {
          BulletGenericConstraint *return_value = new BulletGenericConstraint(param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletGenericConstraint, true, false);
        }
      }
    }
    break;
  case 5:
    {
      // 1-BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      PyObject *param4;
      static const char *keyword_list[] = {"node_a", "node_b", "frame_a", "frame_b", "use_frame_a", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOOO:BulletGenericConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletGenericConstraint.BulletGenericConstraint", true, true);
        BulletRigidBodyNode const *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletGenericConstraint.BulletGenericConstraint", true, true);
        TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletGenericConstraint.BulletGenericConstraint", true, true);
        TransformState const *param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletGenericConstraint.BulletGenericConstraint", true, true);
        if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
          BulletGenericConstraint *return_value = new BulletGenericConstraint(param0_this, param1_this, param2_this, param3_this, (PyObject_IsTrue(param4) != 0));
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletGenericConstraint, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletGenericConstraint() takes 3 or 5 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletGenericConstraint(const BulletRigidBodyNode node_a, const TransformState frame_a, bool use_frame_a)\n"
      "BulletGenericConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const TransformState frame_a, const TransformState frame_b, bool use_frame_a)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletGenericConstraint(PyObject *args, CPT(BulletGenericConstraint) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletGenericConstraint, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    switch (PyTuple_GET_SIZE(args)) {
      case 3: {
        // 1-BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        if (PyArg_UnpackTuple(args, "BulletGenericConstraint", 3, 3, &param0, &param1, &param2)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          TransformState const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_TransformState, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletGenericConstraint *return_value = new BulletGenericConstraint(param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
      case 5: {
        // 1-BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        PyObject *param4;
        if (PyArg_UnpackTuple(args, "BulletGenericConstraint", 5, 5, &param0, &param1, &param2, &param3, &param4)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          TransformState const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_TransformState, (void **)&param2_this);
          TransformState const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_TransformState, (void **)&param3_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
            BulletGenericConstraint *return_value = new BulletGenericConstraint(param0_this, param1_this, param2_this, param3_this, (PyObject_IsTrue(param4) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
    }
  }

  return false;
}

bool Dtool_Coerce_BulletGenericConstraint(PyObject *args, PT(BulletGenericConstraint) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletGenericConstraint, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    switch (PyTuple_GET_SIZE(args)) {
      case 3: {
        // 1-BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        if (PyArg_UnpackTuple(args, "BulletGenericConstraint", 3, 3, &param0, &param1, &param2)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          TransformState const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_TransformState, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletGenericConstraint *return_value = new BulletGenericConstraint(param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
      case 5: {
        // 1-BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        PyObject *param4;
        if (PyArg_UnpackTuple(args, "BulletGenericConstraint", 5, 5, &param0, &param1, &param2, &param3, &param4)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          TransformState const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_TransformState, (void **)&param2_this);
          TransformState const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_TransformState, (void **)&param3_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
            BulletGenericConstraint *return_value = new BulletGenericConstraint(param0_this, param1_this, param2_this, param3_this, (PyObject_IsTrue(param4) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletGenericConstraint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletGenericConstraint) {
    printf("BulletGenericConstraint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletGenericConstraint *local_this = (BulletGenericConstraint *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletGenericConstraint) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletConstraint) {
    return (BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletGenericConstraint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletGenericConstraint) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletConstraint) {
    BulletConstraint* other_this = (BulletConstraint*)from_this;
    return (BulletGenericConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletGenericConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletGenericConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletGenericConstraint*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletHeightfieldShape
 */
/**
 * Python function wrapper for:
 * inline void BulletHeightfieldShape::operator =(BulletHeightfieldShape const &copy)
 */
static PyObject *Dtool_BulletHeightfieldShape_operator_539(PyObject *self, PyObject *arg) {
  BulletHeightfieldShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHeightfieldShape, (void **)&local_this, "BulletHeightfieldShape.assign")) {
    return NULL;
  }
  // 1-inline void BulletHeightfieldShape::operator =(BulletHeightfieldShape const &copy)
  CPT(BulletHeightfieldShape) arg_this;
  if (!Dtool_ConstCoerce_BulletHeightfieldShape(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletHeightfieldShape.assign", "BulletHeightfieldShape");
  }
  (*local_this).operator =(*MOVE(arg_this));
  BulletHeightfieldShape *return_value = local_this;
  if (return_value != (BulletHeightfieldShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletHeightfieldShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletHeightfieldShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletHeightfieldShape self, const BulletHeightfieldShape copy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHeightfieldShape_operator_539_comment =
  "C++ Interface:\n"
  "assign(const BulletHeightfieldShape self, const BulletHeightfieldShape copy)\n";
#else
static const char *Dtool_BulletHeightfieldShape_operator_539_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletHeightfieldShape::set_use_diamond_subdivision(bool flag = true)
 */
static PyObject *Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_540(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletHeightfieldShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHeightfieldShape, (void **)&local_this, "BulletHeightfieldShape.set_use_diamond_subdivision")) {
    return NULL;
  }
  // 1-void BulletHeightfieldShape::set_use_diamond_subdivision(bool flag = true)
  PyObject *param1 = Py_True;
  static const char *keyword_list[] = {"flag", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "|O:set_use_diamond_subdivision", (char **)keyword_list, &param1)) {
    (*local_this).set_use_diamond_subdivision((PyObject_IsTrue(param1) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_use_diamond_subdivision(const BulletHeightfieldShape self, bool flag)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_540_comment =
  "C++ Interface:\n"
  "set_use_diamond_subdivision(const BulletHeightfieldShape self, bool flag)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_540_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletHeightfieldShape::get_class_type(void)
 */
static PyObject *Dtool_BulletHeightfieldShape_get_class_type_541(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletHeightfieldShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletHeightfieldShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletHeightfieldShape_get_class_type_541_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletHeightfieldShape_get_class_type_541_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletHeightfieldShape::BulletHeightfieldShape(BulletHeightfieldShape const &copy)
 * BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
 * BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
 */
static int Dtool_Init_BulletHeightfieldShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "copy");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'copy' (pos 1) not found");
        return -1;
      }
      // 1-inline BulletHeightfieldShape::BulletHeightfieldShape(BulletHeightfieldShape const &copy)
      CPT(BulletHeightfieldShape) arg_this;
      if (!Dtool_ConstCoerce_BulletHeightfieldShape(arg, arg_this)) {
        Dtool_Raise_ArgTypeError(arg, 0, "BulletHeightfieldShape.BulletHeightfieldShape", "BulletHeightfieldShape");
        return -1;
      }
      BulletHeightfieldShape *return_value = new BulletHeightfieldShape(*MOVE(arg_this));
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHeightfieldShape, true, false);
    }
    break;
  case 2:
  case 3:
    {
      {
        // -2 BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
        PyObject *param0;
        float param1;
        int param2 = ::Z_up;
        static const char *keyword_list[] = {"tex", "max_height", "up", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "Of|i:BulletHeightfieldShape", (char **)keyword_list, &param0, &param1, &param2)) {
          Texture *param0_this = (Texture *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_Texture, 0, "BulletHeightfieldShape.BulletHeightfieldShape", false, false);
          if (param0_this != NULL) {
            BulletHeightfieldShape *return_value = new BulletHeightfieldShape(param0_this, (PN_stdfloat)param1, (BulletUpAxis)param2);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHeightfieldShape, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
        PyObject *param0;
        float param1;
        int param2 = ::Z_up;
        static const char *keyword_list[] = {"image", "max_height", "up", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "Of|i:BulletHeightfieldShape", (char **)keyword_list, &param0, &param1, &param2)) {
          PNMImage const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_PNMImage, (void **)&param0_this);
          if (param0_this != NULL) {
            BulletHeightfieldShape *return_value = new BulletHeightfieldShape(*param0_this, (PN_stdfloat)param1, (BulletUpAxis)param2);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHeightfieldShape, true, false);
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
      // No coercion possible: BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletHeightfieldShape() takes 1, 2 or 3 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletHeightfieldShape(const BulletHeightfieldShape copy)\n"
      "BulletHeightfieldShape(Texture tex, float max_height, int up)\n"
      "BulletHeightfieldShape(const PNMImage image, float max_height, int up)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletHeightfieldShape(PyObject *args, CPT(BulletHeightfieldShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletHeightfieldShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    Py_ssize_t size = PyTuple_GET_SIZE(args);
    if (size >= 2 && size <= 3) {
      {
        // -2 BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
        PyObject *param0;
        float param1;
        int param2 = ::Z_up;
        if (PyArg_ParseTuple(args, "Of|i:BulletHeightfieldShape", &param0, &param1, &param2)) {
          Texture *param0_this = (Texture *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_Texture, 0, "BulletHeightfieldShape.BulletHeightfieldShape", false, false);
          if (param0_this != NULL) {
            BulletHeightfieldShape *return_value = new BulletHeightfieldShape(param0_this, (PN_stdfloat)param1, (BulletUpAxis)param2);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
        PyObject *param0;
        float param1;
        int param2 = ::Z_up;
        if (PyArg_ParseTuple(args, "Of|i:BulletHeightfieldShape", &param0, &param1, &param2)) {
          PNMImage const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_PNMImage, (void **)&param0_this);
          if (param0_this != NULL) {
            BulletHeightfieldShape *return_value = new BulletHeightfieldShape(*param0_this, (PN_stdfloat)param1, (BulletUpAxis)param2);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
      }

    }
  }

  return false;
}

bool Dtool_Coerce_BulletHeightfieldShape(PyObject *args, PT(BulletHeightfieldShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletHeightfieldShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    Py_ssize_t size = PyTuple_GET_SIZE(args);
    if (size >= 2 && size <= 3) {
      {
        // -2 BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
        PyObject *param0;
        float param1;
        int param2 = ::Z_up;
        if (PyArg_ParseTuple(args, "Of|i:BulletHeightfieldShape", &param0, &param1, &param2)) {
          Texture *param0_this = (Texture *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_Texture, 0, "BulletHeightfieldShape.BulletHeightfieldShape", false, false);
          if (param0_this != NULL) {
            BulletHeightfieldShape *return_value = new BulletHeightfieldShape(param0_this, (PN_stdfloat)param1, (BulletUpAxis)param2);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up)
        PyObject *param0;
        float param1;
        int param2 = ::Z_up;
        if (PyArg_ParseTuple(args, "Of|i:BulletHeightfieldShape", &param0, &param1, &param2)) {
          PNMImage const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_PNMImage, (void **)&param0_this);
          if (param0_this != NULL) {
            BulletHeightfieldShape *return_value = new BulletHeightfieldShape(*param0_this, (PN_stdfloat)param1, (BulletUpAxis)param2);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
      }

    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletHeightfieldShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletHeightfieldShape) {
    printf("BulletHeightfieldShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletHeightfieldShape *local_this = (BulletHeightfieldShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletHeightfieldShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletHeightfieldShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletHeightfieldShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletHeightfieldShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletHeightfieldShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletHeightfieldShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletHeightfieldShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletHeightfieldShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletHelper
 */
/**
 * Python function wrapper for:
 * static NodePathCollection BulletHelper::from_collision_solids(NodePath &np, bool clear = false)
 */
static PyObject *Dtool_BulletHelper_from_collision_solids_543(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static NodePathCollection BulletHelper::from_collision_solids(NodePath &np, bool clear = false)
  PyObject *param0;
  PyObject *param1 = Py_False;
  static const char *keyword_list[] = {"np", "clear", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:from_collision_solids", (char **)keyword_list, &param0, &param1)) {
    NodePath *param0_this = (NodePath *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_NodePath, 0, "BulletHelper.from_collision_solids", false, true);
    if (param0_this != NULL) {
      NodePathCollection *return_value = new NodePathCollection(BulletHelper::from_collision_solids(*param0_this, (PyObject_IsTrue(param1) != 0)));
      if (return_value == NULL) {
        return PyErr_NoMemory();
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return NULL;
      }
      return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_NodePathCollection, true, false);
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "from_collision_solids(NodePath np, bool clear)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_from_collision_solids_543_comment =
  "C++ Interface:\n"
  "from_collision_solids(NodePath np, bool clear)\n"
  "\n"
  "// Collision shapes\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_from_collision_solids_543_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static inline PointerTo< InternalName > BulletHelper::get_sb_index(void)
 */
static PyObject *Dtool_BulletHelper_get_sb_index_544(PyObject *, PyObject *) {
  // 1-static inline PointerTo< InternalName > BulletHelper::get_sb_index(void)
  PointerTo< InternalName > return_value = BulletHelper::get_sb_index();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  InternalName *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_InternalName, true, false, return_ptr->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_get_sb_index_544_comment =
  "C++ Interface:\n"
  "get_sb_index()\n"
  "\n"
  "// Internal names\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_get_sb_index_544_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static inline PointerTo< InternalName > BulletHelper::get_sb_flip(void)
 */
static PyObject *Dtool_BulletHelper_get_sb_flip_545(PyObject *, PyObject *) {
  // 1-static inline PointerTo< InternalName > BulletHelper::get_sb_flip(void)
  PointerTo< InternalName > return_value = BulletHelper::get_sb_flip();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  InternalName *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_InternalName, true, false, return_ptr->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_get_sb_flip_545_comment =
  "C++ Interface:\n"
  "get_sb_flip()\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_get_sb_flip_545_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_index_column(GeomVertexFormat const *format)
 */
static PyObject *Dtool_BulletHelper_add_sb_index_column_546(PyObject *, PyObject *arg) {
  // 1-static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_index_column(GeomVertexFormat const *format)
  CPT(GeomVertexFormat) arg_this;
  if (!Dtool_ConstCoerce_GeomVertexFormat(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 0, "BulletHelper.add_sb_index_column", "GeomVertexFormat");
  }
  ConstPointerTo< GeomVertexFormat > return_value = BulletHelper::add_sb_index_column(MOVE(arg_this));
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  GeomVertexFormat const *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_GeomVertexFormat, true, true, return_ptr->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_sb_index_column(const GeomVertexFormat format)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_add_sb_index_column_546_comment =
  "C++ Interface:\n"
  "add_sb_index_column(const GeomVertexFormat format)\n"
  "\n"
  "// Geom vertex data\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_add_sb_index_column_546_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_flip_column(GeomVertexFormat const *format)
 */
static PyObject *Dtool_BulletHelper_add_sb_flip_column_547(PyObject *, PyObject *arg) {
  // 1-static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_flip_column(GeomVertexFormat const *format)
  CPT(GeomVertexFormat) arg_this;
  if (!Dtool_ConstCoerce_GeomVertexFormat(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 0, "BulletHelper.add_sb_flip_column", "GeomVertexFormat");
  }
  ConstPointerTo< GeomVertexFormat > return_value = BulletHelper::add_sb_flip_column(MOVE(arg_this));
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  GeomVertexFormat const *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_GeomVertexFormat, true, true, return_ptr->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_sb_flip_column(const GeomVertexFormat format)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_add_sb_flip_column_547_comment =
  "C++ Interface:\n"
  "add_sb_flip_column(const GeomVertexFormat format)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_add_sb_flip_column_547_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< Geom > BulletHelper::make_geom_from_faces(BulletSoftBodyNode *node, GeomVertexFormat const *format = 0, bool two_sided = false)
 */
static PyObject *Dtool_BulletHelper_make_geom_from_faces_548(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static PointerTo< Geom > BulletHelper::make_geom_from_faces(BulletSoftBodyNode *node, GeomVertexFormat const *format = 0, bool two_sided = false)
  PyObject *param0;
  PyObject *param1 = NULL;
  PyObject *param2 = Py_False;
  static const char *keyword_list[] = {"node", "format", "two_sided", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|OO:make_geom_from_faces", (char **)keyword_list, &param0, &param1, &param2)) {
    BulletSoftBodyNode *param0_this = (BulletSoftBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyNode, 0, "BulletHelper.make_geom_from_faces", false, true);
    CPT(GeomVertexFormat) param1_this = 0;
    if (param1 != NULL && !Dtool_ConstCoerce_GeomVertexFormat(param1, param1_this)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletHelper.make_geom_from_faces", "GeomVertexFormat");
    }
    if (param0_this != NULL) {
      PointerTo< Geom > return_value = BulletHelper::make_geom_from_faces(param0_this, MOVE(param1_this), (PyObject_IsTrue(param2) != 0));
      if (Dtool_CheckErrorOccurred()) {
        return NULL;
      }
      // Transfer ownership of return_value.
      Geom *return_ptr = return_value.p();
      return_value.cheat() = NULL;
      if (return_ptr == NULL) {
        Py_INCREF(Py_None);
        return Py_None;
      } else {
        return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_Geom, true, false, return_ptr->as_typed_object()->get_type_index());
      }
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_geom_from_faces(BulletSoftBodyNode node, const GeomVertexFormat format, bool two_sided)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_make_geom_from_faces_548_comment =
  "C++ Interface:\n"
  "make_geom_from_faces(BulletSoftBodyNode node, const GeomVertexFormat format, bool two_sided)\n"
  "\n"
  "// Geom utils\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_make_geom_from_faces_548_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static PointerTo< Geom > BulletHelper::make_geom_from_links(BulletSoftBodyNode *node, GeomVertexFormat const *format = 0)
 */
static PyObject *Dtool_BulletHelper_make_geom_from_links_549(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static PointerTo< Geom > BulletHelper::make_geom_from_links(BulletSoftBodyNode *node, GeomVertexFormat const *format = 0)
  PyObject *param0;
  PyObject *param1 = NULL;
  static const char *keyword_list[] = {"node", "format", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "O|O:make_geom_from_links", (char **)keyword_list, &param0, &param1)) {
    BulletSoftBodyNode *param0_this = (BulletSoftBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletSoftBodyNode, 0, "BulletHelper.make_geom_from_links", false, true);
    CPT(GeomVertexFormat) param1_this = 0;
    if (param1 != NULL && !Dtool_ConstCoerce_GeomVertexFormat(param1, param1_this)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletHelper.make_geom_from_links", "GeomVertexFormat");
    }
    if (param0_this != NULL) {
      PointerTo< Geom > return_value = BulletHelper::make_geom_from_links(param0_this, MOVE(param1_this));
      if (Dtool_CheckErrorOccurred()) {
        return NULL;
      }
      // Transfer ownership of return_value.
      Geom *return_ptr = return_value.p();
      return_value.cheat() = NULL;
      if (return_ptr == NULL) {
        Py_INCREF(Py_None);
        return Py_None;
      } else {
        return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_Geom, true, false, return_ptr->as_typed_object()->get_type_index());
      }
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_geom_from_links(BulletSoftBodyNode node, const GeomVertexFormat format)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_make_geom_from_links_549_comment =
  "C++ Interface:\n"
  "make_geom_from_links(BulletSoftBodyNode node, const GeomVertexFormat format)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_make_geom_from_links_549_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static void BulletHelper::make_texcoords_for_patch(Geom *geom, int resx, int resy)
 */
static PyObject *Dtool_BulletHelper_make_texcoords_for_patch_550(PyObject *, PyObject *args, PyObject *kwds) {
  // 1-static void BulletHelper::make_texcoords_for_patch(Geom *geom, int resx, int resy)
  PyObject *param0;
  int param1;
  int param2;
  static const char *keyword_list[] = {"geom", "resx", "resy", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "Oii:make_texcoords_for_patch", (char **)keyword_list, &param0, &param1, &param2)) {
    Geom *param0_this = (Geom *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_Geom, 0, "BulletHelper.make_texcoords_for_patch", false, true);
    if (param0_this != NULL) {
      BulletHelper::make_texcoords_for_patch(param0_this, (int)param1, (int)param2);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_texcoords_for_patch(Geom geom, int resx, int resy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHelper_make_texcoords_for_patch_550_comment =
  "C++ Interface:\n"
  "make_texcoords_for_patch(Geom geom, int resx, int resy)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHelper_make_texcoords_for_patch_550_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletHelper::BulletHelper(void) = default
 * inline BulletHelper::BulletHelper(BulletHelper const &) = default
 */
static int Dtool_Init_BulletHelper(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 0:
    {
      // 1-inline BulletHelper::BulletHelper(void) = default
      BulletHelper *return_value = new BulletHelper();
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHelper, true, false);
    }
    break;
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "param0");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
        return -1;
      }
      // 1-inline BulletHelper::BulletHelper(BulletHelper const &) = default
      BulletHelper const *arg_this = (BulletHelper *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletHelper, 0, "BulletHelper.BulletHelper", true, true);
      if (arg_this != NULL) {
        BulletHelper *return_value = new BulletHelper(*arg_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        if (Dtool_CheckErrorOccurred()) {
          delete return_value;
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHelper, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletHelper() takes 0 or 1 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletHelper()\n"
      "BulletHelper(const BulletHelper param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletHelper(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletHelper) {
    printf("BulletHelper ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletHelper *local_this = (BulletHelper *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletHelper) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletHelper(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletHelper) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletHingeConstraint
 */
/**
 * Python function wrapper for:
 * PN_stdfloat BulletHingeConstraint::get_hinge_angle(void)
 */
static PyObject *Dtool_BulletHingeConstraint_get_hinge_angle_555(PyObject *self, PyObject *) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.get_hinge_angle")) {
    return NULL;
  }
  // 1-PN_stdfloat BulletHingeConstraint::get_hinge_angle(void)
  PN_stdfloat return_value = (*local_this).get_hinge_angle();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_hinge_angle_555_comment =
  "C++ Interface:\n"
  "get_hinge_angle(const BulletHingeConstraint self)\n"
  "\n"
  "/**\n"
  " * Returns the angle between node_a and node_b in degrees.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_get_hinge_angle_555_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletHingeConstraint::get_lower_limit(void) const
 */
static PyObject *Dtool_BulletHingeConstraint_get_lower_limit_556(PyObject *self, PyObject *) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletHingeConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletHingeConstraint::get_lower_limit(void) const
  PN_stdfloat return_value = (*(const BulletHingeConstraint*)local_this).get_lower_limit();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_lower_limit_556_comment =
  "C++ Interface:\n"
  "get_lower_limit(BulletHingeConstraint self)\n"
  "\n"
  "/**\n"
  " * Returns the lower angular limit in degrees.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_get_lower_limit_556_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletHingeConstraint::get_upper_limit(void) const
 */
static PyObject *Dtool_BulletHingeConstraint_get_upper_limit_557(PyObject *self, PyObject *) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletHingeConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletHingeConstraint::get_upper_limit(void) const
  PN_stdfloat return_value = (*(const BulletHingeConstraint*)local_this).get_upper_limit();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_upper_limit_557_comment =
  "C++ Interface:\n"
  "get_upper_limit(BulletHingeConstraint self)\n"
  "\n"
  "/**\n"
  " * Returns the upper angular limit in degrees.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_get_upper_limit_557_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletHingeConstraint::get_angular_only(void) const
 */
static PyObject *Dtool_BulletHingeConstraint_get_angular_only_558(PyObject *self, PyObject *) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletHingeConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletHingeConstraint::get_angular_only(void) const
  bool return_value = (*(const BulletHingeConstraint*)local_this).get_angular_only();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_angular_only_558_comment =
  "C++ Interface:\n"
  "get_angular_only(BulletHingeConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_get_angular_only_558_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::set_angular_only(bool value)
 */
static PyObject *Dtool_BulletHingeConstraint_set_angular_only_559(PyObject *self, PyObject *arg) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.set_angular_only")) {
    return NULL;
  }
  // 1-void BulletHingeConstraint::set_angular_only(bool value)
  (*local_this).set_angular_only((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_only(const BulletHingeConstraint self, bool value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_set_angular_only_559_comment =
  "C++ Interface:\n"
  "set_angular_only(const BulletHingeConstraint self, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_set_angular_only_559_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::set_limit(PN_stdfloat low, PN_stdfloat high, PN_stdfloat softness = 0.9, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0)
 */
static PyObject *Dtool_BulletHingeConstraint_set_limit_560(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.set_limit")) {
    return NULL;
  }
  // 1-void BulletHingeConstraint::set_limit(PN_stdfloat low, PN_stdfloat high, PN_stdfloat softness = 0.9, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0)
  float param1;
  float param2;
  float param3 = 0.9;
  float param4 = 0.30000000000000007;
  float param5 = 1.0;
  static const char *keyword_list[] = {"low", "high", "softness", "bias", "relaxation", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "ff|fff:set_limit", (char **)keyword_list, &param1, &param2, &param3, &param4, &param5)) {
    (*local_this).set_limit((PN_stdfloat)param1, (PN_stdfloat)param2, (PN_stdfloat)param3, (PN_stdfloat)param4, (PN_stdfloat)param5);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_limit(const BulletHingeConstraint self, float low, float high, float softness, float bias, float relaxation)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_set_limit_560_comment =
  "C++ Interface:\n"
  "set_limit(const BulletHingeConstraint self, float low, float high, float softness, float bias, float relaxation)\n"
  "\n"
  "/**\n"
  " * Sets the lower and upper rotational limits in degrees.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_set_limit_560_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::set_axis(LVector3 const &axis)
 */
static PyObject *Dtool_BulletHingeConstraint_set_axis_561(PyObject *self, PyObject *arg) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.set_axis")) {
    return NULL;
  }
  // 1-void BulletHingeConstraint::set_axis(LVector3 const &axis)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletHingeConstraint.set_axis", "LVector3f");
  }
  (*local_this).set_axis(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_axis(const BulletHingeConstraint self, const LVector3f axis)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_set_axis_561_comment =
  "C++ Interface:\n"
  "set_axis(const BulletHingeConstraint self, const LVector3f axis)\n"
  "\n"
  "/**\n"
  " * Sets the hinge's rotation axis in world coordinates.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_set_axis_561_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::enable_angular_motor(bool enable, PN_stdfloat target_velocity, PN_stdfloat max_impulse)
 */
static PyObject *Dtool_BulletHingeConstraint_enable_angular_motor_562(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.enable_angular_motor")) {
    return NULL;
  }
  // 1-void BulletHingeConstraint::enable_angular_motor(bool enable, PN_stdfloat target_velocity, PN_stdfloat max_impulse)
  PyObject *param1;
  float param2;
  float param3;
  static const char *keyword_list[] = {"enable", "target_velocity", "max_impulse", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "Off:enable_angular_motor", (char **)keyword_list, &param1, &param2, &param3)) {
    (*local_this).enable_angular_motor((PyObject_IsTrue(param1) != 0), (PN_stdfloat)param2, (PN_stdfloat)param3);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "enable_angular_motor(const BulletHingeConstraint self, bool enable, float target_velocity, float max_impulse)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_enable_angular_motor_562_comment =
  "C++ Interface:\n"
  "enable_angular_motor(const BulletHingeConstraint self, bool enable, float target_velocity, float max_impulse)\n"
  "\n"
  "/**\n"
  " * Applies an impulse to the constraint so that the angle changes at\n"
  " * target_velocity where max_impulse is the maximum impulse that is used for\n"
  " * achieving the specified velocity.\n"
  " *\n"
  " * Note that the target_velocity is in radians/second, not degrees.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_enable_angular_motor_562_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::enable_motor(bool enable)
 */
static PyObject *Dtool_BulletHingeConstraint_enable_motor_563(PyObject *self, PyObject *arg) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.enable_motor")) {
    return NULL;
  }
  // 1-void BulletHingeConstraint::enable_motor(bool enable)
  (*local_this).enable_motor((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "enable_motor(const BulletHingeConstraint self, bool enable)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_enable_motor_563_comment =
  "C++ Interface:\n"
  "enable_motor(const BulletHingeConstraint self, bool enable)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_enable_motor_563_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::set_max_motor_impulse(PN_stdfloat max_impulse)
 */
static PyObject *Dtool_BulletHingeConstraint_set_max_motor_impulse_564(PyObject *self, PyObject *arg) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.set_max_motor_impulse")) {
    return NULL;
  }
  // 1-void BulletHingeConstraint::set_max_motor_impulse(PN_stdfloat max_impulse)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_motor_impulse((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_motor_impulse(const BulletHingeConstraint self, float max_impulse)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_set_max_motor_impulse_564_comment =
  "C++ Interface:\n"
  "set_max_motor_impulse(const BulletHingeConstraint self, float max_impulse)\n"
  "\n"
  "/**\n"
  " * Sets the maximum impulse used to achieve the velocity set in\n"
  " * enable_angular_motor.\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_set_max_motor_impulse_564_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::set_motor_target(LQuaternion const &quat, PN_stdfloat dt)
 * void BulletHingeConstraint::set_motor_target(PN_stdfloat target_angle, PN_stdfloat dt)
 */
static PyObject *Dtool_BulletHingeConstraint_set_motor_target_565(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.set_motor_target")) {
    return NULL;
  }
  {
    // -2 void BulletHingeConstraint::set_motor_target(LQuaternion const &quat, PN_stdfloat dt)
    PyObject *param1;
    float param2;
    static const char *keyword_list[] = {"quat", "dt", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "Of:set_motor_target", (char **)keyword_list, &param1, &param2)) {
      LQuaternion const *param1_this;
      DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LQuaternionf, (void **)&param1_this);
      if (param1_this != NULL) {
        (*local_this).set_motor_target(*param1_this, (PN_stdfloat)param2);
        return Dtool_Return_None();
      }
    }
    PyErr_Clear();
  }

  {
    // -2 void BulletHingeConstraint::set_motor_target(PN_stdfloat target_angle, PN_stdfloat dt)
    float param1;
    float param2;
    static const char *keyword_list[] = {"target_angle", "dt", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "ff:set_motor_target", (char **)keyword_list, &param1, &param2)) {
      (*local_this).set_motor_target((PN_stdfloat)param1, (PN_stdfloat)param2);
      return Dtool_Return_None();
    }
    PyErr_Clear();
  }

  {
    // -2 void BulletHingeConstraint::set_motor_target(LQuaternion const &quat, PN_stdfloat dt)
    PyObject *param1;
    float param2;
    static const char *keyword_list[] = {"quat", "dt", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "Of:set_motor_target", (char **)keyword_list, &param1, &param2)) {
      LQuaternionf param1_local;
      LQuaternion const *param1_this = Dtool_Coerce_LQuaternionf(param1, param1_local);
      if ((param1_this != NULL)) {
        (*local_this).set_motor_target(*param1_this, (PN_stdfloat)param2);
        return Dtool_Return_None();
      }
    }
    PyErr_Clear();
  }

  // No coercion possible: void BulletHingeConstraint::set_motor_target(PN_stdfloat target_angle, PN_stdfloat dt)
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_motor_target(const BulletHingeConstraint self, const LQuaternionf quat, float dt)\n"
      "set_motor_target(const BulletHingeConstraint self, float target_angle, float dt)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_set_motor_target_565_comment =
  "C++ Interface:\n"
  "set_motor_target(const BulletHingeConstraint self, const LQuaternionf quat, float dt)\n"
  "set_motor_target(const BulletHingeConstraint self, float target_angle, float dt)\n"
  "\n"
  "/**\n"
  " *\n"
  " */\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_set_motor_target_565_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletHingeConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
 */
static PyObject *Dtool_BulletHingeConstraint_set_frames_566(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletHingeConstraint, (void **)&local_this, "BulletHingeConstraint.set_frames")) {
    return NULL;
  }
  // 1-void BulletHingeConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"ts_a", "ts_b", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:set_frames", (char **)keyword_list, &param1, &param2)) {
    TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletHingeConstraint.set_frames", true, true);
    TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletHingeConstraint.set_frames", true, true);
    if (param1_this != NULL && param2_this != NULL) {
      (*local_this).set_frames(param1_this, param2_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_frames(const BulletHingeConstraint self, const TransformState ts_a, const TransformState ts_b)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_set_frames_566_comment =
  "C++ Interface:\n"
  "set_frames(const BulletHingeConstraint self, const TransformState ts_a, const TransformState ts_b)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_set_frames_566_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_a(void) const
 */
static PyObject *Dtool_BulletHingeConstraint_get_frame_a_567(PyObject *self, PyObject *) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletHingeConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_a(void) const
  ConstPointerTo< TransformState > return_value = (*(const BulletHingeConstraint*)local_this).get_frame_a();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_TransformState, true, true, return_ptr->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_frame_a_567_comment =
  "C++ Interface:\n"
  "get_frame_a(BulletHingeConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_get_frame_a_567_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_b(void) const
 */
static PyObject *Dtool_BulletHingeConstraint_get_frame_b_568(PyObject *self, PyObject *) {
  BulletHingeConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletHingeConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_b(void) const
  ConstPointerTo< TransformState > return_value = (*(const BulletHingeConstraint*)local_this).get_frame_b();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_TransformState, true, true, return_ptr->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_frame_b_568_comment =
  "C++ Interface:\n"
  "get_frame_b(BulletHingeConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletHingeConstraint_get_frame_b_568_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletHingeConstraint::get_class_type(void)
 */
static PyObject *Dtool_BulletHingeConstraint_get_class_type_569(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletHingeConstraint::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletHingeConstraint::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletHingeConstraint_get_class_type_569_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletHingeConstraint_get_class_type_569_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b, LVector3 const &axis_a, LVector3 const &axis_b, bool use_frame_a = false)
 * BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a = false)
 * BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a = false)
 * BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a = false)
 */
static int Dtool_Init_BulletHingeConstraint(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"node_a", "ts_a", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        if (param0_this != NULL && param1_this != NULL) {
          BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
        }
      }
    }
    break;
  case 3:
    {
      {
        // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        static const char *keyword_list[] = {"node_a", "pivot_a", "axis_a", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          LPoint3 const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LPoint3f, (void **)&param1_this);
          LVector3 const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_LVector3f, (void **)&param2_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, *param1_this, *param2_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        static const char *keyword_list[] = {"node_a", "ts_a", "use_frame_a", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          TransformState const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_TransformState, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        static const char *keyword_list[] = {"node_a", "pivot_a", "axis_a", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          LPoint3f param1_local;
          LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
          LVector3f param2_local;
          LVector3 const *param2_this = Dtool_Coerce_LVector3f(param2, param2_local);
          if (param0_this != NULL && (param1_this != NULL) && (param2_this != NULL)) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, *param1_this, *param2_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a)
    }
    break;
  case 4:
    {
      {
        // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        static const char *keyword_list[] = {"node_a", "node_b", "ts_a", "ts_b", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          TransformState const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_TransformState, (void **)&param2_this);
          TransformState const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_TransformState, (void **)&param3_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, param2_this, param3_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a)
      {
        // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        static const char *keyword_list[] = {"node_a", "pivot_a", "axis_a", "use_frame_a", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          LPoint3f param1_local;
          LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
          LVector3f param2_local;
          LVector3 const *param2_this = Dtool_Coerce_LVector3f(param2, param2_local);
          if (param0_this != NULL && (param1_this != NULL) && (param2_this != NULL)) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, *param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            return_value->ref();
            if (Dtool_CheckErrorOccurred()) {
              unref_delete(return_value);
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
          }
        }
        PyErr_Clear();
      }

    }
    break;
  case 5:
    {
      // 1-BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      PyObject *param4;
      static const char *keyword_list[] = {"node_a", "node_b", "ts_a", "ts_b", "use_frame_a", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOOO:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        BulletRigidBodyNode const *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        TransformState const *param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
          BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, param2_this, param3_this, (PyObject_IsTrue(param4) != 0));
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
        }
      }
    }
    break;
  case 6:
  case 7:
    {
      // 1-BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b, LVector3 const &axis_a, LVector3 const &axis_b, bool use_frame_a = false)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      PyObject *param4;
      PyObject *param5;
      PyObject *param6 = Py_False;
      static const char *keyword_list[] = {"node_a", "node_b", "pivot_a", "pivot_b", "axis_a", "axis_b", "use_frame_a", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOO|O:BulletHingeConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4, &param5, &param6)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        BulletRigidBodyNode const *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletHingeConstraint.BulletHingeConstraint", true, true);
        LPoint3f param2_local;
        LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
        if (!(param2_this != NULL)) {
          Dtool_Raise_ArgTypeError(param2, 2, "BulletHingeConstraint.BulletHingeConstraint", "LPoint3f");
          return -1;
        }
        LPoint3f param3_local;
        LPoint3 const *param3_this = Dtool_Coerce_LPoint3f(param3, param3_local);
        if (!(param3_this != NULL)) {
          Dtool_Raise_ArgTypeError(param3, 3, "BulletHingeConstraint.BulletHingeConstraint", "LPoint3f");
          return -1;
        }
        LVector3f param4_local;
        LVector3 const *param4_this = Dtool_Coerce_LVector3f(param4, param4_local);
        if (!(param4_this != NULL)) {
          Dtool_Raise_ArgTypeError(param4, 4, "BulletHingeConstraint.BulletHingeConstraint", "LVector3f");
          return -1;
        }
        LVector3f param5_local;
        LVector3 const *param5_this = Dtool_Coerce_LVector3f(param5, param5_local);
        if (!(param5_this != NULL)) {
          Dtool_Raise_ArgTypeError(param5, 5, "BulletHingeConstraint.BulletHingeConstraint", "LVector3f");
          return -1;
        }
        if (param0_this != NULL && param1_this != NULL) {
          BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, *param2_this, *param3_this, *param4_this, *param5_this, (PyObject_IsTrue(param6) != 0));
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletHingeConstraint, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletHingeConstraint() takes 2, 3, 4, 5, 6 or 7 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletHingeConstraint(const BulletRigidBodyNode node_a, const TransformState ts_a)\n"
      "BulletHingeConstraint(const BulletRigidBodyNode node_a, const LPoint3f pivot_a, const LVector3f axis_a)\n"
      "BulletHingeConstraint(const BulletRigidBodyNode node_a, const TransformState ts_a, bool use_frame_a)\n"
      "BulletHingeConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const TransformState ts_a, const TransformState ts_b)\n"
      "BulletHingeConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const TransformState ts_a, const TransformState ts_b, bool use_frame_a)\n"
      "BulletHingeConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const LPoint3f pivot_a, const LPoint3f pivot_b, const LVector3f axis_a, const LVector3f axis_b, bool use_frame_a)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletHingeConstraint(PyObject *args, CPT(BulletHingeConstraint) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletHingeConstraint, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    switch (PyTuple_GET_SIZE(args)) {
      case 2: {
        // 1-BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 2, 2, &param0, &param1)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          TransformState const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_TransformState, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
      case 3: {
        {
          // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a)
          PyObject *param0;
          PyObject *param1;
          PyObject *param2;
          if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 3, 3, &param0, &param1, &param2)) {
            BulletRigidBodyNode const *param0_this;
            DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
            LPoint3 const *param1_this;
            DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LPoint3f, (void **)&param1_this);
            LVector3 const *param2_this;
            DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_LVector3f, (void **)&param2_this);
            if (param0_this != NULL && param1_this != NULL && param2_this != NULL) {
              BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, *param1_this, *param2_this);
              if (return_value == NULL) {
                PyErr_NoMemory();
                return false;
              }
              return_value->ref();
              if (_PyErr_OCCURRED()) {
                unref_delete(return_value);
                return false;
              } else {
                coerced = MOVE(return_value);
                return true;
              }
            }
          }
          PyErr_Clear();
        }

        {
          // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a)
          PyObject *param0;
          PyObject *param1;
          PyObject *param2;
          if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 3, 3, &param0, &param1, &param2)) {
            BulletRigidBodyNode const *param0_this;
            DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
            TransformState const *param1_this;
            DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_TransformState, (void **)&param1_this);
            if (param0_this != NULL && param1_this != NULL) {
              BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
              if (return_value == NULL) {
                PyErr_NoMemory();
                return false;
              }
              return_value->ref();
              if (_PyErr_OCCURRED()) {
                unref_delete(return_value);
                return false;
              } else {
                coerced = MOVE(return_value);
                return true;
              }
            }
          }
          PyErr_Clear();
        }

        break;
      }
      case 4: {
        {
          // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a)
          PyObject *param0;
          PyObject *param1;
          PyObject *param2;
          PyObject *param3;
          if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 4, 4, &param0, &param1, &param2, &param3)) {
            BulletRigidBodyNode const *param0_this;
            DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
            BulletRigidBodyNode const *param1_this;
            DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
            TransformState const *param2_this;
            DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_TransformState, (void **)&param2_this);
            TransformState const *param3_this;
            DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_TransformState, (void **)&param3_this);
            if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
              BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, param2_this, param3_this);
              if (return_value == NULL) {
                PyErr_NoMemory();
                return false;
              }
              return_value->ref();
              if (_PyErr_OCCURRED()) {
                unref_delete(return_value);
                return false;
              } else {
                coerced = MOVE(return_value);
                return true;
              }
            }
          }
          PyErr_Clear();
        }

        {
          // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a)
          PyObject *param0;
          PyObject *param1;
          PyObject *param2;
          PyObject *param3;
          if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 4, 4, &param0, &param1, &param2, &param3)) {
            BulletRigidBodyNode const *param0_this;
            DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
            LPoint3 const *param1_this;
            DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LPoint3f, (void **)&param1_this);
            LVector3 const *param2_this;
            DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_LVector3f, (void **)&param2_this);
            if (param0_this != NULL && param1_this != NULL && param2_this != NULL) {
              BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, *param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
              if (return_value == NULL) {
                PyErr_NoMemory();
                return false;
              }
              return_value->ref();
              if (_PyErr_OCCURRED()) {
                unref_delete(return_value);
                return false;
              } else {
                coerced = MOVE(return_value);
                return true;
              }
            }
          }
          PyErr_Clear();
        }

        break;
      }
      case 5: {
        // 1-BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        PyObject *param4;
        if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 5, 5, &param0, &param1, &param2, &param3, &param4)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          TransformState const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_TransformState, (void **)&param2_this);
          TransformState const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_TransformState, (void **)&param3_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, param2_this, param3_this, (PyObject_IsTrue(param4) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
      case 6:
      case 7: {
        // 1-BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b, LVector3 const &axis_a, LVector3 const &axis_b, bool use_frame_a = false)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        PyObject *param4;
        PyObject *param5;
        PyObject *param6 = Py_False;
        if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 6, 7, &param0, &param1, &param2, &param3, &param4, &param5, &param6)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          LPoint3 const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_LPoint3f, (void **)&param2_this);
          LPoint3 const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_LPoint3f, (void **)&param3_this);
          LVector3 const *param4_this;
          DTOOL_Call_ExtractThisPointerForType(param4, Dtool_Ptr_LVector3f, (void **)&param4_this);
          LVector3 const *param5_this;
          DTOOL_Call_ExtractThisPointerForType(param5, Dtool_Ptr_LVector3f, (void **)&param5_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL && param4_this != NULL && param5_this != NULL) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, *param2_this, *param3_this, *param4_this, *param5_this, (PyObject_IsTrue(param6) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
    }
  }

  return false;
}

bool Dtool_Coerce_BulletHingeConstraint(PyObject *args, PT(BulletHingeConstraint) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletHingeConstraint, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    switch (PyTuple_GET_SIZE(args)) {
      case 2: {
        // 1-BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 2, 2, &param0, &param1)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          TransformState const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_TransformState, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
      case 3: {
        {
          // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a)
          PyObject *param0;
          PyObject *param1;
          PyObject *param2;
          if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 3, 3, &param0, &param1, &param2)) {
            BulletRigidBodyNode const *param0_this;
            DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
            LPoint3 const *param1_this;
            DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LPoint3f, (void **)&param1_this);
            LVector3 const *param2_this;
            DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_LVector3f, (void **)&param2_this);
            if (param0_this != NULL && param1_this != NULL && param2_this != NULL) {
              BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, *param1_this, *param2_this);
              if (return_value == NULL) {
                PyErr_NoMemory();
                return false;
              }
              return_value->ref();
              if (_PyErr_OCCURRED()) {
                unref_delete(return_value);
                return false;
              } else {
                coerced = MOVE(return_value);
                return true;
              }
            }
          }
          PyErr_Clear();
        }

        {
          // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a)
          PyObject *param0;
          PyObject *param1;
          PyObject *param2;
          if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 3, 3, &param0, &param1, &param2)) {
            BulletRigidBodyNode const *param0_this;
            DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
            TransformState const *param1_this;
            DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_TransformState, (void **)&param1_this);
            if (param0_this != NULL && param1_this != NULL) {
              BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
              if (return_value == NULL) {
                PyErr_NoMemory();
                return false;
              }
              return_value->ref();
              if (_PyErr_OCCURRED()) {
                unref_delete(return_value);
                return false;
              } else {
                coerced = MOVE(return_value);
                return true;
              }
            }
          }
          PyErr_Clear();
        }

        break;
      }
      case 4: {
        {
          // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a)
          PyObject *param0;
          PyObject *param1;
          PyObject *param2;
          PyObject *param3;
          if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 4, 4, &param0, &param1, &param2, &param3)) {
            BulletRigidBodyNode const *param0_this;
            DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
            BulletRigidBodyNode const *param1_this;
            DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
            TransformState const *param2_this;
            DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_TransformState, (void **)&param2_this);
            TransformState const *param3_this;
            DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_TransformState, (void **)&param3_this);
            if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
              BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, param2_this, param3_this);
              if (return_value == NULL) {
                PyErr_NoMemory();
                return false;
              }
              return_value->ref();
              if (_PyErr_OCCURRED()) {
                unref_delete(return_value);
                return false;
              } else {
                coerced = MOVE(return_value);
                return true;
              }
            }
          }
          PyErr_Clear();
        }

        {
          // -2 BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a)
          PyObject *param0;
          PyObject *param1;
          PyObject *param2;
          PyObject *param3;
          if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 4, 4, &param0, &param1, &param2, &param3)) {
            BulletRigidBodyNode const *param0_this;
            DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
            LPoint3 const *param1_this;
            DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LPoint3f, (void **)&param1_this);
            LVector3 const *param2_this;
            DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_LVector3f, (void **)&param2_this);
            if (param0_this != NULL && param1_this != NULL && param2_this != NULL) {
              BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, *param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
              if (return_value == NULL) {
                PyErr_NoMemory();
                return false;
              }
              return_value->ref();
              if (_PyErr_OCCURRED()) {
                unref_delete(return_value);
                return false;
              } else {
                coerced = MOVE(return_value);
                return true;
              }
            }
          }
          PyErr_Clear();
        }

        break;
      }
      case 5: {
        // 1-BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        PyObject *param4;
        if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 5, 5, &param0, &param1, &param2, &param3, &param4)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          TransformState const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_TransformState, (void **)&param2_this);
          TransformState const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_TransformState, (void **)&param3_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, param2_this, param3_this, (PyObject_IsTrue(param4) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
      case 6:
      case 7: {
        // 1-BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b, LVector3 const &axis_a, LVector3 const &axis_b, bool use_frame_a = false)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        PyObject *param4;
        PyObject *param5;
        PyObject *param6 = Py_False;
        if (PyArg_UnpackTuple(args, "BulletHingeConstraint", 6, 7, &param0, &param1, &param2, &param3, &param4, &param5, &param6)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          LPoint3 const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_LPoint3f, (void **)&param2_this);
          LPoint3 const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_LPoint3f, (void **)&param3_this);
          LVector3 const *param4_this;
          DTOOL_Call_ExtractThisPointerForType(param4, Dtool_Ptr_LVector3f, (void **)&param4_this);
          LVector3 const *param5_this;
          DTOOL_Call_ExtractThisPointerForType(param5, Dtool_Ptr_LVector3f, (void **)&param5_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL && param4_this != NULL && param5_this != NULL) {
            BulletHingeConstraint *return_value = new BulletHingeConstraint(param0_this, param1_this, *param2_this, *param3_this, *param4_this, *param5_this, (PyObject_IsTrue(param6) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletHingeConstraint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletHingeConstraint) {
    printf("BulletHingeConstraint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletHingeConstraint *local_this = (BulletHingeConstraint *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletHingeConstraint) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletConstraint) {
    return (BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletHingeConstraint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletHingeConstraint) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletConstraint) {
    BulletConstraint* other_this = (BulletConstraint*)from_this;
    return (BulletHingeConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletHingeConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletHingeConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletHingeConstraint*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletMinkowskiSumShape
 */
/**
 * Python function wrapper for:
 * inline void BulletMinkowskiSumShape::operator =(BulletMinkowskiSumShape const &copy)
 */
static PyObject *Dtool_BulletMinkowskiSumShape_operator_572(PyObject *self, PyObject *arg) {
  BulletMinkowskiSumShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this, "BulletMinkowskiSumShape.assign")) {
    return NULL;
  }
  // 1-inline void BulletMinkowskiSumShape::operator =(BulletMinkowskiSumShape const &copy)
  CPT(BulletMinkowskiSumShape) arg_this;
  if (!Dtool_ConstCoerce_BulletMinkowskiSumShape(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletMinkowskiSumShape.assign", "BulletMinkowskiSumShape");
  }
  (*local_this).operator =(*MOVE(arg_this));
  BulletMinkowskiSumShape *return_value = local_this;
  if (return_value != (BulletMinkowskiSumShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletMinkowskiSumShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletMinkowskiSumShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletMinkowskiSumShape self, const BulletMinkowskiSumShape copy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_operator_572_comment =
  "C++ Interface:\n"
  "assign(const BulletMinkowskiSumShape self, const BulletMinkowskiSumShape copy)\n";
#else
static const char *Dtool_BulletMinkowskiSumShape_operator_572_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletMinkowskiSumShape::set_transform_a(TransformState const *ts)
 */
static PyObject *Dtool_BulletMinkowskiSumShape_set_transform_a_573(PyObject *self, PyObject *arg) {
  BulletMinkowskiSumShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this, "BulletMinkowskiSumShape.set_transform_a")) {
    return NULL;
  }
  // 1-inline void BulletMinkowskiSumShape::set_transform_a(TransformState const *ts)
  TransformState const *arg_this = (TransformState *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_TransformState, 1, "BulletMinkowskiSumShape.set_transform_a", true, true);
  if (arg_this != NULL) {
    (*local_this).set_transform_a(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_transform_a(const BulletMinkowskiSumShape self, const TransformState ts)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_set_transform_a_573_comment =
  "C++ Interface:\n"
  "set_transform_a(const BulletMinkowskiSumShape self, const TransformState ts)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_set_transform_a_573_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletMinkowskiSumShape::set_transform_b(TransformState const *ts)
 */
static PyObject *Dtool_BulletMinkowskiSumShape_set_transform_b_574(PyObject *self, PyObject *arg) {
  BulletMinkowskiSumShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this, "BulletMinkowskiSumShape.set_transform_b")) {
    return NULL;
  }
  // 1-inline void BulletMinkowskiSumShape::set_transform_b(TransformState const *ts)
  TransformState const *arg_this = (TransformState *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_TransformState, 1, "BulletMinkowskiSumShape.set_transform_b", true, true);
  if (arg_this != NULL) {
    (*local_this).set_transform_b(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_transform_b(const BulletMinkowskiSumShape self, const TransformState ts)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_set_transform_b_574_comment =
  "C++ Interface:\n"
  "set_transform_b(const BulletMinkowskiSumShape self, const TransformState ts)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_set_transform_b_574_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_a(void) const
 */
static PyObject *Dtool_BulletMinkowskiSumShape_get_transform_a_575(PyObject *self, PyObject *) {
  BulletMinkowskiSumShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_a(void) const
  ConstPointerTo< TransformState > return_value = (*(const BulletMinkowskiSumShape*)local_this).get_transform_a();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_TransformState, true, true, return_ptr->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_get_transform_a_575_comment =
  "C++ Interface:\n"
  "get_transform_a(BulletMinkowskiSumShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_get_transform_a_575_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_b(void) const
 */
static PyObject *Dtool_BulletMinkowskiSumShape_get_transform_b_576(PyObject *self, PyObject *) {
  BulletMinkowskiSumShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_b(void) const
  ConstPointerTo< TransformState > return_value = (*(const BulletMinkowskiSumShape*)local_this).get_transform_b();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_TransformState, true, true, return_ptr->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_get_transform_b_576_comment =
  "C++ Interface:\n"
  "get_transform_b(BulletMinkowskiSumShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_get_transform_b_576_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletShape const *BulletMinkowskiSumShape::get_shape_a(void) const
 */
static PyObject *Dtool_BulletMinkowskiSumShape_get_shape_a_577(PyObject *self, PyObject *) {
  BulletMinkowskiSumShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline BulletShape const *BulletMinkowskiSumShape::get_shape_a(void) const
  BulletShape const *return_value = (*(const BulletMinkowskiSumShape*)local_this).get_shape_a();
  if (return_value != (BulletShape const *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletShape const *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletShape, true, true, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_get_shape_a_577_comment =
  "C++ Interface:\n"
  "get_shape_a(BulletMinkowskiSumShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_get_shape_a_577_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletShape const *BulletMinkowskiSumShape::get_shape_b(void) const
 */
static PyObject *Dtool_BulletMinkowskiSumShape_get_shape_b_578(PyObject *self, PyObject *) {
  BulletMinkowskiSumShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline BulletShape const *BulletMinkowskiSumShape::get_shape_b(void) const
  BulletShape const *return_value = (*(const BulletMinkowskiSumShape*)local_this).get_shape_b();
  if (return_value != (BulletShape const *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletShape const *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletShape, true, true, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_get_shape_b_578_comment =
  "C++ Interface:\n"
  "get_shape_b(BulletMinkowskiSumShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_get_shape_b_578_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletMinkowskiSumShape::get_margin(void) const
 */
static PyObject *Dtool_BulletMinkowskiSumShape_get_margin_579(PyObject *self, PyObject *) {
  BulletMinkowskiSumShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMinkowskiSumShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletMinkowskiSumShape::get_margin(void) const
  PN_stdfloat return_value = (*(const BulletMinkowskiSumShape*)local_this).get_margin();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_get_margin_579_comment =
  "C++ Interface:\n"
  "get_margin(BulletMinkowskiSumShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMinkowskiSumShape_get_margin_579_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletMinkowskiSumShape::get_class_type(void)
 */
static PyObject *Dtool_BulletMinkowskiSumShape_get_class_type_580(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletMinkowskiSumShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletMinkowskiSumShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletMinkowskiSumShape_get_class_type_580_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletMinkowskiSumShape_get_class_type_580_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletMinkowskiSumShape const &copy)
 * BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletShape const *shape_a, BulletShape const *shape_b)
 */
static int Dtool_Init_BulletMinkowskiSumShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "copy");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'copy' (pos 1) not found");
        return -1;
      }
      // 1-inline BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletMinkowskiSumShape const &copy)
      CPT(BulletMinkowskiSumShape) arg_this;
      if (!Dtool_ConstCoerce_BulletMinkowskiSumShape(arg, arg_this)) {
        Dtool_Raise_ArgTypeError(arg, 0, "BulletMinkowskiSumShape.BulletMinkowskiSumShape", "BulletMinkowskiSumShape");
        return -1;
      }
      BulletMinkowskiSumShape *return_value = new BulletMinkowskiSumShape(*MOVE(arg_this));
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletMinkowskiSumShape, true, false);
    }
    break;
  case 2:
    {
      // 1-BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletShape const *shape_a, BulletShape const *shape_b)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"shape_a", "shape_b", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletMinkowskiSumShape", (char **)keyword_list, &param0, &param1)) {
        BulletShape const *param0_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletShape, 0, "BulletMinkowskiSumShape.BulletMinkowskiSumShape", true, true);
        BulletShape const *param1_this = (BulletShape *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletShape, 1, "BulletMinkowskiSumShape.BulletMinkowskiSumShape", true, true);
        if (param0_this != NULL && param1_this != NULL) {
          BulletMinkowskiSumShape *return_value = new BulletMinkowskiSumShape(param0_this, param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletMinkowskiSumShape, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletMinkowskiSumShape() takes 1 or 2 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletMinkowskiSumShape(const BulletMinkowskiSumShape copy)\n"
      "BulletMinkowskiSumShape(const BulletShape shape_a, const BulletShape shape_b)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletMinkowskiSumShape(PyObject *args, CPT(BulletMinkowskiSumShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletMinkowskiSumShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 2) {
      // 1-BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletShape const *shape_a, BulletShape const *shape_b)
      PyObject *param0;
      PyObject *param1;
      if (PyArg_UnpackTuple(args, "BulletMinkowskiSumShape", 2, 2, &param0, &param1)) {
        BulletShape const *param0_this;
        DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletShape, (void **)&param0_this);
        BulletShape const *param1_this;
        DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletShape, (void **)&param1_this);
        if (param0_this != NULL && param1_this != NULL) {
          BulletMinkowskiSumShape *return_value = new BulletMinkowskiSumShape(param0_this, param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

bool Dtool_Coerce_BulletMinkowskiSumShape(PyObject *args, PT(BulletMinkowskiSumShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletMinkowskiSumShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 2) {
      // 1-BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletShape const *shape_a, BulletShape const *shape_b)
      PyObject *param0;
      PyObject *param1;
      if (PyArg_UnpackTuple(args, "BulletMinkowskiSumShape", 2, 2, &param0, &param1)) {
        BulletShape const *param0_this;
        DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletShape, (void **)&param0_this);
        BulletShape const *param1_this;
        DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletShape, (void **)&param1_this);
        if (param0_this != NULL && param1_this != NULL) {
          BulletMinkowskiSumShape *return_value = new BulletMinkowskiSumShape(param0_this, param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletMinkowskiSumShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletMinkowskiSumShape) {
    printf("BulletMinkowskiSumShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletMinkowskiSumShape *local_this = (BulletMinkowskiSumShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletMinkowskiSumShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletMinkowskiSumShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletMinkowskiSumShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletMinkowskiSumShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletMinkowskiSumShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletMinkowskiSumShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletMinkowskiSumShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletMinkowskiSumShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletMultiSphereShape
 */
/**
 * Python function wrapper for:
 * inline void BulletMultiSphereShape::operator =(BulletMultiSphereShape const &copy)
 */
static PyObject *Dtool_BulletMultiSphereShape_operator_583(PyObject *self, PyObject *arg) {
  BulletMultiSphereShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletMultiSphereShape, (void **)&local_this, "BulletMultiSphereShape.assign")) {
    return NULL;
  }
  // 1-inline void BulletMultiSphereShape::operator =(BulletMultiSphereShape const &copy)
  CPT(BulletMultiSphereShape) arg_this;
  if (!Dtool_ConstCoerce_BulletMultiSphereShape(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletMultiSphereShape.assign", "BulletMultiSphereShape");
  }
  (*local_this).operator =(*MOVE(arg_this));
  BulletMultiSphereShape *return_value = local_this;
  if (return_value != (BulletMultiSphereShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletMultiSphereShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletMultiSphereShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletMultiSphereShape self, const BulletMultiSphereShape copy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletMultiSphereShape_operator_583_comment =
  "C++ Interface:\n"
  "assign(const BulletMultiSphereShape self, const BulletMultiSphereShape copy)\n";
#else
static const char *Dtool_BulletMultiSphereShape_operator_583_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletMultiSphereShape::get_sphere_count(void) const
 */
static PyObject *Dtool_BulletMultiSphereShape_get_sphere_count_584(PyObject *self, PyObject *) {
  BulletMultiSphereShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMultiSphereShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletMultiSphereShape::get_sphere_count(void) const
  int return_value = (*(const BulletMultiSphereShape*)local_this).get_sphere_count();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletMultiSphereShape_get_sphere_count_584_comment =
  "C++ Interface:\n"
  "get_sphere_count(BulletMultiSphereShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMultiSphereShape_get_sphere_count_584_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LPoint3 BulletMultiSphereShape::get_sphere_pos(int index) const
 */
static PyObject *Dtool_BulletMultiSphereShape_get_sphere_pos_585(PyObject *self, PyObject *arg) {
  BulletMultiSphereShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMultiSphereShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LPoint3 BulletMultiSphereShape::get_sphere_pos(int index) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    LPoint3 *return_value = new LPoint3((*(const BulletMultiSphereShape*)local_this).get_sphere_pos((int)arg_val));
    if (return_value == NULL) {
      return PyErr_NoMemory();
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_sphere_pos(BulletMultiSphereShape self, int index)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletMultiSphereShape_get_sphere_pos_585_comment =
  "C++ Interface:\n"
  "get_sphere_pos(BulletMultiSphereShape self, int index)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMultiSphereShape_get_sphere_pos_585_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletMultiSphereShape::get_sphere_radius(int index) const
 */
static PyObject *Dtool_BulletMultiSphereShape_get_sphere_radius_586(PyObject *self, PyObject *arg) {
  BulletMultiSphereShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletMultiSphereShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletMultiSphereShape::get_sphere_radius(int index) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    PN_stdfloat return_value = (*(const BulletMultiSphereShape*)local_this).get_sphere_radius((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    return Dtool_WrapValue(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_sphere_radius(BulletMultiSphereShape self, int index)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletMultiSphereShape_get_sphere_radius_586_comment =
  "C++ Interface:\n"
  "get_sphere_radius(BulletMultiSphereShape self, int index)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletMultiSphereShape_get_sphere_radius_586_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletMultiSphereShape::get_class_type(void)
 */
static PyObject *Dtool_BulletMultiSphereShape_get_class_type_587(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletMultiSphereShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletMultiSphereShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletMultiSphereShape_get_class_type_587_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletMultiSphereShape_get_class_type_587_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletMultiSphereShape::BulletMultiSphereShape(BulletMultiSphereShape const &copy)
 * BulletMultiSphereShape::BulletMultiSphereShape(PTA_LVecBase3 const &points, PTA_stdfloat const &radii)
 */
static int Dtool_Init_BulletMultiSphereShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "copy");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'copy' (pos 1) not found");
        return -1;
      }
      // 1-inline BulletMultiSphereShape::BulletMultiSphereShape(BulletMultiSphereShape const &copy)
      CPT(BulletMultiSphereShape) arg_this;
      if (!Dtool_ConstCoerce_BulletMultiSphereShape(arg, arg_this)) {
        Dtool_Raise_ArgTypeError(arg, 0, "BulletMultiSphereShape.BulletMultiSphereShape", "BulletMultiSphereShape");
        return -1;
      }
      BulletMultiSphereShape *return_value = new BulletMultiSphereShape(*MOVE(arg_this));
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletMultiSphereShape, true, false);
    }
    break;
  case 2:
    {
      // 1-BulletMultiSphereShape::BulletMultiSphereShape(PTA_LVecBase3 const &points, PTA_stdfloat const &radii)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"points", "radii", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletMultiSphereShape", (char **)keyword_list, &param0, &param1)) {
        PointerToArray< LVecBase3f > param0_local;
        PTA_LVecBase3 const *param0_this = Dtool_Coerce_PointerToArray_LVecBase3f(param0, param0_local);
        if (!(param0_this != NULL)) {
          Dtool_Raise_ArgTypeError(param0, 0, "BulletMultiSphereShape.BulletMultiSphereShape", "PointerToArray");
          return -1;
        }
        PointerToArray< float > param1_local;
        PTA_stdfloat const *param1_this = Dtool_Coerce_PointerToArray_float(param1, param1_local);
        if (!(param1_this != NULL)) {
          Dtool_Raise_ArgTypeError(param1, 1, "BulletMultiSphereShape.BulletMultiSphereShape", "PointerToArray");
          return -1;
        }
        BulletMultiSphereShape *return_value = new BulletMultiSphereShape(*param0_this, *param1_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletMultiSphereShape, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletMultiSphereShape() takes 1 or 2 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletMultiSphereShape(const BulletMultiSphereShape copy)\n"
      "BulletMultiSphereShape(const PointerToArray points, const PointerToArray radii)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletMultiSphereShape(PyObject *args, CPT(BulletMultiSphereShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletMultiSphereShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 2) {
      // 1-BulletMultiSphereShape::BulletMultiSphereShape(PTA_LVecBase3 const &points, PTA_stdfloat const &radii)
      PyObject *param0;
      PyObject *param1;
      if (PyArg_UnpackTuple(args, "BulletMultiSphereShape", 2, 2, &param0, &param1)) {
        PTA_LVecBase3 const *param0_this;
        DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_PointerToArray_LVecBase3f, (void **)&param0_this);
        PTA_stdfloat const *param1_this;
        DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_PointerToArray_float, (void **)&param1_this);
        if (param0_this != NULL && param1_this != NULL) {
          BulletMultiSphereShape *return_value = new BulletMultiSphereShape(*param0_this, *param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

bool Dtool_Coerce_BulletMultiSphereShape(PyObject *args, PT(BulletMultiSphereShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletMultiSphereShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 2) {
      // 1-BulletMultiSphereShape::BulletMultiSphereShape(PTA_LVecBase3 const &points, PTA_stdfloat const &radii)
      PyObject *param0;
      PyObject *param1;
      if (PyArg_UnpackTuple(args, "BulletMultiSphereShape", 2, 2, &param0, &param1)) {
        PTA_LVecBase3 const *param0_this;
        DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_PointerToArray_LVecBase3f, (void **)&param0_this);
        PTA_stdfloat const *param1_this;
        DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_PointerToArray_float, (void **)&param1_this);
        if (param0_this != NULL && param1_this != NULL) {
          BulletMultiSphereShape *return_value = new BulletMultiSphereShape(*param0_this, *param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletMultiSphereShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletMultiSphereShape) {
    printf("BulletMultiSphereShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletMultiSphereShape *local_this = (BulletMultiSphereShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletMultiSphereShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletMultiSphereShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletMultiSphereShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletMultiSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletMultiSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletMultiSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletMultiSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletMultiSphereShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletPersistentManifold
 */
/**
 * Python function wrapper for:
 * PandaNode *BulletPersistentManifold::get_node0(void)
 */
static PyObject *Dtool_BulletPersistentManifold_get_node0_590(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletPersistentManifold, (void **)&local_this, "BulletPersistentManifold.get_node0")) {
    return NULL;
  }
  // 1-PandaNode *BulletPersistentManifold::get_node0(void)
  PandaNode *return_value = (*local_this).get_node0();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_get_node0_590_comment =
  "C++ Interface:\n"
  "get_node0(const BulletPersistentManifold self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_get_node0_590_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PandaNode *BulletPersistentManifold::get_node1(void)
 */
static PyObject *Dtool_BulletPersistentManifold_get_node1_591(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletPersistentManifold, (void **)&local_this, "BulletPersistentManifold.get_node1")) {
    return NULL;
  }
  // 1-PandaNode *BulletPersistentManifold::get_node1(void)
  PandaNode *return_value = (*local_this).get_node1();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_get_node1_591_comment =
  "C++ Interface:\n"
  "get_node1(const BulletPersistentManifold self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_get_node1_591_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletPersistentManifold::get_num_manifold_points(void) const
 */
static PyObject *Dtool_BulletPersistentManifold_get_num_manifold_points_592(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPersistentManifold, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletPersistentManifold::get_num_manifold_points(void) const
  int return_value = (*(const BulletPersistentManifold*)local_this).get_num_manifold_points();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_get_num_manifold_points_592_comment =
  "C++ Interface:\n"
  "get_num_manifold_points(BulletPersistentManifold self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_get_num_manifold_points_592_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletManifoldPoint *BulletPersistentManifold::get_manifold_point(int idx) const
 */
static PyObject *Dtool_BulletPersistentManifold_get_manifold_point_593(PyObject *self, PyObject *arg) {
  BulletPersistentManifold *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPersistentManifold, (void **)&local_this)) {
    return NULL;
  }
  // 1-BulletManifoldPoint *BulletPersistentManifold::get_manifold_point(int idx) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    BulletManifoldPoint *return_value = (*(const BulletPersistentManifold*)local_this).get_manifold_point((int)arg_val);
    if (Dtool_CheckErrorOccurred()) {
      return NULL;
    }
    return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletManifoldPoint, false, false);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_manifold_point(BulletPersistentManifold self, int idx)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_get_manifold_point_593_comment =
  "C++ Interface:\n"
  "get_manifold_point(BulletPersistentManifold self, int idx)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_get_manifold_point_593_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletPersistentManifold::get_contact_breaking_threshold(void) const
 */
static PyObject *Dtool_BulletPersistentManifold_get_contact_breaking_threshold_595(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPersistentManifold, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletPersistentManifold::get_contact_breaking_threshold(void) const
  PN_stdfloat return_value = (*(const BulletPersistentManifold*)local_this).get_contact_breaking_threshold();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_get_contact_breaking_threshold_595_comment =
  "C++ Interface:\n"
  "get_contact_breaking_threshold(BulletPersistentManifold self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_get_contact_breaking_threshold_595_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletPersistentManifold::get_contact_processing_threshold(void) const
 */
static PyObject *Dtool_BulletPersistentManifold_get_contact_processing_threshold_596(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPersistentManifold, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletPersistentManifold::get_contact_processing_threshold(void) const
  PN_stdfloat return_value = (*(const BulletPersistentManifold*)local_this).get_contact_processing_threshold();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_get_contact_processing_threshold_596_comment =
  "C++ Interface:\n"
  "get_contact_processing_threshold(BulletPersistentManifold self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_get_contact_processing_threshold_596_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletPersistentManifold::clear_manifold(void)
 */
static PyObject *Dtool_BulletPersistentManifold_clear_manifold_597(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletPersistentManifold, (void **)&local_this, "BulletPersistentManifold.clear_manifold")) {
    return NULL;
  }
  // 1-void BulletPersistentManifold::clear_manifold(void)
  (*local_this).clear_manifold();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletPersistentManifold_clear_manifold_597_comment =
  "C++ Interface:\n"
  "clear_manifold(const BulletPersistentManifold self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPersistentManifold_clear_manifold_597_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletPersistentManifold::BulletPersistentManifold(BulletPersistentManifold const &) = default
 */
static int Dtool_Init_BulletPersistentManifold(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletPersistentManifold() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg = NULL;
  if (PyTuple_GET_SIZE(args) == 1) {
    arg = PyTuple_GET_ITEM(args, 0);
  } else if (kwds != NULL) {
    arg = PyDict_GetItemString(kwds, "param0");
  }
  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
    return -1;
  }
  // 1-inline BulletPersistentManifold::BulletPersistentManifold(BulletPersistentManifold const &) = default
  BulletPersistentManifold const *arg_this = (BulletPersistentManifold *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletPersistentManifold, 0, "BulletPersistentManifold.BulletPersistentManifold", true, true);
  if (arg_this != NULL) {
    BulletPersistentManifold *return_value = new BulletPersistentManifold(*arg_this);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletPersistentManifold, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletPersistentManifold(const BulletPersistentManifold param0)\n");
  }
  return -1;
}

/*
 * Python make_seq wrapper
 */
static PyObject *MakeSeq_BulletPersistentManifold_get_manifold_points(PyObject *self, PyObject *) {
  BulletPersistentManifold *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPersistentManifold, (void **)&local_this)) {
    return NULL;
  }
  Py_ssize_t count = (Py_ssize_t)(*local_this).get_num_manifold_points();
  PyObject *tuple = PyTuple_New(count);

  for (Py_ssize_t i = 0; i < count; ++i) {
    PyObject *index = Dtool_WrapValue(i);
    PyObject *value = Dtool_BulletPersistentManifold_get_manifold_point_593(self, index);
    PyTuple_SET_ITEM(tuple, i, value);
    Py_DECREF(index);
  }

  if (Dtool_CheckErrorOccurred()) {
    Py_DECREF(tuple);
    return NULL;
  }
  return tuple;
}

static void *Dtool_UpcastInterface_BulletPersistentManifold(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletPersistentManifold) {
    printf("BulletPersistentManifold ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletPersistentManifold *local_this = (BulletPersistentManifold *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletPersistentManifold) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletPersistentManifold(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletPersistentManifold) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletPlaneShape
 */
/**
 * Python function wrapper for:
 * inline void BulletPlaneShape::operator =(BulletPlaneShape const &copy)
 */
static PyObject *Dtool_BulletPlaneShape_operator_601(PyObject *self, PyObject *arg) {
  BulletPlaneShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletPlaneShape, (void **)&local_this, "BulletPlaneShape.assign")) {
    return NULL;
  }
  // 1-inline void BulletPlaneShape::operator =(BulletPlaneShape const &copy)
  CPT(BulletPlaneShape) arg_this;
  if (!Dtool_ConstCoerce_BulletPlaneShape(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletPlaneShape.assign", "BulletPlaneShape");
  }
  (*local_this).operator =(*MOVE(arg_this));
  BulletPlaneShape *return_value = local_this;
  if (return_value != (BulletPlaneShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletPlaneShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletPlaneShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletPlaneShape self, const BulletPlaneShape copy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletPlaneShape_operator_601_comment =
  "C++ Interface:\n"
  "assign(const BulletPlaneShape self, const BulletPlaneShape copy)\n";
#else
static const char *Dtool_BulletPlaneShape_operator_601_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LVector3 BulletPlaneShape::get_plane_normal(void) const
 */
static PyObject *Dtool_BulletPlaneShape_get_plane_normal_602(PyObject *self, PyObject *) {
  BulletPlaneShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPlaneShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LVector3 BulletPlaneShape::get_plane_normal(void) const
  LVector3 *return_value = new LVector3((*(const BulletPlaneShape*)local_this).get_plane_normal());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletPlaneShape_get_plane_normal_602_comment =
  "C++ Interface:\n"
  "get_plane_normal(BulletPlaneShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPlaneShape_get_plane_normal_602_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletPlaneShape::get_plane_constant(void) const
 */
static PyObject *Dtool_BulletPlaneShape_get_plane_constant_603(PyObject *self, PyObject *) {
  BulletPlaneShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletPlaneShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletPlaneShape::get_plane_constant(void) const
  PN_stdfloat return_value = (*(const BulletPlaneShape*)local_this).get_plane_constant();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletPlaneShape_get_plane_constant_603_comment =
  "C++ Interface:\n"
  "get_plane_constant(BulletPlaneShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPlaneShape_get_plane_constant_603_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static BulletPlaneShape *BulletPlaneShape::make_from_solid(CollisionPlane const *solid)
 */
static PyObject *Dtool_BulletPlaneShape_make_from_solid_604(PyObject *, PyObject *arg) {
  // 1-static BulletPlaneShape *BulletPlaneShape::make_from_solid(CollisionPlane const *solid)
  CPT(CollisionPlane) arg_this;
  if (!Dtool_ConstCoerce_CollisionPlane(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 0, "BulletPlaneShape.make_from_solid", "CollisionPlane");
  }
  BulletPlaneShape *return_value = BulletPlaneShape::make_from_solid(MOVE(arg_this));
  if (return_value != (BulletPlaneShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletPlaneShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletPlaneShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_from_solid(const CollisionPlane solid)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletPlaneShape_make_from_solid_604_comment =
  "C++ Interface:\n"
  "make_from_solid(const CollisionPlane solid)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletPlaneShape_make_from_solid_604_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletPlaneShape::get_class_type(void)
 */
static PyObject *Dtool_BulletPlaneShape_get_class_type_605(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletPlaneShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletPlaneShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletPlaneShape_get_class_type_605_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletPlaneShape_get_class_type_605_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletPlaneShape::BulletPlaneShape(BulletPlaneShape const &copy)
 * BulletPlaneShape::BulletPlaneShape(LVector3 const &normal, PN_stdfloat constant)
 */
static int Dtool_Init_BulletPlaneShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "copy");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'copy' (pos 1) not found");
        return -1;
      }
      // 1-inline BulletPlaneShape::BulletPlaneShape(BulletPlaneShape const &copy)
      CPT(BulletPlaneShape) arg_this;
      if (!Dtool_ConstCoerce_BulletPlaneShape(arg, arg_this)) {
        Dtool_Raise_ArgTypeError(arg, 0, "BulletPlaneShape.BulletPlaneShape", "BulletPlaneShape");
        return -1;
      }
      BulletPlaneShape *return_value = new BulletPlaneShape(*MOVE(arg_this));
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletPlaneShape, true, false);
    }
    break;
  case 2:
    {
      // 1-BulletPlaneShape::BulletPlaneShape(LVector3 const &normal, PN_stdfloat constant)
      PyObject *param0;
      float param1;
      static const char *keyword_list[] = {"normal", "constant", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "Of:BulletPlaneShape", (char **)keyword_list, &param0, &param1)) {
        LVector3f param0_local;
        LVector3 const *param0_this = Dtool_Coerce_LVector3f(param0, param0_local);
        if (!(param0_this != NULL)) {
          Dtool_Raise_ArgTypeError(param0, 0, "BulletPlaneShape.BulletPlaneShape", "LVector3f");
          return -1;
        }
        BulletPlaneShape *return_value = new BulletPlaneShape(*param0_this, (PN_stdfloat)param1);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletPlaneShape, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletPlaneShape() takes 1 or 2 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletPlaneShape(const BulletPlaneShape copy)\n"
      "BulletPlaneShape(const LVector3f normal, float constant)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletPlaneShape(PyObject *args, CPT(BulletPlaneShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletPlaneShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 2) {
      // 1-BulletPlaneShape::BulletPlaneShape(LVector3 const &normal, PN_stdfloat constant)
      PyObject *param0;
      float param1;
      if (PyArg_ParseTuple(args, "Of:BulletPlaneShape", &param0, &param1)) {
        LVector3 const *param0_this;
        DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_LVector3f, (void **)&param0_this);
        if (param0_this != NULL) {
          BulletPlaneShape *return_value = new BulletPlaneShape(*param0_this, (PN_stdfloat)param1);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

bool Dtool_Coerce_BulletPlaneShape(PyObject *args, PT(BulletPlaneShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletPlaneShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    if (PyTuple_GET_SIZE(args) == 2) {
      // 1-BulletPlaneShape::BulletPlaneShape(LVector3 const &normal, PN_stdfloat constant)
      PyObject *param0;
      float param1;
      if (PyArg_ParseTuple(args, "Of:BulletPlaneShape", &param0, &param1)) {
        LVector3 const *param0_this;
        DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_LVector3f, (void **)&param0_this);
        if (param0_this != NULL) {
          BulletPlaneShape *return_value = new BulletPlaneShape(*param0_this, (PN_stdfloat)param1);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletPlaneShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletPlaneShape) {
    printf("BulletPlaneShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletPlaneShape *local_this = (BulletPlaneShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletPlaneShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletPlaneShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletPlaneShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletPlaneShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletPlaneShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletPlaneShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletPlaneShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletPlaneShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletSliderConstraint
 */
/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_linear_pos(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_linear_pos_608(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_linear_pos(void) const
  PN_stdfloat return_value = (*(const BulletSliderConstraint*)local_this).get_linear_pos();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_linear_pos_608_comment =
  "C++ Interface:\n"
  "get_linear_pos(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_linear_pos_608_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_angular_pos(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_angular_pos_609(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_angular_pos(void) const
  PN_stdfloat return_value = (*(const BulletSliderConstraint*)local_this).get_angular_pos();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_angular_pos_609_comment =
  "C++ Interface:\n"
  "get_angular_pos(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_angular_pos_609_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_lower_linear_limit(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_lower_linear_limit_610(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_lower_linear_limit(void) const
  PN_stdfloat return_value = (*(const BulletSliderConstraint*)local_this).get_lower_linear_limit();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_lower_linear_limit_610_comment =
  "C++ Interface:\n"
  "get_lower_linear_limit(BulletSliderConstraint self)\n"
  "\n"
  "// Limits\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_lower_linear_limit_610_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_upper_linear_limit(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_upper_linear_limit_611(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_upper_linear_limit(void) const
  PN_stdfloat return_value = (*(const BulletSliderConstraint*)local_this).get_upper_linear_limit();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_upper_linear_limit_611_comment =
  "C++ Interface:\n"
  "get_upper_linear_limit(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_upper_linear_limit_611_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_lower_angular_limit(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_lower_angular_limit_612(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_lower_angular_limit(void) const
  PN_stdfloat return_value = (*(const BulletSliderConstraint*)local_this).get_lower_angular_limit();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_lower_angular_limit_612_comment =
  "C++ Interface:\n"
  "get_lower_angular_limit(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_lower_angular_limit_612_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_upper_angular_limit(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_upper_angular_limit_613(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_upper_angular_limit(void) const
  PN_stdfloat return_value = (*(const BulletSliderConstraint*)local_this).get_upper_angular_limit();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_upper_angular_limit_613_comment =
  "C++ Interface:\n"
  "get_upper_angular_limit(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_upper_angular_limit_613_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_lower_linear_limit(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSliderConstraint_set_lower_linear_limit_614(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_lower_linear_limit")) {
    return NULL;
  }
  // 1-void BulletSliderConstraint::set_lower_linear_limit(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_lower_linear_limit((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_lower_linear_limit(const BulletSliderConstraint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_lower_linear_limit_614_comment =
  "C++ Interface:\n"
  "set_lower_linear_limit(const BulletSliderConstraint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_lower_linear_limit_614_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_upper_linear_limit(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSliderConstraint_set_upper_linear_limit_615(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_upper_linear_limit")) {
    return NULL;
  }
  // 1-void BulletSliderConstraint::set_upper_linear_limit(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_upper_linear_limit((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_upper_linear_limit(const BulletSliderConstraint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_upper_linear_limit_615_comment =
  "C++ Interface:\n"
  "set_upper_linear_limit(const BulletSliderConstraint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_upper_linear_limit_615_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_lower_angular_limit(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSliderConstraint_set_lower_angular_limit_616(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_lower_angular_limit")) {
    return NULL;
  }
  // 1-void BulletSliderConstraint::set_lower_angular_limit(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_lower_angular_limit((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_lower_angular_limit(const BulletSliderConstraint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_lower_angular_limit_616_comment =
  "C++ Interface:\n"
  "set_lower_angular_limit(const BulletSliderConstraint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_lower_angular_limit_616_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_upper_angular_limit(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSliderConstraint_set_upper_angular_limit_617(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_upper_angular_limit")) {
    return NULL;
  }
  // 1-void BulletSliderConstraint::set_upper_angular_limit(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_upper_angular_limit((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_upper_angular_limit(const BulletSliderConstraint self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_upper_angular_limit_617_comment =
  "C++ Interface:\n"
  "set_upper_angular_limit(const BulletSliderConstraint self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_upper_angular_limit_617_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_powered_linear_motor(bool on)
 */
static PyObject *Dtool_BulletSliderConstraint_set_powered_linear_motor_618(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_powered_linear_motor")) {
    return NULL;
  }
  // 1-void BulletSliderConstraint::set_powered_linear_motor(bool on)
  (*local_this).set_powered_linear_motor((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_powered_linear_motor(const BulletSliderConstraint self, bool on)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_powered_linear_motor_618_comment =
  "C++ Interface:\n"
  "set_powered_linear_motor(const BulletSliderConstraint self, bool on)\n"
  "\n"
  "// Linear motor\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_powered_linear_motor_618_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_target_linear_motor_velocity(PN_stdfloat target_velocity)
 */
static PyObject *Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_619(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_target_linear_motor_velocity")) {
    return NULL;
  }
  // 1-void BulletSliderConstraint::set_target_linear_motor_velocity(PN_stdfloat target_velocity)
  if (PyNumber_Check(arg)) {
    (*local_this).set_target_linear_motor_velocity((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_target_linear_motor_velocity(const BulletSliderConstraint self, float target_velocity)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_619_comment =
  "C++ Interface:\n"
  "set_target_linear_motor_velocity(const BulletSliderConstraint self, float target_velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_619_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_max_linear_motor_force(PN_stdfloat max_force)
 */
static PyObject *Dtool_BulletSliderConstraint_set_max_linear_motor_force_620(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_max_linear_motor_force")) {
    return NULL;
  }
  // 1-void BulletSliderConstraint::set_max_linear_motor_force(PN_stdfloat max_force)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_linear_motor_force((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_linear_motor_force(const BulletSliderConstraint self, float max_force)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_max_linear_motor_force_620_comment =
  "C++ Interface:\n"
  "set_max_linear_motor_force(const BulletSliderConstraint self, float max_force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_max_linear_motor_force_620_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletSliderConstraint::get_powered_linear_motor(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_powered_linear_motor_621(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletSliderConstraint::get_powered_linear_motor(void) const
  bool return_value = (*(const BulletSliderConstraint*)local_this).get_powered_linear_motor();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_powered_linear_motor_621_comment =
  "C++ Interface:\n"
  "get_powered_linear_motor(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_powered_linear_motor_621_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_target_linear_motor_velocity(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_622(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_target_linear_motor_velocity(void) const
  PN_stdfloat return_value = (*(const BulletSliderConstraint*)local_this).get_target_linear_motor_velocity();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_622_comment =
  "C++ Interface:\n"
  "get_target_linear_motor_velocity(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_622_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_max_linear_motor_force(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_max_linear_motor_force_623(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_max_linear_motor_force(void) const
  PN_stdfloat return_value = (*(const BulletSliderConstraint*)local_this).get_max_linear_motor_force();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_max_linear_motor_force_623_comment =
  "C++ Interface:\n"
  "get_max_linear_motor_force(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_max_linear_motor_force_623_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_powered_angular_motor(bool on)
 */
static PyObject *Dtool_BulletSliderConstraint_set_powered_angular_motor_624(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_powered_angular_motor")) {
    return NULL;
  }
  // 1-void BulletSliderConstraint::set_powered_angular_motor(bool on)
  (*local_this).set_powered_angular_motor((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_powered_angular_motor(const BulletSliderConstraint self, bool on)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_powered_angular_motor_624_comment =
  "C++ Interface:\n"
  "set_powered_angular_motor(const BulletSliderConstraint self, bool on)\n"
  "\n"
  "// Angular motor\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_powered_angular_motor_624_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_target_angular_motor_velocity(PN_stdfloat target_velocity)
 */
static PyObject *Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_625(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_target_angular_motor_velocity")) {
    return NULL;
  }
  // 1-void BulletSliderConstraint::set_target_angular_motor_velocity(PN_stdfloat target_velocity)
  if (PyNumber_Check(arg)) {
    (*local_this).set_target_angular_motor_velocity((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_target_angular_motor_velocity(const BulletSliderConstraint self, float target_velocity)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_625_comment =
  "C++ Interface:\n"
  "set_target_angular_motor_velocity(const BulletSliderConstraint self, float target_velocity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_625_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_max_angular_motor_force(PN_stdfloat max_force)
 */
static PyObject *Dtool_BulletSliderConstraint_set_max_angular_motor_force_626(PyObject *self, PyObject *arg) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_max_angular_motor_force")) {
    return NULL;
  }
  // 1-void BulletSliderConstraint::set_max_angular_motor_force(PN_stdfloat max_force)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_angular_motor_force((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_angular_motor_force(const BulletSliderConstraint self, float max_force)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_max_angular_motor_force_626_comment =
  "C++ Interface:\n"
  "set_max_angular_motor_force(const BulletSliderConstraint self, float max_force)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_max_angular_motor_force_626_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletSliderConstraint::get_powered_angular_motor(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_powered_angular_motor_627(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletSliderConstraint::get_powered_angular_motor(void) const
  bool return_value = (*(const BulletSliderConstraint*)local_this).get_powered_angular_motor();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_powered_angular_motor_627_comment =
  "C++ Interface:\n"
  "get_powered_angular_motor(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_powered_angular_motor_627_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_target_angular_motor_velocity(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_628(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_target_angular_motor_velocity(void) const
  PN_stdfloat return_value = (*(const BulletSliderConstraint*)local_this).get_target_angular_motor_velocity();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_628_comment =
  "C++ Interface:\n"
  "get_target_angular_motor_velocity(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_628_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSliderConstraint::get_max_angular_motor_force(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_max_angular_motor_force_629(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSliderConstraint::get_max_angular_motor_force(void) const
  PN_stdfloat return_value = (*(const BulletSliderConstraint*)local_this).get_max_angular_motor_force();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_max_angular_motor_force_629_comment =
  "C++ Interface:\n"
  "get_max_angular_motor_force(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_max_angular_motor_force_629_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSliderConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
 */
static PyObject *Dtool_BulletSliderConstraint_set_frames_630(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSliderConstraint, (void **)&local_this, "BulletSliderConstraint.set_frames")) {
    return NULL;
  }
  // 1-void BulletSliderConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"ts_a", "ts_b", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:set_frames", (char **)keyword_list, &param1, &param2)) {
    TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletSliderConstraint.set_frames", true, true);
    TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletSliderConstraint.set_frames", true, true);
    if (param1_this != NULL && param2_this != NULL) {
      (*local_this).set_frames(param1_this, param2_this);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_frames(const BulletSliderConstraint self, const TransformState ts_a, const TransformState ts_b)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_set_frames_630_comment =
  "C++ Interface:\n"
  "set_frames(const BulletSliderConstraint self, const TransformState ts_a, const TransformState ts_b)\n"
  "\n"
  "// Frames\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_set_frames_630_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_a(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_frame_a_631(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_a(void) const
  ConstPointerTo< TransformState > return_value = (*(const BulletSliderConstraint*)local_this).get_frame_a();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_TransformState, true, true, return_ptr->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_frame_a_631_comment =
  "C++ Interface:\n"
  "get_frame_a(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_frame_a_631_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_b(void) const
 */
static PyObject *Dtool_BulletSliderConstraint_get_frame_b_632(PyObject *self, PyObject *) {
  BulletSliderConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSliderConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_b(void) const
  ConstPointerTo< TransformState > return_value = (*(const BulletSliderConstraint*)local_this).get_frame_b();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  // Transfer ownership of return_value.
  TransformState const *return_ptr = return_value.p();
  return_value.cheat() = NULL;
  if (return_ptr == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_ptr, *Dtool_Ptr_TransformState, true, true, return_ptr->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_frame_b_632_comment =
  "C++ Interface:\n"
  "get_frame_b(BulletSliderConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSliderConstraint_get_frame_b_632_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletSliderConstraint::get_class_type(void)
 */
static PyObject *Dtool_BulletSliderConstraint_get_class_type_633(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletSliderConstraint::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletSliderConstraint::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSliderConstraint_get_class_type_633_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletSliderConstraint_get_class_type_633_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a)
 * BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool useFrame_a)
 */
static int Dtool_Init_BulletSliderConstraint(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 3:
    {
      // 1-BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool useFrame_a)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      static const char *keyword_list[] = {"node_a", "frame_a", "useFrame_a", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:BulletSliderConstraint", (char **)keyword_list, &param0, &param1, &param2)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletSliderConstraint.BulletSliderConstraint", true, true);
        TransformState const *param1_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_TransformState, 1, "BulletSliderConstraint.BulletSliderConstraint", true, true);
        if (param0_this != NULL && param1_this != NULL) {
          BulletSliderConstraint *return_value = new BulletSliderConstraint(param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSliderConstraint, true, false);
        }
      }
    }
    break;
  case 5:
    {
      // 1-BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      PyObject *param4;
      static const char *keyword_list[] = {"node_a", "node_b", "frame_a", "frame_b", "use_frame_a", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOOO:BulletSliderConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3, &param4)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletSliderConstraint.BulletSliderConstraint", true, true);
        BulletRigidBodyNode const *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletSliderConstraint.BulletSliderConstraint", true, true);
        TransformState const *param2_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param2, Dtool_Ptr_TransformState, 2, "BulletSliderConstraint.BulletSliderConstraint", true, true);
        TransformState const *param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletSliderConstraint.BulletSliderConstraint", true, true);
        if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
          BulletSliderConstraint *return_value = new BulletSliderConstraint(param0_this, param1_this, param2_this, param3_this, (PyObject_IsTrue(param4) != 0));
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSliderConstraint, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletSliderConstraint() takes 3 or 5 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSliderConstraint(const BulletRigidBodyNode node_a, const TransformState frame_a, bool useFrame_a)\n"
      "BulletSliderConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const TransformState frame_a, const TransformState frame_b, bool use_frame_a)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletSliderConstraint(PyObject *args, CPT(BulletSliderConstraint) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletSliderConstraint, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    switch (PyTuple_GET_SIZE(args)) {
      case 3: {
        // 1-BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool useFrame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        if (PyArg_UnpackTuple(args, "BulletSliderConstraint", 3, 3, &param0, &param1, &param2)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          TransformState const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_TransformState, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletSliderConstraint *return_value = new BulletSliderConstraint(param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
      case 5: {
        // 1-BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        PyObject *param4;
        if (PyArg_UnpackTuple(args, "BulletSliderConstraint", 5, 5, &param0, &param1, &param2, &param3, &param4)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          TransformState const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_TransformState, (void **)&param2_this);
          TransformState const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_TransformState, (void **)&param3_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
            BulletSliderConstraint *return_value = new BulletSliderConstraint(param0_this, param1_this, param2_this, param3_this, (PyObject_IsTrue(param4) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
    }
  }

  return false;
}

bool Dtool_Coerce_BulletSliderConstraint(PyObject *args, PT(BulletSliderConstraint) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletSliderConstraint, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    switch (PyTuple_GET_SIZE(args)) {
      case 3: {
        // 1-BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool useFrame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        if (PyArg_UnpackTuple(args, "BulletSliderConstraint", 3, 3, &param0, &param1, &param2)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          TransformState const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_TransformState, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletSliderConstraint *return_value = new BulletSliderConstraint(param0_this, param1_this, (PyObject_IsTrue(param2) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
      case 5: {
        // 1-BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        PyObject *param4;
        if (PyArg_UnpackTuple(args, "BulletSliderConstraint", 5, 5, &param0, &param1, &param2, &param3, &param4)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          TransformState const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_TransformState, (void **)&param2_this);
          TransformState const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_TransformState, (void **)&param3_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
            BulletSliderConstraint *return_value = new BulletSliderConstraint(param0_this, param1_this, param2_this, param3_this, (PyObject_IsTrue(param4) != 0));
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletSliderConstraint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletSliderConstraint) {
    printf("BulletSliderConstraint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletSliderConstraint *local_this = (BulletSliderConstraint *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletSliderConstraint) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletConstraint) {
    return (BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletSliderConstraint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletSliderConstraint) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletConstraint) {
    BulletConstraint* other_this = (BulletConstraint*)from_this;
    return (BulletSliderConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletSliderConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletSliderConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletSliderConstraint*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletSoftBodyConfig
 */
/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::clear_all_collision_flags(void)
 */
static PyObject *Dtool_BulletSoftBodyConfig_clear_all_collision_flags_638(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.clear_all_collision_flags")) {
    return NULL;
  }
  // 1-void BulletSoftBodyConfig::clear_all_collision_flags(void)
  (*local_this).clear_all_collision_flags();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_clear_all_collision_flags_638_comment =
  "C++ Interface:\n"
  "clear_all_collision_flags(const BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_clear_all_collision_flags_638_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_collision_flag(BulletSoftBodyConfig::CollisionFlag flag, bool value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_collision_flag_639(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_collision_flag")) {
    return NULL;
  }
  // 1-void BulletSoftBodyConfig::set_collision_flag(BulletSoftBodyConfig::CollisionFlag flag, bool value)
  int param1;
  PyObject *param2;
  static const char *keyword_list[] = {"flag", "value", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "iO:set_collision_flag", (char **)keyword_list, &param1, &param2)) {
    (*local_this).set_collision_flag((BulletSoftBodyConfig::CollisionFlag)param1, (PyObject_IsTrue(param2) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_collision_flag(const BulletSoftBodyConfig self, int flag, bool value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_collision_flag_639_comment =
  "C++ Interface:\n"
  "set_collision_flag(const BulletSoftBodyConfig self, int flag, bool value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_collision_flag_639_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletSoftBodyConfig::get_collision_flag(BulletSoftBodyConfig::CollisionFlag flag) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_collision_flag_640(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletSoftBodyConfig::get_collision_flag(BulletSoftBodyConfig::CollisionFlag flag) const
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    bool return_value = (*(const BulletSoftBodyConfig*)local_this).get_collision_flag((BulletSoftBodyConfig::CollisionFlag)arg_val);
    return Dtool_Return_Bool(return_value);
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "get_collision_flag(BulletSoftBodyConfig self, int flag)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_collision_flag_640_comment =
  "C++ Interface:\n"
  "get_collision_flag(BulletSoftBodyConfig self, int flag)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_collision_flag_640_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyConfig::set_aero_model(BulletSoftBodyConfig::AeroModel value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_aero_model_641(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_aero_model")) {
    return NULL;
  }
  // 1-void BulletSoftBodyConfig::set_aero_model(BulletSoftBodyConfig::AeroModel value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    (*local_this).set_aero_model((BulletSoftBodyConfig::AeroModel)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_aero_model(const BulletSoftBodyConfig self, int value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_aero_model_641_comment =
  "C++ Interface:\n"
  "set_aero_model(const BulletSoftBodyConfig self, int value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_aero_model_641_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyConfig::AeroModel BulletSoftBodyConfig::get_aero_model(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_aero_model_642(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-BulletSoftBodyConfig::AeroModel BulletSoftBodyConfig::get_aero_model(void) const
  BulletSoftBodyConfig::AeroModel return_value = (*(const BulletSoftBodyConfig*)local_this).get_aero_model();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_aero_model_642_comment =
  "C++ Interface:\n"
  "get_aero_model(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_aero_model_642_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_velocities_correction_factor(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_643(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_velocities_correction_factor")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_velocities_correction_factor(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_velocities_correction_factor((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_velocities_correction_factor(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_643_comment =
  "C++ Interface:\n"
  "set_velocities_correction_factor(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kVCF.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_643_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_damping_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_damping_coefficient_644(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_damping_coefficient")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_damping_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_damping_coefficient((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_damping_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_damping_coefficient_644_comment =
  "C++ Interface:\n"
  "set_damping_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kDP.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_damping_coefficient_644_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_drag_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_drag_coefficient_645(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_drag_coefficient")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_drag_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_drag_coefficient((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_drag_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_drag_coefficient_645_comment =
  "C++ Interface:\n"
  "set_drag_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kDG.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_drag_coefficient_645_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_lift_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_lift_coefficient_646(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_lift_coefficient")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_lift_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_lift_coefficient((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_lift_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_lift_coefficient_646_comment =
  "C++ Interface:\n"
  "set_lift_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kLF.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_lift_coefficient_646_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_pressure_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_pressure_coefficient_647(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_pressure_coefficient")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_pressure_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_pressure_coefficient((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_pressure_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_pressure_coefficient_647_comment =
  "C++ Interface:\n"
  "set_pressure_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kPR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_pressure_coefficient_647_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_volume_conversation_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_volume_conversation_coefficient_648(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_volume_conversation_coefficient")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_volume_conversation_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_volume_conversation_coefficient((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_volume_conversation_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_volume_conversation_coefficient_648_comment =
  "C++ Interface:\n"
  "set_volume_conversation_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kVC.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_volume_conversation_coefficient_648_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_dynamic_friction_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_649(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_dynamic_friction_coefficient")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_dynamic_friction_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_dynamic_friction_coefficient((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_dynamic_friction_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_649_comment =
  "C++ Interface:\n"
  "set_dynamic_friction_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kDF.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_649_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_pose_matching_coefficient(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_650(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_pose_matching_coefficient")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_pose_matching_coefficient(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_pose_matching_coefficient((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_pose_matching_coefficient(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_650_comment =
  "C++ Interface:\n"
  "set_pose_matching_coefficient(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kMT.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_650_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_rigid_contacts_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_651(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_rigid_contacts_hardness")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_rigid_contacts_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_rigid_contacts_hardness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_rigid_contacts_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_651_comment =
  "C++ Interface:\n"
  "set_rigid_contacts_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kCHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_651_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_kinetic_contacts_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_652(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_kinetic_contacts_hardness")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_kinetic_contacts_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_kinetic_contacts_hardness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_kinetic_contacts_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_652_comment =
  "C++ Interface:\n"
  "set_kinetic_contacts_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kKHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_652_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_soft_contacts_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_653(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_contacts_hardness")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_soft_contacts_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_soft_contacts_hardness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_contacts_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_653_comment =
  "C++ Interface:\n"
  "set_soft_contacts_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_653_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_anchors_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_anchors_hardness_654(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_anchors_hardness")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_anchors_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_anchors_hardness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_anchors_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_anchors_hardness_654_comment =
  "C++ Interface:\n"
  "set_anchors_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kAHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_anchors_hardness_654_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_soft_vs_rigid_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_655(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_vs_rigid_hardness")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_soft_vs_rigid_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_soft_vs_rigid_hardness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_vs_rigid_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_655_comment =
  "C++ Interface:\n"
  "set_soft_vs_rigid_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSRHR_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_655_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_soft_vs_kinetic_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_656(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_vs_kinetic_hardness")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_soft_vs_kinetic_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_soft_vs_kinetic_hardness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_vs_kinetic_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_656_comment =
  "C++ Interface:\n"
  "set_soft_vs_kinetic_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSKHR_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_656_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_soft_vs_soft_hardness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_657(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_vs_soft_hardness")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_soft_vs_soft_hardness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_soft_vs_soft_hardness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_vs_soft_hardness(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_657_comment =
  "C++ Interface:\n"
  "set_soft_vs_soft_hardness(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSSHR_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_657_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_658(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_vs_rigid_impulse_split")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_soft_vs_rigid_impulse_split((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_vs_rigid_impulse_split(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_658_comment =
  "C++ Interface:\n"
  "set_soft_vs_rigid_impulse_split(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSR_SPLT_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_658_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_659(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_vs_kinetic_impulse_split")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_soft_vs_kinetic_impulse_split((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_vs_kinetic_impulse_split(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_659_comment =
  "C++ Interface:\n"
  "set_soft_vs_kinetic_impulse_split(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSK_SPLT_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_659_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_soft_vs_soft_impulse_split(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_660(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_soft_vs_soft_impulse_split")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_soft_vs_soft_impulse_split(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_soft_vs_soft_impulse_split((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_soft_vs_soft_impulse_split(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_660_comment =
  "C++ Interface:\n"
  "set_soft_vs_soft_impulse_split(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property kSS_SPLT_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_660_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_maxvolume(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_maxvolume_661(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_maxvolume")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_maxvolume(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_maxvolume((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_maxvolume(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_maxvolume_661_comment =
  "C++ Interface:\n"
  "set_maxvolume(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property maxvolume.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_maxvolume_661_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_timescale(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_timescale_662(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_timescale")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_timescale(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_timescale((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_timescale(const BulletSoftBodyConfig self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_timescale_662_comment =
  "C++ Interface:\n"
  "set_timescale(const BulletSoftBodyConfig self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for property timescale.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_timescale_662_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_positions_solver_iterations(int value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_663(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_positions_solver_iterations")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_positions_solver_iterations(int value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    (*local_this).set_positions_solver_iterations((int)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_positions_solver_iterations(const BulletSoftBodyConfig self, int value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_663_comment =
  "C++ Interface:\n"
  "set_positions_solver_iterations(const BulletSoftBodyConfig self, int value)\n"
  "\n"
  "/**\n"
  " * Setter for property piterations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_663_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_velocities_solver_iterations(int value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_664(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_velocities_solver_iterations")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_velocities_solver_iterations(int value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    (*local_this).set_velocities_solver_iterations((int)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_velocities_solver_iterations(const BulletSoftBodyConfig self, int value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_664_comment =
  "C++ Interface:\n"
  "set_velocities_solver_iterations(const BulletSoftBodyConfig self, int value)\n"
  "\n"
  "/**\n"
  " * Setter for property viterations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_664_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_drift_solver_iterations(int value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_665(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_drift_solver_iterations")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_drift_solver_iterations(int value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    (*local_this).set_drift_solver_iterations((int)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_drift_solver_iterations(const BulletSoftBodyConfig self, int value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_665_comment =
  "C++ Interface:\n"
  "set_drift_solver_iterations(const BulletSoftBodyConfig self, int value)\n"
  "\n"
  "/**\n"
  " * Setter for property diterations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_665_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyConfig::set_cluster_solver_iterations(int value)
 */
static PyObject *Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_666(PyObject *self, PyObject *arg) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyConfig, (void **)&local_this, "BulletSoftBodyConfig.set_cluster_solver_iterations")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyConfig::set_cluster_solver_iterations(int value)
  if (PyLongOrInt_Check(arg)) {
    long arg_val = PyLongOrInt_AS_LONG(arg);
#if (SIZEOF_LONG > SIZEOF_INT) && !defined(NDEBUG)
    if (arg_val < INT_MIN || arg_val > INT_MAX) {
      return PyErr_Format(PyExc_OverflowError,
                          "value %ld out of range for signed integer",
                          arg_val);
    }
#endif
    (*local_this).set_cluster_solver_iterations((int)arg_val);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_cluster_solver_iterations(const BulletSoftBodyConfig self, int value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_666_comment =
  "C++ Interface:\n"
  "set_cluster_solver_iterations(const BulletSoftBodyConfig self, int value)\n"
  "\n"
  "/**\n"
  " * Setter for property citerations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_666_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_velocities_correction_factor(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_667(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_velocities_correction_factor(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_velocities_correction_factor();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_667_comment =
  "C++ Interface:\n"
  "get_velocities_correction_factor(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kVCF.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_667_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_damping_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_damping_coefficient_668(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_damping_coefficient(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_damping_coefficient();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_damping_coefficient_668_comment =
  "C++ Interface:\n"
  "get_damping_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kDP.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_damping_coefficient_668_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_drag_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_drag_coefficient_669(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_drag_coefficient(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_drag_coefficient();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_drag_coefficient_669_comment =
  "C++ Interface:\n"
  "get_drag_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kDG.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_drag_coefficient_669_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_lift_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_lift_coefficient_670(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_lift_coefficient(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_lift_coefficient();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_lift_coefficient_670_comment =
  "C++ Interface:\n"
  "get_lift_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kLF.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_lift_coefficient_670_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_pressure_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_pressure_coefficient_671(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_pressure_coefficient(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_pressure_coefficient();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_pressure_coefficient_671_comment =
  "C++ Interface:\n"
  "get_pressure_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kPR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_pressure_coefficient_671_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_volume_conversation_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_volume_conversation_coefficient_672(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_volume_conversation_coefficient(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_volume_conversation_coefficient();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_volume_conversation_coefficient_672_comment =
  "C++ Interface:\n"
  "get_volume_conversation_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kVC.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_volume_conversation_coefficient_672_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_dynamic_friction_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_673(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_dynamic_friction_coefficient(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_dynamic_friction_coefficient();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_673_comment =
  "C++ Interface:\n"
  "get_dynamic_friction_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kDF.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_673_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_pose_matching_coefficient(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_674(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_pose_matching_coefficient(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_pose_matching_coefficient();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_674_comment =
  "C++ Interface:\n"
  "get_pose_matching_coefficient(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kMT.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_674_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_rigid_contacts_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_675(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_rigid_contacts_hardness(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_rigid_contacts_hardness();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_675_comment =
  "C++ Interface:\n"
  "get_rigid_contacts_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kCHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_675_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_kinetic_contacts_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_676(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_kinetic_contacts_hardness(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_kinetic_contacts_hardness();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_676_comment =
  "C++ Interface:\n"
  "get_kinetic_contacts_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kKHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_676_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_soft_contacts_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_677(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_soft_contacts_hardness(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_soft_contacts_hardness();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_677_comment =
  "C++ Interface:\n"
  "get_soft_contacts_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_677_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_anchors_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_anchors_hardness_678(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_anchors_hardness(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_anchors_hardness();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_anchors_hardness_678_comment =
  "C++ Interface:\n"
  "get_anchors_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kAHR.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_anchors_hardness_678_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_679(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_hardness(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_soft_vs_rigid_hardness();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_679_comment =
  "C++ Interface:\n"
  "get_soft_vs_rigid_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSRHR_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_679_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_680(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_hardness(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_soft_vs_kinetic_hardness();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_680_comment =
  "C++ Interface:\n"
  "get_soft_vs_kinetic_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSKHR_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_680_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_hardness(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_681(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_hardness(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_soft_vs_soft_hardness();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_681_comment =
  "C++ Interface:\n"
  "get_soft_vs_soft_hardness(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSSHR_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_681_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_682(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_soft_vs_rigid_impulse_split();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_682_comment =
  "C++ Interface:\n"
  "get_soft_vs_rigid_impulse_split(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSR_SPLT_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_682_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_683(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_soft_vs_kinetic_impulse_split();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_683_comment =
  "C++ Interface:\n"
  "get_soft_vs_kinetic_impulse_split(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSK_SPLT_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_683_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_impulse_split(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_684(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_impulse_split(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_soft_vs_soft_impulse_split();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_684_comment =
  "C++ Interface:\n"
  "get_soft_vs_soft_impulse_split(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property kSS_SPLT_CL.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_684_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_maxvolume(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_maxvolume_685(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_maxvolume(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_maxvolume();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_maxvolume_685_comment =
  "C++ Interface:\n"
  "get_maxvolume(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property maxvolume.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_maxvolume_685_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyConfig::get_timescale(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_timescale_686(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyConfig::get_timescale(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyConfig*)local_this).get_timescale();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_timescale_686_comment =
  "C++ Interface:\n"
  "get_timescale(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property timescale.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_timescale_686_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletSoftBodyConfig::get_positions_solver_iterations(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_687(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletSoftBodyConfig::get_positions_solver_iterations(void) const
  int return_value = (*(const BulletSoftBodyConfig*)local_this).get_positions_solver_iterations();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_687_comment =
  "C++ Interface:\n"
  "get_positions_solver_iterations(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property piterations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_687_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletSoftBodyConfig::get_velocities_solver_iterations(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_688(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletSoftBodyConfig::get_velocities_solver_iterations(void) const
  int return_value = (*(const BulletSoftBodyConfig*)local_this).get_velocities_solver_iterations();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_688_comment =
  "C++ Interface:\n"
  "get_velocities_solver_iterations(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property viterations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_688_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletSoftBodyConfig::get_drift_solver_iterations(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_689(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletSoftBodyConfig::get_drift_solver_iterations(void) const
  int return_value = (*(const BulletSoftBodyConfig*)local_this).get_drift_solver_iterations();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_689_comment =
  "C++ Interface:\n"
  "get_drift_solver_iterations(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property diterations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_689_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline int BulletSoftBodyConfig::get_cluster_solver_iterations(void) const
 */
static PyObject *Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_690(PyObject *self, PyObject *) {
  BulletSoftBodyConfig *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyConfig, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline int BulletSoftBodyConfig::get_cluster_solver_iterations(void) const
  int return_value = (*(const BulletSoftBodyConfig*)local_this).get_cluster_solver_iterations();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_690_comment =
  "C++ Interface:\n"
  "get_cluster_solver_iterations(BulletSoftBodyConfig self)\n"
  "\n"
  "/**\n"
  " * Getter for property citerations.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_690_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletSoftBodyConfig::BulletSoftBodyConfig(BulletSoftBodyConfig const &) = default
 */
static int Dtool_Init_BulletSoftBodyConfig(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletSoftBodyConfig() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg = NULL;
  if (PyTuple_GET_SIZE(args) == 1) {
    arg = PyTuple_GET_ITEM(args, 0);
  } else if (kwds != NULL) {
    arg = PyDict_GetItemString(kwds, "param0");
  }
  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
    return -1;
  }
  // 1-inline BulletSoftBodyConfig::BulletSoftBodyConfig(BulletSoftBodyConfig const &) = default
  BulletSoftBodyConfig const *arg_this = (BulletSoftBodyConfig *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletSoftBodyConfig, 0, "BulletSoftBodyConfig.BulletSoftBodyConfig", true, true);
  if (arg_this != NULL) {
    BulletSoftBodyConfig *return_value = new BulletSoftBodyConfig(*arg_this);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSoftBodyConfig, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSoftBodyConfig(const BulletSoftBodyConfig param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSoftBodyConfig(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletSoftBodyConfig) {
    printf("BulletSoftBodyConfig ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletSoftBodyConfig *local_this = (BulletSoftBodyConfig *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletSoftBodyConfig) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletSoftBodyConfig(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyConfig) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletSoftBodyControl
 */
/**
 * Python function wrapper for:
 * inline void BulletSoftBodyControl::set_goal(PN_stdfloat goal)
 */
static PyObject *Dtool_BulletSoftBodyControl_set_goal_700(PyObject *self, PyObject *arg) {
  BulletSoftBodyControl *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyControl, (void **)&local_this, "BulletSoftBodyControl.set_goal")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyControl::set_goal(PN_stdfloat goal)
  if (PyNumber_Check(arg)) {
    (*local_this).set_goal((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_goal(const BulletSoftBodyControl self, float goal)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyControl_set_goal_700_comment =
  "C++ Interface:\n"
  "set_goal(const BulletSoftBodyControl self, float goal)\n"
  "\n"
  "// Motor\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyControl_set_goal_700_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyControl::set_max_torque(PN_stdfloat maxtorque)
 */
static PyObject *Dtool_BulletSoftBodyControl_set_max_torque_701(PyObject *self, PyObject *arg) {
  BulletSoftBodyControl *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyControl, (void **)&local_this, "BulletSoftBodyControl.set_max_torque")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyControl::set_max_torque(PN_stdfloat maxtorque)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_torque((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_torque(const BulletSoftBodyControl self, float maxtorque)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyControl_set_max_torque_701_comment =
  "C++ Interface:\n"
  "set_max_torque(const BulletSoftBodyControl self, float maxtorque)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyControl_set_max_torque_701_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyControl::set_angle(PN_stdfloat angle)
 */
static PyObject *Dtool_BulletSoftBodyControl_set_angle_702(PyObject *self, PyObject *arg) {
  BulletSoftBodyControl *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyControl, (void **)&local_this, "BulletSoftBodyControl.set_angle")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyControl::set_angle(PN_stdfloat angle)
  if (PyNumber_Check(arg)) {
    (*local_this).set_angle((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angle(const BulletSoftBodyControl self, float angle)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyControl_set_angle_702_comment =
  "C++ Interface:\n"
  "set_angle(const BulletSoftBodyControl self, float angle)\n"
  "\n"
  "// Steer\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyControl_set_angle_702_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyControl::set_sign(PN_stdfloat sign)
 */
static PyObject *Dtool_BulletSoftBodyControl_set_sign_703(PyObject *self, PyObject *arg) {
  BulletSoftBodyControl *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyControl, (void **)&local_this, "BulletSoftBodyControl.set_sign")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyControl::set_sign(PN_stdfloat sign)
  if (PyNumber_Check(arg)) {
    (*local_this).set_sign((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_sign(const BulletSoftBodyControl self, float sign)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyControl_set_sign_703_comment =
  "C++ Interface:\n"
  "set_sign(const BulletSoftBodyControl self, float sign)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyControl_set_sign_703_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletSoftBodyControl::BulletSoftBodyControl(void)
 */
static int Dtool_Init_BulletSoftBodyControl(PyObject *self, PyObject *args, PyObject *kwds) {
  if (PyTuple_Size(args) > 0 || (kwds != NULL && PyDict_Size(kwds) > 0)) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes no arguments");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletSoftBodyControl() takes no arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  // 1-BulletSoftBodyControl::BulletSoftBodyControl(void)
  BulletSoftBodyControl *return_value = new BulletSoftBodyControl();
  if (return_value == NULL) {
    PyErr_NoMemory();
    return -1;
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return -1;
  }
  return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSoftBodyControl, true, false);
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSoftBodyControl()\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSoftBodyControl(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletSoftBodyControl) {
    printf("BulletSoftBodyControl ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletSoftBodyControl *local_this = (BulletSoftBodyControl *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletSoftBodyControl) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletSoftBodyControl(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyControl) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletSoftBodyMaterial
 */
/**
 * Python function wrapper for:
 * static inline BulletSoftBodyMaterial BulletSoftBodyMaterial::empty(void)
 */
static PyObject *Dtool_BulletSoftBodyMaterial_empty_706(PyObject *, PyObject *) {
  // 1-static inline BulletSoftBodyMaterial BulletSoftBodyMaterial::empty(void)
  BulletSoftBodyMaterial *return_value = new BulletSoftBodyMaterial(BulletSoftBodyMaterial::empty());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletSoftBodyMaterial, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_empty_706_comment =
  "C++ Interface:\n"
  "empty()\n"
  "\n"
  "/**\n"
  " * Named constructor intended to be used for asserts which have to return a\n"
  " * concrete value.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_empty_706_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyMaterial::set_linear_stiffness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyMaterial_set_linear_stiffness_707(PyObject *self, PyObject *arg) {
  BulletSoftBodyMaterial *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this, "BulletSoftBodyMaterial.set_linear_stiffness")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyMaterial::set_linear_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_linear_stiffness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_linear_stiffness(const BulletSoftBodyMaterial self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_set_linear_stiffness_707_comment =
  "C++ Interface:\n"
  "set_linear_stiffness(const BulletSoftBodyMaterial self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for the property m_kLST.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_set_linear_stiffness_707_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyMaterial::get_linear_stiffness(void) const
 */
static PyObject *Dtool_BulletSoftBodyMaterial_get_linear_stiffness_708(PyObject *self, PyObject *) {
  BulletSoftBodyMaterial *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyMaterial::get_linear_stiffness(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyMaterial*)local_this).get_linear_stiffness();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_get_linear_stiffness_708_comment =
  "C++ Interface:\n"
  "get_linear_stiffness(BulletSoftBodyMaterial self)\n"
  "\n"
  "/**\n"
  " * Getter for the property m_kLST.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_get_linear_stiffness_708_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyMaterial::set_angular_stiffness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyMaterial_set_angular_stiffness_712(PyObject *self, PyObject *arg) {
  BulletSoftBodyMaterial *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this, "BulletSoftBodyMaterial.set_angular_stiffness")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyMaterial::set_angular_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_angular_stiffness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_angular_stiffness(const BulletSoftBodyMaterial self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_set_angular_stiffness_712_comment =
  "C++ Interface:\n"
  "set_angular_stiffness(const BulletSoftBodyMaterial self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for the property m_kAST.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_set_angular_stiffness_712_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyMaterial::get_angular_stiffness(void) const
 */
static PyObject *Dtool_BulletSoftBodyMaterial_get_angular_stiffness_713(PyObject *self, PyObject *) {
  BulletSoftBodyMaterial *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyMaterial::get_angular_stiffness(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyMaterial*)local_this).get_angular_stiffness();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_get_angular_stiffness_713_comment =
  "C++ Interface:\n"
  "get_angular_stiffness(BulletSoftBodyMaterial self)\n"
  "\n"
  "/**\n"
  " * Getter for the property m_kAST.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_get_angular_stiffness_713_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline void BulletSoftBodyMaterial::set_volume_preservation(PN_stdfloat value)
 */
static PyObject *Dtool_BulletSoftBodyMaterial_set_volume_preservation_715(PyObject *self, PyObject *arg) {
  BulletSoftBodyMaterial *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this, "BulletSoftBodyMaterial.set_volume_preservation")) {
    return NULL;
  }
  // 1-inline void BulletSoftBodyMaterial::set_volume_preservation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_volume_preservation((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_volume_preservation(const BulletSoftBodyMaterial self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_set_volume_preservation_715_comment =
  "C++ Interface:\n"
  "set_volume_preservation(const BulletSoftBodyMaterial self, float value)\n"
  "\n"
  "/**\n"
  " * Setter for the property m_kVST.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_set_volume_preservation_715_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSoftBodyMaterial::get_volume_preservation(void) const
 */
static PyObject *Dtool_BulletSoftBodyMaterial_get_volume_preservation_716(PyObject *self, PyObject *) {
  BulletSoftBodyMaterial *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSoftBodyMaterial::get_volume_preservation(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyMaterial*)local_this).get_volume_preservation();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyMaterial_get_volume_preservation_716_comment =
  "C++ Interface:\n"
  "get_volume_preservation(BulletSoftBodyMaterial self)\n"
  "\n"
  "/**\n"
  " * Getter for the property m_kVST.\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyMaterial_get_volume_preservation_716_comment = NULL;
#endif

static PyObject *Dtool_BulletSoftBodyMaterial_linear_stiffness_Getter(PyObject *self, void *) {
  const BulletSoftBodyMaterial *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this)) {
    return NULL;
  }

  // 1-inline PN_stdfloat BulletSoftBodyMaterial::get_linear_stiffness(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyMaterial*)local_this).get_linear_stiffness();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (notify->has_assert_failed()) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyMaterial_linear_stiffness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyMaterial *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this, "BulletSoftBodyMaterial.linear_stiffness")) {
    return -1;
  }

  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("can't delete linear_stiffness attribute");
    return -1;
  }
  // 1-inline void BulletSoftBodyMaterial::set_linear_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_linear_stiffness((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (notify->has_assert_failed()) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_linear_stiffness(const BulletSoftBodyMaterial self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyMaterial_angular_stiffness_Getter(PyObject *self, void *) {
  const BulletSoftBodyMaterial *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this)) {
    return NULL;
  }

  // 1-inline PN_stdfloat BulletSoftBodyMaterial::get_angular_stiffness(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyMaterial*)local_this).get_angular_stiffness();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (notify->has_assert_failed()) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyMaterial_angular_stiffness_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyMaterial *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this, "BulletSoftBodyMaterial.angular_stiffness")) {
    return -1;
  }

  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("can't delete angular_stiffness attribute");
    return -1;
  }
  // 1-inline void BulletSoftBodyMaterial::set_angular_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_angular_stiffness((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (notify->has_assert_failed()) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_angular_stiffness(const BulletSoftBodyMaterial self, float value)\n");
  }
  return -1;
}

static PyObject *Dtool_BulletSoftBodyMaterial_volume_preservation_Getter(PyObject *self, void *) {
  const BulletSoftBodyMaterial *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this)) {
    return NULL;
  }

  // 1-inline PN_stdfloat BulletSoftBodyMaterial::get_volume_preservation(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyMaterial*)local_this).get_volume_preservation();
#ifndef NDEBUG
  Notify *notify = Notify::ptr();
  if (notify->has_assert_failed()) {
    return Dtool_Raise_AssertionError();
  }
#endif
  return Dtool_WrapValue(return_value);
}

static int Dtool_BulletSoftBodyMaterial_volume_preservation_Setter(PyObject *self, PyObject *arg, void *) {
  BulletSoftBodyMaterial *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyMaterial, (void **)&local_this, "BulletSoftBodyMaterial.volume_preservation")) {
    return -1;
  }

  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("can't delete volume_preservation attribute");
    return -1;
  }
  // 1-inline void BulletSoftBodyMaterial::set_volume_preservation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_volume_preservation((PN_stdfloat)PyFloat_AsDouble(arg));
#ifndef NDEBUG
    Notify *notify = Notify::ptr();
    if (notify->has_assert_failed()) {
      Dtool_Raise_AssertionError();
      return -1;
    }
#endif
    return 0;
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "set_volume_preservation(const BulletSoftBodyMaterial self, float value)\n");
  }
  return -1;
}

/**
 * Python function wrapper for:
 * inline BulletSoftBodyMaterial::BulletSoftBodyMaterial(BulletSoftBodyMaterial const &) = default
 */
static int Dtool_Init_BulletSoftBodyMaterial(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletSoftBodyMaterial() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg = NULL;
  if (PyTuple_GET_SIZE(args) == 1) {
    arg = PyTuple_GET_ITEM(args, 0);
  } else if (kwds != NULL) {
    arg = PyDict_GetItemString(kwds, "param0");
  }
  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
    return -1;
  }
  // 1-inline BulletSoftBodyMaterial::BulletSoftBodyMaterial(BulletSoftBodyMaterial const &) = default
  BulletSoftBodyMaterial const *arg_this = (BulletSoftBodyMaterial *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletSoftBodyMaterial, 0, "BulletSoftBodyMaterial.BulletSoftBodyMaterial", true, true);
  if (arg_this != NULL) {
    BulletSoftBodyMaterial *return_value = new BulletSoftBodyMaterial(*arg_this);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSoftBodyMaterial, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSoftBodyMaterial(const BulletSoftBodyMaterial param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSoftBodyMaterial(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletSoftBodyMaterial) {
    printf("BulletSoftBodyMaterial ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletSoftBodyMaterial *local_this = (BulletSoftBodyMaterial *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletSoftBodyMaterial) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletSoftBodyMaterial(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyMaterial) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletSoftBodyShape
 */
/**
 * Python function wrapper for:
 * BulletSoftBodyNode *BulletSoftBodyShape::get_body(void) const
 */
static PyObject *Dtool_BulletSoftBodyShape_get_body_720(PyObject *self, PyObject *) {
  BulletSoftBodyShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-BulletSoftBodyNode *BulletSoftBodyShape::get_body(void) const
  BulletSoftBodyNode *return_value = (*(const BulletSoftBodyShape*)local_this).get_body();
  if (return_value != (BulletSoftBodyNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletSoftBodyNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletSoftBodyNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyShape_get_body_720_comment =
  "C++ Interface:\n"
  "get_body(BulletSoftBodyShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyShape_get_body_720_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletSoftBodyShape::get_class_type(void)
 */
static PyObject *Dtool_BulletSoftBodyShape_get_class_type_721(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletSoftBodyShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletSoftBodyShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyShape_get_class_type_721_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletSoftBodyShape_get_class_type_721_comment = NULL;
#endif

static int Dtool_Init_BulletSoftBodyShape(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

static void *Dtool_UpcastInterface_BulletSoftBodyShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletSoftBodyShape) {
    printf("BulletSoftBodyShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletSoftBodyShape *local_this = (BulletSoftBodyShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletSoftBodyShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletSoftBodyShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletSoftBodyShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletSoftBodyShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletSoftBodyShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletSoftBodyShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletSoftBodyShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletSoftBodyWorldInfo
 */
/**
 * Python function wrapper for:
 * void BulletSoftBodyWorldInfo::set_air_density(PN_stdfloat density)
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_set_air_density_724(PyObject *self, PyObject *arg) {
  BulletSoftBodyWorldInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.set_air_density")) {
    return NULL;
  }
  // 1-void BulletSoftBodyWorldInfo::set_air_density(PN_stdfloat density)
  if (PyNumber_Check(arg)) {
    (*local_this).set_air_density((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_air_density(const BulletSoftBodyWorldInfo self, float density)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_set_air_density_724_comment =
  "C++ Interface:\n"
  "set_air_density(const BulletSoftBodyWorldInfo self, float density)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_set_air_density_724_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyWorldInfo::set_water_density(PN_stdfloat density)
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_set_water_density_725(PyObject *self, PyObject *arg) {
  BulletSoftBodyWorldInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.set_water_density")) {
    return NULL;
  }
  // 1-void BulletSoftBodyWorldInfo::set_water_density(PN_stdfloat density)
  if (PyNumber_Check(arg)) {
    (*local_this).set_water_density((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_water_density(const BulletSoftBodyWorldInfo self, float density)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_set_water_density_725_comment =
  "C++ Interface:\n"
  "set_water_density(const BulletSoftBodyWorldInfo self, float density)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_set_water_density_725_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyWorldInfo::set_water_offset(PN_stdfloat offset)
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_set_water_offset_726(PyObject *self, PyObject *arg) {
  BulletSoftBodyWorldInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.set_water_offset")) {
    return NULL;
  }
  // 1-void BulletSoftBodyWorldInfo::set_water_offset(PN_stdfloat offset)
  if (PyNumber_Check(arg)) {
    (*local_this).set_water_offset((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_water_offset(const BulletSoftBodyWorldInfo self, float offset)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_set_water_offset_726_comment =
  "C++ Interface:\n"
  "set_water_offset(const BulletSoftBodyWorldInfo self, float offset)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_set_water_offset_726_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyWorldInfo::set_water_normal(LVector3 const &normal)
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_set_water_normal_727(PyObject *self, PyObject *arg) {
  BulletSoftBodyWorldInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.set_water_normal")) {
    return NULL;
  }
  // 1-void BulletSoftBodyWorldInfo::set_water_normal(LVector3 const &normal)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyWorldInfo.set_water_normal", "LVector3f");
  }
  (*local_this).set_water_normal(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_water_normal(const BulletSoftBodyWorldInfo self, const LVector3f normal)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_set_water_normal_727_comment =
  "C++ Interface:\n"
  "set_water_normal(const BulletSoftBodyWorldInfo self, const LVector3f normal)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_set_water_normal_727_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyWorldInfo::set_gravity(LVector3 const &gravity)
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_set_gravity_728(PyObject *self, PyObject *arg) {
  BulletSoftBodyWorldInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.set_gravity")) {
    return NULL;
  }
  // 1-void BulletSoftBodyWorldInfo::set_gravity(LVector3 const &gravity)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSoftBodyWorldInfo.set_gravity", "LVector3f");
  }
  (*local_this).set_gravity(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_gravity(const BulletSoftBodyWorldInfo self, const LVector3f gravity)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_set_gravity_728_comment =
  "C++ Interface:\n"
  "set_gravity(const BulletSoftBodyWorldInfo self, const LVector3f gravity)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_set_gravity_728_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyWorldInfo::get_air_density(void) const
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_get_air_density_729(PyObject *self, PyObject *) {
  BulletSoftBodyWorldInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSoftBodyWorldInfo::get_air_density(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyWorldInfo*)local_this).get_air_density();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_get_air_density_729_comment =
  "C++ Interface:\n"
  "get_air_density(BulletSoftBodyWorldInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_get_air_density_729_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyWorldInfo::get_water_density(void) const
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_get_water_density_730(PyObject *self, PyObject *) {
  BulletSoftBodyWorldInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSoftBodyWorldInfo::get_water_density(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyWorldInfo*)local_this).get_water_density();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_get_water_density_730_comment =
  "C++ Interface:\n"
  "get_water_density(BulletSoftBodyWorldInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_get_water_density_730_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletSoftBodyWorldInfo::get_water_offset(void) const
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_get_water_offset_731(PyObject *self, PyObject *) {
  BulletSoftBodyWorldInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletSoftBodyWorldInfo::get_water_offset(void) const
  PN_stdfloat return_value = (*(const BulletSoftBodyWorldInfo*)local_this).get_water_offset();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_get_water_offset_731_comment =
  "C++ Interface:\n"
  "get_water_offset(BulletSoftBodyWorldInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_get_water_offset_731_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletSoftBodyWorldInfo::get_water_normal(void) const
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_get_water_normal_732(PyObject *self, PyObject *) {
  BulletSoftBodyWorldInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletSoftBodyWorldInfo::get_water_normal(void) const
  LVector3 *return_value = new LVector3((*(const BulletSoftBodyWorldInfo*)local_this).get_water_normal());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_get_water_normal_732_comment =
  "C++ Interface:\n"
  "get_water_normal(BulletSoftBodyWorldInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_get_water_normal_732_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletSoftBodyWorldInfo::get_gravity(void) const
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_get_gravity_733(PyObject *self, PyObject *) {
  BulletSoftBodyWorldInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletSoftBodyWorldInfo::get_gravity(void) const
  LVector3 *return_value = new LVector3((*(const BulletSoftBodyWorldInfo*)local_this).get_gravity());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_get_gravity_733_comment =
  "C++ Interface:\n"
  "get_gravity(BulletSoftBodyWorldInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_get_gravity_733_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSoftBodyWorldInfo::garbage_collect(int lifetime = 256)
 */
static PyObject *Dtool_BulletSoftBodyWorldInfo_garbage_collect_734(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletSoftBodyWorldInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSoftBodyWorldInfo, (void **)&local_this, "BulletSoftBodyWorldInfo.garbage_collect")) {
    return NULL;
  }
  // 1-void BulletSoftBodyWorldInfo::garbage_collect(int lifetime = 256)
  int param1 = 256;
  static const char *keyword_list[] = {"lifetime", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "|i:garbage_collect", (char **)keyword_list, &param1)) {
    (*local_this).garbage_collect((int)param1);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "garbage_collect(const BulletSoftBodyWorldInfo self, int lifetime)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSoftBodyWorldInfo_garbage_collect_734_comment =
  "C++ Interface:\n"
  "garbage_collect(const BulletSoftBodyWorldInfo self, int lifetime)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSoftBodyWorldInfo_garbage_collect_734_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo(BulletSoftBodyWorldInfo const &) = default
 */
static int Dtool_Init_BulletSoftBodyWorldInfo(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletSoftBodyWorldInfo() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg = NULL;
  if (PyTuple_GET_SIZE(args) == 1) {
    arg = PyTuple_GET_ITEM(args, 0);
  } else if (kwds != NULL) {
    arg = PyDict_GetItemString(kwds, "param0");
  }
  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
    return -1;
  }
  // 1-inline BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo(BulletSoftBodyWorldInfo const &) = default
  BulletSoftBodyWorldInfo const *arg_this = (BulletSoftBodyWorldInfo *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletSoftBodyWorldInfo, 0, "BulletSoftBodyWorldInfo.BulletSoftBodyWorldInfo", true, true);
  if (arg_this != NULL) {
    BulletSoftBodyWorldInfo *return_value = new BulletSoftBodyWorldInfo(*arg_this);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSoftBodyWorldInfo, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSoftBodyWorldInfo(const BulletSoftBodyWorldInfo param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletSoftBodyWorldInfo(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletSoftBodyWorldInfo) {
    printf("BulletSoftBodyWorldInfo ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletSoftBodyWorldInfo *local_this = (BulletSoftBodyWorldInfo *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletSoftBodyWorldInfo) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletSoftBodyWorldInfo(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletSoftBodyWorldInfo) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletSphereShape
 */
/**
 * Python function wrapper for:
 * inline void BulletSphereShape::operator =(BulletSphereShape const &copy)
 */
static PyObject *Dtool_BulletSphereShape_operator_738(PyObject *self, PyObject *arg) {
  BulletSphereShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSphereShape, (void **)&local_this, "BulletSphereShape.assign")) {
    return NULL;
  }
  // 1-inline void BulletSphereShape::operator =(BulletSphereShape const &copy)
  CPT(BulletSphereShape) arg_this;
  if (!Dtool_ConstCoerce_BulletSphereShape(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSphereShape.assign", "BulletSphereShape");
  }
  (*local_this).operator =(*MOVE(arg_this));
  BulletSphereShape *return_value = local_this;
  if (return_value != (BulletSphereShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletSphereShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletSphereShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletSphereShape self, const BulletSphereShape copy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSphereShape_operator_738_comment =
  "C++ Interface:\n"
  "assign(const BulletSphereShape self, const BulletSphereShape copy)\n";
#else
static const char *Dtool_BulletSphereShape_operator_738_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletSphereShape::get_radius(void) const
 */
static PyObject *Dtool_BulletSphereShape_get_radius_739(PyObject *self, PyObject *) {
  BulletSphereShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSphereShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletSphereShape::get_radius(void) const
  PN_stdfloat return_value = (*(const BulletSphereShape*)local_this).get_radius();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletSphereShape_get_radius_739_comment =
  "C++ Interface:\n"
  "get_radius(BulletSphereShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSphereShape_get_radius_739_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static BulletSphereShape *BulletSphereShape::make_from_solid(CollisionSphere const *solid)
 */
static PyObject *Dtool_BulletSphereShape_make_from_solid_740(PyObject *, PyObject *arg) {
  // 1-static BulletSphereShape *BulletSphereShape::make_from_solid(CollisionSphere const *solid)
  CPT(CollisionSphere) arg_this;
  if (!Dtool_ConstCoerce_CollisionSphere(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 0, "BulletSphereShape.make_from_solid", "CollisionSphere");
  }
  BulletSphereShape *return_value = BulletSphereShape::make_from_solid(MOVE(arg_this));
  if (return_value != (BulletSphereShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletSphereShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletSphereShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "make_from_solid(const CollisionSphere solid)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSphereShape_make_from_solid_740_comment =
  "C++ Interface:\n"
  "make_from_solid(const CollisionSphere solid)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSphereShape_make_from_solid_740_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletSphereShape::get_class_type(void)
 */
static PyObject *Dtool_BulletSphereShape_get_class_type_741(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletSphereShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletSphereShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSphereShape_get_class_type_741_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletSphereShape_get_class_type_741_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletSphereShape::BulletSphereShape(BulletSphereShape const &copy)
 * BulletSphereShape::BulletSphereShape(PN_stdfloat radius)
 */
static int Dtool_Init_BulletSphereShape(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletSphereShape() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  {
    // -2 inline BulletSphereShape::BulletSphereShape(BulletSphereShape const &copy)
    PyObject *param0;
    static const char *keyword_list[] = {"copy", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletSphereShape", (char **)keyword_list, &param0)) {
      BulletSphereShape const *param0_this;
      DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletSphereShape, (void **)&param0_this);
      if (param0_this != NULL) {
        BulletSphereShape *return_value = new BulletSphereShape(*param0_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSphereShape, true, false);
      }
    }
    PyErr_Clear();
  }

  {
    // -2 BulletSphereShape::BulletSphereShape(PN_stdfloat radius)
    float param0;
    static const char *keyword_list[] = {"radius", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "f:BulletSphereShape", (char **)keyword_list, &param0)) {
      BulletSphereShape *return_value = new BulletSphereShape((PN_stdfloat)param0);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSphereShape, true, false);
    }
    PyErr_Clear();
  }

  {
    // -2 inline BulletSphereShape::BulletSphereShape(BulletSphereShape const &copy)
    PyObject *param0;
    static const char *keyword_list[] = {"copy", NULL};
    if (PyArg_ParseTupleAndKeywords(args, kwds, "O:BulletSphereShape", (char **)keyword_list, &param0)) {
      CPT(BulletSphereShape) param0_this;
      if (Dtool_ConstCoerce_BulletSphereShape(param0, param0_this)) {
        BulletSphereShape *return_value = new BulletSphereShape(*MOVE(param0_this));
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSphereShape, true, false);
      }
    }
    PyErr_Clear();
  }

  // No coercion possible: BulletSphereShape::BulletSphereShape(PN_stdfloat radius)
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSphereShape(const BulletSphereShape copy)\n"
      "BulletSphereShape(float radius)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletSphereShape(PyObject *args, CPT(BulletSphereShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletSphereShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-BulletSphereShape::BulletSphereShape(PN_stdfloat radius)
    if (PyNumber_Check(arg)) {
      BulletSphereShape *return_value = new BulletSphereShape((PN_stdfloat)PyFloat_AsDouble(arg));
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      return_value->ref();
      if (_PyErr_OCCURRED()) {
        unref_delete(return_value);
        return false;
      } else {
        coerced = MOVE(return_value);
        return true;
      }
    }
  }
  return false;
}

bool Dtool_Coerce_BulletSphereShape(PyObject *args, PT(BulletSphereShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletSphereShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-BulletSphereShape::BulletSphereShape(PN_stdfloat radius)
    if (PyNumber_Check(arg)) {
      BulletSphereShape *return_value = new BulletSphereShape((PN_stdfloat)PyFloat_AsDouble(arg));
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      return_value->ref();
      if (_PyErr_OCCURRED()) {
        unref_delete(return_value);
        return false;
      } else {
        coerced = MOVE(return_value);
        return true;
      }
    }
  }
  return false;
}

static void *Dtool_UpcastInterface_BulletSphereShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletSphereShape) {
    printf("BulletSphereShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletSphereShape *local_this = (BulletSphereShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletSphereShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletSphereShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletSphereShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletSphereShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletSphereShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletSphericalConstraint
 */
/**
 * Python function wrapper for:
 * void BulletSphericalConstraint::set_pivot_a(LPoint3 const &pivot_a)
 */
static PyObject *Dtool_BulletSphericalConstraint_set_pivot_a_744(PyObject *self, PyObject *arg) {
  BulletSphericalConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSphericalConstraint, (void **)&local_this, "BulletSphericalConstraint.set_pivot_a")) {
    return NULL;
  }
  // 1-void BulletSphericalConstraint::set_pivot_a(LPoint3 const &pivot_a)
  LPoint3f arg_local;
  LPoint3 const *arg_this = Dtool_Coerce_LPoint3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSphericalConstraint.set_pivot_a", "LPoint3f");
  }
  (*local_this).set_pivot_a(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_pivot_a(const BulletSphericalConstraint self, const LPoint3f pivot_a)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSphericalConstraint_set_pivot_a_744_comment =
  "C++ Interface:\n"
  "set_pivot_a(const BulletSphericalConstraint self, const LPoint3f pivot_a)\n"
  "\n"
  "// Pivots\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSphericalConstraint_set_pivot_a_744_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletSphericalConstraint::set_pivot_b(LPoint3 const &pivot_b)
 */
static PyObject *Dtool_BulletSphericalConstraint_set_pivot_b_745(PyObject *self, PyObject *arg) {
  BulletSphericalConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletSphericalConstraint, (void **)&local_this, "BulletSphericalConstraint.set_pivot_b")) {
    return NULL;
  }
  // 1-void BulletSphericalConstraint::set_pivot_b(LPoint3 const &pivot_b)
  LPoint3f arg_local;
  LPoint3 const *arg_this = Dtool_Coerce_LPoint3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletSphericalConstraint.set_pivot_b", "LPoint3f");
  }
  (*local_this).set_pivot_b(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_pivot_b(const BulletSphericalConstraint self, const LPoint3f pivot_b)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletSphericalConstraint_set_pivot_b_745_comment =
  "C++ Interface:\n"
  "set_pivot_b(const BulletSphericalConstraint self, const LPoint3f pivot_b)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSphericalConstraint_set_pivot_b_745_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletSphericalConstraint::get_pivot_in_a(void) const
 */
static PyObject *Dtool_BulletSphericalConstraint_get_pivot_in_a_746(PyObject *self, PyObject *) {
  BulletSphericalConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSphericalConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletSphericalConstraint::get_pivot_in_a(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletSphericalConstraint*)local_this).get_pivot_in_a());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSphericalConstraint_get_pivot_in_a_746_comment =
  "C++ Interface:\n"
  "get_pivot_in_a(BulletSphericalConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSphericalConstraint_get_pivot_in_a_746_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletSphericalConstraint::get_pivot_in_b(void) const
 */
static PyObject *Dtool_BulletSphericalConstraint_get_pivot_in_b_747(PyObject *self, PyObject *) {
  BulletSphericalConstraint *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletSphericalConstraint, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletSphericalConstraint::get_pivot_in_b(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletSphericalConstraint*)local_this).get_pivot_in_b());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSphericalConstraint_get_pivot_in_b_747_comment =
  "C++ Interface:\n"
  "get_pivot_in_b(BulletSphericalConstraint self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletSphericalConstraint_get_pivot_in_b_747_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletSphericalConstraint::get_class_type(void)
 */
static PyObject *Dtool_BulletSphericalConstraint_get_class_type_748(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletSphericalConstraint::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletSphericalConstraint::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletSphericalConstraint_get_class_type_748_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletSphericalConstraint_get_class_type_748_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b)
 * BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a)
 */
static int Dtool_Init_BulletSphericalConstraint(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 2:
    {
      // 1-BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a)
      PyObject *param0;
      PyObject *param1;
      static const char *keyword_list[] = {"node_a", "pivot_a", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:BulletSphericalConstraint", (char **)keyword_list, &param0, &param1)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletSphericalConstraint.BulletSphericalConstraint", true, true);
        LPoint3f param1_local;
        LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
        if (!(param1_this != NULL)) {
          Dtool_Raise_ArgTypeError(param1, 1, "BulletSphericalConstraint.BulletSphericalConstraint", "LPoint3f");
          return -1;
        }
        if (param0_this != NULL) {
          BulletSphericalConstraint *return_value = new BulletSphericalConstraint(param0_this, *param1_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSphericalConstraint, true, false);
        }
      }
    }
    break;
  case 4:
    {
      // 1-BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      static const char *keyword_list[] = {"node_a", "node_b", "pivot_a", "pivot_b", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:BulletSphericalConstraint", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
        BulletRigidBodyNode const *param0_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletRigidBodyNode, 0, "BulletSphericalConstraint.BulletSphericalConstraint", true, true);
        BulletRigidBodyNode const *param1_this = (BulletRigidBodyNode *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_BulletRigidBodyNode, 1, "BulletSphericalConstraint.BulletSphericalConstraint", true, true);
        LPoint3f param2_local;
        LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
        if (!(param2_this != NULL)) {
          Dtool_Raise_ArgTypeError(param2, 2, "BulletSphericalConstraint.BulletSphericalConstraint", "LPoint3f");
          return -1;
        }
        LPoint3f param3_local;
        LPoint3 const *param3_this = Dtool_Coerce_LPoint3f(param3, param3_local);
        if (!(param3_this != NULL)) {
          Dtool_Raise_ArgTypeError(param3, 3, "BulletSphericalConstraint.BulletSphericalConstraint", "LPoint3f");
          return -1;
        }
        if (param0_this != NULL && param1_this != NULL) {
          BulletSphericalConstraint *return_value = new BulletSphericalConstraint(param0_this, param1_this, *param2_this, *param3_this);
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletSphericalConstraint, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletSphericalConstraint() takes 2 or 4 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletSphericalConstraint(const BulletRigidBodyNode node_a, const LPoint3f pivot_a)\n"
      "BulletSphericalConstraint(const BulletRigidBodyNode node_a, const BulletRigidBodyNode node_b, const LPoint3f pivot_a, const LPoint3f pivot_b)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletSphericalConstraint(PyObject *args, CPT(BulletSphericalConstraint) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletSphericalConstraint, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    switch (PyTuple_GET_SIZE(args)) {
      case 2: {
        // 1-BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a)
        PyObject *param0;
        PyObject *param1;
        if (PyArg_UnpackTuple(args, "BulletSphericalConstraint", 2, 2, &param0, &param1)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          LPoint3 const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LPoint3f, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletSphericalConstraint *return_value = new BulletSphericalConstraint(param0_this, *param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
      case 4: {
        // 1-BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        if (PyArg_UnpackTuple(args, "BulletSphericalConstraint", 4, 4, &param0, &param1, &param2, &param3)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          LPoint3 const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_LPoint3f, (void **)&param2_this);
          LPoint3 const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_LPoint3f, (void **)&param3_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
            BulletSphericalConstraint *return_value = new BulletSphericalConstraint(param0_this, param1_this, *param2_this, *param3_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
    }
  }

  return false;
}

bool Dtool_Coerce_BulletSphericalConstraint(PyObject *args, PT(BulletSphericalConstraint) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletSphericalConstraint, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    switch (PyTuple_GET_SIZE(args)) {
      case 2: {
        // 1-BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a)
        PyObject *param0;
        PyObject *param1;
        if (PyArg_UnpackTuple(args, "BulletSphericalConstraint", 2, 2, &param0, &param1)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          LPoint3 const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_LPoint3f, (void **)&param1_this);
          if (param0_this != NULL && param1_this != NULL) {
            BulletSphericalConstraint *return_value = new BulletSphericalConstraint(param0_this, *param1_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
      case 4: {
        // 1-BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b)
        PyObject *param0;
        PyObject *param1;
        PyObject *param2;
        PyObject *param3;
        if (PyArg_UnpackTuple(args, "BulletSphericalConstraint", 4, 4, &param0, &param1, &param2, &param3)) {
          BulletRigidBodyNode const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_BulletRigidBodyNode, (void **)&param0_this);
          BulletRigidBodyNode const *param1_this;
          DTOOL_Call_ExtractThisPointerForType(param1, Dtool_Ptr_BulletRigidBodyNode, (void **)&param1_this);
          LPoint3 const *param2_this;
          DTOOL_Call_ExtractThisPointerForType(param2, Dtool_Ptr_LPoint3f, (void **)&param2_this);
          LPoint3 const *param3_this;
          DTOOL_Call_ExtractThisPointerForType(param3, Dtool_Ptr_LPoint3f, (void **)&param3_this);
          if (param0_this != NULL && param1_this != NULL && param2_this != NULL && param3_this != NULL) {
            BulletSphericalConstraint *return_value = new BulletSphericalConstraint(param0_this, param1_this, *param2_this, *param3_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return false;
            }
            return_value->ref();
            if (_PyErr_OCCURRED()) {
              unref_delete(return_value);
              return false;
            } else {
              coerced = MOVE(return_value);
              return true;
            }
          }
        }
        PyErr_Clear();
        break;
      }
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletSphericalConstraint(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletSphericalConstraint) {
    printf("BulletSphericalConstraint ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletSphericalConstraint *local_this = (BulletSphericalConstraint *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletSphericalConstraint) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletConstraint) {
    return (BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedReferenceCount) {
    return (TypedReferenceCount *)(BulletConstraint *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletSphericalConstraint(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletSphericalConstraint) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletConstraint) {
    BulletConstraint* other_this = (BulletConstraint*)from_this;
    return (BulletSphericalConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletSphericalConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletSphericalConstraint*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedReferenceCount) {
    TypedReferenceCount* other_this = (TypedReferenceCount*)from_this;
    return (BulletSphericalConstraint*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletTickCallbackData
 */
/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletTickCallbackData::get_timestep(void) const
 */
static PyObject *Dtool_BulletTickCallbackData_get_timestep_751(PyObject *self, PyObject *) {
  BulletTickCallbackData *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTickCallbackData, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletTickCallbackData::get_timestep(void) const
  PN_stdfloat return_value = (*(const BulletTickCallbackData*)local_this).get_timestep();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletTickCallbackData_get_timestep_751_comment =
  "C++ Interface:\n"
  "get_timestep(BulletTickCallbackData self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTickCallbackData_get_timestep_751_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletTickCallbackData::get_class_type(void)
 */
static PyObject *Dtool_BulletTickCallbackData_get_class_type_752(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletTickCallbackData::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletTickCallbackData::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletTickCallbackData_get_class_type_752_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletTickCallbackData_get_class_type_752_comment = NULL;
#endif

static int Dtool_Init_BulletTickCallbackData(PyObject *self, PyObject *args, PyObject *kwds) {
  Dtool_Raise_TypeError("cannot init abstract class");
  return -1;
}

bool Dtool_ConstCoerce_BulletTickCallbackData(PyObject *args, BulletTickCallbackData const *&coerced, bool &manage) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletTickCallbackData, (void**)&coerced);
  if (coerced != NULL) {
    return true;
  }

  return false;
}

bool Dtool_Coerce_BulletTickCallbackData(PyObject *args, BulletTickCallbackData *&coerced, bool &manage) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletTickCallbackData, (void**)&coerced);
  if (coerced != NULL) {
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      return true;
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletTickCallbackData(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletTickCallbackData) {
    printf("BulletTickCallbackData ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletTickCallbackData *local_this = (BulletTickCallbackData *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletTickCallbackData) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_CallbackData) {
    return (CallbackData *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(CallbackData *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletTickCallbackData(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletTickCallbackData) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_CallbackData) {
    CallbackData* other_this = (CallbackData*)from_this;
    return (BulletTickCallbackData*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletTickCallbackData*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletTriangleMesh
 */
/**
 * Python function wrapper for:
 * void BulletTriangleMesh::add_triangle(LPoint3 const &p0, LPoint3 const &p1, LPoint3 const &p2, bool remove_duplicate_vertices = false)
 */
static PyObject *Dtool_BulletTriangleMesh_add_triangle_756(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTriangleMesh *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMesh, (void **)&local_this, "BulletTriangleMesh.add_triangle")) {
    return NULL;
  }
  // 1-void BulletTriangleMesh::add_triangle(LPoint3 const &p0, LPoint3 const &p1, LPoint3 const &p2, bool remove_duplicate_vertices = false)
  PyObject *param1;
  PyObject *param2;
  PyObject *param3;
  PyObject *param4 = Py_False;
  static const char *keyword_list[] = {"p0", "p1", "p2", "remove_duplicate_vertices", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO|O:add_triangle", (char **)keyword_list, &param1, &param2, &param3, &param4)) {
    LPoint3f param1_local;
    LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
    if (!(param1_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletTriangleMesh.add_triangle", "LPoint3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletTriangleMesh.add_triangle", "LPoint3f");
    }
    LPoint3f param3_local;
    LPoint3 const *param3_this = Dtool_Coerce_LPoint3f(param3, param3_local);
    if (!(param3_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param3, 3, "BulletTriangleMesh.add_triangle", "LPoint3f");
    }
    (*local_this).add_triangle(*param1_this, *param2_this, *param3_this, (PyObject_IsTrue(param4) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_triangle(const BulletTriangleMesh self, const LPoint3f p0, const LPoint3f p1, const LPoint3f p2, bool remove_duplicate_vertices)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_add_triangle_756_comment =
  "C++ Interface:\n"
  "add_triangle(const BulletTriangleMesh self, const LPoint3f p0, const LPoint3f p1, const LPoint3f p2, bool remove_duplicate_vertices)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_add_triangle_756_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletTriangleMesh::add_array(PTA_LVecBase3 const &points, PTA_int const &indices, bool remove_duplicate_vertices = false)
 */
static PyObject *Dtool_BulletTriangleMesh_add_array_757(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTriangleMesh *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMesh, (void **)&local_this, "BulletTriangleMesh.add_array")) {
    return NULL;
  }
  // 1-void BulletTriangleMesh::add_array(PTA_LVecBase3 const &points, PTA_int const &indices, bool remove_duplicate_vertices = false)
  PyObject *param1;
  PyObject *param2;
  PyObject *param3 = Py_False;
  static const char *keyword_list[] = {"points", "indices", "remove_duplicate_vertices", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO|O:add_array", (char **)keyword_list, &param1, &param2, &param3)) {
    PointerToArray< LVecBase3f > param1_local;
    PTA_LVecBase3 const *param1_this = Dtool_Coerce_PointerToArray_LVecBase3f(param1, param1_local);
    if (!(param1_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletTriangleMesh.add_array", "PointerToArray");
    }
    PointerToArray< int > param2_local;
    PTA_int const *param2_this = Dtool_Coerce_PointerToArray_int(param2, param2_local);
    if (!(param2_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletTriangleMesh.add_array", "PointerToArray");
    }
    (*local_this).add_array(*param1_this, *param2_this, (PyObject_IsTrue(param3) != 0));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_array(const BulletTriangleMesh self, const PointerToArray points, const PointerToArray indices, bool remove_duplicate_vertices)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_add_array_757_comment =
  "C++ Interface:\n"
  "add_array(const BulletTriangleMesh self, const PointerToArray points, const PointerToArray indices, bool remove_duplicate_vertices)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_add_array_757_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletTriangleMesh::add_geom(Geom const *geom, bool remove_duplicate_vertices = false, TransformState const *ts = TransformState::make_identity())
 */
static PyObject *Dtool_BulletTriangleMesh_add_geom_758(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTriangleMesh *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMesh, (void **)&local_this, "BulletTriangleMesh.add_geom")) {
    return NULL;
  }
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "geom");
      }
      if (arg == (PyObject *)NULL) {
        return Dtool_Raise_TypeError("Required argument 'geom' (pos 1) not found");
      }
      // 1-void BulletTriangleMesh::add_geom(Geom const *geom, bool remove_duplicate_vertices, TransformState const *ts)
      Geom const *arg_this = (Geom *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_Geom, 1, "BulletTriangleMesh.add_geom", true, true);
      if (arg_this != NULL) {
        (*local_this).add_geom(arg_this);
        return Dtool_Return_None();
      }
    }
    break;
  case 2:
    {
      // 1-void BulletTriangleMesh::add_geom(Geom const *geom, bool remove_duplicate_vertices, TransformState const *ts)
      PyObject *param1;
      PyObject *param2;
      static const char *keyword_list[] = {"geom", "remove_duplicate_vertices", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:add_geom", (char **)keyword_list, &param1, &param2)) {
        Geom const *param1_this = (Geom *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_Geom, 1, "BulletTriangleMesh.add_geom", true, true);
        if (param1_this != NULL) {
          (*local_this).add_geom(param1_this, (PyObject_IsTrue(param2) != 0));
          return Dtool_Return_None();
        }
      }
    }
    break;
  case 3:
    {
      // 1-void BulletTriangleMesh::add_geom(Geom const *geom, bool remove_duplicate_vertices, TransformState const *ts)
      PyObject *param1;
      PyObject *param2;
      PyObject *param3;
      static const char *keyword_list[] = {"geom", "remove_duplicate_vertices", "ts", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OOO:add_geom", (char **)keyword_list, &param1, &param2, &param3)) {
        Geom const *param1_this = (Geom *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_Geom, 1, "BulletTriangleMesh.add_geom", true, true);
        TransformState const *param3_this = (TransformState *)DTOOL_Call_GetPointerThisClass(param3, Dtool_Ptr_TransformState, 3, "BulletTriangleMesh.add_geom", true, true);
        if (param1_this != NULL && param3_this != NULL) {
          (*local_this).add_geom(param1_this, (PyObject_IsTrue(param2) != 0), param3_this);
          return Dtool_Return_None();
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    return PyErr_Format(PyExc_TypeError,
                        "add_geom() takes 2, 3 or 4 arguments (%d given)",
                        parameter_count + 1);
#endif
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "add_geom(const BulletTriangleMesh self, const Geom geom)\n"
      "add_geom(const BulletTriangleMesh self, const Geom geom, bool remove_duplicate_vertices)\n"
      "add_geom(const BulletTriangleMesh self, const Geom geom, bool remove_duplicate_vertices, const TransformState ts)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_add_geom_758_comment =
  "C++ Interface:\n"
  "add_geom(const BulletTriangleMesh self, const Geom geom)\n"
  "add_geom(const BulletTriangleMesh self, const Geom geom, bool remove_duplicate_vertices)\n"
  "add_geom(const BulletTriangleMesh self, const Geom geom, bool remove_duplicate_vertices, const TransformState ts)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_add_geom_758_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletTriangleMesh::set_welding_distance(PN_stdfloat distance)
 */
static PyObject *Dtool_BulletTriangleMesh_set_welding_distance_759(PyObject *self, PyObject *arg) {
  BulletTriangleMesh *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMesh, (void **)&local_this, "BulletTriangleMesh.set_welding_distance")) {
    return NULL;
  }
  // 1-void BulletTriangleMesh::set_welding_distance(PN_stdfloat distance)
  if (PyNumber_Check(arg)) {
    (*local_this).set_welding_distance((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_welding_distance(const BulletTriangleMesh self, float distance)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_set_welding_distance_759_comment =
  "C++ Interface:\n"
  "set_welding_distance(const BulletTriangleMesh self, float distance)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_set_welding_distance_759_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletTriangleMesh::preallocate(int num_verts, int num_indices)
 */
static PyObject *Dtool_BulletTriangleMesh_preallocate_760(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTriangleMesh *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMesh, (void **)&local_this, "BulletTriangleMesh.preallocate")) {
    return NULL;
  }
  // 1-void BulletTriangleMesh::preallocate(int num_verts, int num_indices)
  int param1;
  int param2;
  static const char *keyword_list[] = {"num_verts", "num_indices", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "ii:preallocate", (char **)keyword_list, &param1, &param2)) {
    (*local_this).preallocate((int)param1, (int)param2);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "preallocate(const BulletTriangleMesh self, int num_verts, int num_indices)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_preallocate_760_comment =
  "C++ Interface:\n"
  "preallocate(const BulletTriangleMesh self, int num_verts, int num_indices)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_preallocate_760_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * int BulletTriangleMesh::get_num_triangles(void) const
 */
static PyObject *Dtool_BulletTriangleMesh_get_num_triangles_761(PyObject *self, PyObject *) {
  BulletTriangleMesh *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return NULL;
  }
  // 1-int BulletTriangleMesh::get_num_triangles(void) const
  int return_value = (*(const BulletTriangleMesh*)local_this).get_num_triangles();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_get_num_triangles_761_comment =
  "C++ Interface:\n"
  "get_num_triangles(BulletTriangleMesh self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_get_num_triangles_761_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletTriangleMesh::get_welding_distance(void) const
 */
static PyObject *Dtool_BulletTriangleMesh_get_welding_distance_762(PyObject *self, PyObject *) {
  BulletTriangleMesh *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletTriangleMesh::get_welding_distance(void) const
  PN_stdfloat return_value = (*(const BulletTriangleMesh*)local_this).get_welding_distance();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_get_welding_distance_762_comment =
  "C++ Interface:\n"
  "get_welding_distance(BulletTriangleMesh self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_get_welding_distance_762_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * virtual void BulletTriangleMesh::output(ostream &out) const
 */
static PyObject *Dtool_BulletTriangleMesh_output_763(PyObject *self, PyObject *arg) {
  BulletTriangleMesh *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return NULL;
  }
  // 1-virtual void BulletTriangleMesh::output(ostream &out) const
  ostream *arg_this = (ostream *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_ostream, 1, "BulletTriangleMesh.output", false, true);
  if (arg_this != NULL) {
    (*(const BulletTriangleMesh*)local_this).output(*arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "output(BulletTriangleMesh self, ostream out)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_output_763_comment =
  "C++ Interface:\n"
  "output(BulletTriangleMesh self, ostream out)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_output_763_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * virtual void BulletTriangleMesh::write(ostream &out, int indent_level) const
 */
static PyObject *Dtool_BulletTriangleMesh_write_764(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTriangleMesh *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return NULL;
  }
  // 1-virtual void BulletTriangleMesh::write(ostream &out, int indent_level) const
  PyObject *param1;
  int param2;
  static const char *keyword_list[] = {"out", "indent_level", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "Oi:write", (char **)keyword_list, &param1, &param2)) {
    ostream *param1_this = (ostream *)DTOOL_Call_GetPointerThisClass(param1, Dtool_Ptr_ostream, 1, "BulletTriangleMesh.write", false, true);
    if (param1_this != NULL) {
      (*(const BulletTriangleMesh*)local_this).write(*param1_this, (int)param2);
      return Dtool_Return_None();
    }
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "write(BulletTriangleMesh self, ostream out, int indent_level)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_write_764_comment =
  "C++ Interface:\n"
  "write(BulletTriangleMesh self, ostream out, int indent_level)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMesh_write_764_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletTriangleMesh::get_class_type(void)
 */
static PyObject *Dtool_BulletTriangleMesh_get_class_type_765(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletTriangleMesh::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletTriangleMesh::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMesh_get_class_type_765_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletTriangleMesh_get_class_type_765_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletTriangleMesh::BulletTriangleMesh(void)
 * inline BulletTriangleMesh::BulletTriangleMesh(BulletTriangleMesh const &) = default
 */
static int Dtool_Init_BulletTriangleMesh(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 0:
    {
      // 1-BulletTriangleMesh::BulletTriangleMesh(void)
      BulletTriangleMesh *return_value = new BulletTriangleMesh();
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletTriangleMesh, true, false);
    }
    break;
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "param0");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
        return -1;
      }
      // 1-inline BulletTriangleMesh::BulletTriangleMesh(BulletTriangleMesh const &) = default
      BulletTriangleMesh const *arg_this = (BulletTriangleMesh *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletTriangleMesh, 0, "BulletTriangleMesh.BulletTriangleMesh", true, true);
      if (arg_this != NULL) {
        BulletTriangleMesh *return_value = new BulletTriangleMesh(*arg_this);
        if (return_value == NULL) {
          PyErr_NoMemory();
          return -1;
        }
        return_value->ref();
        if (Dtool_CheckErrorOccurred()) {
          unref_delete(return_value);
          return -1;
        }
        return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletTriangleMesh, true, false);
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletTriangleMesh() takes 0 or 1 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletTriangleMesh()\n"
      "BulletTriangleMesh(const BulletTriangleMesh param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletTriangleMesh(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletTriangleMesh) {
    printf("BulletTriangleMesh ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletTriangleMesh *local_this = (BulletTriangleMesh *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletTriangleMesh) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletTriangleMesh(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletTriangleMesh) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletTriangleMesh*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletTriangleMesh*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletTriangleMesh*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletTriangleMesh*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletTriangleMeshShape
 */
/**
 * Python function wrapper for:
 * inline void BulletTriangleMeshShape::operator =(BulletTriangleMeshShape const &copy)
 */
static PyObject *Dtool_BulletTriangleMeshShape_operator_768(PyObject *self, PyObject *arg) {
  BulletTriangleMeshShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMeshShape, (void **)&local_this, "BulletTriangleMeshShape.assign")) {
    return NULL;
  }
  // 1-inline void BulletTriangleMeshShape::operator =(BulletTriangleMeshShape const &copy)
  CPT(BulletTriangleMeshShape) arg_this;
  if (!Dtool_ConstCoerce_BulletTriangleMeshShape(arg, arg_this)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletTriangleMeshShape.assign", "BulletTriangleMeshShape");
  }
  (*local_this).operator =(*MOVE(arg_this));
  BulletTriangleMeshShape *return_value = local_this;
  if (return_value != (BulletTriangleMeshShape *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (BulletTriangleMeshShape *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_BulletTriangleMeshShape, true, false, return_value->as_typed_object()->get_type_index());
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "assign(const BulletTriangleMeshShape self, const BulletTriangleMeshShape copy)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMeshShape_operator_768_comment =
  "C++ Interface:\n"
  "assign(const BulletTriangleMeshShape self, const BulletTriangleMeshShape copy)\n";
#else
static const char *Dtool_BulletTriangleMeshShape_operator_768_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletTriangleMeshShape::refit_tree(LPoint3 const &aabb_min, LPoint3 const &aabb_max)
 */
static PyObject *Dtool_BulletTriangleMeshShape_refit_tree_769(PyObject *self, PyObject *args, PyObject *kwds) {
  BulletTriangleMeshShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletTriangleMeshShape, (void **)&local_this, "BulletTriangleMeshShape.refit_tree")) {
    return NULL;
  }
  // 1-void BulletTriangleMeshShape::refit_tree(LPoint3 const &aabb_min, LPoint3 const &aabb_max)
  PyObject *param1;
  PyObject *param2;
  static const char *keyword_list[] = {"aabb_min", "aabb_max", NULL};
  if (PyArg_ParseTupleAndKeywords(args, kwds, "OO:refit_tree", (char **)keyword_list, &param1, &param2)) {
    LPoint3f param1_local;
    LPoint3 const *param1_this = Dtool_Coerce_LPoint3f(param1, param1_local);
    if (!(param1_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param1, 1, "BulletTriangleMeshShape.refit_tree", "LPoint3f");
    }
    LPoint3f param2_local;
    LPoint3 const *param2_this = Dtool_Coerce_LPoint3f(param2, param2_local);
    if (!(param2_this != NULL)) {
      return Dtool_Raise_ArgTypeError(param2, 2, "BulletTriangleMeshShape.refit_tree", "LPoint3f");
    }
    (*local_this).refit_tree(*param1_this, *param2_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "refit_tree(const BulletTriangleMeshShape self, const LPoint3f aabb_min, const LPoint3f aabb_max)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMeshShape_refit_tree_769_comment =
  "C++ Interface:\n"
  "refit_tree(const BulletTriangleMeshShape self, const LPoint3f aabb_min, const LPoint3f aabb_max)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMeshShape_refit_tree_769_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletTriangleMeshShape::is_static(void) const
 */
static PyObject *Dtool_BulletTriangleMeshShape_is_static_770(PyObject *self, PyObject *) {
  BulletTriangleMeshShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMeshShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletTriangleMeshShape::is_static(void) const
  bool return_value = (*(const BulletTriangleMeshShape*)local_this).is_static();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMeshShape_is_static_770_comment =
  "C++ Interface:\n"
  "is_static(BulletTriangleMeshShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMeshShape_is_static_770_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline bool BulletTriangleMeshShape::is_dynamic(void) const
 */
static PyObject *Dtool_BulletTriangleMeshShape_is_dynamic_771(PyObject *self, PyObject *) {
  BulletTriangleMeshShape *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMeshShape, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletTriangleMeshShape::is_dynamic(void) const
  bool return_value = (*(const BulletTriangleMeshShape*)local_this).is_dynamic();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMeshShape_is_dynamic_771_comment =
  "C++ Interface:\n"
  "is_dynamic(BulletTriangleMeshShape self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletTriangleMeshShape_is_dynamic_771_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle BulletTriangleMeshShape::get_class_type(void)
 */
static PyObject *Dtool_BulletTriangleMeshShape_get_class_type_772(PyObject *, PyObject *) {
  // 1-static TypeHandle BulletTriangleMeshShape::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(BulletTriangleMeshShape::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletTriangleMeshShape_get_class_type_772_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_BulletTriangleMeshShape_get_class_type_772_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMesh *mesh, bool dynamic, bool compress = true, bool bvh = true)
 * inline BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMeshShape const &copy)
 */
static int Dtool_Init_BulletTriangleMeshShape(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 1:
    {
      PyObject *arg = NULL;
      if (PyTuple_GET_SIZE(args) == 1) {
        arg = PyTuple_GET_ITEM(args, 0);
      } else if (kwds != NULL) {
        arg = PyDict_GetItemString(kwds, "copy");
      }
      if (arg == (PyObject *)NULL) {
        Dtool_Raise_TypeError("Required argument 'copy' (pos 1) not found");
        return -1;
      }
      // 1-inline BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMeshShape const &copy)
      CPT(BulletTriangleMeshShape) arg_this;
      if (!Dtool_ConstCoerce_BulletTriangleMeshShape(arg, arg_this)) {
        Dtool_Raise_ArgTypeError(arg, 0, "BulletTriangleMeshShape.BulletTriangleMeshShape", "BulletTriangleMeshShape");
        return -1;
      }
      BulletTriangleMeshShape *return_value = new BulletTriangleMeshShape(*MOVE(arg_this));
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      return_value->ref();
      if (Dtool_CheckErrorOccurred()) {
        unref_delete(return_value);
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletTriangleMeshShape, true, false);
    }
    break;
  case 2:
  case 3:
  case 4:
    {
      // 1-BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMesh *mesh, bool dynamic, bool compress = true, bool bvh = true)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2 = Py_True;
      PyObject *param3 = Py_True;
      static const char *keyword_list[] = {"mesh", "dynamic", "compress", "bvh", NULL};
      if (PyArg_ParseTupleAndKeywords(args, kwds, "OO|OO:BulletTriangleMeshShape", (char **)keyword_list, &param0, &param1, &param2, &param3)) {
        BulletTriangleMesh *param0_this = (BulletTriangleMesh *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletTriangleMesh, 0, "BulletTriangleMeshShape.BulletTriangleMeshShape", false, true);
        if (param0_this != NULL) {
          BulletTriangleMeshShape *return_value = new BulletTriangleMeshShape(param0_this, (PyObject_IsTrue(param1) != 0), (PyObject_IsTrue(param2) != 0), (PyObject_IsTrue(param3) != 0));
          if (return_value == NULL) {
            PyErr_NoMemory();
            return -1;
          }
          return_value->ref();
          if (Dtool_CheckErrorOccurred()) {
            unref_delete(return_value);
            return -1;
          }
          return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletTriangleMeshShape, true, false);
        }
      }
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "BulletTriangleMeshShape() takes 1, 2, 3 or 4 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletTriangleMeshShape(const BulletTriangleMeshShape copy)\n"
      "BulletTriangleMeshShape(BulletTriangleMesh mesh, bool dynamic, bool compress, bool bvh)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_BulletTriangleMeshShape(PyObject *args, CPT(BulletTriangleMeshShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletTriangleMeshShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (PyTuple_Check(args)) {
    Py_ssize_t size = PyTuple_GET_SIZE(args);
    if (size >= 2 && size <= 4) {
      // 1-BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMesh *mesh, bool dynamic, bool compress = true, bool bvh = true)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2 = Py_True;
      PyObject *param3 = Py_True;
      if (PyArg_UnpackTuple(args, "BulletTriangleMeshShape", 2, 4, &param0, &param1, &param2, &param3)) {
        BulletTriangleMesh *param0_this = (BulletTriangleMesh *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletTriangleMesh, 0, "BulletTriangleMeshShape.BulletTriangleMeshShape", false, false);
        if (param0_this != NULL) {
          BulletTriangleMeshShape *return_value = new BulletTriangleMeshShape(param0_this, (PyObject_IsTrue(param1) != 0), (PyObject_IsTrue(param2) != 0), (PyObject_IsTrue(param3) != 0));
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

bool Dtool_Coerce_BulletTriangleMeshShape(PyObject *args, PT(BulletTriangleMeshShape) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_BulletTriangleMeshShape, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (PyTuple_Check(args)) {
    Py_ssize_t size = PyTuple_GET_SIZE(args);
    if (size >= 2 && size <= 4) {
      // 1-BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMesh *mesh, bool dynamic, bool compress = true, bool bvh = true)
      PyObject *param0;
      PyObject *param1;
      PyObject *param2 = Py_True;
      PyObject *param3 = Py_True;
      if (PyArg_UnpackTuple(args, "BulletTriangleMeshShape", 2, 4, &param0, &param1, &param2, &param3)) {
        BulletTriangleMesh *param0_this = (BulletTriangleMesh *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_BulletTriangleMesh, 0, "BulletTriangleMeshShape.BulletTriangleMeshShape", false, false);
        if (param0_this != NULL) {
          BulletTriangleMeshShape *return_value = new BulletTriangleMeshShape(param0_this, (PyObject_IsTrue(param1) != 0), (PyObject_IsTrue(param2) != 0), (PyObject_IsTrue(param3) != 0));
          if (return_value == NULL) {
            PyErr_NoMemory();
            return false;
          }
          return_value->ref();
          if (_PyErr_OCCURRED()) {
            unref_delete(return_value);
            return false;
          } else {
            coerced = MOVE(return_value);
            return true;
          }
        }
      }
      PyErr_Clear();
    }
  }

  return false;
}

static void *Dtool_UpcastInterface_BulletTriangleMeshShape(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletTriangleMeshShape) {
    printf("BulletTriangleMeshShape ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletTriangleMeshShape *local_this = (BulletTriangleMeshShape *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletTriangleMeshShape) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_BulletShape) {
    return (BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(BulletShape *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletTriangleMeshShape(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletTriangleMeshShape) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_BulletShape) {
    BulletShape* other_this = (BulletShape*)from_this;
    return (BulletTriangleMeshShape*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (BulletTriangleMeshShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (BulletTriangleMeshShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (BulletTriangleMeshShape*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (BulletTriangleMeshShape*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletWheelRaycastInfo
 */
/**
 * Python function wrapper for:
 * inline bool BulletWheelRaycastInfo::is_in_contact(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_is_in_contact_775(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline bool BulletWheelRaycastInfo::is_in_contact(void) const
  bool return_value = (*(const BulletWheelRaycastInfo*)local_this).is_in_contact();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_is_in_contact_775_comment =
  "C++ Interface:\n"
  "is_in_contact(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_is_in_contact_775_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PN_stdfloat BulletWheelRaycastInfo::get_suspension_length(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_suspension_length_776(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PN_stdfloat BulletWheelRaycastInfo::get_suspension_length(void) const
  PN_stdfloat return_value = (*(const BulletWheelRaycastInfo*)local_this).get_suspension_length();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_suspension_length_776_comment =
  "C++ Interface:\n"
  "get_suspension_length(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_suspension_length_776_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LVector3 BulletWheelRaycastInfo::get_contact_normal_ws(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_777(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LVector3 BulletWheelRaycastInfo::get_contact_normal_ws(void) const
  LVector3 *return_value = new LVector3((*(const BulletWheelRaycastInfo*)local_this).get_contact_normal_ws());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_777_comment =
  "C++ Interface:\n"
  "get_contact_normal_ws(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_777_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LVector3 BulletWheelRaycastInfo::get_wheel_direction_ws(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_778(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LVector3 BulletWheelRaycastInfo::get_wheel_direction_ws(void) const
  LVector3 *return_value = new LVector3((*(const BulletWheelRaycastInfo*)local_this).get_wheel_direction_ws());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_778_comment =
  "C++ Interface:\n"
  "get_wheel_direction_ws(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_778_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LVector3 BulletWheelRaycastInfo::get_wheel_axle_ws(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_779(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LVector3 BulletWheelRaycastInfo::get_wheel_axle_ws(void) const
  LVector3 *return_value = new LVector3((*(const BulletWheelRaycastInfo*)local_this).get_wheel_axle_ws());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_779_comment =
  "C++ Interface:\n"
  "get_wheel_axle_ws(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_779_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LPoint3 BulletWheelRaycastInfo::get_contact_point_ws(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_contact_point_ws_780(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LPoint3 BulletWheelRaycastInfo::get_contact_point_ws(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletWheelRaycastInfo*)local_this).get_contact_point_ws());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_contact_point_ws_780_comment =
  "C++ Interface:\n"
  "get_contact_point_ws(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_contact_point_ws_780_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline LPoint3 BulletWheelRaycastInfo::get_hard_point_ws(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_hard_point_ws_781(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline LPoint3 BulletWheelRaycastInfo::get_hard_point_ws(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletWheelRaycastInfo*)local_this).get_hard_point_ws());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_hard_point_ws_781_comment =
  "C++ Interface:\n"
  "get_hard_point_ws(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_hard_point_ws_781_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline PandaNode *BulletWheelRaycastInfo::get_ground_object(void) const
 */
static PyObject *Dtool_BulletWheelRaycastInfo_get_ground_object_782(PyObject *self, PyObject *) {
  BulletWheelRaycastInfo *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheelRaycastInfo, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline PandaNode *BulletWheelRaycastInfo::get_ground_object(void) const
  PandaNode *return_value = (*(const BulletWheelRaycastInfo*)local_this).get_ground_object();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletWheelRaycastInfo_get_ground_object_782_comment =
  "C++ Interface:\n"
  "get_ground_object(BulletWheelRaycastInfo self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheelRaycastInfo_get_ground_object_782_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletWheelRaycastInfo::BulletWheelRaycastInfo(BulletWheelRaycastInfo const &) = default
 */
static int Dtool_Init_BulletWheelRaycastInfo(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletWheelRaycastInfo() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg = NULL;
  if (PyTuple_GET_SIZE(args) == 1) {
    arg = PyTuple_GET_ITEM(args, 0);
  } else if (kwds != NULL) {
    arg = PyDict_GetItemString(kwds, "param0");
  }
  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
    return -1;
  }
  // 1-inline BulletWheelRaycastInfo::BulletWheelRaycastInfo(BulletWheelRaycastInfo const &) = default
  BulletWheelRaycastInfo const *arg_this = (BulletWheelRaycastInfo *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletWheelRaycastInfo, 0, "BulletWheelRaycastInfo.BulletWheelRaycastInfo", true, true);
  if (arg_this != NULL) {
    BulletWheelRaycastInfo *return_value = new BulletWheelRaycastInfo(*arg_this);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletWheelRaycastInfo, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletWheelRaycastInfo(const BulletWheelRaycastInfo param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletWheelRaycastInfo(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletWheelRaycastInfo) {
    printf("BulletWheelRaycastInfo ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletWheelRaycastInfo *local_this = (BulletWheelRaycastInfo *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletWheelRaycastInfo) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletWheelRaycastInfo(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletWheelRaycastInfo) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class BulletWheel
 */
/**
 * Python function wrapper for:
 * void BulletWheel::set_suspension_stiffness(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_suspension_stiffness_786(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_suspension_stiffness")) {
    return NULL;
  }
  // 1-void BulletWheel::set_suspension_stiffness(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_suspension_stiffness((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_suspension_stiffness(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_suspension_stiffness_786_comment =
  "C++ Interface:\n"
  "set_suspension_stiffness(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets how stiff the suspension shall be.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_suspension_stiffness_786_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_max_suspension_travel_cm(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_max_suspension_travel_cm_787(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_max_suspension_travel_cm")) {
    return NULL;
  }
  // 1-void BulletWheel::set_max_suspension_travel_cm(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_suspension_travel_cm((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_suspension_travel_cm(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_max_suspension_travel_cm_787_comment =
  "C++ Interface:\n"
  "set_max_suspension_travel_cm(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the maximum distance the suspension can travel out of the resting\n"
  " * position in centimeters.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_max_suspension_travel_cm_787_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_friction_slip(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_friction_slip_788(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_friction_slip")) {
    return NULL;
  }
  // 1-void BulletWheel::set_friction_slip(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_friction_slip((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_friction_slip(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_friction_slip_788_comment =
  "C++ Interface:\n"
  "set_friction_slip(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the slipperyness of the tyre.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_friction_slip_788_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_max_suspension_force(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_max_suspension_force_789(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_max_suspension_force")) {
    return NULL;
  }
  // 1-void BulletWheel::set_max_suspension_force(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_max_suspension_force((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_max_suspension_force(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_max_suspension_force_789_comment =
  "C++ Interface:\n"
  "set_max_suspension_force(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the maximum suspension force the wheel can handle.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_max_suspension_force_789_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_wheels_damping_compression(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_wheels_damping_compression_790(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_wheels_damping_compression")) {
    return NULL;
  }
  // 1-void BulletWheel::set_wheels_damping_compression(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_wheels_damping_compression((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wheels_damping_compression(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_wheels_damping_compression_790_comment =
  "C++ Interface:\n"
  "set_wheels_damping_compression(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the damping forces applied when the suspension gets compressed.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_wheels_damping_compression_790_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_wheels_damping_relaxation(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_wheels_damping_relaxation_791(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_wheels_damping_relaxation")) {
    return NULL;
  }
  // 1-void BulletWheel::set_wheels_damping_relaxation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_wheels_damping_relaxation((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wheels_damping_relaxation(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_wheels_damping_relaxation_791_comment =
  "C++ Interface:\n"
  "set_wheels_damping_relaxation(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the damping forces applied when the suspension relaxes.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_wheels_damping_relaxation_791_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_roll_influence(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_roll_influence_792(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_roll_influence")) {
    return NULL;
  }
  // 1-void BulletWheel::set_roll_influence(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_roll_influence((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_roll_influence(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_roll_influence_792_comment =
  "C++ Interface:\n"
  "set_roll_influence(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Defines a scaling factor for roll forces that affect the chassis.  0.0\n"
  " * means no roll - the chassis won't ever flip over - while 1.0 means original\n"
  " * physical behaviour.  Basically, this allows moving the center of mass up\n"
  " * and down.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_roll_influence_792_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_wheel_radius(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_wheel_radius_793(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_wheel_radius")) {
    return NULL;
  }
  // 1-void BulletWheel::set_wheel_radius(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_wheel_radius((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wheel_radius(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_wheel_radius_793_comment =
  "C++ Interface:\n"
  "set_wheel_radius(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the wheel radius.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_wheel_radius_793_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_steering(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_steering_794(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_steering")) {
    return NULL;
  }
  // 1-void BulletWheel::set_steering(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_steering((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_steering(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_steering_794_comment =
  "C++ Interface:\n"
  "set_steering(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Sets the steering angle.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_steering_794_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_rotation(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_rotation_795(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_rotation")) {
    return NULL;
  }
  // 1-void BulletWheel::set_rotation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_rotation((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_rotation(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_rotation_795_comment =
  "C++ Interface:\n"
  "set_rotation(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_rotation_795_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_delta_rotation(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_delta_rotation_796(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_delta_rotation")) {
    return NULL;
  }
  // 1-void BulletWheel::set_delta_rotation(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_delta_rotation((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_delta_rotation(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_delta_rotation_796_comment =
  "C++ Interface:\n"
  "set_delta_rotation(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_delta_rotation_796_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_engine_force(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_engine_force_797(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_engine_force")) {
    return NULL;
  }
  // 1-void BulletWheel::set_engine_force(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_engine_force((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_engine_force(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_engine_force_797_comment =
  "C++ Interface:\n"
  "set_engine_force(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " * Defines how much force should be used to rotate the wheel.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_engine_force_797_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_brake(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_brake_798(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_brake")) {
    return NULL;
  }
  // 1-void BulletWheel::set_brake(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_brake((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_brake(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_brake_798_comment =
  "C++ Interface:\n"
  "set_brake(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_brake_798_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_skid_info(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_skid_info_799(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_skid_info")) {
    return NULL;
  }
  // 1-void BulletWheel::set_skid_info(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_skid_info((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_skid_info(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_skid_info_799_comment =
  "C++ Interface:\n"
  "set_skid_info(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_skid_info_799_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_wheels_suspension_force(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_wheels_suspension_force_800(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_wheels_suspension_force")) {
    return NULL;
  }
  // 1-void BulletWheel::set_wheels_suspension_force(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_wheels_suspension_force((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wheels_suspension_force(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_wheels_suspension_force_800_comment =
  "C++ Interface:\n"
  "set_wheels_suspension_force(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_wheels_suspension_force_800_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_suspension_relative_velocity(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_suspension_relative_velocity_801(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_suspension_relative_velocity")) {
    return NULL;
  }
  // 1-void BulletWheel::set_suspension_relative_velocity(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_suspension_relative_velocity((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_suspension_relative_velocity(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_suspension_relative_velocity_801_comment =
  "C++ Interface:\n"
  "set_suspension_relative_velocity(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_suspension_relative_velocity_801_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_clipped_inv_connection_point_cs(PN_stdfloat value)
 */
static PyObject *Dtool_BulletWheel_set_clipped_inv_connection_point_cs_802(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_clipped_inv_connection_point_cs")) {
    return NULL;
  }
  // 1-void BulletWheel::set_clipped_inv_connection_point_cs(PN_stdfloat value)
  if (PyNumber_Check(arg)) {
    (*local_this).set_clipped_inv_connection_point_cs((PN_stdfloat)PyFloat_AsDouble(arg));
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_clipped_inv_connection_point_cs(const BulletWheel self, float value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_clipped_inv_connection_point_cs_802_comment =
  "C++ Interface:\n"
  "set_clipped_inv_connection_point_cs(const BulletWheel self, float value)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_clipped_inv_connection_point_cs_802_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_chassis_connection_point_cs(LPoint3 const &pos)
 */
static PyObject *Dtool_BulletWheel_set_chassis_connection_point_cs_803(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_chassis_connection_point_cs")) {
    return NULL;
  }
  // 1-void BulletWheel::set_chassis_connection_point_cs(LPoint3 const &pos)
  LPoint3f arg_local;
  LPoint3 const *arg_this = Dtool_Coerce_LPoint3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWheel.set_chassis_connection_point_cs", "LPoint3f");
  }
  (*local_this).set_chassis_connection_point_cs(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_chassis_connection_point_cs(const BulletWheel self, const LPoint3f pos)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_chassis_connection_point_cs_803_comment =
  "C++ Interface:\n"
  "set_chassis_connection_point_cs(const BulletWheel self, const LPoint3f pos)\n"
  "\n"
  "/**\n"
  " * Sets the point where the wheel is connected to the chassis.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_chassis_connection_point_cs_803_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_wheel_direction_cs(LVector3 const &dir)
 */
static PyObject *Dtool_BulletWheel_set_wheel_direction_cs_804(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_wheel_direction_cs")) {
    return NULL;
  }
  // 1-void BulletWheel::set_wheel_direction_cs(LVector3 const &dir)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWheel.set_wheel_direction_cs", "LVector3f");
  }
  (*local_this).set_wheel_direction_cs(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wheel_direction_cs(const BulletWheel self, const LVector3f dir)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_wheel_direction_cs_804_comment =
  "C++ Interface:\n"
  "set_wheel_direction_cs(const BulletWheel self, const LVector3f dir)\n"
  "\n"
  "/**\n"
  " * Sets the wheel's forward vector.  (Most likely orthogonal to the axle\n"
  " * vector.)\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_wheel_direction_cs_804_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_wheel_axle_cs(LVector3 const &axle)
 */
static PyObject *Dtool_BulletWheel_set_wheel_axle_cs_805(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_wheel_axle_cs")) {
    return NULL;
  }
  // 1-void BulletWheel::set_wheel_axle_cs(LVector3 const &axle)
  LVector3f arg_local;
  LVector3 const *arg_this = Dtool_Coerce_LVector3f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWheel.set_wheel_axle_cs", "LVector3f");
  }
  (*local_this).set_wheel_axle_cs(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_wheel_axle_cs(const BulletWheel self, const LVector3f axle)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_wheel_axle_cs_805_comment =
  "C++ Interface:\n"
  "set_wheel_axle_cs(const BulletWheel self, const LVector3f axle)\n"
  "\n"
  "/**\n"
  " * Determines the wheel axle normal vector.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_wheel_axle_cs_805_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_world_transform(LMatrix4 const &mat)
 */
static PyObject *Dtool_BulletWheel_set_world_transform_806(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_world_transform")) {
    return NULL;
  }
  // 1-void BulletWheel::set_world_transform(LMatrix4 const &mat)
  LMatrix4f arg_local;
  LMatrix4 const *arg_this = Dtool_Coerce_LMatrix4f(arg, arg_local);
  if (!(arg_this != NULL)) {
    return Dtool_Raise_ArgTypeError(arg, 1, "BulletWheel.set_world_transform", "LMatrix4f");
  }
  (*local_this).set_world_transform(*arg_this);
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_world_transform(const BulletWheel self, const LMatrix4f mat)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_world_transform_806_comment =
  "C++ Interface:\n"
  "set_world_transform(const BulletWheel self, const LMatrix4f mat)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_world_transform_806_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_front_wheel(bool value)
 */
static PyObject *Dtool_BulletWheel_set_front_wheel_807(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_front_wheel")) {
    return NULL;
  }
  // 1-void BulletWheel::set_front_wheel(bool value)
  (*local_this).set_front_wheel((PyObject_IsTrue(arg) != 0));
  return Dtool_Return_None();
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_front_wheel(const BulletWheel self, bool value)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_front_wheel_807_comment =
  "C++ Interface:\n"
  "set_front_wheel(const BulletWheel self, bool value)\n"
  "\n"
  "/**\n"
  " * Sets if the wheel is steerable.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_front_wheel_807_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void BulletWheel::set_node(PandaNode *node)
 */
static PyObject *Dtool_BulletWheel_set_node_808(PyObject *self, PyObject *arg) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_BulletWheel, (void **)&local_this, "BulletWheel.set_node")) {
    return NULL;
  }
  // 1-void BulletWheel::set_node(PandaNode *node)
  PandaNode *arg_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_PandaNode, 1, "BulletWheel.set_node", false, true);
  if (arg_this != NULL) {
    (*local_this).set_node(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "set_node(const BulletWheel self, PandaNode node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_set_node_808_comment =
  "C++ Interface:\n"
  "set_node(const BulletWheel self, PandaNode node)\n"
  "\n"
  "/**\n"
  " * Sets the PandaNode which representates the visual appearance of this wheel.\n"
  " */";
#else
static const char *Dtool_BulletWheel_set_node_808_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_suspension_rest_length(void) const
 */
static PyObject *Dtool_BulletWheel_get_suspension_rest_length_809(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_suspension_rest_length(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_suspension_rest_length();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_suspension_rest_length_809_comment =
  "C++ Interface:\n"
  "get_suspension_rest_length(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the length of the suspension when the vehicle is standing still.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_suspension_rest_length_809_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_suspension_stiffness(void) const
 */
static PyObject *Dtool_BulletWheel_get_suspension_stiffness_810(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_suspension_stiffness(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_suspension_stiffness();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_suspension_stiffness_810_comment =
  "C++ Interface:\n"
  "get_suspension_stiffness(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the stiffness of the suspension.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_suspension_stiffness_810_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_max_suspension_travel_cm(void) const
 */
static PyObject *Dtool_BulletWheel_get_max_suspension_travel_cm_811(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_max_suspension_travel_cm(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_max_suspension_travel_cm();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_max_suspension_travel_cm_811_comment =
  "C++ Interface:\n"
  "get_max_suspension_travel_cm(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_max_suspension_travel_cm_811_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_friction_slip(void) const
 */
static PyObject *Dtool_BulletWheel_get_friction_slip_812(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_friction_slip(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_friction_slip();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_friction_slip_812_comment =
  "C++ Interface:\n"
  "get_friction_slip(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns how slippery the tyres are.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_friction_slip_812_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_max_suspension_force(void) const
 */
static PyObject *Dtool_BulletWheel_get_max_suspension_force_813(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_max_suspension_force(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_max_suspension_force();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_max_suspension_force_813_comment =
  "C++ Interface:\n"
  "get_max_suspension_force(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the maximum force (weight) the suspension can handle.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_max_suspension_force_813_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_wheels_damping_compression(void) const
 */
static PyObject *Dtool_BulletWheel_get_wheels_damping_compression_814(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_wheels_damping_compression(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_wheels_damping_compression();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_wheels_damping_compression_814_comment =
  "C++ Interface:\n"
  "get_wheels_damping_compression(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the  damping applied to the compressing suspension.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_wheels_damping_compression_814_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_wheels_damping_relaxation(void) const
 */
static PyObject *Dtool_BulletWheel_get_wheels_damping_relaxation_815(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_wheels_damping_relaxation(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_wheels_damping_relaxation();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_wheels_damping_relaxation_815_comment =
  "C++ Interface:\n"
  "get_wheels_damping_relaxation(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the damping applied to the relaxing suspension.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_wheels_damping_relaxation_815_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_roll_influence(void) const
 */
static PyObject *Dtool_BulletWheel_get_roll_influence_816(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_roll_influence(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_roll_influence();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_roll_influence_816_comment =
  "C++ Interface:\n"
  "get_roll_influence(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the factor by which roll forces are scaled.  See\n"
  " * set_roll_influence.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_roll_influence_816_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_wheel_radius(void) const
 */
static PyObject *Dtool_BulletWheel_get_wheel_radius_817(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_wheel_radius(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_wheel_radius();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_wheel_radius_817_comment =
  "C++ Interface:\n"
  "get_wheel_radius(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the wheel radius.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_wheel_radius_817_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_steering(void) const
 */
static PyObject *Dtool_BulletWheel_get_steering_818(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_steering(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_steering();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_steering_818_comment =
  "C++ Interface:\n"
  "get_steering(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the steering angle in degrees.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_steering_818_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_rotation(void) const
 */
static PyObject *Dtool_BulletWheel_get_rotation_819(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_rotation(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_rotation();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_rotation_819_comment =
  "C++ Interface:\n"
  "get_rotation(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_rotation_819_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_delta_rotation(void) const
 */
static PyObject *Dtool_BulletWheel_get_delta_rotation_820(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_delta_rotation(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_delta_rotation();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_delta_rotation_820_comment =
  "C++ Interface:\n"
  "get_delta_rotation(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_delta_rotation_820_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_engine_force(void) const
 */
static PyObject *Dtool_BulletWheel_get_engine_force_821(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_engine_force(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_engine_force();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_engine_force_821_comment =
  "C++ Interface:\n"
  "get_engine_force(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the amount of accelleration force currently applied.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_engine_force_821_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_brake(void) const
 */
static PyObject *Dtool_BulletWheel_get_brake_822(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_brake(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_brake();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_brake_822_comment =
  "C++ Interface:\n"
  "get_brake(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the amount of braking force currently applied.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_brake_822_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_skid_info(void) const
 */
static PyObject *Dtool_BulletWheel_get_skid_info_823(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_skid_info(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_skid_info();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_skid_info_823_comment =
  "C++ Interface:\n"
  "get_skid_info(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_skid_info_823_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_wheels_suspension_force(void) const
 */
static PyObject *Dtool_BulletWheel_get_wheels_suspension_force_824(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_wheels_suspension_force(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_wheels_suspension_force();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_wheels_suspension_force_824_comment =
  "C++ Interface:\n"
  "get_wheels_suspension_force(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_wheels_suspension_force_824_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_suspension_relative_velocity(void) const
 */
static PyObject *Dtool_BulletWheel_get_suspension_relative_velocity_825(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_suspension_relative_velocity(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_suspension_relative_velocity();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_suspension_relative_velocity_825_comment =
  "C++ Interface:\n"
  "get_suspension_relative_velocity(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_suspension_relative_velocity_825_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PN_stdfloat BulletWheel::get_clipped_inv_connection_point_cs(void) const
 */
static PyObject *Dtool_BulletWheel_get_clipped_inv_connection_point_cs_826(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PN_stdfloat BulletWheel::get_clipped_inv_connection_point_cs(void) const
  PN_stdfloat return_value = (*(const BulletWheel*)local_this).get_clipped_inv_connection_point_cs();
  if (Dtool_CheckErrorOccurred()) {
    return NULL;
  }
  return Dtool_WrapValue(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_clipped_inv_connection_point_cs_826_comment =
  "C++ Interface:\n"
  "get_clipped_inv_connection_point_cs(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_clipped_inv_connection_point_cs_826_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LPoint3 BulletWheel::get_chassis_connection_point_cs(void) const
 */
static PyObject *Dtool_BulletWheel_get_chassis_connection_point_cs_827(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-LPoint3 BulletWheel::get_chassis_connection_point_cs(void) const
  LPoint3 *return_value = new LPoint3((*(const BulletWheel*)local_this).get_chassis_connection_point_cs());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LPoint3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_chassis_connection_point_cs_827_comment =
  "C++ Interface:\n"
  "get_chassis_connection_point_cs(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the point where the wheel is connected to the chassis.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_chassis_connection_point_cs_827_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletWheel::get_wheel_direction_cs(void) const
 */
static PyObject *Dtool_BulletWheel_get_wheel_direction_cs_828(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletWheel::get_wheel_direction_cs(void) const
  LVector3 *return_value = new LVector3((*(const BulletWheel*)local_this).get_wheel_direction_cs());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_wheel_direction_cs_828_comment =
  "C++ Interface:\n"
  "get_wheel_direction_cs(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the wheel's forward vector relative to the chassis.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_wheel_direction_cs_828_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LVector3 BulletWheel::get_wheel_axle_cs(void) const
 */
static PyObject *Dtool_BulletWheel_get_wheel_axle_cs_829(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-LVector3 BulletWheel::get_wheel_axle_cs(void) const
  LVector3 *return_value = new LVector3((*(const BulletWheel*)local_this).get_wheel_axle_cs());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LVector3f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_wheel_axle_cs_829_comment =
  "C++ Interface:\n"
  "get_wheel_axle_cs(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the normal vector of the wheel axle.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_wheel_axle_cs_829_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * LMatrix4 BulletWheel::get_world_transform(void) const
 */
static PyObject *Dtool_BulletWheel_get_world_transform_830(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-LMatrix4 BulletWheel::get_world_transform(void) const
  LMatrix4 *return_value = new LMatrix4((*(const BulletWheel*)local_this).get_world_transform());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_LMatrix4f, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_world_transform_830_comment =
  "C++ Interface:\n"
  "get_world_transform(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_world_transform_830_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * bool BulletWheel::is_front_wheel(void) const
 */
static PyObject *Dtool_BulletWheel_is_front_wheel_831(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-bool BulletWheel::is_front_wheel(void) const
  bool return_value = (*(const BulletWheel*)local_this).is_front_wheel();
  return Dtool_Return_Bool(return_value);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_is_front_wheel_831_comment =
  "C++ Interface:\n"
  "is_front_wheel(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Determines if a wheel is steerable.\n"
  " */";
#else
static const char *Dtool_BulletWheel_is_front_wheel_831_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * PandaNode *BulletWheel::get_node(void) const
 */
static PyObject *Dtool_BulletWheel_get_node_832(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-PandaNode *BulletWheel::get_node(void) const
  PandaNode *return_value = (*(const BulletWheel*)local_this).get_node();
  if (return_value != (PandaNode *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (PandaNode *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_PandaNode, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_node_832_comment =
  "C++ Interface:\n"
  "get_node(BulletWheel self)\n"
  "\n"
  "/**\n"
  " * Returns the PandaNode which representates the visual appearance of this\n"
  " * wheel, if such a representation has been set previously.\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_node_832_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * BulletWheelRaycastInfo BulletWheel::get_raycast_info(void) const
 */
static PyObject *Dtool_BulletWheel_get_raycast_info_833(PyObject *self, PyObject *) {
  BulletWheel *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletWheel, (void **)&local_this)) {
    return NULL;
  }
  // 1-BulletWheelRaycastInfo BulletWheel::get_raycast_info(void) const
  BulletWheelRaycastInfo *return_value = new BulletWheelRaycastInfo((*(const BulletWheel*)local_this).get_raycast_info());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_BulletWheelRaycastInfo, true, false);
}

#ifndef NDEBUG
static const char *Dtool_BulletWheel_get_raycast_info_833_comment =
  "C++ Interface:\n"
  "get_raycast_info(BulletWheel self)\n"
  "\n"
  "/**\n"
  " *\n"
  " */";
#else
static const char *Dtool_BulletWheel_get_raycast_info_833_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline BulletWheel::BulletWheel(BulletWheel const &) = default
 */
static int Dtool_Init_BulletWheel(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "BulletWheel() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg = NULL;
  if (PyTuple_GET_SIZE(args) == 1) {
    arg = PyTuple_GET_ITEM(args, 0);
  } else if (kwds != NULL) {
    arg = PyDict_GetItemString(kwds, "param0");
  }
  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("Required argument 'param0' (pos 1) not found");
    return -1;
  }
  // 1-inline BulletWheel::BulletWheel(BulletWheel const &) = default
  BulletWheel const *arg_this = (BulletWheel *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_BulletWheel, 0, "BulletWheel.BulletWheel", true, true);
  if (arg_this != NULL) {
    BulletWheel *return_value = new BulletWheel(*arg_this);
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    if (Dtool_CheckErrorOccurred()) {
      delete return_value;
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_BulletWheel, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "BulletWheel(const BulletWheel param0)\n");
  }
  return -1;
}

static void *Dtool_UpcastInterface_BulletWheel(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_BulletWheel) {
    printf("BulletWheel ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  BulletWheel *local_this = (BulletWheel *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_BulletWheel) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_BulletWheel(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_BulletWheel) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python method tables for BulletRayHit (BulletRayHit)
 */
static PyMethodDef Dtool_Methods_BulletRayHit[] = {
  {"empty", &Dtool_BulletRayHit_empty_5, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletRayHit_empty_5_comment},
  {"get_node", &Dtool_BulletRayHit_get_node_6, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_node_6_comment},
  {"getNode", &Dtool_BulletRayHit_get_node_6, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_node_6_comment},
  {"get_hit_pos", &Dtool_BulletRayHit_get_hit_pos_7, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_hit_pos_7_comment},
  {"getHitPos", &Dtool_BulletRayHit_get_hit_pos_7, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_hit_pos_7_comment},
  {"get_hit_normal", &Dtool_BulletRayHit_get_hit_normal_8, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_hit_normal_8_comment},
  {"getHitNormal", &Dtool_BulletRayHit_get_hit_normal_8, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_hit_normal_8_comment},
  {"get_hit_fraction", &Dtool_BulletRayHit_get_hit_fraction_9, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_hit_fraction_9_comment},
  {"getHitFraction", &Dtool_BulletRayHit_get_hit_fraction_9, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_hit_fraction_9_comment},
  {"get_shape_part", &Dtool_BulletRayHit_get_shape_part_10, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_shape_part_10_comment},
  {"getShapePart", &Dtool_BulletRayHit_get_shape_part_10, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_shape_part_10_comment},
  {"get_triangle_index", &Dtool_BulletRayHit_get_triangle_index_11, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_triangle_index_11_comment},
  {"getTriangleIndex", &Dtool_BulletRayHit_get_triangle_index_11, METH_NOARGS, (const char *)Dtool_BulletRayHit_get_triangle_index_11_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletRayHit = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletRayHit = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletRayHit",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletRayHit,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletRayHit,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletRayHit,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletRayHit,
    PyType_GenericAlloc,
    Dtool_new_BulletRayHit,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletRayHit,
  Dtool_UpcastInterface_BulletRayHit,
  Dtool_DowncastInterface_BulletRayHit,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletRayHit(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletRayHit._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletRayHit._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletRayHit) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletRayHit)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletRayHit);
  }
}

/**
 * Python method tables for BulletAllHitsRayResult (BulletAllHitsRayResult)
 */
static PyMethodDef Dtool_Methods_BulletAllHitsRayResult[] = {
  {"empty", &Dtool_BulletAllHitsRayResult_empty_18, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletAllHitsRayResult_empty_18_comment},
  {"get_from_pos", &Dtool_BulletAllHitsRayResult_get_from_pos_19, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_from_pos_19_comment},
  {"getFromPos", &Dtool_BulletAllHitsRayResult_get_from_pos_19, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_from_pos_19_comment},
  {"get_to_pos", &Dtool_BulletAllHitsRayResult_get_to_pos_20, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_to_pos_20_comment},
  {"getToPos", &Dtool_BulletAllHitsRayResult_get_to_pos_20, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_to_pos_20_comment},
  {"has_hits", &Dtool_BulletAllHitsRayResult_has_hits_21, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_has_hits_21_comment},
  {"hasHits", &Dtool_BulletAllHitsRayResult_has_hits_21, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_has_hits_21_comment},
  {"get_closest_hit_fraction", &Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_22, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_22_comment},
  {"getClosestHitFraction", &Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_22, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_closest_hit_fraction_22_comment},
  {"get_num_hits", &Dtool_BulletAllHitsRayResult_get_num_hits_23, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_num_hits_23_comment},
  {"getNumHits", &Dtool_BulletAllHitsRayResult_get_num_hits_23, METH_NOARGS, (const char *)Dtool_BulletAllHitsRayResult_get_num_hits_23_comment},
  {"get_hit", &Dtool_BulletAllHitsRayResult_get_hit_24, METH_O, (const char *)Dtool_BulletAllHitsRayResult_get_hit_24_comment},
  {"getHit", &Dtool_BulletAllHitsRayResult_get_hit_24, METH_O, (const char *)Dtool_BulletAllHitsRayResult_get_hit_24_comment},
  {"get_hits", (PyCFunction) &MakeSeq_BulletAllHitsRayResult_get_hits, METH_NOARGS, NULL},
  { "getHits", (PyCFunction) &MakeSeq_BulletAllHitsRayResult_get_hits, METH_NOARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletAllHitsRayResult = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletAllHitsRayResult = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletAllHitsRayResult = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletAllHitsRayResult = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletAllHitsRayResult = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletAllHitsRayResult",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletAllHitsRayResult,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletAllHitsRayResult,
    &Dtool_SequenceMethods_BulletAllHitsRayResult,
    &Dtool_MappingMethods_BulletAllHitsRayResult,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletAllHitsRayResult,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletAllHitsRayResult,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletAllHitsRayResult,
    PyType_GenericAlloc,
    Dtool_new_BulletAllHitsRayResult,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletAllHitsRayResult,
  Dtool_UpcastInterface_BulletAllHitsRayResult,
  Dtool_DowncastInterface_BulletAllHitsRayResult,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletAllHitsRayResult(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletAllHitsRayResult._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletAllHitsRayResult._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletAllHitsRayResult) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletAllHitsRayResult)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletAllHitsRayResult);
  }
}

/**
 * Python method tables for BulletShape (BulletShape)
 */
static PyMethodDef Dtool_Methods_BulletShape[] = {
  {"is_polyhedral", &Dtool_BulletShape_is_polyhedral_29, METH_NOARGS, (const char *)Dtool_BulletShape_is_polyhedral_29_comment},
  {"isPolyhedral", &Dtool_BulletShape_is_polyhedral_29, METH_NOARGS, (const char *)Dtool_BulletShape_is_polyhedral_29_comment},
  {"is_convex", &Dtool_BulletShape_is_convex_30, METH_NOARGS, (const char *)Dtool_BulletShape_is_convex_30_comment},
  {"isConvex", &Dtool_BulletShape_is_convex_30, METH_NOARGS, (const char *)Dtool_BulletShape_is_convex_30_comment},
  {"is_convex_2d", &Dtool_BulletShape_is_convex_2d_31, METH_NOARGS, (const char *)Dtool_BulletShape_is_convex_2d_31_comment},
  {"isConvex2d", &Dtool_BulletShape_is_convex_2d_31, METH_NOARGS, (const char *)Dtool_BulletShape_is_convex_2d_31_comment},
  {"is_concave", &Dtool_BulletShape_is_concave_32, METH_NOARGS, (const char *)Dtool_BulletShape_is_concave_32_comment},
  {"isConcave", &Dtool_BulletShape_is_concave_32, METH_NOARGS, (const char *)Dtool_BulletShape_is_concave_32_comment},
  {"is_infinite", &Dtool_BulletShape_is_infinite_33, METH_NOARGS, (const char *)Dtool_BulletShape_is_infinite_33_comment},
  {"isInfinite", &Dtool_BulletShape_is_infinite_33, METH_NOARGS, (const char *)Dtool_BulletShape_is_infinite_33_comment},
  {"is_non_moving", &Dtool_BulletShape_is_non_moving_34, METH_NOARGS, (const char *)Dtool_BulletShape_is_non_moving_34_comment},
  {"isNonMoving", &Dtool_BulletShape_is_non_moving_34, METH_NOARGS, (const char *)Dtool_BulletShape_is_non_moving_34_comment},
  {"is_soft_body", &Dtool_BulletShape_is_soft_body_35, METH_NOARGS, (const char *)Dtool_BulletShape_is_soft_body_35_comment},
  {"isSoftBody", &Dtool_BulletShape_is_soft_body_35, METH_NOARGS, (const char *)Dtool_BulletShape_is_soft_body_35_comment},
  {"set_margin", &Dtool_BulletShape_set_margin_36, METH_O, (const char *)Dtool_BulletShape_set_margin_36_comment},
  {"setMargin", &Dtool_BulletShape_set_margin_36, METH_O, (const char *)Dtool_BulletShape_set_margin_36_comment},
  {"get_name", &Dtool_BulletShape_get_name_37, METH_NOARGS, (const char *)Dtool_BulletShape_get_name_37_comment},
  {"getName", &Dtool_BulletShape_get_name_37, METH_NOARGS, (const char *)Dtool_BulletShape_get_name_37_comment},
  {"get_margin", &Dtool_BulletShape_get_margin_38, METH_NOARGS, (const char *)Dtool_BulletShape_get_margin_38_comment},
  {"getMargin", &Dtool_BulletShape_get_margin_38, METH_NOARGS, (const char *)Dtool_BulletShape_get_margin_38_comment},
  {"get_shape_bounds", &Dtool_BulletShape_get_shape_bounds_39, METH_NOARGS, (const char *)Dtool_BulletShape_get_shape_bounds_39_comment},
  {"getShapeBounds", &Dtool_BulletShape_get_shape_bounds_39, METH_NOARGS, (const char *)Dtool_BulletShape_get_shape_bounds_39_comment},
  {"get_class_type", &Dtool_BulletShape_get_class_type_40, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletShape_get_class_type_40_comment},
  {"getClassType", &Dtool_BulletShape_get_class_type_40, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletShape_get_class_type_40_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletShape,
    &Dtool_SequenceMethods_BulletShape,
    &Dtool_MappingMethods_BulletShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletShape,
    PyType_GenericAlloc,
    Dtool_new_BulletShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletShape,
  Dtool_UpcastInterface_BulletShape,
  Dtool_DowncastInterface_BulletShape,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_TypedWritableReferenceCount != NULL);
    assert(Dtool_Ptr_TypedWritableReferenceCount->_Dtool_ModuleClassInit != NULL);
    Dtool_Ptr_TypedWritableReferenceCount->_Dtool_ModuleClassInit(NULL);
    Dtool_BulletShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_TypedWritableReferenceCount);
    PyObject *dict = PyDict_New();
    Dtool_BulletShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletShape);
  }
}

/**
 * Python method tables for BulletBaseCharacterControllerNode (BulletBaseCharacterControllerNode)
 */
static PyMethodDef Dtool_Methods_BulletBaseCharacterControllerNode[] = {
  {"get_class_type", &Dtool_BulletBaseCharacterControllerNode_get_class_type_43, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletBaseCharacterControllerNode_get_class_type_43_comment},
  {"getClassType", &Dtool_BulletBaseCharacterControllerNode_get_class_type_43, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletBaseCharacterControllerNode_get_class_type_43_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletBaseCharacterControllerNode = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletBaseCharacterControllerNode = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletBaseCharacterControllerNode = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletBaseCharacterControllerNode = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletBaseCharacterControllerNode = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletBaseCharacterControllerNode",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletBaseCharacterControllerNode,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletBaseCharacterControllerNode,
    &Dtool_SequenceMethods_BulletBaseCharacterControllerNode,
    &Dtool_MappingMethods_BulletBaseCharacterControllerNode,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletBaseCharacterControllerNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletBaseCharacterControllerNode,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletBaseCharacterControllerNode,
    PyType_GenericAlloc,
    Dtool_new_BulletBaseCharacterControllerNode,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletBaseCharacterControllerNode,
  Dtool_UpcastInterface_BulletBaseCharacterControllerNode,
  Dtool_DowncastInterface_BulletBaseCharacterControllerNode,
  (CoerceFunction)Dtool_ConstCoerce_BulletBaseCharacterControllerNode,
  (CoerceFunction)Dtool_Coerce_BulletBaseCharacterControllerNode,
};

static void Dtool_PyModuleClassInit_BulletBaseCharacterControllerNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_PandaNode != NULL);
    assert(Dtool_Ptr_PandaNode->_Dtool_ModuleClassInit != NULL);
    Dtool_Ptr_PandaNode->_Dtool_ModuleClassInit(NULL);
    Dtool_BulletBaseCharacterControllerNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_PandaNode);
    PyObject *dict = PyDict_New();
    Dtool_BulletBaseCharacterControllerNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletBaseCharacterControllerNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletBaseCharacterControllerNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletBaseCharacterControllerNode);
  }
}

/**
 * Python method tables for BulletBodyNode (BulletBodyNode)
 */
static PyMethodDef Dtool_Methods_BulletBodyNode[] = {
  {"add_shape", (PyCFunction) &Dtool_BulletBodyNode_add_shape_46, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletBodyNode_add_shape_46_comment},
  {"addShape", (PyCFunction) &Dtool_BulletBodyNode_add_shape_46, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletBodyNode_add_shape_46_comment},
  {"remove_shape", &Dtool_BulletBodyNode_remove_shape_47, METH_O, (const char *)Dtool_BulletBodyNode_remove_shape_47_comment},
  {"removeShape", &Dtool_BulletBodyNode_remove_shape_47, METH_O, (const char *)Dtool_BulletBodyNode_remove_shape_47_comment},
  {"get_num_shapes", &Dtool_BulletBodyNode_get_num_shapes_48, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_num_shapes_48_comment},
  {"getNumShapes", &Dtool_BulletBodyNode_get_num_shapes_48, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_num_shapes_48_comment},
  {"get_shape", &Dtool_BulletBodyNode_get_shape_49, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_49_comment},
  {"getShape", &Dtool_BulletBodyNode_get_shape_49, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_49_comment},
  {"get_shape_pos", &Dtool_BulletBodyNode_get_shape_pos_51, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_pos_51_comment},
  {"getShapePos", &Dtool_BulletBodyNode_get_shape_pos_51, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_pos_51_comment},
  {"get_shape_mat", &Dtool_BulletBodyNode_get_shape_mat_52, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_mat_52_comment},
  {"getShapeMat", &Dtool_BulletBodyNode_get_shape_mat_52, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_mat_52_comment},
  {"get_shape_transform", &Dtool_BulletBodyNode_get_shape_transform_53, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_transform_53_comment},
  {"getShapeTransform", &Dtool_BulletBodyNode_get_shape_transform_53, METH_O, (const char *)Dtool_BulletBodyNode_get_shape_transform_53_comment},
  {"get_shape_bounds", &Dtool_BulletBodyNode_get_shape_bounds_54, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_shape_bounds_54_comment},
  {"getShapeBounds", &Dtool_BulletBodyNode_get_shape_bounds_54, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_shape_bounds_54_comment},
  {"add_shapes_from_collision_solids", &Dtool_BulletBodyNode_add_shapes_from_collision_solids_55, METH_O, (const char *)Dtool_BulletBodyNode_add_shapes_from_collision_solids_55_comment},
  {"addShapesFromCollisionSolids", &Dtool_BulletBodyNode_add_shapes_from_collision_solids_55, METH_O, (const char *)Dtool_BulletBodyNode_add_shapes_from_collision_solids_55_comment},
  {"is_static", &Dtool_BulletBodyNode_is_static_56, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_static_56_comment},
  {"isStatic", &Dtool_BulletBodyNode_is_static_56, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_static_56_comment},
  {"is_kinematic", &Dtool_BulletBodyNode_is_kinematic_57, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_kinematic_57_comment},
  {"isKinematic", &Dtool_BulletBodyNode_is_kinematic_57, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_kinematic_57_comment},
  {"set_static", &Dtool_BulletBodyNode_set_static_58, METH_O, (const char *)Dtool_BulletBodyNode_set_static_58_comment},
  {"setStatic", &Dtool_BulletBodyNode_set_static_58, METH_O, (const char *)Dtool_BulletBodyNode_set_static_58_comment},
  {"set_kinematic", &Dtool_BulletBodyNode_set_kinematic_59, METH_O, (const char *)Dtool_BulletBodyNode_set_kinematic_59_comment},
  {"setKinematic", &Dtool_BulletBodyNode_set_kinematic_59, METH_O, (const char *)Dtool_BulletBodyNode_set_kinematic_59_comment},
  {"set_into_collide_mask", &Dtool_BulletBodyNode_set_into_collide_mask_60, METH_O, (const char *)Dtool_BulletBodyNode_set_into_collide_mask_60_comment},
  {"setIntoCollideMask", &Dtool_BulletBodyNode_set_into_collide_mask_60, METH_O, (const char *)Dtool_BulletBodyNode_set_into_collide_mask_60_comment},
  {"notify_collisions", &Dtool_BulletBodyNode_notify_collisions_61, METH_O, (const char *)Dtool_BulletBodyNode_notify_collisions_61_comment},
  {"notifyCollisions", &Dtool_BulletBodyNode_notify_collisions_61, METH_O, (const char *)Dtool_BulletBodyNode_notify_collisions_61_comment},
  {"notifies_collisions", &Dtool_BulletBodyNode_notifies_collisions_62, METH_NOARGS, (const char *)Dtool_BulletBodyNode_notifies_collisions_62_comment},
  {"notifiesCollisions", &Dtool_BulletBodyNode_notifies_collisions_62, METH_NOARGS, (const char *)Dtool_BulletBodyNode_notifies_collisions_62_comment},
  {"set_collision_response", &Dtool_BulletBodyNode_set_collision_response_63, METH_O, (const char *)Dtool_BulletBodyNode_set_collision_response_63_comment},
  {"setCollisionResponse", &Dtool_BulletBodyNode_set_collision_response_63, METH_O, (const char *)Dtool_BulletBodyNode_set_collision_response_63_comment},
  {"get_collision_response", &Dtool_BulletBodyNode_get_collision_response_64, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_collision_response_64_comment},
  {"getCollisionResponse", &Dtool_BulletBodyNode_get_collision_response_64, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_collision_response_64_comment},
  {"check_collision_with", &Dtool_BulletBodyNode_check_collision_with_65, METH_O, (const char *)Dtool_BulletBodyNode_check_collision_with_65_comment},
  {"checkCollisionWith", &Dtool_BulletBodyNode_check_collision_with_65, METH_O, (const char *)Dtool_BulletBodyNode_check_collision_with_65_comment},
  {"has_contact_response", &Dtool_BulletBodyNode_has_contact_response_66, METH_NOARGS, (const char *)Dtool_BulletBodyNode_has_contact_response_66_comment},
  {"hasContactResponse", &Dtool_BulletBodyNode_has_contact_response_66, METH_NOARGS, (const char *)Dtool_BulletBodyNode_has_contact_response_66_comment},
  {"get_contact_processing_threshold", &Dtool_BulletBodyNode_get_contact_processing_threshold_67, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_contact_processing_threshold_67_comment},
  {"getContactProcessingThreshold", &Dtool_BulletBodyNode_get_contact_processing_threshold_67, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_contact_processing_threshold_67_comment},
  {"set_contact_processing_threshold", &Dtool_BulletBodyNode_set_contact_processing_threshold_68, METH_O, (const char *)Dtool_BulletBodyNode_set_contact_processing_threshold_68_comment},
  {"setContactProcessingThreshold", &Dtool_BulletBodyNode_set_contact_processing_threshold_68, METH_O, (const char *)Dtool_BulletBodyNode_set_contact_processing_threshold_68_comment},
  {"is_active", &Dtool_BulletBodyNode_is_active_69, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_active_69_comment},
  {"isActive", &Dtool_BulletBodyNode_is_active_69, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_active_69_comment},
  {"set_active", (PyCFunction) &Dtool_BulletBodyNode_set_active_70, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletBodyNode_set_active_70_comment},
  {"setActive", (PyCFunction) &Dtool_BulletBodyNode_set_active_70, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletBodyNode_set_active_70_comment},
  {"set_deactivation_time", &Dtool_BulletBodyNode_set_deactivation_time_71, METH_O, (const char *)Dtool_BulletBodyNode_set_deactivation_time_71_comment},
  {"setDeactivationTime", &Dtool_BulletBodyNode_set_deactivation_time_71, METH_O, (const char *)Dtool_BulletBodyNode_set_deactivation_time_71_comment},
  {"get_deactivation_time", &Dtool_BulletBodyNode_get_deactivation_time_72, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_deactivation_time_72_comment},
  {"getDeactivationTime", &Dtool_BulletBodyNode_get_deactivation_time_72, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_deactivation_time_72_comment},
  {"set_deactivation_enabled", &Dtool_BulletBodyNode_set_deactivation_enabled_73, METH_O, (const char *)Dtool_BulletBodyNode_set_deactivation_enabled_73_comment},
  {"setDeactivationEnabled", &Dtool_BulletBodyNode_set_deactivation_enabled_73, METH_O, (const char *)Dtool_BulletBodyNode_set_deactivation_enabled_73_comment},
  {"is_deactivation_enabled", &Dtool_BulletBodyNode_is_deactivation_enabled_74, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_deactivation_enabled_74_comment},
  {"isDeactivationEnabled", &Dtool_BulletBodyNode_is_deactivation_enabled_74, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_deactivation_enabled_74_comment},
  {"set_debug_enabled", &Dtool_BulletBodyNode_set_debug_enabled_75, METH_O, (const char *)Dtool_BulletBodyNode_set_debug_enabled_75_comment},
  {"setDebugEnabled", &Dtool_BulletBodyNode_set_debug_enabled_75, METH_O, (const char *)Dtool_BulletBodyNode_set_debug_enabled_75_comment},
  {"is_debug_enabled", &Dtool_BulletBodyNode_is_debug_enabled_76, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_debug_enabled_76_comment},
  {"isDebugEnabled", &Dtool_BulletBodyNode_is_debug_enabled_76, METH_NOARGS, (const char *)Dtool_BulletBodyNode_is_debug_enabled_76_comment},
  {"get_restitution", &Dtool_BulletBodyNode_get_restitution_77, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_restitution_77_comment},
  {"getRestitution", &Dtool_BulletBodyNode_get_restitution_77, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_restitution_77_comment},
  {"set_restitution", &Dtool_BulletBodyNode_set_restitution_78, METH_O, (const char *)Dtool_BulletBodyNode_set_restitution_78_comment},
  {"setRestitution", &Dtool_BulletBodyNode_set_restitution_78, METH_O, (const char *)Dtool_BulletBodyNode_set_restitution_78_comment},
  {"get_friction", &Dtool_BulletBodyNode_get_friction_79, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_friction_79_comment},
  {"getFriction", &Dtool_BulletBodyNode_get_friction_79, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_friction_79_comment},
  {"set_friction", &Dtool_BulletBodyNode_set_friction_80, METH_O, (const char *)Dtool_BulletBodyNode_set_friction_80_comment},
  {"setFriction", &Dtool_BulletBodyNode_set_friction_80, METH_O, (const char *)Dtool_BulletBodyNode_set_friction_80_comment},
  {"has_anisotropic_friction", &Dtool_BulletBodyNode_has_anisotropic_friction_81, METH_NOARGS, (const char *)Dtool_BulletBodyNode_has_anisotropic_friction_81_comment},
  {"hasAnisotropicFriction", &Dtool_BulletBodyNode_has_anisotropic_friction_81, METH_NOARGS, (const char *)Dtool_BulletBodyNode_has_anisotropic_friction_81_comment},
  {"set_anisotropic_friction", &Dtool_BulletBodyNode_set_anisotropic_friction_82, METH_O, (const char *)Dtool_BulletBodyNode_set_anisotropic_friction_82_comment},
  {"setAnisotropicFriction", &Dtool_BulletBodyNode_set_anisotropic_friction_82, METH_O, (const char *)Dtool_BulletBodyNode_set_anisotropic_friction_82_comment},
  {"get_anisotropic_friction", &Dtool_BulletBodyNode_get_anisotropic_friction_83, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_anisotropic_friction_83_comment},
  {"getAnisotropicFriction", &Dtool_BulletBodyNode_get_anisotropic_friction_83, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_anisotropic_friction_83_comment},
  {"get_ccd_swept_sphere_radius", &Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_84, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_84_comment},
  {"getCcdSweptSphereRadius", &Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_84, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_ccd_swept_sphere_radius_84_comment},
  {"get_ccd_motion_threshold", &Dtool_BulletBodyNode_get_ccd_motion_threshold_85, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_ccd_motion_threshold_85_comment},
  {"getCcdMotionThreshold", &Dtool_BulletBodyNode_get_ccd_motion_threshold_85, METH_NOARGS, (const char *)Dtool_BulletBodyNode_get_ccd_motion_threshold_85_comment},
  {"set_ccd_swept_sphere_radius", &Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_86, METH_O, (const char *)Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_86_comment},
  {"setCcdSweptSphereRadius", &Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_86, METH_O, (const char *)Dtool_BulletBodyNode_set_ccd_swept_sphere_radius_86_comment},
  {"set_ccd_motion_threshold", &Dtool_BulletBodyNode_set_ccd_motion_threshold_87, METH_O, (const char *)Dtool_BulletBodyNode_set_ccd_motion_threshold_87_comment},
  {"setCcdMotionThreshold", &Dtool_BulletBodyNode_set_ccd_motion_threshold_87, METH_O, (const char *)Dtool_BulletBodyNode_set_ccd_motion_threshold_87_comment},
  {"set_transform_dirty", &Dtool_BulletBodyNode_set_transform_dirty_88, METH_NOARGS, (const char *)Dtool_BulletBodyNode_set_transform_dirty_88_comment},
  {"setTransformDirty", &Dtool_BulletBodyNode_set_transform_dirty_88, METH_NOARGS, (const char *)Dtool_BulletBodyNode_set_transform_dirty_88_comment},
  {"get_class_type", &Dtool_BulletBodyNode_get_class_type_89, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletBodyNode_get_class_type_89_comment},
  {"getClassType", &Dtool_BulletBodyNode_get_class_type_89, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletBodyNode_get_class_type_89_comment},
  {"get_shapes", (PyCFunction) &MakeSeq_BulletBodyNode_get_shapes, METH_NOARGS, NULL},
  { "getShapes", (PyCFunction) &MakeSeq_BulletBodyNode_get_shapes, METH_NOARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletBodyNode = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletBodyNode = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletBodyNode = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletBodyNode = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletBodyNode = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletBodyNode",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletBodyNode,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletBodyNode,
    &Dtool_SequenceMethods_BulletBodyNode,
    &Dtool_MappingMethods_BulletBodyNode,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletBodyNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletBodyNode,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletBodyNode,
    PyType_GenericAlloc,
    Dtool_new_BulletBodyNode,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletBodyNode,
  Dtool_UpcastInterface_BulletBodyNode,
  Dtool_DowncastInterface_BulletBodyNode,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletBodyNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_PandaNode != NULL);
    assert(Dtool_Ptr_PandaNode->_Dtool_ModuleClassInit != NULL);
    Dtool_Ptr_PandaNode->_Dtool_ModuleClassInit(NULL);
    Dtool_BulletBodyNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_PandaNode);
    PyObject *dict = PyDict_New();
    Dtool_BulletBodyNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletBodyNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletBodyNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletBodyNode);
  }
}

/**
 * Python method tables for BulletBoxShape (BulletBoxShape)
 */
static PyMethodDef Dtool_Methods_BulletBoxShape[] = {
  {"assign", &Dtool_BulletBoxShape_operator_92, METH_O, (const char *)Dtool_BulletBoxShape_operator_92_comment},
  {"get_half_extents_without_margin", &Dtool_BulletBoxShape_get_half_extents_without_margin_93, METH_NOARGS, (const char *)Dtool_BulletBoxShape_get_half_extents_without_margin_93_comment},
  {"getHalfExtentsWithoutMargin", &Dtool_BulletBoxShape_get_half_extents_without_margin_93, METH_NOARGS, (const char *)Dtool_BulletBoxShape_get_half_extents_without_margin_93_comment},
  {"get_half_extents_with_margin", &Dtool_BulletBoxShape_get_half_extents_with_margin_94, METH_NOARGS, (const char *)Dtool_BulletBoxShape_get_half_extents_with_margin_94_comment},
  {"getHalfExtentsWithMargin", &Dtool_BulletBoxShape_get_half_extents_with_margin_94, METH_NOARGS, (const char *)Dtool_BulletBoxShape_get_half_extents_with_margin_94_comment},
  {"make_from_solid", &Dtool_BulletBoxShape_make_from_solid_95, METH_O | METH_STATIC, (const char *)Dtool_BulletBoxShape_make_from_solid_95_comment},
  {"makeFromSolid", &Dtool_BulletBoxShape_make_from_solid_95, METH_O | METH_STATIC, (const char *)Dtool_BulletBoxShape_make_from_solid_95_comment},
  {"get_class_type", &Dtool_BulletBoxShape_get_class_type_96, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletBoxShape_get_class_type_96_comment},
  {"getClassType", &Dtool_BulletBoxShape_get_class_type_96, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletBoxShape_get_class_type_96_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletBoxShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletBoxShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletBoxShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletBoxShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletBoxShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletBoxShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletBoxShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletBoxShape,
    &Dtool_SequenceMethods_BulletBoxShape,
    &Dtool_MappingMethods_BulletBoxShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletBoxShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletBoxShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletBoxShape,
    PyType_GenericAlloc,
    Dtool_new_BulletBoxShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletBoxShape,
  Dtool_UpcastInterface_BulletBoxShape,
  Dtool_DowncastInterface_BulletBoxShape,
  (CoerceFunction)Dtool_ConstCoerce_BulletBoxShape,
  (CoerceFunction)Dtool_Coerce_BulletBoxShape,
};

static void Dtool_PyModuleClassInit_BulletBoxShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletBoxShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletBoxShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletBoxShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletBoxShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletBoxShape);
  }
}

/**
 * Python method tables for BulletCapsuleShape (BulletCapsuleShape)
 */
static PyMethodDef Dtool_Methods_BulletCapsuleShape[] = {
  {"assign", &Dtool_BulletCapsuleShape_operator_99, METH_O, (const char *)Dtool_BulletCapsuleShape_operator_99_comment},
  {"get_radius", &Dtool_BulletCapsuleShape_get_radius_100, METH_NOARGS, (const char *)Dtool_BulletCapsuleShape_get_radius_100_comment},
  {"getRadius", &Dtool_BulletCapsuleShape_get_radius_100, METH_NOARGS, (const char *)Dtool_BulletCapsuleShape_get_radius_100_comment},
  {"get_half_height", &Dtool_BulletCapsuleShape_get_half_height_101, METH_NOARGS, (const char *)Dtool_BulletCapsuleShape_get_half_height_101_comment},
  {"getHalfHeight", &Dtool_BulletCapsuleShape_get_half_height_101, METH_NOARGS, (const char *)Dtool_BulletCapsuleShape_get_half_height_101_comment},
  {"get_class_type", &Dtool_BulletCapsuleShape_get_class_type_102, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletCapsuleShape_get_class_type_102_comment},
  {"getClassType", &Dtool_BulletCapsuleShape_get_class_type_102, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletCapsuleShape_get_class_type_102_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletCapsuleShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletCapsuleShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletCapsuleShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletCapsuleShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletCapsuleShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletCapsuleShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletCapsuleShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletCapsuleShape,
    &Dtool_SequenceMethods_BulletCapsuleShape,
    &Dtool_MappingMethods_BulletCapsuleShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletCapsuleShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletCapsuleShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletCapsuleShape,
    PyType_GenericAlloc,
    Dtool_new_BulletCapsuleShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletCapsuleShape,
  Dtool_UpcastInterface_BulletCapsuleShape,
  Dtool_DowncastInterface_BulletCapsuleShape,
  (CoerceFunction)Dtool_ConstCoerce_BulletCapsuleShape,
  (CoerceFunction)Dtool_Coerce_BulletCapsuleShape,
};

static void Dtool_PyModuleClassInit_BulletCapsuleShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletCapsuleShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletCapsuleShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletCapsuleShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletCapsuleShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletCapsuleShape);
  }
}

/**
 * Python method tables for BulletCharacterControllerNode (BulletCharacterControllerNode)
 */
static PyMethodDef Dtool_Methods_BulletCharacterControllerNode[] = {
  {"set_linear_movement", (PyCFunction) &Dtool_BulletCharacterControllerNode_set_linear_movement_105, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletCharacterControllerNode_set_linear_movement_105_comment},
  {"setLinearMovement", (PyCFunction) &Dtool_BulletCharacterControllerNode_set_linear_movement_105, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletCharacterControllerNode_set_linear_movement_105_comment},
  {"set_angular_movement", &Dtool_BulletCharacterControllerNode_set_angular_movement_106, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_angular_movement_106_comment},
  {"setAngularMovement", &Dtool_BulletCharacterControllerNode_set_angular_movement_106, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_angular_movement_106_comment},
  {"get_shape", &Dtool_BulletCharacterControllerNode_get_shape_107, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_get_shape_107_comment},
  {"getShape", &Dtool_BulletCharacterControllerNode_get_shape_107, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_get_shape_107_comment},
  {"get_gravity", &Dtool_BulletCharacterControllerNode_get_gravity_108, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_get_gravity_108_comment},
  {"getGravity", &Dtool_BulletCharacterControllerNode_get_gravity_108, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_get_gravity_108_comment},
  {"get_max_slope", &Dtool_BulletCharacterControllerNode_get_max_slope_109, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_get_max_slope_109_comment},
  {"getMaxSlope", &Dtool_BulletCharacterControllerNode_get_max_slope_109, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_get_max_slope_109_comment},
  {"set_fall_speed", &Dtool_BulletCharacterControllerNode_set_fall_speed_110, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_fall_speed_110_comment},
  {"setFallSpeed", &Dtool_BulletCharacterControllerNode_set_fall_speed_110, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_fall_speed_110_comment},
  {"set_jump_speed", &Dtool_BulletCharacterControllerNode_set_jump_speed_111, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_jump_speed_111_comment},
  {"setJumpSpeed", &Dtool_BulletCharacterControllerNode_set_jump_speed_111, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_jump_speed_111_comment},
  {"set_max_jump_height", &Dtool_BulletCharacterControllerNode_set_max_jump_height_112, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_max_jump_height_112_comment},
  {"setMaxJumpHeight", &Dtool_BulletCharacterControllerNode_set_max_jump_height_112, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_max_jump_height_112_comment},
  {"set_max_slope", &Dtool_BulletCharacterControllerNode_set_max_slope_113, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_max_slope_113_comment},
  {"setMaxSlope", &Dtool_BulletCharacterControllerNode_set_max_slope_113, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_max_slope_113_comment},
  {"set_gravity", &Dtool_BulletCharacterControllerNode_set_gravity_114, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_gravity_114_comment},
  {"setGravity", &Dtool_BulletCharacterControllerNode_set_gravity_114, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_gravity_114_comment},
  {"set_use_ghost_sweep_test", &Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_115, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_115_comment},
  {"setUseGhostSweepTest", &Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_115, METH_O, (const char *)Dtool_BulletCharacterControllerNode_set_use_ghost_sweep_test_115_comment},
  {"is_on_ground", &Dtool_BulletCharacterControllerNode_is_on_ground_116, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_is_on_ground_116_comment},
  {"isOnGround", &Dtool_BulletCharacterControllerNode_is_on_ground_116, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_is_on_ground_116_comment},
  {"can_jump", &Dtool_BulletCharacterControllerNode_can_jump_117, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_can_jump_117_comment},
  {"canJump", &Dtool_BulletCharacterControllerNode_can_jump_117, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_can_jump_117_comment},
  {"do_jump", &Dtool_BulletCharacterControllerNode_do_jump_118, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_do_jump_118_comment},
  {"doJump", &Dtool_BulletCharacterControllerNode_do_jump_118, METH_NOARGS, (const char *)Dtool_BulletCharacterControllerNode_do_jump_118_comment},
  {"get_class_type", &Dtool_BulletCharacterControllerNode_get_class_type_119, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletCharacterControllerNode_get_class_type_119_comment},
  {"getClassType", &Dtool_BulletCharacterControllerNode_get_class_type_119, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletCharacterControllerNode_get_class_type_119_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletCharacterControllerNode = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletCharacterControllerNode = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletCharacterControllerNode = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletCharacterControllerNode = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletCharacterControllerNode = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletCharacterControllerNode",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletCharacterControllerNode,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletCharacterControllerNode,
    &Dtool_SequenceMethods_BulletCharacterControllerNode,
    &Dtool_MappingMethods_BulletCharacterControllerNode,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletCharacterControllerNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletCharacterControllerNode,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletCharacterControllerNode,
    PyType_GenericAlloc,
    Dtool_new_BulletCharacterControllerNode,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletCharacterControllerNode,
  Dtool_UpcastInterface_BulletCharacterControllerNode,
  Dtool_DowncastInterface_BulletCharacterControllerNode,
  (CoerceFunction)Dtool_ConstCoerce_BulletCharacterControllerNode,
  (CoerceFunction)Dtool_Coerce_BulletCharacterControllerNode,
};

static void Dtool_PyModuleClassInit_BulletCharacterControllerNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletBaseCharacterControllerNode(NULL);
    Dtool_BulletCharacterControllerNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletBaseCharacterControllerNode);
    PyObject *dict = PyDict_New();
    Dtool_BulletCharacterControllerNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletCharacterControllerNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletCharacterControllerNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletCharacterControllerNode);
  }
}

/**
 * Python method tables for BulletClosestHitRayResult (BulletClosestHitRayResult)
 */
static PyMethodDef Dtool_Methods_BulletClosestHitRayResult[] = {
  {"empty", &Dtool_BulletClosestHitRayResult_empty_124, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletClosestHitRayResult_empty_124_comment},
  {"get_from_pos", &Dtool_BulletClosestHitRayResult_get_from_pos_125, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_from_pos_125_comment},
  {"getFromPos", &Dtool_BulletClosestHitRayResult_get_from_pos_125, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_from_pos_125_comment},
  {"get_to_pos", &Dtool_BulletClosestHitRayResult_get_to_pos_126, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_to_pos_126_comment},
  {"getToPos", &Dtool_BulletClosestHitRayResult_get_to_pos_126, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_to_pos_126_comment},
  {"has_hit", &Dtool_BulletClosestHitRayResult_has_hit_127, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_has_hit_127_comment},
  {"hasHit", &Dtool_BulletClosestHitRayResult_has_hit_127, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_has_hit_127_comment},
  {"get_node", &Dtool_BulletClosestHitRayResult_get_node_128, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_node_128_comment},
  {"getNode", &Dtool_BulletClosestHitRayResult_get_node_128, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_node_128_comment},
  {"get_hit_pos", &Dtool_BulletClosestHitRayResult_get_hit_pos_129, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_hit_pos_129_comment},
  {"getHitPos", &Dtool_BulletClosestHitRayResult_get_hit_pos_129, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_hit_pos_129_comment},
  {"get_hit_normal", &Dtool_BulletClosestHitRayResult_get_hit_normal_130, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_hit_normal_130_comment},
  {"getHitNormal", &Dtool_BulletClosestHitRayResult_get_hit_normal_130, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_hit_normal_130_comment},
  {"get_hit_fraction", &Dtool_BulletClosestHitRayResult_get_hit_fraction_131, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_hit_fraction_131_comment},
  {"getHitFraction", &Dtool_BulletClosestHitRayResult_get_hit_fraction_131, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_hit_fraction_131_comment},
  {"get_shape_part", &Dtool_BulletClosestHitRayResult_get_shape_part_132, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_shape_part_132_comment},
  {"getShapePart", &Dtool_BulletClosestHitRayResult_get_shape_part_132, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_shape_part_132_comment},
  {"get_triangle_index", &Dtool_BulletClosestHitRayResult_get_triangle_index_133, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_triangle_index_133_comment},
  {"getTriangleIndex", &Dtool_BulletClosestHitRayResult_get_triangle_index_133, METH_NOARGS, (const char *)Dtool_BulletClosestHitRayResult_get_triangle_index_133_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletClosestHitRayResult = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletClosestHitRayResult = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletClosestHitRayResult = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletClosestHitRayResult = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletClosestHitRayResult = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletClosestHitRayResult",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletClosestHitRayResult,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletClosestHitRayResult,
    &Dtool_SequenceMethods_BulletClosestHitRayResult,
    &Dtool_MappingMethods_BulletClosestHitRayResult,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletClosestHitRayResult,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletClosestHitRayResult,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletClosestHitRayResult,
    PyType_GenericAlloc,
    Dtool_new_BulletClosestHitRayResult,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletClosestHitRayResult,
  Dtool_UpcastInterface_BulletClosestHitRayResult,
  Dtool_DowncastInterface_BulletClosestHitRayResult,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletClosestHitRayResult(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletClosestHitRayResult._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletClosestHitRayResult._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletClosestHitRayResult) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletClosestHitRayResult)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletClosestHitRayResult);
  }
}

/**
 * Python method tables for BulletClosestHitSweepResult (BulletClosestHitSweepResult)
 */
static PyMethodDef Dtool_Methods_BulletClosestHitSweepResult[] = {
  {"empty", &Dtool_BulletClosestHitSweepResult_empty_140, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletClosestHitSweepResult_empty_140_comment},
  {"get_from_pos", &Dtool_BulletClosestHitSweepResult_get_from_pos_141, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_from_pos_141_comment},
  {"getFromPos", &Dtool_BulletClosestHitSweepResult_get_from_pos_141, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_from_pos_141_comment},
  {"get_to_pos", &Dtool_BulletClosestHitSweepResult_get_to_pos_142, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_to_pos_142_comment},
  {"getToPos", &Dtool_BulletClosestHitSweepResult_get_to_pos_142, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_to_pos_142_comment},
  {"has_hit", &Dtool_BulletClosestHitSweepResult_has_hit_143, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_has_hit_143_comment},
  {"hasHit", &Dtool_BulletClosestHitSweepResult_has_hit_143, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_has_hit_143_comment},
  {"get_node", &Dtool_BulletClosestHitSweepResult_get_node_144, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_node_144_comment},
  {"getNode", &Dtool_BulletClosestHitSweepResult_get_node_144, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_node_144_comment},
  {"get_hit_pos", &Dtool_BulletClosestHitSweepResult_get_hit_pos_145, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_hit_pos_145_comment},
  {"getHitPos", &Dtool_BulletClosestHitSweepResult_get_hit_pos_145, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_hit_pos_145_comment},
  {"get_hit_normal", &Dtool_BulletClosestHitSweepResult_get_hit_normal_146, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_hit_normal_146_comment},
  {"getHitNormal", &Dtool_BulletClosestHitSweepResult_get_hit_normal_146, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_hit_normal_146_comment},
  {"get_hit_fraction", &Dtool_BulletClosestHitSweepResult_get_hit_fraction_147, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_hit_fraction_147_comment},
  {"getHitFraction", &Dtool_BulletClosestHitSweepResult_get_hit_fraction_147, METH_NOARGS, (const char *)Dtool_BulletClosestHitSweepResult_get_hit_fraction_147_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletClosestHitSweepResult = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletClosestHitSweepResult = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletClosestHitSweepResult = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletClosestHitSweepResult = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletClosestHitSweepResult = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletClosestHitSweepResult",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletClosestHitSweepResult,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletClosestHitSweepResult,
    &Dtool_SequenceMethods_BulletClosestHitSweepResult,
    &Dtool_MappingMethods_BulletClosestHitSweepResult,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletClosestHitSweepResult,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletClosestHitSweepResult,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletClosestHitSweepResult,
    PyType_GenericAlloc,
    Dtool_new_BulletClosestHitSweepResult,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletClosestHitSweepResult,
  Dtool_UpcastInterface_BulletClosestHitSweepResult,
  Dtool_DowncastInterface_BulletClosestHitSweepResult,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletClosestHitSweepResult(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletClosestHitSweepResult._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletClosestHitSweepResult._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletClosestHitSweepResult) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletClosestHitSweepResult)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletClosestHitSweepResult);
  }
}

/**
 * Python method tables for BulletConeShape (BulletConeShape)
 */
static PyMethodDef Dtool_Methods_BulletConeShape[] = {
  {"assign", &Dtool_BulletConeShape_operator_152, METH_O, (const char *)Dtool_BulletConeShape_operator_152_comment},
  {"get_radius", &Dtool_BulletConeShape_get_radius_153, METH_NOARGS, (const char *)Dtool_BulletConeShape_get_radius_153_comment},
  {"getRadius", &Dtool_BulletConeShape_get_radius_153, METH_NOARGS, (const char *)Dtool_BulletConeShape_get_radius_153_comment},
  {"get_height", &Dtool_BulletConeShape_get_height_154, METH_NOARGS, (const char *)Dtool_BulletConeShape_get_height_154_comment},
  {"getHeight", &Dtool_BulletConeShape_get_height_154, METH_NOARGS, (const char *)Dtool_BulletConeShape_get_height_154_comment},
  {"get_class_type", &Dtool_BulletConeShape_get_class_type_155, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConeShape_get_class_type_155_comment},
  {"getClassType", &Dtool_BulletConeShape_get_class_type_155, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConeShape_get_class_type_155_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletConeShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletConeShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletConeShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletConeShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletConeShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletConeShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletConeShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletConeShape,
    &Dtool_SequenceMethods_BulletConeShape,
    &Dtool_MappingMethods_BulletConeShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletConeShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletConeShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletConeShape,
    PyType_GenericAlloc,
    Dtool_new_BulletConeShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletConeShape,
  Dtool_UpcastInterface_BulletConeShape,
  Dtool_DowncastInterface_BulletConeShape,
  (CoerceFunction)Dtool_ConstCoerce_BulletConeShape,
  (CoerceFunction)Dtool_Coerce_BulletConeShape,
};

static void Dtool_PyModuleClassInit_BulletConeShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletConeShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletConeShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletConeShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletConeShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletConeShape);
  }
}

/**
 * Python method tables for BulletConstraint (BulletConstraint)
 */
static PyMethodDef Dtool_Methods_BulletConstraint[] = {
  {"get_rigid_body_a", &Dtool_BulletConstraint_get_rigid_body_a_158, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_rigid_body_a_158_comment},
  {"getRigidBodyA", &Dtool_BulletConstraint_get_rigid_body_a_158, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_rigid_body_a_158_comment},
  {"get_rigid_body_b", &Dtool_BulletConstraint_get_rigid_body_b_159, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_rigid_body_b_159_comment},
  {"getRigidBodyB", &Dtool_BulletConstraint_get_rigid_body_b_159, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_rigid_body_b_159_comment},
  {"enable_feedback", &Dtool_BulletConstraint_enable_feedback_160, METH_O, (const char *)Dtool_BulletConstraint_enable_feedback_160_comment},
  {"enableFeedback", &Dtool_BulletConstraint_enable_feedback_160, METH_O, (const char *)Dtool_BulletConstraint_enable_feedback_160_comment},
  {"set_debug_draw_size", &Dtool_BulletConstraint_set_debug_draw_size_161, METH_O, (const char *)Dtool_BulletConstraint_set_debug_draw_size_161_comment},
  {"setDebugDrawSize", &Dtool_BulletConstraint_set_debug_draw_size_161, METH_O, (const char *)Dtool_BulletConstraint_set_debug_draw_size_161_comment},
  {"get_applied_impulse", &Dtool_BulletConstraint_get_applied_impulse_162, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_applied_impulse_162_comment},
  {"getAppliedImpulse", &Dtool_BulletConstraint_get_applied_impulse_162, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_applied_impulse_162_comment},
  {"get_debug_draw_size", &Dtool_BulletConstraint_get_debug_draw_size_163, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_debug_draw_size_163_comment},
  {"getDebugDrawSize", &Dtool_BulletConstraint_get_debug_draw_size_163, METH_NOARGS, (const char *)Dtool_BulletConstraint_get_debug_draw_size_163_comment},
  {"set_breaking_threshold", &Dtool_BulletConstraint_set_breaking_threshold_164, METH_VARARGS, (const char *)Dtool_BulletConstraint_set_breaking_threshold_164_comment},
  {"setBreakingThreshold", &Dtool_BulletConstraint_set_breaking_threshold_164, METH_VARARGS, (const char *)Dtool_BulletConstraint_set_breaking_threshold_164_comment},
  {"set_enabled", &Dtool_BulletConstraint_set_enabled_165, METH_O, (const char *)Dtool_BulletConstraint_set_enabled_165_comment},
  {"setEnabled", &Dtool_BulletConstraint_set_enabled_165, METH_O, (const char *)Dtool_BulletConstraint_set_enabled_165_comment},
  {"is_enabled", &Dtool_BulletConstraint_is_enabled_166, METH_NOARGS, (const char *)Dtool_BulletConstraint_is_enabled_166_comment},
  {"isEnabled", &Dtool_BulletConstraint_is_enabled_166, METH_NOARGS, (const char *)Dtool_BulletConstraint_is_enabled_166_comment},
  {"set_param", (PyCFunction) &Dtool_BulletConstraint_set_param_168, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConstraint_set_param_168_comment},
  {"setParam", (PyCFunction) &Dtool_BulletConstraint_set_param_168, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConstraint_set_param_168_comment},
  {"get_param", (PyCFunction) &Dtool_BulletConstraint_get_param_169, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConstraint_get_param_169_comment},
  {"getParam", (PyCFunction) &Dtool_BulletConstraint_get_param_169, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConstraint_get_param_169_comment},
  {"get_class_type", &Dtool_BulletConstraint_get_class_type_170, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConstraint_get_class_type_170_comment},
  {"getClassType", &Dtool_BulletConstraint_get_class_type_170, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConstraint_get_class_type_170_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletConstraint = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletConstraint = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletConstraint = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletConstraint = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletConstraint = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletConstraint",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletConstraint,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletConstraint,
    &Dtool_SequenceMethods_BulletConstraint,
    &Dtool_MappingMethods_BulletConstraint,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletConstraint,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletConstraint,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletConstraint,
    PyType_GenericAlloc,
    Dtool_new_BulletConstraint,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletConstraint,
  Dtool_UpcastInterface_BulletConstraint,
  Dtool_DowncastInterface_BulletConstraint,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletConstraint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_TypedReferenceCount != NULL);
    assert(Dtool_Ptr_TypedReferenceCount->_Dtool_ModuleClassInit != NULL);
    Dtool_Ptr_TypedReferenceCount->_Dtool_ModuleClassInit(NULL);
    Dtool_BulletConstraint._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_TypedReferenceCount);
    PyObject *dict = _PyDict_NewPresized(9);
    Dtool_BulletConstraint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    // enum BulletConstraint::ConstraintParam;
    PyDict_SetItemString(dict, "CP_erp", Dtool_WrapValue(BulletConstraint::CP_erp));
    PyDict_SetItemString(dict, "CPErp", Dtool_WrapValue(BulletConstraint::CP_erp));
    PyDict_SetItemString(dict, "CP_stop_erp", Dtool_WrapValue(BulletConstraint::CP_stop_erp));
    PyDict_SetItemString(dict, "CPStopErp", Dtool_WrapValue(BulletConstraint::CP_stop_erp));
    PyDict_SetItemString(dict, "CP_cfm", Dtool_WrapValue(BulletConstraint::CP_cfm));
    PyDict_SetItemString(dict, "CPCfm", Dtool_WrapValue(BulletConstraint::CP_cfm));
    PyDict_SetItemString(dict, "CP_stop_cfm", Dtool_WrapValue(BulletConstraint::CP_stop_cfm));
    PyDict_SetItemString(dict, "CPStopCfm", Dtool_WrapValue(BulletConstraint::CP_stop_cfm));
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletConstraint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletConstraint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletConstraint);
  }
}

/**
 * Python method tables for BulletConeTwistConstraint (BulletConeTwistConstraint)
 */
static PyMethodDef Dtool_Methods_BulletConeTwistConstraint[] = {
  {"set_limit", (PyCFunction) &Dtool_BulletConeTwistConstraint_set_limit_173, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConeTwistConstraint_set_limit_173_comment},
  {"setLimit", (PyCFunction) &Dtool_BulletConeTwistConstraint_set_limit_173, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConeTwistConstraint_set_limit_173_comment},
  {"set_damping", &Dtool_BulletConeTwistConstraint_set_damping_174, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_damping_174_comment},
  {"setDamping", &Dtool_BulletConeTwistConstraint_set_damping_174, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_damping_174_comment},
  {"get_fix_threshold", &Dtool_BulletConeTwistConstraint_get_fix_threshold_175, METH_NOARGS, (const char *)Dtool_BulletConeTwistConstraint_get_fix_threshold_175_comment},
  {"getFixThreshold", &Dtool_BulletConeTwistConstraint_get_fix_threshold_175, METH_NOARGS, (const char *)Dtool_BulletConeTwistConstraint_get_fix_threshold_175_comment},
  {"set_fix_threshold", &Dtool_BulletConeTwistConstraint_set_fix_threshold_176, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_fix_threshold_176_comment},
  {"setFixThreshold", &Dtool_BulletConeTwistConstraint_set_fix_threshold_176, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_fix_threshold_176_comment},
  {"enable_motor", &Dtool_BulletConeTwistConstraint_enable_motor_177, METH_O, (const char *)Dtool_BulletConeTwistConstraint_enable_motor_177_comment},
  {"enableMotor", &Dtool_BulletConeTwistConstraint_enable_motor_177, METH_O, (const char *)Dtool_BulletConeTwistConstraint_enable_motor_177_comment},
  {"set_max_motor_impulse", &Dtool_BulletConeTwistConstraint_set_max_motor_impulse_178, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_max_motor_impulse_178_comment},
  {"setMaxMotorImpulse", &Dtool_BulletConeTwistConstraint_set_max_motor_impulse_178, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_max_motor_impulse_178_comment},
  {"set_max_motor_impulse_normalized", &Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_179, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_179_comment},
  {"setMaxMotorImpulseNormalized", &Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_179, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_max_motor_impulse_normalized_179_comment},
  {"set_motor_target", &Dtool_BulletConeTwistConstraint_set_motor_target_180, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_motor_target_180_comment},
  {"setMotorTarget", &Dtool_BulletConeTwistConstraint_set_motor_target_180, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_motor_target_180_comment},
  {"set_motor_target_in_constraint_space", &Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_181, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_181_comment},
  {"setMotorTargetInConstraintSpace", &Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_181, METH_O, (const char *)Dtool_BulletConeTwistConstraint_set_motor_target_in_constraint_space_181_comment},
  {"set_frames", (PyCFunction) &Dtool_BulletConeTwistConstraint_set_frames_182, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConeTwistConstraint_set_frames_182_comment},
  {"setFrames", (PyCFunction) &Dtool_BulletConeTwistConstraint_set_frames_182, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConeTwistConstraint_set_frames_182_comment},
  {"get_frame_a", &Dtool_BulletConeTwistConstraint_get_frame_a_183, METH_NOARGS, (const char *)Dtool_BulletConeTwistConstraint_get_frame_a_183_comment},
  {"getFrameA", &Dtool_BulletConeTwistConstraint_get_frame_a_183, METH_NOARGS, (const char *)Dtool_BulletConeTwistConstraint_get_frame_a_183_comment},
  {"get_frame_b", &Dtool_BulletConeTwistConstraint_get_frame_b_184, METH_NOARGS, (const char *)Dtool_BulletConeTwistConstraint_get_frame_b_184_comment},
  {"getFrameB", &Dtool_BulletConeTwistConstraint_get_frame_b_184, METH_NOARGS, (const char *)Dtool_BulletConeTwistConstraint_get_frame_b_184_comment},
  {"get_class_type", &Dtool_BulletConeTwistConstraint_get_class_type_185, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConeTwistConstraint_get_class_type_185_comment},
  {"getClassType", &Dtool_BulletConeTwistConstraint_get_class_type_185, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConeTwistConstraint_get_class_type_185_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletConeTwistConstraint = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletConeTwistConstraint = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletConeTwistConstraint = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletConeTwistConstraint = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletConeTwistConstraint = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletConeTwistConstraint",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletConeTwistConstraint,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletConeTwistConstraint,
    &Dtool_SequenceMethods_BulletConeTwistConstraint,
    &Dtool_MappingMethods_BulletConeTwistConstraint,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletConeTwistConstraint,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletConeTwistConstraint,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletConeTwistConstraint,
    PyType_GenericAlloc,
    Dtool_new_BulletConeTwistConstraint,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletConeTwistConstraint,
  Dtool_UpcastInterface_BulletConeTwistConstraint,
  Dtool_DowncastInterface_BulletConeTwistConstraint,
  (CoerceFunction)Dtool_ConstCoerce_BulletConeTwistConstraint,
  (CoerceFunction)Dtool_Coerce_BulletConeTwistConstraint,
};

static void Dtool_PyModuleClassInit_BulletConeTwistConstraint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletConstraint(NULL);
    Dtool_BulletConeTwistConstraint._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletConstraint);
    PyObject *dict = PyDict_New();
    Dtool_BulletConeTwistConstraint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletConeTwistConstraint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletConeTwistConstraint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletConeTwistConstraint);
  }
}

/**
 * Python method tables for BulletManifoldPoint (BulletManifoldPoint)
 */
static PyMethodDef Dtool_Methods_BulletManifoldPoint[] = {
  {"get_life_time", &Dtool_BulletManifoldPoint_get_life_time_188, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_life_time_188_comment},
  {"getLifeTime", &Dtool_BulletManifoldPoint_get_life_time_188, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_life_time_188_comment},
  {"get_distance", &Dtool_BulletManifoldPoint_get_distance_189, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_distance_189_comment},
  {"getDistance", &Dtool_BulletManifoldPoint_get_distance_189, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_distance_189_comment},
  {"get_applied_impulse", &Dtool_BulletManifoldPoint_get_applied_impulse_190, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_applied_impulse_190_comment},
  {"getAppliedImpulse", &Dtool_BulletManifoldPoint_get_applied_impulse_190, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_applied_impulse_190_comment},
  {"get_position_world_on_a", &Dtool_BulletManifoldPoint_get_position_world_on_a_191, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_position_world_on_a_191_comment},
  {"getPositionWorldOnA", &Dtool_BulletManifoldPoint_get_position_world_on_a_191, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_position_world_on_a_191_comment},
  {"get_position_world_on_b", &Dtool_BulletManifoldPoint_get_position_world_on_b_192, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_position_world_on_b_192_comment},
  {"getPositionWorldOnB", &Dtool_BulletManifoldPoint_get_position_world_on_b_192, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_position_world_on_b_192_comment},
  {"get_normal_world_on_b", &Dtool_BulletManifoldPoint_get_normal_world_on_b_193, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_normal_world_on_b_193_comment},
  {"getNormalWorldOnB", &Dtool_BulletManifoldPoint_get_normal_world_on_b_193, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_normal_world_on_b_193_comment},
  {"get_local_point_a", &Dtool_BulletManifoldPoint_get_local_point_a_194, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_local_point_a_194_comment},
  {"getLocalPointA", &Dtool_BulletManifoldPoint_get_local_point_a_194, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_local_point_a_194_comment},
  {"get_local_point_b", &Dtool_BulletManifoldPoint_get_local_point_b_195, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_local_point_b_195_comment},
  {"getLocalPointB", &Dtool_BulletManifoldPoint_get_local_point_b_195, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_local_point_b_195_comment},
  {"get_part_id0", &Dtool_BulletManifoldPoint_get_part_id0_196, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_part_id0_196_comment},
  {"getPartId0", &Dtool_BulletManifoldPoint_get_part_id0_196, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_part_id0_196_comment},
  {"get_part_id1", &Dtool_BulletManifoldPoint_get_part_id1_197, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_part_id1_197_comment},
  {"getPartId1", &Dtool_BulletManifoldPoint_get_part_id1_197, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_part_id1_197_comment},
  {"get_index0", &Dtool_BulletManifoldPoint_get_index0_198, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_index0_198_comment},
  {"getIndex0", &Dtool_BulletManifoldPoint_get_index0_198, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_index0_198_comment},
  {"get_index1", &Dtool_BulletManifoldPoint_get_index1_199, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_index1_199_comment},
  {"getIndex1", &Dtool_BulletManifoldPoint_get_index1_199, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_index1_199_comment},
  {"set_lateral_friction_initialized", &Dtool_BulletManifoldPoint_set_lateral_friction_initialized_200, METH_O, (const char *)Dtool_BulletManifoldPoint_set_lateral_friction_initialized_200_comment},
  {"setLateralFrictionInitialized", &Dtool_BulletManifoldPoint_set_lateral_friction_initialized_200, METH_O, (const char *)Dtool_BulletManifoldPoint_set_lateral_friction_initialized_200_comment},
  {"set_lateral_friction_dir1", &Dtool_BulletManifoldPoint_set_lateral_friction_dir1_201, METH_O, (const char *)Dtool_BulletManifoldPoint_set_lateral_friction_dir1_201_comment},
  {"setLateralFrictionDir1", &Dtool_BulletManifoldPoint_set_lateral_friction_dir1_201, METH_O, (const char *)Dtool_BulletManifoldPoint_set_lateral_friction_dir1_201_comment},
  {"set_lateral_friction_dir2", &Dtool_BulletManifoldPoint_set_lateral_friction_dir2_202, METH_O, (const char *)Dtool_BulletManifoldPoint_set_lateral_friction_dir2_202_comment},
  {"setLateralFrictionDir2", &Dtool_BulletManifoldPoint_set_lateral_friction_dir2_202, METH_O, (const char *)Dtool_BulletManifoldPoint_set_lateral_friction_dir2_202_comment},
  {"set_contact_motion1", &Dtool_BulletManifoldPoint_set_contact_motion1_203, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_motion1_203_comment},
  {"setContactMotion1", &Dtool_BulletManifoldPoint_set_contact_motion1_203, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_motion1_203_comment},
  {"set_contact_motion2", &Dtool_BulletManifoldPoint_set_contact_motion2_204, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_motion2_204_comment},
  {"setContactMotion2", &Dtool_BulletManifoldPoint_set_contact_motion2_204, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_motion2_204_comment},
  {"set_combined_friction", &Dtool_BulletManifoldPoint_set_combined_friction_205, METH_O, (const char *)Dtool_BulletManifoldPoint_set_combined_friction_205_comment},
  {"setCombinedFriction", &Dtool_BulletManifoldPoint_set_combined_friction_205, METH_O, (const char *)Dtool_BulletManifoldPoint_set_combined_friction_205_comment},
  {"set_combined_restitution", &Dtool_BulletManifoldPoint_set_combined_restitution_206, METH_O, (const char *)Dtool_BulletManifoldPoint_set_combined_restitution_206_comment},
  {"setCombinedRestitution", &Dtool_BulletManifoldPoint_set_combined_restitution_206, METH_O, (const char *)Dtool_BulletManifoldPoint_set_combined_restitution_206_comment},
  {"set_applied_impulse", &Dtool_BulletManifoldPoint_set_applied_impulse_207, METH_O, (const char *)Dtool_BulletManifoldPoint_set_applied_impulse_207_comment},
  {"setAppliedImpulse", &Dtool_BulletManifoldPoint_set_applied_impulse_207, METH_O, (const char *)Dtool_BulletManifoldPoint_set_applied_impulse_207_comment},
  {"set_applied_impulse_lateral1", &Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_208, METH_O, (const char *)Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_208_comment},
  {"setAppliedImpulseLateral1", &Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_208, METH_O, (const char *)Dtool_BulletManifoldPoint_set_applied_impulse_lateral1_208_comment},
  {"set_applied_impulse_lateral2", &Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_209, METH_O, (const char *)Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_209_comment},
  {"setAppliedImpulseLateral2", &Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_209, METH_O, (const char *)Dtool_BulletManifoldPoint_set_applied_impulse_lateral2_209_comment},
  {"set_contact_cfm1", &Dtool_BulletManifoldPoint_set_contact_cfm1_210, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_cfm1_210_comment},
  {"setContactCfm1", &Dtool_BulletManifoldPoint_set_contact_cfm1_210, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_cfm1_210_comment},
  {"set_contact_cfm2", &Dtool_BulletManifoldPoint_set_contact_cfm2_211, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_cfm2_211_comment},
  {"setContactCfm2", &Dtool_BulletManifoldPoint_set_contact_cfm2_211, METH_O, (const char *)Dtool_BulletManifoldPoint_set_contact_cfm2_211_comment},
  {"get_lateral_friction_initialized", &Dtool_BulletManifoldPoint_get_lateral_friction_initialized_212, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_lateral_friction_initialized_212_comment},
  {"getLateralFrictionInitialized", &Dtool_BulletManifoldPoint_get_lateral_friction_initialized_212, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_lateral_friction_initialized_212_comment},
  {"get_lateral_friction_dir1", &Dtool_BulletManifoldPoint_get_lateral_friction_dir1_213, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_lateral_friction_dir1_213_comment},
  {"getLateralFrictionDir1", &Dtool_BulletManifoldPoint_get_lateral_friction_dir1_213, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_lateral_friction_dir1_213_comment},
  {"get_lateral_friction_dir2", &Dtool_BulletManifoldPoint_get_lateral_friction_dir2_214, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_lateral_friction_dir2_214_comment},
  {"getLateralFrictionDir2", &Dtool_BulletManifoldPoint_get_lateral_friction_dir2_214, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_lateral_friction_dir2_214_comment},
  {"get_contact_motion1", &Dtool_BulletManifoldPoint_get_contact_motion1_215, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_motion1_215_comment},
  {"getContactMotion1", &Dtool_BulletManifoldPoint_get_contact_motion1_215, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_motion1_215_comment},
  {"get_contact_motion2", &Dtool_BulletManifoldPoint_get_contact_motion2_216, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_motion2_216_comment},
  {"getContactMotion2", &Dtool_BulletManifoldPoint_get_contact_motion2_216, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_motion2_216_comment},
  {"get_combined_friction", &Dtool_BulletManifoldPoint_get_combined_friction_217, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_combined_friction_217_comment},
  {"getCombinedFriction", &Dtool_BulletManifoldPoint_get_combined_friction_217, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_combined_friction_217_comment},
  {"get_combined_restitution", &Dtool_BulletManifoldPoint_get_combined_restitution_218, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_combined_restitution_218_comment},
  {"getCombinedRestitution", &Dtool_BulletManifoldPoint_get_combined_restitution_218, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_combined_restitution_218_comment},
  {"get_applied_impulse_lateral1", &Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_219, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_219_comment},
  {"getAppliedImpulseLateral1", &Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_219, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_applied_impulse_lateral1_219_comment},
  {"get_applied_impulse_lateral2", &Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_220, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_220_comment},
  {"getAppliedImpulseLateral2", &Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_220, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_applied_impulse_lateral2_220_comment},
  {"get_contact_cfm1", &Dtool_BulletManifoldPoint_get_contact_cfm1_221, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_cfm1_221_comment},
  {"getContactCfm1", &Dtool_BulletManifoldPoint_get_contact_cfm1_221, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_cfm1_221_comment},
  {"get_contact_cfm2", &Dtool_BulletManifoldPoint_get_contact_cfm2_222, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_cfm2_222_comment},
  {"getContactCfm2", &Dtool_BulletManifoldPoint_get_contact_cfm2_222, METH_NOARGS, (const char *)Dtool_BulletManifoldPoint_get_contact_cfm2_222_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletManifoldPoint = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletManifoldPoint = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletManifoldPoint",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletManifoldPoint,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletManifoldPoint,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletManifoldPoint,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletManifoldPoint,
    PyType_GenericAlloc,
    Dtool_new_BulletManifoldPoint,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletManifoldPoint,
  Dtool_UpcastInterface_BulletManifoldPoint,
  Dtool_DowncastInterface_BulletManifoldPoint,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletManifoldPoint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletManifoldPoint._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletManifoldPoint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletManifoldPoint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletManifoldPoint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletManifoldPoint);
  }
}

/**
 * Python method tables for BulletContactCallbackData (BulletContactCallbackData)
 */
static PyMethodDef Dtool_Methods_BulletContactCallbackData[] = {
  {"get_manifold", &Dtool_BulletContactCallbackData_get_manifold_226, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_manifold_226_comment},
  {"getManifold", &Dtool_BulletContactCallbackData_get_manifold_226, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_manifold_226_comment},
  {"get_node0", &Dtool_BulletContactCallbackData_get_node0_227, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_node0_227_comment},
  {"getNode0", &Dtool_BulletContactCallbackData_get_node0_227, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_node0_227_comment},
  {"get_node1", &Dtool_BulletContactCallbackData_get_node1_228, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_node1_228_comment},
  {"getNode1", &Dtool_BulletContactCallbackData_get_node1_228, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_node1_228_comment},
  {"get_part_id0", &Dtool_BulletContactCallbackData_get_part_id0_229, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_part_id0_229_comment},
  {"getPartId0", &Dtool_BulletContactCallbackData_get_part_id0_229, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_part_id0_229_comment},
  {"get_part_id1", &Dtool_BulletContactCallbackData_get_part_id1_230, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_part_id1_230_comment},
  {"getPartId1", &Dtool_BulletContactCallbackData_get_part_id1_230, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_part_id1_230_comment},
  {"get_index0", &Dtool_BulletContactCallbackData_get_index0_231, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_index0_231_comment},
  {"getIndex0", &Dtool_BulletContactCallbackData_get_index0_231, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_index0_231_comment},
  {"get_index1", &Dtool_BulletContactCallbackData_get_index1_232, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_index1_232_comment},
  {"getIndex1", &Dtool_BulletContactCallbackData_get_index1_232, METH_NOARGS, (const char *)Dtool_BulletContactCallbackData_get_index1_232_comment},
  {"get_class_type", &Dtool_BulletContactCallbackData_get_class_type_233, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletContactCallbackData_get_class_type_233_comment},
  {"getClassType", &Dtool_BulletContactCallbackData_get_class_type_233, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletContactCallbackData_get_class_type_233_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletContactCallbackData = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletContactCallbackData = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletContactCallbackData = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletContactCallbackData = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletContactCallbackData = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletContactCallbackData",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletContactCallbackData,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletContactCallbackData,
    &Dtool_SequenceMethods_BulletContactCallbackData,
    &Dtool_MappingMethods_BulletContactCallbackData,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletContactCallbackData,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletContactCallbackData,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletContactCallbackData,
    PyType_GenericAlloc,
    Dtool_new_BulletContactCallbackData,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletContactCallbackData,
  Dtool_UpcastInterface_BulletContactCallbackData,
  Dtool_DowncastInterface_BulletContactCallbackData,
  (CoerceFunction)Dtool_ConstCoerce_BulletContactCallbackData,
  (CoerceFunction)Dtool_Coerce_BulletContactCallbackData,
};

static void Dtool_PyModuleClassInit_BulletContactCallbackData(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_CallbackData != NULL);
    assert(Dtool_Ptr_CallbackData->_Dtool_ModuleClassInit != NULL);
    Dtool_Ptr_CallbackData->_Dtool_ModuleClassInit(NULL);
    Dtool_BulletContactCallbackData._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_CallbackData);
    PyObject *dict = PyDict_New();
    Dtool_BulletContactCallbackData._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletContactCallbackData) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletContactCallbackData)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletContactCallbackData);
  }
}

/**
 * Python method tables for BulletContact (BulletContact)
 */
static PyMethodDef Dtool_Methods_BulletContact[] = {
  {"get_manifold_point", &Dtool_BulletContact_get_manifold_point_236, METH_NOARGS, (const char *)Dtool_BulletContact_get_manifold_point_236_comment},
  {"getManifoldPoint", &Dtool_BulletContact_get_manifold_point_236, METH_NOARGS, (const char *)Dtool_BulletContact_get_manifold_point_236_comment},
  {"get_node0", &Dtool_BulletContact_get_node0_237, METH_NOARGS, (const char *)Dtool_BulletContact_get_node0_237_comment},
  {"getNode0", &Dtool_BulletContact_get_node0_237, METH_NOARGS, (const char *)Dtool_BulletContact_get_node0_237_comment},
  {"get_node1", &Dtool_BulletContact_get_node1_238, METH_NOARGS, (const char *)Dtool_BulletContact_get_node1_238_comment},
  {"getNode1", &Dtool_BulletContact_get_node1_238, METH_NOARGS, (const char *)Dtool_BulletContact_get_node1_238_comment},
  {"get_idx0", &Dtool_BulletContact_get_idx0_239, METH_NOARGS, (const char *)Dtool_BulletContact_get_idx0_239_comment},
  {"getIdx0", &Dtool_BulletContact_get_idx0_239, METH_NOARGS, (const char *)Dtool_BulletContact_get_idx0_239_comment},
  {"get_idx1", &Dtool_BulletContact_get_idx1_240, METH_NOARGS, (const char *)Dtool_BulletContact_get_idx1_240_comment},
  {"getIdx1", &Dtool_BulletContact_get_idx1_240, METH_NOARGS, (const char *)Dtool_BulletContact_get_idx1_240_comment},
  {"get_part_id0", &Dtool_BulletContact_get_part_id0_241, METH_NOARGS, (const char *)Dtool_BulletContact_get_part_id0_241_comment},
  {"getPartId0", &Dtool_BulletContact_get_part_id0_241, METH_NOARGS, (const char *)Dtool_BulletContact_get_part_id0_241_comment},
  {"get_part_id1", &Dtool_BulletContact_get_part_id1_242, METH_NOARGS, (const char *)Dtool_BulletContact_get_part_id1_242_comment},
  {"getPartId1", &Dtool_BulletContact_get_part_id1_242, METH_NOARGS, (const char *)Dtool_BulletContact_get_part_id1_242_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletContact = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletContact = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletContact",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletContact,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletContact,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletContact,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletContact,
    PyType_GenericAlloc,
    Dtool_new_BulletContact,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletContact,
  Dtool_UpcastInterface_BulletContact,
  Dtool_DowncastInterface_BulletContact,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletContact(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletContact._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletContact._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletContact) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletContact)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletContact);
  }
}

/**
 * Python method tables for BulletContactResult (BulletContactResult)
 */
static PyMethodDef Dtool_Methods_BulletContactResult[] = {
  {"get_num_contacts", &Dtool_BulletContactResult_get_num_contacts_248, METH_NOARGS, (const char *)Dtool_BulletContactResult_get_num_contacts_248_comment},
  {"getNumContacts", &Dtool_BulletContactResult_get_num_contacts_248, METH_NOARGS, (const char *)Dtool_BulletContactResult_get_num_contacts_248_comment},
  {"get_contact", &Dtool_BulletContactResult_get_contact_249, METH_O, (const char *)Dtool_BulletContactResult_get_contact_249_comment},
  {"getContact", &Dtool_BulletContactResult_get_contact_249, METH_O, (const char *)Dtool_BulletContactResult_get_contact_249_comment},
  {"get_contacts", (PyCFunction) &MakeSeq_BulletContactResult_get_contacts, METH_NOARGS, NULL},
  { "getContacts", (PyCFunction) &MakeSeq_BulletContactResult_get_contacts, METH_NOARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletContactResult = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletContactResult = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletContactResult = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletContactResult = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletContactResult = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletContactResult",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletContactResult,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletContactResult,
    &Dtool_SequenceMethods_BulletContactResult,
    &Dtool_MappingMethods_BulletContactResult,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletContactResult,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletContactResult,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletContactResult,
    PyType_GenericAlloc,
    Dtool_new_BulletContactResult,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletContactResult,
  Dtool_UpcastInterface_BulletContactResult,
  Dtool_DowncastInterface_BulletContactResult,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletContactResult(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletContactResult._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletContactResult._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletContactResult) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletContactResult)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletContactResult);
  }
}

/**
 * Python method tables for BulletDebugNode (BulletDebugNode)
 */
static PyMethodDef Dtool_Methods_BulletDebugNode[] = {
  {"draw_mask_changed", &Dtool_BulletDebugNode_draw_mask_changed_255, METH_NOARGS, (const char *)Dtool_BulletDebugNode_draw_mask_changed_255_comment},
  {"drawMaskChanged", &Dtool_BulletDebugNode_draw_mask_changed_255, METH_NOARGS, (const char *)Dtool_BulletDebugNode_draw_mask_changed_255_comment},
  {"show_wireframe", &Dtool_BulletDebugNode_show_wireframe_256, METH_O, (const char *)Dtool_BulletDebugNode_show_wireframe_256_comment},
  {"showWireframe", &Dtool_BulletDebugNode_show_wireframe_256, METH_O, (const char *)Dtool_BulletDebugNode_show_wireframe_256_comment},
  {"show_constraints", &Dtool_BulletDebugNode_show_constraints_257, METH_O, (const char *)Dtool_BulletDebugNode_show_constraints_257_comment},
  {"showConstraints", &Dtool_BulletDebugNode_show_constraints_257, METH_O, (const char *)Dtool_BulletDebugNode_show_constraints_257_comment},
  {"show_bounding_boxes", &Dtool_BulletDebugNode_show_bounding_boxes_258, METH_O, (const char *)Dtool_BulletDebugNode_show_bounding_boxes_258_comment},
  {"showBoundingBoxes", &Dtool_BulletDebugNode_show_bounding_boxes_258, METH_O, (const char *)Dtool_BulletDebugNode_show_bounding_boxes_258_comment},
  {"show_normals", &Dtool_BulletDebugNode_show_normals_259, METH_O, (const char *)Dtool_BulletDebugNode_show_normals_259_comment},
  {"showNormals", &Dtool_BulletDebugNode_show_normals_259, METH_O, (const char *)Dtool_BulletDebugNode_show_normals_259_comment},
  {"get_class_type", &Dtool_BulletDebugNode_get_class_type_260, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletDebugNode_get_class_type_260_comment},
  {"getClassType", &Dtool_BulletDebugNode_get_class_type_260, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletDebugNode_get_class_type_260_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletDebugNode = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletDebugNode = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletDebugNode = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletDebugNode = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletDebugNode = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletDebugNode",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletDebugNode,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletDebugNode,
    &Dtool_SequenceMethods_BulletDebugNode,
    &Dtool_MappingMethods_BulletDebugNode,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletDebugNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletDebugNode,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletDebugNode,
    PyType_GenericAlloc,
    Dtool_new_BulletDebugNode,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletDebugNode,
  Dtool_UpcastInterface_BulletDebugNode,
  Dtool_DowncastInterface_BulletDebugNode,
  (CoerceFunction)Dtool_ConstCoerce_BulletDebugNode,
  (CoerceFunction)Dtool_Coerce_BulletDebugNode,
};

static void Dtool_PyModuleClassInit_BulletDebugNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_GeomNode != NULL);
    assert(Dtool_Ptr_GeomNode->_Dtool_ModuleClassInit != NULL);
    Dtool_Ptr_GeomNode->_Dtool_ModuleClassInit(NULL);
    Dtool_BulletDebugNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_GeomNode);
    PyObject *dict = PyDict_New();
    Dtool_BulletDebugNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletDebugNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletDebugNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletDebugNode);
  }
}

/**
 * Python method tables for BulletGhostNode (BulletGhostNode)
 */
static PyMethodDef Dtool_Methods_BulletGhostNode[] = {
  {"get_num_overlapping_nodes", &Dtool_BulletGhostNode_get_num_overlapping_nodes_263, METH_NOARGS, (const char *)Dtool_BulletGhostNode_get_num_overlapping_nodes_263_comment},
  {"getNumOverlappingNodes", &Dtool_BulletGhostNode_get_num_overlapping_nodes_263, METH_NOARGS, (const char *)Dtool_BulletGhostNode_get_num_overlapping_nodes_263_comment},
  {"get_overlapping_node", &Dtool_BulletGhostNode_get_overlapping_node_264, METH_O, (const char *)Dtool_BulletGhostNode_get_overlapping_node_264_comment},
  {"getOverlappingNode", &Dtool_BulletGhostNode_get_overlapping_node_264, METH_O, (const char *)Dtool_BulletGhostNode_get_overlapping_node_264_comment},
  {"get_class_type", &Dtool_BulletGhostNode_get_class_type_266, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletGhostNode_get_class_type_266_comment},
  {"getClassType", &Dtool_BulletGhostNode_get_class_type_266, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletGhostNode_get_class_type_266_comment},
  {"get_overlapping_nodes", (PyCFunction) &MakeSeq_BulletGhostNode_get_overlapping_nodes, METH_NOARGS, NULL},
  { "getOverlappingNodes", (PyCFunction) &MakeSeq_BulletGhostNode_get_overlapping_nodes, METH_NOARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletGhostNode = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletGhostNode = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletGhostNode = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletGhostNode = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletGhostNode = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletGhostNode",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletGhostNode,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletGhostNode,
    &Dtool_SequenceMethods_BulletGhostNode,
    &Dtool_MappingMethods_BulletGhostNode,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletGhostNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletGhostNode,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletGhostNode,
    PyType_GenericAlloc,
    Dtool_new_BulletGhostNode,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletGhostNode,
  Dtool_UpcastInterface_BulletGhostNode,
  Dtool_DowncastInterface_BulletGhostNode,
  (CoerceFunction)Dtool_ConstCoerce_BulletGhostNode,
  (CoerceFunction)Dtool_Coerce_BulletGhostNode,
};

static void Dtool_PyModuleClassInit_BulletGhostNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletBodyNode(NULL);
    Dtool_BulletGhostNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletBodyNode);
    PyObject *dict = PyDict_New();
    Dtool_BulletGhostNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletGhostNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletGhostNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletGhostNode);
  }
}

/**
 * Python method tables for BulletRigidBodyNode (BulletRigidBodyNode)
 */
static PyMethodDef Dtool_Methods_BulletRigidBodyNode[] = {
  {"set_mass", &Dtool_BulletRigidBodyNode_set_mass_269, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_mass_269_comment},
  {"setMass", &Dtool_BulletRigidBodyNode_set_mass_269, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_mass_269_comment},
  {"get_mass", &Dtool_BulletRigidBodyNode_get_mass_270, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_mass_270_comment},
  {"getMass", &Dtool_BulletRigidBodyNode_get_mass_270, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_mass_270_comment},
  {"get_inv_mass", &Dtool_BulletRigidBodyNode_get_inv_mass_271, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inv_mass_271_comment},
  {"getInvMass", &Dtool_BulletRigidBodyNode_get_inv_mass_271, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inv_mass_271_comment},
  {"set_inertia", &Dtool_BulletRigidBodyNode_set_inertia_272, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_inertia_272_comment},
  {"setInertia", &Dtool_BulletRigidBodyNode_set_inertia_272, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_inertia_272_comment},
  {"get_inertia", &Dtool_BulletRigidBodyNode_get_inertia_273, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inertia_273_comment},
  {"getInertia", &Dtool_BulletRigidBodyNode_get_inertia_273, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inertia_273_comment},
  {"get_inv_inertia_diag_local", &Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_274, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_274_comment},
  {"getInvInertiaDiagLocal", &Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_274, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inv_inertia_diag_local_274_comment},
  {"get_inv_inertia_tensor_world", &Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_275, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_275_comment},
  {"getInvInertiaTensorWorld", &Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_275, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_inv_inertia_tensor_world_275_comment},
  {"get_linear_velocity", &Dtool_BulletRigidBodyNode_get_linear_velocity_276, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_velocity_276_comment},
  {"getLinearVelocity", &Dtool_BulletRigidBodyNode_get_linear_velocity_276, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_velocity_276_comment},
  {"get_angular_velocity", &Dtool_BulletRigidBodyNode_get_angular_velocity_277, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_velocity_277_comment},
  {"getAngularVelocity", &Dtool_BulletRigidBodyNode_get_angular_velocity_277, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_velocity_277_comment},
  {"set_linear_velocity", &Dtool_BulletRigidBodyNode_set_linear_velocity_278, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_velocity_278_comment},
  {"setLinearVelocity", &Dtool_BulletRigidBodyNode_set_linear_velocity_278, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_velocity_278_comment},
  {"set_angular_velocity", &Dtool_BulletRigidBodyNode_set_angular_velocity_279, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_velocity_279_comment},
  {"setAngularVelocity", &Dtool_BulletRigidBodyNode_set_angular_velocity_279, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_velocity_279_comment},
  {"get_linear_damping", &Dtool_BulletRigidBodyNode_get_linear_damping_280, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_damping_280_comment},
  {"getLinearDamping", &Dtool_BulletRigidBodyNode_get_linear_damping_280, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_damping_280_comment},
  {"get_angular_damping", &Dtool_BulletRigidBodyNode_get_angular_damping_281, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_damping_281_comment},
  {"getAngularDamping", &Dtool_BulletRigidBodyNode_get_angular_damping_281, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_damping_281_comment},
  {"set_linear_damping", &Dtool_BulletRigidBodyNode_set_linear_damping_282, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_damping_282_comment},
  {"setLinearDamping", &Dtool_BulletRigidBodyNode_set_linear_damping_282, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_damping_282_comment},
  {"set_angular_damping", &Dtool_BulletRigidBodyNode_set_angular_damping_283, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_damping_283_comment},
  {"setAngularDamping", &Dtool_BulletRigidBodyNode_set_angular_damping_283, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_damping_283_comment},
  {"clear_forces", &Dtool_BulletRigidBodyNode_clear_forces_284, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_clear_forces_284_comment},
  {"clearForces", &Dtool_BulletRigidBodyNode_clear_forces_284, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_clear_forces_284_comment},
  {"apply_force", (PyCFunction) &Dtool_BulletRigidBodyNode_apply_force_285, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletRigidBodyNode_apply_force_285_comment},
  {"applyForce", (PyCFunction) &Dtool_BulletRigidBodyNode_apply_force_285, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletRigidBodyNode_apply_force_285_comment},
  {"apply_central_force", &Dtool_BulletRigidBodyNode_apply_central_force_286, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_central_force_286_comment},
  {"applyCentralForce", &Dtool_BulletRigidBodyNode_apply_central_force_286, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_central_force_286_comment},
  {"apply_impulse", (PyCFunction) &Dtool_BulletRigidBodyNode_apply_impulse_287, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletRigidBodyNode_apply_impulse_287_comment},
  {"applyImpulse", (PyCFunction) &Dtool_BulletRigidBodyNode_apply_impulse_287, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletRigidBodyNode_apply_impulse_287_comment},
  {"apply_central_impulse", &Dtool_BulletRigidBodyNode_apply_central_impulse_288, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_central_impulse_288_comment},
  {"applyCentralImpulse", &Dtool_BulletRigidBodyNode_apply_central_impulse_288, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_central_impulse_288_comment},
  {"apply_torque", &Dtool_BulletRigidBodyNode_apply_torque_289, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_torque_289_comment},
  {"applyTorque", &Dtool_BulletRigidBodyNode_apply_torque_289, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_torque_289_comment},
  {"apply_torque_impulse", &Dtool_BulletRigidBodyNode_apply_torque_impulse_290, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_torque_impulse_290_comment},
  {"applyTorqueImpulse", &Dtool_BulletRigidBodyNode_apply_torque_impulse_290, METH_O, (const char *)Dtool_BulletRigidBodyNode_apply_torque_impulse_290_comment},
  {"get_total_force", &Dtool_BulletRigidBodyNode_get_total_force_291, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_total_force_291_comment},
  {"getTotalForce", &Dtool_BulletRigidBodyNode_get_total_force_291, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_total_force_291_comment},
  {"get_total_torque", &Dtool_BulletRigidBodyNode_get_total_torque_292, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_total_torque_292_comment},
  {"getTotalTorque", &Dtool_BulletRigidBodyNode_get_total_torque_292, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_total_torque_292_comment},
  {"get_linear_sleep_threshold", &Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_293, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_293_comment},
  {"getLinearSleepThreshold", &Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_293, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_sleep_threshold_293_comment},
  {"get_angular_sleep_threshold", &Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_294, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_294_comment},
  {"getAngularSleepThreshold", &Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_294, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_sleep_threshold_294_comment},
  {"set_linear_sleep_threshold", &Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_295, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_295_comment},
  {"setLinearSleepThreshold", &Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_295, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_sleep_threshold_295_comment},
  {"set_angular_sleep_threshold", &Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_296, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_296_comment},
  {"setAngularSleepThreshold", &Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_296, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_sleep_threshold_296_comment},
  {"set_gravity", &Dtool_BulletRigidBodyNode_set_gravity_297, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_gravity_297_comment},
  {"setGravity", &Dtool_BulletRigidBodyNode_set_gravity_297, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_gravity_297_comment},
  {"get_gravity", &Dtool_BulletRigidBodyNode_get_gravity_298, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_gravity_298_comment},
  {"getGravity", &Dtool_BulletRigidBodyNode_get_gravity_298, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_gravity_298_comment},
  {"get_linear_factor", &Dtool_BulletRigidBodyNode_get_linear_factor_299, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_factor_299_comment},
  {"getLinearFactor", &Dtool_BulletRigidBodyNode_get_linear_factor_299, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_linear_factor_299_comment},
  {"get_angular_factor", &Dtool_BulletRigidBodyNode_get_angular_factor_300, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_factor_300_comment},
  {"getAngularFactor", &Dtool_BulletRigidBodyNode_get_angular_factor_300, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_get_angular_factor_300_comment},
  {"set_linear_factor", &Dtool_BulletRigidBodyNode_set_linear_factor_301, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_factor_301_comment},
  {"setLinearFactor", &Dtool_BulletRigidBodyNode_set_linear_factor_301, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_linear_factor_301_comment},
  {"set_angular_factor", &Dtool_BulletRigidBodyNode_set_angular_factor_302, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_factor_302_comment},
  {"setAngularFactor", &Dtool_BulletRigidBodyNode_set_angular_factor_302, METH_O, (const char *)Dtool_BulletRigidBodyNode_set_angular_factor_302_comment},
  {"pick_dirty_flag", &Dtool_BulletRigidBodyNode_pick_dirty_flag_303, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_pick_dirty_flag_303_comment},
  {"pickDirtyFlag", &Dtool_BulletRigidBodyNode_pick_dirty_flag_303, METH_NOARGS, (const char *)Dtool_BulletRigidBodyNode_pick_dirty_flag_303_comment},
  {"get_class_type", &Dtool_BulletRigidBodyNode_get_class_type_304, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletRigidBodyNode_get_class_type_304_comment},
  {"getClassType", &Dtool_BulletRigidBodyNode_get_class_type_304, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletRigidBodyNode_get_class_type_304_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletRigidBodyNode = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletRigidBodyNode = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletRigidBodyNode = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletRigidBodyNode = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletRigidBodyNode = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletRigidBodyNode",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletRigidBodyNode,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletRigidBodyNode,
    &Dtool_SequenceMethods_BulletRigidBodyNode,
    &Dtool_MappingMethods_BulletRigidBodyNode,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletRigidBodyNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletRigidBodyNode,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletRigidBodyNode,
    PyType_GenericAlloc,
    Dtool_new_BulletRigidBodyNode,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletRigidBodyNode,
  Dtool_UpcastInterface_BulletRigidBodyNode,
  Dtool_DowncastInterface_BulletRigidBodyNode,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletRigidBodyNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletBodyNode(NULL);
    Dtool_BulletRigidBodyNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletBodyNode);
    PyObject *dict = PyDict_New();
    Dtool_BulletRigidBodyNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletRigidBodyNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletRigidBodyNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletRigidBodyNode);
  }
}

/**
 * Python method tables for BulletSoftBodyNodeElement (BulletSoftBodyNodeElement)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyNodeElement[] = {
  {"empty", &Dtool_BulletSoftBodyNodeElement_empty_307, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNodeElement_empty_307_comment},
  {"get_pos", &Dtool_BulletSoftBodyNodeElement_get_pos_308, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_pos_308_comment},
  {"getPos", &Dtool_BulletSoftBodyNodeElement_get_pos_308, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_pos_308_comment},
  {"get_velocity", &Dtool_BulletSoftBodyNodeElement_get_velocity_309, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_velocity_309_comment},
  {"getVelocity", &Dtool_BulletSoftBodyNodeElement_get_velocity_309, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_velocity_309_comment},
  {"get_normal", &Dtool_BulletSoftBodyNodeElement_get_normal_310, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_normal_310_comment},
  {"getNormal", &Dtool_BulletSoftBodyNodeElement_get_normal_310, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_normal_310_comment},
  {"get_inv_mass", &Dtool_BulletSoftBodyNodeElement_get_inv_mass_311, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_inv_mass_311_comment},
  {"getInvMass", &Dtool_BulletSoftBodyNodeElement_get_inv_mass_311, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_inv_mass_311_comment},
  {"get_area", &Dtool_BulletSoftBodyNodeElement_get_area_312, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_area_312_comment},
  {"getArea", &Dtool_BulletSoftBodyNodeElement_get_area_312, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_get_area_312_comment},
  {"is_attached", &Dtool_BulletSoftBodyNodeElement_is_attached_313, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_is_attached_313_comment},
  {"isAttached", &Dtool_BulletSoftBodyNodeElement_is_attached_313, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNodeElement_is_attached_313_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyNodeElement = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSoftBodyNodeElement = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletSoftBodyNodeElement",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyNodeElement,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletSoftBodyNodeElement,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletSoftBodyNodeElement,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyNodeElement,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyNodeElement,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyNodeElement,
  Dtool_UpcastInterface_BulletSoftBodyNodeElement,
  Dtool_DowncastInterface_BulletSoftBodyNodeElement,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyNodeElement(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletSoftBodyNodeElement._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletSoftBodyNodeElement._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyNodeElement) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyNodeElement)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyNodeElement);
  }
}

/**
 * Python method tables for BulletSoftBodyNode (BulletSoftBodyNode)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyNode[] = {
  {"get_cfg", &Dtool_BulletSoftBodyNode_get_cfg_316, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_cfg_316_comment},
  {"getCfg", &Dtool_BulletSoftBodyNode_get_cfg_316, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_cfg_316_comment},
  {"get_world_info", &Dtool_BulletSoftBodyNode_get_world_info_317, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_world_info_317_comment},
  {"getWorldInfo", &Dtool_BulletSoftBodyNode_get_world_info_317, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_world_info_317_comment},
  {"generate_bending_constraints", (PyCFunction) &Dtool_BulletSoftBodyNode_generate_bending_constraints_318, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_generate_bending_constraints_318_comment},
  {"generateBendingConstraints", (PyCFunction) &Dtool_BulletSoftBodyNode_generate_bending_constraints_318, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_generate_bending_constraints_318_comment},
  {"randomize_constraints", &Dtool_BulletSoftBodyNode_randomize_constraints_319, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_randomize_constraints_319_comment},
  {"randomizeConstraints", &Dtool_BulletSoftBodyNode_randomize_constraints_319, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_randomize_constraints_319_comment},
  {"set_volume_mass", &Dtool_BulletSoftBodyNode_set_volume_mass_320, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_volume_mass_320_comment},
  {"setVolumeMass", &Dtool_BulletSoftBodyNode_set_volume_mass_320, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_volume_mass_320_comment},
  {"set_volume_density", &Dtool_BulletSoftBodyNode_set_volume_density_321, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_volume_density_321_comment},
  {"setVolumeDensity", &Dtool_BulletSoftBodyNode_set_volume_density_321, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_volume_density_321_comment},
  {"set_total_mass", (PyCFunction) &Dtool_BulletSoftBodyNode_set_total_mass_322, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_set_total_mass_322_comment},
  {"setTotalMass", (PyCFunction) &Dtool_BulletSoftBodyNode_set_total_mass_322, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_set_total_mass_322_comment},
  {"set_total_density", &Dtool_BulletSoftBodyNode_set_total_density_323, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_total_density_323_comment},
  {"setTotalDensity", &Dtool_BulletSoftBodyNode_set_total_density_323, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_total_density_323_comment},
  {"set_mass", (PyCFunction) &Dtool_BulletSoftBodyNode_set_mass_324, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_set_mass_324_comment},
  {"setMass", (PyCFunction) &Dtool_BulletSoftBodyNode_set_mass_324, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_set_mass_324_comment},
  {"get_mass", &Dtool_BulletSoftBodyNode_get_mass_325, METH_O, (const char *)Dtool_BulletSoftBodyNode_get_mass_325_comment},
  {"getMass", &Dtool_BulletSoftBodyNode_get_mass_325, METH_O, (const char *)Dtool_BulletSoftBodyNode_get_mass_325_comment},
  {"get_total_mass", &Dtool_BulletSoftBodyNode_get_total_mass_326, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_total_mass_326_comment},
  {"getTotalMass", &Dtool_BulletSoftBodyNode_get_total_mass_326, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_total_mass_326_comment},
  {"get_volume", &Dtool_BulletSoftBodyNode_get_volume_327, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_volume_327_comment},
  {"getVolume", &Dtool_BulletSoftBodyNode_get_volume_327, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_volume_327_comment},
  {"add_force", (PyCFunction) &Dtool_BulletSoftBodyNode_add_force_328, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_add_force_328_comment},
  {"addForce", (PyCFunction) &Dtool_BulletSoftBodyNode_add_force_328, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_add_force_328_comment},
  {"set_velocity", &Dtool_BulletSoftBodyNode_set_velocity_329, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_velocity_329_comment},
  {"setVelocity", &Dtool_BulletSoftBodyNode_set_velocity_329, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_velocity_329_comment},
  {"add_velocity", (PyCFunction) &Dtool_BulletSoftBodyNode_add_velocity_330, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_add_velocity_330_comment},
  {"addVelocity", (PyCFunction) &Dtool_BulletSoftBodyNode_add_velocity_330, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_add_velocity_330_comment},
  {"set_wind_velocity", &Dtool_BulletSoftBodyNode_set_wind_velocity_331, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_wind_velocity_331_comment},
  {"setWindVelocity", &Dtool_BulletSoftBodyNode_set_wind_velocity_331, METH_O, (const char *)Dtool_BulletSoftBodyNode_set_wind_velocity_331_comment},
  {"get_wind_velocity", &Dtool_BulletSoftBodyNode_get_wind_velocity_332, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_wind_velocity_332_comment},
  {"getWindVelocity", &Dtool_BulletSoftBodyNode_get_wind_velocity_332, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_wind_velocity_332_comment},
  {"set_pose", (PyCFunction) &Dtool_BulletSoftBodyNode_set_pose_333, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_set_pose_333_comment},
  {"setPose", (PyCFunction) &Dtool_BulletSoftBodyNode_set_pose_333, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_set_pose_333_comment},
  {"get_aabb", &Dtool_BulletSoftBodyNode_get_aabb_334, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_aabb_334_comment},
  {"getAabb", &Dtool_BulletSoftBodyNode_get_aabb_334, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_aabb_334_comment},
  {"generate_clusters", (PyCFunction) &Dtool_BulletSoftBodyNode_generate_clusters_335, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_generate_clusters_335_comment},
  {"generateClusters", (PyCFunction) &Dtool_BulletSoftBodyNode_generate_clusters_335, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_generate_clusters_335_comment},
  {"release_cluster", &Dtool_BulletSoftBodyNode_release_cluster_336, METH_O, (const char *)Dtool_BulletSoftBodyNode_release_cluster_336_comment},
  {"releaseCluster", &Dtool_BulletSoftBodyNode_release_cluster_336, METH_O, (const char *)Dtool_BulletSoftBodyNode_release_cluster_336_comment},
  {"release_clusters", &Dtool_BulletSoftBodyNode_release_clusters_337, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_release_clusters_337_comment},
  {"releaseClusters", &Dtool_BulletSoftBodyNode_release_clusters_337, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_release_clusters_337_comment},
  {"get_num_clusters", &Dtool_BulletSoftBodyNode_get_num_clusters_338, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_num_clusters_338_comment},
  {"getNumClusters", &Dtool_BulletSoftBodyNode_get_num_clusters_338, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_num_clusters_338_comment},
  {"cluster_com", &Dtool_BulletSoftBodyNode_cluster_com_339, METH_O, (const char *)Dtool_BulletSoftBodyNode_cluster_com_339_comment},
  {"clusterCom", &Dtool_BulletSoftBodyNode_cluster_com_339, METH_O, (const char *)Dtool_BulletSoftBodyNode_cluster_com_339_comment},
  {"link_geom", &Dtool_BulletSoftBodyNode_link_geom_340, METH_O, (const char *)Dtool_BulletSoftBodyNode_link_geom_340_comment},
  {"linkGeom", &Dtool_BulletSoftBodyNode_link_geom_340, METH_O, (const char *)Dtool_BulletSoftBodyNode_link_geom_340_comment},
  {"unlink_geom", &Dtool_BulletSoftBodyNode_unlink_geom_341, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_unlink_geom_341_comment},
  {"unlinkGeom", &Dtool_BulletSoftBodyNode_unlink_geom_341, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_unlink_geom_341_comment},
  {"link_curve", &Dtool_BulletSoftBodyNode_link_curve_342, METH_O, (const char *)Dtool_BulletSoftBodyNode_link_curve_342_comment},
  {"linkCurve", &Dtool_BulletSoftBodyNode_link_curve_342, METH_O, (const char *)Dtool_BulletSoftBodyNode_link_curve_342_comment},
  {"unlink_curve", &Dtool_BulletSoftBodyNode_unlink_curve_343, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_unlink_curve_343_comment},
  {"unlinkCurve", &Dtool_BulletSoftBodyNode_unlink_curve_343, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_unlink_curve_343_comment},
  {"link_surface", &Dtool_BulletSoftBodyNode_link_surface_344, METH_O, (const char *)Dtool_BulletSoftBodyNode_link_surface_344_comment},
  {"linkSurface", &Dtool_BulletSoftBodyNode_link_surface_344, METH_O, (const char *)Dtool_BulletSoftBodyNode_link_surface_344_comment},
  {"unlink_surface", &Dtool_BulletSoftBodyNode_unlink_surface_345, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_unlink_surface_345_comment},
  {"unlinkSurface", &Dtool_BulletSoftBodyNode_unlink_surface_345, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_unlink_surface_345_comment},
  {"append_anchor", (PyCFunction) &Dtool_BulletSoftBodyNode_append_anchor_346, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_append_anchor_346_comment},
  {"appendAnchor", (PyCFunction) &Dtool_BulletSoftBodyNode_append_anchor_346, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_append_anchor_346_comment},
  {"append_linear_joint", (PyCFunction) &Dtool_BulletSoftBodyNode_append_linear_joint_347, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_append_linear_joint_347_comment},
  {"appendLinearJoint", (PyCFunction) &Dtool_BulletSoftBodyNode_append_linear_joint_347, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_append_linear_joint_347_comment},
  {"append_angular_joint", (PyCFunction) &Dtool_BulletSoftBodyNode_append_angular_joint_348, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_append_angular_joint_348_comment},
  {"appendAngularJoint", (PyCFunction) &Dtool_BulletSoftBodyNode_append_angular_joint_348, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_append_angular_joint_348_comment},
  {"get_num_materials", &Dtool_BulletSoftBodyNode_get_num_materials_349, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_num_materials_349_comment},
  {"getNumMaterials", &Dtool_BulletSoftBodyNode_get_num_materials_349, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_num_materials_349_comment},
  {"get_material", &Dtool_BulletSoftBodyNode_get_material_350, METH_O, (const char *)Dtool_BulletSoftBodyNode_get_material_350_comment},
  {"getMaterial", &Dtool_BulletSoftBodyNode_get_material_350, METH_O, (const char *)Dtool_BulletSoftBodyNode_get_material_350_comment},
  {"append_material", &Dtool_BulletSoftBodyNode_append_material_352, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_append_material_352_comment},
  {"appendMaterial", &Dtool_BulletSoftBodyNode_append_material_352, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_append_material_352_comment},
  {"get_num_nodes", &Dtool_BulletSoftBodyNode_get_num_nodes_353, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_num_nodes_353_comment},
  {"getNumNodes", &Dtool_BulletSoftBodyNode_get_num_nodes_353, METH_NOARGS, (const char *)Dtool_BulletSoftBodyNode_get_num_nodes_353_comment},
  {"get_node", &Dtool_BulletSoftBodyNode_get_node_354, METH_O, (const char *)Dtool_BulletSoftBodyNode_get_node_354_comment},
  {"getNode", &Dtool_BulletSoftBodyNode_get_node_354, METH_O, (const char *)Dtool_BulletSoftBodyNode_get_node_354_comment},
  {"get_closest_node_index", (PyCFunction) &Dtool_BulletSoftBodyNode_get_closest_node_index_356, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_get_closest_node_index_356_comment},
  {"getClosestNodeIndex", (PyCFunction) &Dtool_BulletSoftBodyNode_get_closest_node_index_356, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyNode_get_closest_node_index_356_comment},
  {"make_rope", (PyCFunction) &Dtool_BulletSoftBodyNode_make_rope_357, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_rope_357_comment},
  {"makeRope", (PyCFunction) &Dtool_BulletSoftBodyNode_make_rope_357, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_rope_357_comment},
  {"make_patch", (PyCFunction) &Dtool_BulletSoftBodyNode_make_patch_358, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_patch_358_comment},
  {"makePatch", (PyCFunction) &Dtool_BulletSoftBodyNode_make_patch_358, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_patch_358_comment},
  {"make_ellipsoid", (PyCFunction) &Dtool_BulletSoftBodyNode_make_ellipsoid_359, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_ellipsoid_359_comment},
  {"makeEllipsoid", (PyCFunction) &Dtool_BulletSoftBodyNode_make_ellipsoid_359, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_ellipsoid_359_comment},
  {"make_tri_mesh", (PyCFunction) &Dtool_BulletSoftBodyNode_make_tri_mesh_360, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_tri_mesh_360_comment},
  {"makeTriMesh", (PyCFunction) &Dtool_BulletSoftBodyNode_make_tri_mesh_360, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_tri_mesh_360_comment},
  {"make_tet_mesh", (PyCFunction) &Dtool_BulletSoftBodyNode_make_tet_mesh_361, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_tet_mesh_361_comment},
  {"makeTetMesh", (PyCFunction) &Dtool_BulletSoftBodyNode_make_tet_mesh_361, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_make_tet_mesh_361_comment},
  {"get_class_type", &Dtool_BulletSoftBodyNode_get_class_type_362, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_get_class_type_362_comment},
  {"getClassType", &Dtool_BulletSoftBodyNode_get_class_type_362, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSoftBodyNode_get_class_type_362_comment},
  {"get_materials", (PyCFunction) &MakeSeq_BulletSoftBodyNode_get_materials, METH_NOARGS, NULL},
  { "getMaterials", (PyCFunction) &MakeSeq_BulletSoftBodyNode_get_materials, METH_NOARGS, NULL},
  {"get_nodes", (PyCFunction) &MakeSeq_BulletSoftBodyNode_get_nodes, METH_NOARGS, NULL},
  { "getNodes", (PyCFunction) &MakeSeq_BulletSoftBodyNode_get_nodes, METH_NOARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyNode = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletSoftBodyNode = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletSoftBodyNode = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletSoftBodyNode = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSoftBodyNode = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletSoftBodyNode",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyNode,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletSoftBodyNode,
    &Dtool_SequenceMethods_BulletSoftBodyNode,
    &Dtool_MappingMethods_BulletSoftBodyNode,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletSoftBodyNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletSoftBodyNode,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyNode,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyNode,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyNode,
  Dtool_UpcastInterface_BulletSoftBodyNode,
  Dtool_DowncastInterface_BulletSoftBodyNode,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletBodyNode(NULL);
    Dtool_BulletSoftBodyNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletBodyNode);
    PyObject *dict = PyDict_New();
    Dtool_BulletSoftBodyNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyNode);
  }
}

/**
 * Python method tables for BulletVehicleTuning (BulletVehicleTuning)
 */
static PyMethodDef Dtool_Methods_BulletVehicleTuning[] = {
  {"set_suspension_stiffness", &Dtool_BulletVehicleTuning_set_suspension_stiffness_364, METH_O, (const char *)Dtool_BulletVehicleTuning_set_suspension_stiffness_364_comment},
  {"setSuspensionStiffness", &Dtool_BulletVehicleTuning_set_suspension_stiffness_364, METH_O, (const char *)Dtool_BulletVehicleTuning_set_suspension_stiffness_364_comment},
  {"set_suspension_compression", &Dtool_BulletVehicleTuning_set_suspension_compression_365, METH_O, (const char *)Dtool_BulletVehicleTuning_set_suspension_compression_365_comment},
  {"setSuspensionCompression", &Dtool_BulletVehicleTuning_set_suspension_compression_365, METH_O, (const char *)Dtool_BulletVehicleTuning_set_suspension_compression_365_comment},
  {"set_suspension_damping", &Dtool_BulletVehicleTuning_set_suspension_damping_366, METH_O, (const char *)Dtool_BulletVehicleTuning_set_suspension_damping_366_comment},
  {"setSuspensionDamping", &Dtool_BulletVehicleTuning_set_suspension_damping_366, METH_O, (const char *)Dtool_BulletVehicleTuning_set_suspension_damping_366_comment},
  {"set_max_suspension_travel_cm", &Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_367, METH_O, (const char *)Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_367_comment},
  {"setMaxSuspensionTravelCm", &Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_367, METH_O, (const char *)Dtool_BulletVehicleTuning_set_max_suspension_travel_cm_367_comment},
  {"set_friction_slip", &Dtool_BulletVehicleTuning_set_friction_slip_368, METH_O, (const char *)Dtool_BulletVehicleTuning_set_friction_slip_368_comment},
  {"setFrictionSlip", &Dtool_BulletVehicleTuning_set_friction_slip_368, METH_O, (const char *)Dtool_BulletVehicleTuning_set_friction_slip_368_comment},
  {"set_max_suspension_force", &Dtool_BulletVehicleTuning_set_max_suspension_force_369, METH_O, (const char *)Dtool_BulletVehicleTuning_set_max_suspension_force_369_comment},
  {"setMaxSuspensionForce", &Dtool_BulletVehicleTuning_set_max_suspension_force_369, METH_O, (const char *)Dtool_BulletVehicleTuning_set_max_suspension_force_369_comment},
  {"get_suspension_stiffness", &Dtool_BulletVehicleTuning_get_suspension_stiffness_370, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_suspension_stiffness_370_comment},
  {"getSuspensionStiffness", &Dtool_BulletVehicleTuning_get_suspension_stiffness_370, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_suspension_stiffness_370_comment},
  {"get_suspension_compression", &Dtool_BulletVehicleTuning_get_suspension_compression_371, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_suspension_compression_371_comment},
  {"getSuspensionCompression", &Dtool_BulletVehicleTuning_get_suspension_compression_371, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_suspension_compression_371_comment},
  {"get_suspension_damping", &Dtool_BulletVehicleTuning_get_suspension_damping_372, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_suspension_damping_372_comment},
  {"getSuspensionDamping", &Dtool_BulletVehicleTuning_get_suspension_damping_372, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_suspension_damping_372_comment},
  {"get_max_suspension_travel_cm", &Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_373, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_373_comment},
  {"getMaxSuspensionTravelCm", &Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_373, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_max_suspension_travel_cm_373_comment},
  {"get_friction_slip", &Dtool_BulletVehicleTuning_get_friction_slip_374, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_friction_slip_374_comment},
  {"getFrictionSlip", &Dtool_BulletVehicleTuning_get_friction_slip_374, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_friction_slip_374_comment},
  {"get_max_suspension_force", &Dtool_BulletVehicleTuning_get_max_suspension_force_375, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_max_suspension_force_375_comment},
  {"getMaxSuspensionForce", &Dtool_BulletVehicleTuning_get_max_suspension_force_375, METH_NOARGS, (const char *)Dtool_BulletVehicleTuning_get_max_suspension_force_375_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletVehicleTuning = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletVehicleTuning = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletVehicleTuning",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletVehicleTuning,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletVehicleTuning,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletVehicleTuning,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletVehicleTuning,
    PyType_GenericAlloc,
    Dtool_new_BulletVehicleTuning,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletVehicleTuning,
  Dtool_UpcastInterface_BulletVehicleTuning,
  Dtool_DowncastInterface_BulletVehicleTuning,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletVehicleTuning(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletVehicleTuning._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletVehicleTuning._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletVehicleTuning) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletVehicleTuning)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletVehicleTuning);
  }
}

/**
 * Python method tables for BulletVehicle (BulletVehicle)
 */
static PyMethodDef Dtool_Methods_BulletVehicle[] = {
  {"set_coordinate_system", &Dtool_BulletVehicle_set_coordinate_system_379, METH_O, (const char *)Dtool_BulletVehicle_set_coordinate_system_379_comment},
  {"setCoordinateSystem", &Dtool_BulletVehicle_set_coordinate_system_379, METH_O, (const char *)Dtool_BulletVehicle_set_coordinate_system_379_comment},
  {"set_steering_value", (PyCFunction) &Dtool_BulletVehicle_set_steering_value_380, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_set_steering_value_380_comment},
  {"setSteeringValue", (PyCFunction) &Dtool_BulletVehicle_set_steering_value_380, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_set_steering_value_380_comment},
  {"set_brake", (PyCFunction) &Dtool_BulletVehicle_set_brake_381, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_set_brake_381_comment},
  {"setBrake", (PyCFunction) &Dtool_BulletVehicle_set_brake_381, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_set_brake_381_comment},
  {"set_pitch_control", &Dtool_BulletVehicle_set_pitch_control_382, METH_O, (const char *)Dtool_BulletVehicle_set_pitch_control_382_comment},
  {"setPitchControl", &Dtool_BulletVehicle_set_pitch_control_382, METH_O, (const char *)Dtool_BulletVehicle_set_pitch_control_382_comment},
  {"get_chassis", &Dtool_BulletVehicle_get_chassis_383, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_chassis_383_comment},
  {"getChassis", &Dtool_BulletVehicle_get_chassis_383, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_chassis_383_comment},
  {"get_current_speed_km_hour", &Dtool_BulletVehicle_get_current_speed_km_hour_384, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_current_speed_km_hour_384_comment},
  {"getCurrentSpeedKmHour", &Dtool_BulletVehicle_get_current_speed_km_hour_384, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_current_speed_km_hour_384_comment},
  {"get_steering_value", &Dtool_BulletVehicle_get_steering_value_385, METH_O, (const char *)Dtool_BulletVehicle_get_steering_value_385_comment},
  {"getSteeringValue", &Dtool_BulletVehicle_get_steering_value_385, METH_O, (const char *)Dtool_BulletVehicle_get_steering_value_385_comment},
  {"get_forward_vector", &Dtool_BulletVehicle_get_forward_vector_386, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_forward_vector_386_comment},
  {"getForwardVector", &Dtool_BulletVehicle_get_forward_vector_386, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_forward_vector_386_comment},
  {"reset_suspension", &Dtool_BulletVehicle_reset_suspension_387, METH_NOARGS, (const char *)Dtool_BulletVehicle_reset_suspension_387_comment},
  {"resetSuspension", &Dtool_BulletVehicle_reset_suspension_387, METH_NOARGS, (const char *)Dtool_BulletVehicle_reset_suspension_387_comment},
  {"apply_engine_force", (PyCFunction) &Dtool_BulletVehicle_apply_engine_force_388, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_apply_engine_force_388_comment},
  {"applyEngineForce", (PyCFunction) &Dtool_BulletVehicle_apply_engine_force_388, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletVehicle_apply_engine_force_388_comment},
  {"create_wheel", &Dtool_BulletVehicle_create_wheel_389, METH_NOARGS, (const char *)Dtool_BulletVehicle_create_wheel_389_comment},
  {"createWheel", &Dtool_BulletVehicle_create_wheel_389, METH_NOARGS, (const char *)Dtool_BulletVehicle_create_wheel_389_comment},
  {"get_num_wheels", &Dtool_BulletVehicle_get_num_wheels_390, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_num_wheels_390_comment},
  {"getNumWheels", &Dtool_BulletVehicle_get_num_wheels_390, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_num_wheels_390_comment},
  {"get_wheel", &Dtool_BulletVehicle_get_wheel_391, METH_O, (const char *)Dtool_BulletVehicle_get_wheel_391_comment},
  {"getWheel", &Dtool_BulletVehicle_get_wheel_391, METH_O, (const char *)Dtool_BulletVehicle_get_wheel_391_comment},
  {"get_tuning", &Dtool_BulletVehicle_get_tuning_393, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_tuning_393_comment},
  {"getTuning", &Dtool_BulletVehicle_get_tuning_393, METH_NOARGS, (const char *)Dtool_BulletVehicle_get_tuning_393_comment},
  {"get_class_type", &Dtool_BulletVehicle_get_class_type_394, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletVehicle_get_class_type_394_comment},
  {"getClassType", &Dtool_BulletVehicle_get_class_type_394, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletVehicle_get_class_type_394_comment},
  {"get_wheels", (PyCFunction) &MakeSeq_BulletVehicle_get_wheels, METH_NOARGS, NULL},
  { "getWheels", (PyCFunction) &MakeSeq_BulletVehicle_get_wheels, METH_NOARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletVehicle = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletVehicle = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletVehicle = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletVehicle = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletVehicle = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletVehicle",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletVehicle,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletVehicle,
    &Dtool_SequenceMethods_BulletVehicle,
    &Dtool_MappingMethods_BulletVehicle,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletVehicle,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * Simulates a raycast vehicle which casts a ray per wheel at the ground as a\n"
    " * cheap replacement for complex suspension simulation.  The suspension can be\n"
    " * tuned in various ways.  It is possible to add a (probably) arbitrary number\n"
    " * of wheels.\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletVehicle,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletVehicle,
    PyType_GenericAlloc,
    Dtool_new_BulletVehicle,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletVehicle,
  Dtool_UpcastInterface_BulletVehicle,
  Dtool_DowncastInterface_BulletVehicle,
  (CoerceFunction)Dtool_ConstCoerce_BulletVehicle,
  (CoerceFunction)Dtool_Coerce_BulletVehicle,
};

static void Dtool_PyModuleClassInit_BulletVehicle(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_TypedReferenceCount != NULL);
    assert(Dtool_Ptr_TypedReferenceCount->_Dtool_ModuleClassInit != NULL);
    Dtool_Ptr_TypedReferenceCount->_Dtool_ModuleClassInit(NULL);
    Dtool_BulletVehicle._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_TypedReferenceCount);
    PyObject *dict = PyDict_New();
    Dtool_BulletVehicle._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletVehicle) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletVehicle)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletVehicle);
  }
}

/**
 * Python method tables for BulletWorld (BulletWorld)
 */
static PyMethodDef Dtool_Methods_BulletWorld[] = {
  {"set_gravity", (PyCFunction) &Dtool_BulletWorld_set_gravity_397, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_set_gravity_397_comment},
  {"setGravity", (PyCFunction) &Dtool_BulletWorld_set_gravity_397, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_set_gravity_397_comment},
  {"get_gravity", &Dtool_BulletWorld_get_gravity_398, METH_NOARGS, (const char *)Dtool_BulletWorld_get_gravity_398_comment},
  {"getGravity", &Dtool_BulletWorld_get_gravity_398, METH_NOARGS, (const char *)Dtool_BulletWorld_get_gravity_398_comment},
  {"do_physics", (PyCFunction) &Dtool_BulletWorld_do_physics_399, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_do_physics_399_comment},
  {"doPhysics", (PyCFunction) &Dtool_BulletWorld_do_physics_399, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_do_physics_399_comment},
  {"get_world_info", &Dtool_BulletWorld_get_world_info_400, METH_NOARGS, (const char *)Dtool_BulletWorld_get_world_info_400_comment},
  {"getWorldInfo", &Dtool_BulletWorld_get_world_info_400, METH_NOARGS, (const char *)Dtool_BulletWorld_get_world_info_400_comment},
  {"set_debug_node", &Dtool_BulletWorld_set_debug_node_401, METH_O, (const char *)Dtool_BulletWorld_set_debug_node_401_comment},
  {"setDebugNode", &Dtool_BulletWorld_set_debug_node_401, METH_O, (const char *)Dtool_BulletWorld_set_debug_node_401_comment},
  {"clear_debug_node", &Dtool_BulletWorld_clear_debug_node_402, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_debug_node_402_comment},
  {"clearDebugNode", &Dtool_BulletWorld_clear_debug_node_402, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_debug_node_402_comment},
  {"get_debug_node", &Dtool_BulletWorld_get_debug_node_403, METH_NOARGS, (const char *)Dtool_BulletWorld_get_debug_node_403_comment},
  {"getDebugNode", &Dtool_BulletWorld_get_debug_node_403, METH_NOARGS, (const char *)Dtool_BulletWorld_get_debug_node_403_comment},
  {"attach", &Dtool_BulletWorld_attach_404, METH_O, (const char *)Dtool_BulletWorld_attach_404_comment},
  {"attach_constraint", (PyCFunction) &Dtool_BulletWorld_attach_constraint_405, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_attach_constraint_405_comment},
  {"attachConstraint", (PyCFunction) &Dtool_BulletWorld_attach_constraint_405, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_attach_constraint_405_comment},
  {"remove", &Dtool_BulletWorld_remove_406, METH_O, (const char *)Dtool_BulletWorld_remove_406_comment},
  {"get_num_ghosts", &Dtool_BulletWorld_get_num_ghosts_407, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_ghosts_407_comment},
  {"getNumGhosts", &Dtool_BulletWorld_get_num_ghosts_407, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_ghosts_407_comment},
  {"get_ghost", &Dtool_BulletWorld_get_ghost_408, METH_O, (const char *)Dtool_BulletWorld_get_ghost_408_comment},
  {"getGhost", &Dtool_BulletWorld_get_ghost_408, METH_O, (const char *)Dtool_BulletWorld_get_ghost_408_comment},
  {"get_num_rigid_bodies", &Dtool_BulletWorld_get_num_rigid_bodies_410, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_rigid_bodies_410_comment},
  {"getNumRigidBodies", &Dtool_BulletWorld_get_num_rigid_bodies_410, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_rigid_bodies_410_comment},
  {"get_rigid_body", &Dtool_BulletWorld_get_rigid_body_411, METH_O, (const char *)Dtool_BulletWorld_get_rigid_body_411_comment},
  {"getRigidBody", &Dtool_BulletWorld_get_rigid_body_411, METH_O, (const char *)Dtool_BulletWorld_get_rigid_body_411_comment},
  {"get_num_soft_bodies", &Dtool_BulletWorld_get_num_soft_bodies_413, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_soft_bodies_413_comment},
  {"getNumSoftBodies", &Dtool_BulletWorld_get_num_soft_bodies_413, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_soft_bodies_413_comment},
  {"get_soft_body", &Dtool_BulletWorld_get_soft_body_414, METH_O, (const char *)Dtool_BulletWorld_get_soft_body_414_comment},
  {"getSoftBody", &Dtool_BulletWorld_get_soft_body_414, METH_O, (const char *)Dtool_BulletWorld_get_soft_body_414_comment},
  {"get_num_characters", &Dtool_BulletWorld_get_num_characters_416, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_characters_416_comment},
  {"getNumCharacters", &Dtool_BulletWorld_get_num_characters_416, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_characters_416_comment},
  {"get_character", &Dtool_BulletWorld_get_character_417, METH_O, (const char *)Dtool_BulletWorld_get_character_417_comment},
  {"getCharacter", &Dtool_BulletWorld_get_character_417, METH_O, (const char *)Dtool_BulletWorld_get_character_417_comment},
  {"attach_vehicle", &Dtool_BulletWorld_attach_vehicle_419, METH_O, (const char *)Dtool_BulletWorld_attach_vehicle_419_comment},
  {"attachVehicle", &Dtool_BulletWorld_attach_vehicle_419, METH_O, (const char *)Dtool_BulletWorld_attach_vehicle_419_comment},
  {"remove_vehicle", &Dtool_BulletWorld_remove_vehicle_420, METH_O, (const char *)Dtool_BulletWorld_remove_vehicle_420_comment},
  {"removeVehicle", &Dtool_BulletWorld_remove_vehicle_420, METH_O, (const char *)Dtool_BulletWorld_remove_vehicle_420_comment},
  {"get_num_vehicles", &Dtool_BulletWorld_get_num_vehicles_421, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_vehicles_421_comment},
  {"getNumVehicles", &Dtool_BulletWorld_get_num_vehicles_421, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_vehicles_421_comment},
  {"get_vehicle", &Dtool_BulletWorld_get_vehicle_422, METH_O, (const char *)Dtool_BulletWorld_get_vehicle_422_comment},
  {"getVehicle", &Dtool_BulletWorld_get_vehicle_422, METH_O, (const char *)Dtool_BulletWorld_get_vehicle_422_comment},
  {"get_num_constraints", &Dtool_BulletWorld_get_num_constraints_424, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_constraints_424_comment},
  {"getNumConstraints", &Dtool_BulletWorld_get_num_constraints_424, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_constraints_424_comment},
  {"get_constraint", &Dtool_BulletWorld_get_constraint_425, METH_O, (const char *)Dtool_BulletWorld_get_constraint_425_comment},
  {"getConstraint", &Dtool_BulletWorld_get_constraint_425, METH_O, (const char *)Dtool_BulletWorld_get_constraint_425_comment},
  {"ray_test_closest", (PyCFunction) &Dtool_BulletWorld_ray_test_closest_427, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_ray_test_closest_427_comment},
  {"rayTestClosest", (PyCFunction) &Dtool_BulletWorld_ray_test_closest_427, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_ray_test_closest_427_comment},
  {"ray_test_all", (PyCFunction) &Dtool_BulletWorld_ray_test_all_428, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_ray_test_all_428_comment},
  {"rayTestAll", (PyCFunction) &Dtool_BulletWorld_ray_test_all_428, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_ray_test_all_428_comment},
  {"sweep_test_closest", (PyCFunction) &Dtool_BulletWorld_sweep_test_closest_429, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_sweep_test_closest_429_comment},
  {"sweepTestClosest", (PyCFunction) &Dtool_BulletWorld_sweep_test_closest_429, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_sweep_test_closest_429_comment},
  {"contact_test", (PyCFunction) &Dtool_BulletWorld_contact_test_430, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_contact_test_430_comment},
  {"contactTest", (PyCFunction) &Dtool_BulletWorld_contact_test_430, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_contact_test_430_comment},
  {"contact_test_pair", (PyCFunction) &Dtool_BulletWorld_contact_test_pair_431, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_contact_test_pair_431_comment},
  {"contactTestPair", (PyCFunction) &Dtool_BulletWorld_contact_test_pair_431, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_contact_test_pair_431_comment},
  {"filter_test", (PyCFunction) &Dtool_BulletWorld_filter_test_432, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_filter_test_432_comment},
  {"filterTest", (PyCFunction) &Dtool_BulletWorld_filter_test_432, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_filter_test_432_comment},
  {"get_num_manifolds", &Dtool_BulletWorld_get_num_manifolds_433, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_manifolds_433_comment},
  {"getNumManifolds", &Dtool_BulletWorld_get_num_manifolds_433, METH_NOARGS, (const char *)Dtool_BulletWorld_get_num_manifolds_433_comment},
  {"get_manifold", &Dtool_BulletWorld_get_manifold_434, METH_O, (const char *)Dtool_BulletWorld_get_manifold_434_comment},
  {"getManifold", &Dtool_BulletWorld_get_manifold_434, METH_O, (const char *)Dtool_BulletWorld_get_manifold_434_comment},
  {"set_group_collision_flag", (PyCFunction) &Dtool_BulletWorld_set_group_collision_flag_436, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_set_group_collision_flag_436_comment},
  {"setGroupCollisionFlag", (PyCFunction) &Dtool_BulletWorld_set_group_collision_flag_436, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_set_group_collision_flag_436_comment},
  {"get_group_collision_flag", (PyCFunction) &Dtool_BulletWorld_get_group_collision_flag_437, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_get_group_collision_flag_437_comment},
  {"getGroupCollisionFlag", (PyCFunction) &Dtool_BulletWorld_get_group_collision_flag_437, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_get_group_collision_flag_437_comment},
  {"set_contact_added_callback", &Dtool_BulletWorld_set_contact_added_callback_438, METH_O, (const char *)Dtool_BulletWorld_set_contact_added_callback_438_comment},
  {"setContactAddedCallback", &Dtool_BulletWorld_set_contact_added_callback_438, METH_O, (const char *)Dtool_BulletWorld_set_contact_added_callback_438_comment},
  {"clear_contact_added_callback", &Dtool_BulletWorld_clear_contact_added_callback_439, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_contact_added_callback_439_comment},
  {"clearContactAddedCallback", &Dtool_BulletWorld_clear_contact_added_callback_439, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_contact_added_callback_439_comment},
  {"set_tick_callback", (PyCFunction) &Dtool_BulletWorld_set_tick_callback_440, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_set_tick_callback_440_comment},
  {"setTickCallback", (PyCFunction) &Dtool_BulletWorld_set_tick_callback_440, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletWorld_set_tick_callback_440_comment},
  {"clear_tick_callback", &Dtool_BulletWorld_clear_tick_callback_441, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_tick_callback_441_comment},
  {"clearTickCallback", &Dtool_BulletWorld_clear_tick_callback_441, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_tick_callback_441_comment},
  {"set_filter_callback", &Dtool_BulletWorld_set_filter_callback_442, METH_O, (const char *)Dtool_BulletWorld_set_filter_callback_442_comment},
  {"setFilterCallback", &Dtool_BulletWorld_set_filter_callback_442, METH_O, (const char *)Dtool_BulletWorld_set_filter_callback_442_comment},
  {"clear_filter_callback", &Dtool_BulletWorld_clear_filter_callback_443, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_filter_callback_443_comment},
  {"clearFilterCallback", &Dtool_BulletWorld_clear_filter_callback_443, METH_NOARGS, (const char *)Dtool_BulletWorld_clear_filter_callback_443_comment},
  {"attach_ghost", &Dtool_BulletWorld_attach_ghost_446, METH_O, (const char *)Dtool_BulletWorld_attach_ghost_446_comment},
  {"attachGhost", &Dtool_BulletWorld_attach_ghost_446, METH_O, (const char *)Dtool_BulletWorld_attach_ghost_446_comment},
  {"remove_ghost", &Dtool_BulletWorld_remove_ghost_447, METH_O, (const char *)Dtool_BulletWorld_remove_ghost_447_comment},
  {"removeGhost", &Dtool_BulletWorld_remove_ghost_447, METH_O, (const char *)Dtool_BulletWorld_remove_ghost_447_comment},
  {"attach_rigid_body", &Dtool_BulletWorld_attach_rigid_body_448, METH_O, (const char *)Dtool_BulletWorld_attach_rigid_body_448_comment},
  {"attachRigidBody", &Dtool_BulletWorld_attach_rigid_body_448, METH_O, (const char *)Dtool_BulletWorld_attach_rigid_body_448_comment},
  {"remove_rigid_body", &Dtool_BulletWorld_remove_rigid_body_449, METH_O, (const char *)Dtool_BulletWorld_remove_rigid_body_449_comment},
  {"removeRigidBody", &Dtool_BulletWorld_remove_rigid_body_449, METH_O, (const char *)Dtool_BulletWorld_remove_rigid_body_449_comment},
  {"attach_soft_body", &Dtool_BulletWorld_attach_soft_body_450, METH_O, (const char *)Dtool_BulletWorld_attach_soft_body_450_comment},
  {"attachSoftBody", &Dtool_BulletWorld_attach_soft_body_450, METH_O, (const char *)Dtool_BulletWorld_attach_soft_body_450_comment},
  {"remove_soft_body", &Dtool_BulletWorld_remove_soft_body_451, METH_O, (const char *)Dtool_BulletWorld_remove_soft_body_451_comment},
  {"removeSoftBody", &Dtool_BulletWorld_remove_soft_body_451, METH_O, (const char *)Dtool_BulletWorld_remove_soft_body_451_comment},
  {"attach_character", &Dtool_BulletWorld_attach_character_452, METH_O, (const char *)Dtool_BulletWorld_attach_character_452_comment},
  {"attachCharacter", &Dtool_BulletWorld_attach_character_452, METH_O, (const char *)Dtool_BulletWorld_attach_character_452_comment},
  {"remove_character", &Dtool_BulletWorld_remove_character_453, METH_O, (const char *)Dtool_BulletWorld_remove_character_453_comment},
  {"removeCharacter", &Dtool_BulletWorld_remove_character_453, METH_O, (const char *)Dtool_BulletWorld_remove_character_453_comment},
  {"remove_constraint", &Dtool_BulletWorld_remove_constraint_454, METH_O, (const char *)Dtool_BulletWorld_remove_constraint_454_comment},
  {"removeConstraint", &Dtool_BulletWorld_remove_constraint_454, METH_O, (const char *)Dtool_BulletWorld_remove_constraint_454_comment},
  {"get_class_type", &Dtool_BulletWorld_get_class_type_455, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletWorld_get_class_type_455_comment},
  {"getClassType", &Dtool_BulletWorld_get_class_type_455, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletWorld_get_class_type_455_comment},
  {"get_ghosts", (PyCFunction) &MakeSeq_BulletWorld_get_ghosts, METH_NOARGS, NULL},
  { "getGhosts", (PyCFunction) &MakeSeq_BulletWorld_get_ghosts, METH_NOARGS, NULL},
  {"get_rigid_bodies", (PyCFunction) &MakeSeq_BulletWorld_get_rigid_bodies, METH_NOARGS, NULL},
  { "getRigidBodies", (PyCFunction) &MakeSeq_BulletWorld_get_rigid_bodies, METH_NOARGS, NULL},
  {"get_soft_bodies", (PyCFunction) &MakeSeq_BulletWorld_get_soft_bodies, METH_NOARGS, NULL},
  { "getSoftBodies", (PyCFunction) &MakeSeq_BulletWorld_get_soft_bodies, METH_NOARGS, NULL},
  {"get_characters", (PyCFunction) &MakeSeq_BulletWorld_get_characters, METH_NOARGS, NULL},
  { "getCharacters", (PyCFunction) &MakeSeq_BulletWorld_get_characters, METH_NOARGS, NULL},
  {"get_vehicles", (PyCFunction) &MakeSeq_BulletWorld_get_vehicles, METH_NOARGS, NULL},
  { "getVehicles", (PyCFunction) &MakeSeq_BulletWorld_get_vehicles, METH_NOARGS, NULL},
  {"get_constraints", (PyCFunction) &MakeSeq_BulletWorld_get_constraints, METH_NOARGS, NULL},
  { "getConstraints", (PyCFunction) &MakeSeq_BulletWorld_get_constraints, METH_NOARGS, NULL},
  {"get_manifolds", (PyCFunction) &MakeSeq_BulletWorld_get_manifolds, METH_NOARGS, NULL},
  { "getManifolds", (PyCFunction) &MakeSeq_BulletWorld_get_manifolds, METH_NOARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletWorld = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletWorld = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletWorld = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletWorld = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletWorld = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletWorld",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletWorld,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletWorld,
    &Dtool_SequenceMethods_BulletWorld,
    &Dtool_MappingMethods_BulletWorld,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletWorld,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletWorld,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletWorld,
    PyType_GenericAlloc,
    Dtool_new_BulletWorld,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletWorld,
  Dtool_UpcastInterface_BulletWorld,
  Dtool_DowncastInterface_BulletWorld,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletWorld(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_TypedReferenceCount != NULL);
    assert(Dtool_Ptr_TypedReferenceCount->_Dtool_ModuleClassInit != NULL);
    Dtool_Ptr_TypedReferenceCount->_Dtool_ModuleClassInit(NULL);
    Dtool_BulletWorld._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_TypedReferenceCount);
    PyObject *dict = _PyDict_NewPresized(11);
    Dtool_BulletWorld._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    // enum BulletWorld::BroadphaseAlgorithm;
    PyDict_SetItemString(dict, "BA_sweep_and_prune", Dtool_WrapValue(BulletWorld::BA_sweep_and_prune));
    PyDict_SetItemString(dict, "BASweepAndPrune", Dtool_WrapValue(BulletWorld::BA_sweep_and_prune));
    PyDict_SetItemString(dict, "BA_dynamic_aabb_tree", Dtool_WrapValue(BulletWorld::BA_dynamic_aabb_tree));
    PyDict_SetItemString(dict, "BADynamicAabbTree", Dtool_WrapValue(BulletWorld::BA_dynamic_aabb_tree));
    // enum BulletWorld::FilterAlgorithm;
    PyDict_SetItemString(dict, "FA_mask", Dtool_WrapValue(BulletWorld::FA_mask));
    PyDict_SetItemString(dict, "FAMask", Dtool_WrapValue(BulletWorld::FA_mask));
    PyDict_SetItemString(dict, "FA_groups_mask", Dtool_WrapValue(BulletWorld::FA_groups_mask));
    PyDict_SetItemString(dict, "FAGroupsMask", Dtool_WrapValue(BulletWorld::FA_groups_mask));
    PyDict_SetItemString(dict, "FA_callback", Dtool_WrapValue(BulletWorld::FA_callback));
    PyDict_SetItemString(dict, "FACallback", Dtool_WrapValue(BulletWorld::FA_callback));
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletWorld) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletWorld)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletWorld);
  }
}

/**
 * Python method tables for BulletConvexHullShape (BulletConvexHullShape)
 */
static PyMethodDef Dtool_Methods_BulletConvexHullShape[] = {
  {"assign", &Dtool_BulletConvexHullShape_operator_458, METH_O, (const char *)Dtool_BulletConvexHullShape_operator_458_comment},
  {"add_point", &Dtool_BulletConvexHullShape_add_point_459, METH_O, (const char *)Dtool_BulletConvexHullShape_add_point_459_comment},
  {"addPoint", &Dtool_BulletConvexHullShape_add_point_459, METH_O, (const char *)Dtool_BulletConvexHullShape_add_point_459_comment},
  {"add_array", &Dtool_BulletConvexHullShape_add_array_460, METH_O, (const char *)Dtool_BulletConvexHullShape_add_array_460_comment},
  {"addArray", &Dtool_BulletConvexHullShape_add_array_460, METH_O, (const char *)Dtool_BulletConvexHullShape_add_array_460_comment},
  {"add_geom", (PyCFunction) &Dtool_BulletConvexHullShape_add_geom_461, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConvexHullShape_add_geom_461_comment},
  {"addGeom", (PyCFunction) &Dtool_BulletConvexHullShape_add_geom_461, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletConvexHullShape_add_geom_461_comment},
  {"get_class_type", &Dtool_BulletConvexHullShape_get_class_type_462, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConvexHullShape_get_class_type_462_comment},
  {"getClassType", &Dtool_BulletConvexHullShape_get_class_type_462, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConvexHullShape_get_class_type_462_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletConvexHullShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletConvexHullShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletConvexHullShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletConvexHullShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletConvexHullShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletConvexHullShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletConvexHullShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletConvexHullShape,
    &Dtool_SequenceMethods_BulletConvexHullShape,
    &Dtool_MappingMethods_BulletConvexHullShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletConvexHullShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletConvexHullShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletConvexHullShape,
    PyType_GenericAlloc,
    Dtool_new_BulletConvexHullShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletConvexHullShape,
  Dtool_UpcastInterface_BulletConvexHullShape,
  Dtool_DowncastInterface_BulletConvexHullShape,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletConvexHullShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletConvexHullShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletConvexHullShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletConvexHullShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletConvexHullShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletConvexHullShape);
  }
}

/**
 * Python method tables for BulletConvexPointCloudShape (BulletConvexPointCloudShape)
 */
static PyMethodDef Dtool_Methods_BulletConvexPointCloudShape[] = {
  {"assign", &Dtool_BulletConvexPointCloudShape_operator_465, METH_O, (const char *)Dtool_BulletConvexPointCloudShape_operator_465_comment},
  {"get_num_points", &Dtool_BulletConvexPointCloudShape_get_num_points_466, METH_NOARGS, (const char *)Dtool_BulletConvexPointCloudShape_get_num_points_466_comment},
  {"getNumPoints", &Dtool_BulletConvexPointCloudShape_get_num_points_466, METH_NOARGS, (const char *)Dtool_BulletConvexPointCloudShape_get_num_points_466_comment},
  {"get_class_type", &Dtool_BulletConvexPointCloudShape_get_class_type_467, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConvexPointCloudShape_get_class_type_467_comment},
  {"getClassType", &Dtool_BulletConvexPointCloudShape_get_class_type_467, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletConvexPointCloudShape_get_class_type_467_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletConvexPointCloudShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletConvexPointCloudShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletConvexPointCloudShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletConvexPointCloudShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletConvexPointCloudShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletConvexPointCloudShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletConvexPointCloudShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletConvexPointCloudShape,
    &Dtool_SequenceMethods_BulletConvexPointCloudShape,
    &Dtool_MappingMethods_BulletConvexPointCloudShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletConvexPointCloudShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletConvexPointCloudShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletConvexPointCloudShape,
    PyType_GenericAlloc,
    Dtool_new_BulletConvexPointCloudShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletConvexPointCloudShape,
  Dtool_UpcastInterface_BulletConvexPointCloudShape,
  Dtool_DowncastInterface_BulletConvexPointCloudShape,
  (CoerceFunction)Dtool_ConstCoerce_BulletConvexPointCloudShape,
  (CoerceFunction)Dtool_Coerce_BulletConvexPointCloudShape,
};

static void Dtool_PyModuleClassInit_BulletConvexPointCloudShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletConvexPointCloudShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletConvexPointCloudShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletConvexPointCloudShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletConvexPointCloudShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletConvexPointCloudShape);
  }
}

/**
 * Python method tables for BulletCylinderShape (BulletCylinderShape)
 */
static PyMethodDef Dtool_Methods_BulletCylinderShape[] = {
  {"assign", &Dtool_BulletCylinderShape_operator_470, METH_O, (const char *)Dtool_BulletCylinderShape_operator_470_comment},
  {"get_radius", &Dtool_BulletCylinderShape_get_radius_471, METH_NOARGS, (const char *)Dtool_BulletCylinderShape_get_radius_471_comment},
  {"getRadius", &Dtool_BulletCylinderShape_get_radius_471, METH_NOARGS, (const char *)Dtool_BulletCylinderShape_get_radius_471_comment},
  {"get_half_extents_without_margin", &Dtool_BulletCylinderShape_get_half_extents_without_margin_472, METH_NOARGS, (const char *)Dtool_BulletCylinderShape_get_half_extents_without_margin_472_comment},
  {"getHalfExtentsWithoutMargin", &Dtool_BulletCylinderShape_get_half_extents_without_margin_472, METH_NOARGS, (const char *)Dtool_BulletCylinderShape_get_half_extents_without_margin_472_comment},
  {"get_half_extents_with_margin", &Dtool_BulletCylinderShape_get_half_extents_with_margin_473, METH_NOARGS, (const char *)Dtool_BulletCylinderShape_get_half_extents_with_margin_473_comment},
  {"getHalfExtentsWithMargin", &Dtool_BulletCylinderShape_get_half_extents_with_margin_473, METH_NOARGS, (const char *)Dtool_BulletCylinderShape_get_half_extents_with_margin_473_comment},
  {"get_class_type", &Dtool_BulletCylinderShape_get_class_type_474, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletCylinderShape_get_class_type_474_comment},
  {"getClassType", &Dtool_BulletCylinderShape_get_class_type_474, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletCylinderShape_get_class_type_474_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletCylinderShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletCylinderShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletCylinderShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletCylinderShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletCylinderShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletCylinderShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletCylinderShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletCylinderShape,
    &Dtool_SequenceMethods_BulletCylinderShape,
    &Dtool_MappingMethods_BulletCylinderShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletCylinderShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletCylinderShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletCylinderShape,
    PyType_GenericAlloc,
    Dtool_new_BulletCylinderShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletCylinderShape,
  Dtool_UpcastInterface_BulletCylinderShape,
  Dtool_DowncastInterface_BulletCylinderShape,
  (CoerceFunction)Dtool_ConstCoerce_BulletCylinderShape,
  (CoerceFunction)Dtool_Coerce_BulletCylinderShape,
};

static void Dtool_PyModuleClassInit_BulletCylinderShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletCylinderShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletCylinderShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletCylinderShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletCylinderShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletCylinderShape);
  }
}

/**
 * Python method tables for BulletFilterCallbackData (BulletFilterCallbackData)
 */
static PyMethodDef Dtool_Methods_BulletFilterCallbackData[] = {
  {"get_node_0", &Dtool_BulletFilterCallbackData_get_node_0_477, METH_NOARGS, (const char *)Dtool_BulletFilterCallbackData_get_node_0_477_comment},
  {"getNode0", &Dtool_BulletFilterCallbackData_get_node_0_477, METH_NOARGS, (const char *)Dtool_BulletFilterCallbackData_get_node_0_477_comment},
  {"get_node_1", &Dtool_BulletFilterCallbackData_get_node_1_478, METH_NOARGS, (const char *)Dtool_BulletFilterCallbackData_get_node_1_478_comment},
  {"getNode1", &Dtool_BulletFilterCallbackData_get_node_1_478, METH_NOARGS, (const char *)Dtool_BulletFilterCallbackData_get_node_1_478_comment},
  {"set_collide", &Dtool_BulletFilterCallbackData_set_collide_479, METH_O, (const char *)Dtool_BulletFilterCallbackData_set_collide_479_comment},
  {"setCollide", &Dtool_BulletFilterCallbackData_set_collide_479, METH_O, (const char *)Dtool_BulletFilterCallbackData_set_collide_479_comment},
  {"get_collide", &Dtool_BulletFilterCallbackData_get_collide_480, METH_NOARGS, (const char *)Dtool_BulletFilterCallbackData_get_collide_480_comment},
  {"getCollide", &Dtool_BulletFilterCallbackData_get_collide_480, METH_NOARGS, (const char *)Dtool_BulletFilterCallbackData_get_collide_480_comment},
  {"get_class_type", &Dtool_BulletFilterCallbackData_get_class_type_481, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletFilterCallbackData_get_class_type_481_comment},
  {"getClassType", &Dtool_BulletFilterCallbackData_get_class_type_481, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletFilterCallbackData_get_class_type_481_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletFilterCallbackData = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletFilterCallbackData = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletFilterCallbackData = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletFilterCallbackData = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletFilterCallbackData = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletFilterCallbackData",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletFilterCallbackData,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletFilterCallbackData,
    &Dtool_SequenceMethods_BulletFilterCallbackData,
    &Dtool_MappingMethods_BulletFilterCallbackData,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletFilterCallbackData,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletFilterCallbackData,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletFilterCallbackData,
    PyType_GenericAlloc,
    Dtool_new_BulletFilterCallbackData,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletFilterCallbackData,
  Dtool_UpcastInterface_BulletFilterCallbackData,
  Dtool_DowncastInterface_BulletFilterCallbackData,
  (CoerceFunction)Dtool_ConstCoerce_BulletFilterCallbackData,
  (CoerceFunction)Dtool_Coerce_BulletFilterCallbackData,
};

static void Dtool_PyModuleClassInit_BulletFilterCallbackData(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_CallbackData != NULL);
    assert(Dtool_Ptr_CallbackData->_Dtool_ModuleClassInit != NULL);
    Dtool_Ptr_CallbackData->_Dtool_ModuleClassInit(NULL);
    Dtool_BulletFilterCallbackData._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_CallbackData);
    PyObject *dict = PyDict_New();
    Dtool_BulletFilterCallbackData._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletFilterCallbackData) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletFilterCallbackData)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletFilterCallbackData);
  }
}

/**
 * Python method tables for BulletRotationalLimitMotor (BulletRotationalLimitMotor)
 */
static PyMethodDef Dtool_Methods_BulletRotationalLimitMotor[] = {
  {"set_motor_enabled", &Dtool_BulletRotationalLimitMotor_set_motor_enabled_486, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_motor_enabled_486_comment},
  {"setMotorEnabled", &Dtool_BulletRotationalLimitMotor_set_motor_enabled_486, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_motor_enabled_486_comment},
  {"set_low_limit", &Dtool_BulletRotationalLimitMotor_set_low_limit_487, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_low_limit_487_comment},
  {"setLowLimit", &Dtool_BulletRotationalLimitMotor_set_low_limit_487, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_low_limit_487_comment},
  {"set_high_limit", &Dtool_BulletRotationalLimitMotor_set_high_limit_488, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_high_limit_488_comment},
  {"setHighLimit", &Dtool_BulletRotationalLimitMotor_set_high_limit_488, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_high_limit_488_comment},
  {"set_target_velocity", &Dtool_BulletRotationalLimitMotor_set_target_velocity_489, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_target_velocity_489_comment},
  {"setTargetVelocity", &Dtool_BulletRotationalLimitMotor_set_target_velocity_489, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_target_velocity_489_comment},
  {"set_max_motor_force", &Dtool_BulletRotationalLimitMotor_set_max_motor_force_490, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_max_motor_force_490_comment},
  {"setMaxMotorForce", &Dtool_BulletRotationalLimitMotor_set_max_motor_force_490, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_max_motor_force_490_comment},
  {"set_max_limit_force", &Dtool_BulletRotationalLimitMotor_set_max_limit_force_491, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_max_limit_force_491_comment},
  {"setMaxLimitForce", &Dtool_BulletRotationalLimitMotor_set_max_limit_force_491, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_max_limit_force_491_comment},
  {"set_damping", &Dtool_BulletRotationalLimitMotor_set_damping_492, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_damping_492_comment},
  {"setDamping", &Dtool_BulletRotationalLimitMotor_set_damping_492, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_damping_492_comment},
  {"set_softness", &Dtool_BulletRotationalLimitMotor_set_softness_493, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_softness_493_comment},
  {"setSoftness", &Dtool_BulletRotationalLimitMotor_set_softness_493, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_softness_493_comment},
  {"set_bounce", &Dtool_BulletRotationalLimitMotor_set_bounce_494, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_bounce_494_comment},
  {"setBounce", &Dtool_BulletRotationalLimitMotor_set_bounce_494, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_bounce_494_comment},
  {"set_normal_cfm", &Dtool_BulletRotationalLimitMotor_set_normal_cfm_495, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_normal_cfm_495_comment},
  {"setNormalCfm", &Dtool_BulletRotationalLimitMotor_set_normal_cfm_495, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_normal_cfm_495_comment},
  {"set_stop_cfm", &Dtool_BulletRotationalLimitMotor_set_stop_cfm_496, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_stop_cfm_496_comment},
  {"setStopCfm", &Dtool_BulletRotationalLimitMotor_set_stop_cfm_496, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_stop_cfm_496_comment},
  {"set_stop_erp", &Dtool_BulletRotationalLimitMotor_set_stop_erp_497, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_stop_erp_497_comment},
  {"setStopErp", &Dtool_BulletRotationalLimitMotor_set_stop_erp_497, METH_O, (const char *)Dtool_BulletRotationalLimitMotor_set_stop_erp_497_comment},
  {"is_limited", &Dtool_BulletRotationalLimitMotor_is_limited_498, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_is_limited_498_comment},
  {"isLimited", &Dtool_BulletRotationalLimitMotor_is_limited_498, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_is_limited_498_comment},
  {"get_motor_enabled", &Dtool_BulletRotationalLimitMotor_get_motor_enabled_499, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_motor_enabled_499_comment},
  {"getMotorEnabled", &Dtool_BulletRotationalLimitMotor_get_motor_enabled_499, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_motor_enabled_499_comment},
  {"get_current_limit", &Dtool_BulletRotationalLimitMotor_get_current_limit_500, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_current_limit_500_comment},
  {"getCurrentLimit", &Dtool_BulletRotationalLimitMotor_get_current_limit_500, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_current_limit_500_comment},
  {"get_current_error", &Dtool_BulletRotationalLimitMotor_get_current_error_501, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_current_error_501_comment},
  {"getCurrentError", &Dtool_BulletRotationalLimitMotor_get_current_error_501, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_current_error_501_comment},
  {"get_current_position", &Dtool_BulletRotationalLimitMotor_get_current_position_502, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_current_position_502_comment},
  {"getCurrentPosition", &Dtool_BulletRotationalLimitMotor_get_current_position_502, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_current_position_502_comment},
  {"get_accumulated_impulse", &Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_503, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_503_comment},
  {"getAccumulatedImpulse", &Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_503, METH_NOARGS, (const char *)Dtool_BulletRotationalLimitMotor_get_accumulated_impulse_503_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletRotationalLimitMotor = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletRotationalLimitMotor = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletRotationalLimitMotor",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletRotationalLimitMotor,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletRotationalLimitMotor,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * Rotation Limit structure for generic joints.\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletRotationalLimitMotor,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletRotationalLimitMotor,
    PyType_GenericAlloc,
    Dtool_new_BulletRotationalLimitMotor,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletRotationalLimitMotor,
  Dtool_UpcastInterface_BulletRotationalLimitMotor,
  Dtool_DowncastInterface_BulletRotationalLimitMotor,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletRotationalLimitMotor(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletRotationalLimitMotor._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletRotationalLimitMotor._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletRotationalLimitMotor) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletRotationalLimitMotor)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletRotationalLimitMotor);
  }
}

/**
 * Python method tables for BulletTranslationalLimitMotor (BulletTranslationalLimitMotor)
 */
static PyMethodDef Dtool_Methods_BulletTranslationalLimitMotor[] = {
  {"set_motor_enabled", (PyCFunction) &Dtool_BulletTranslationalLimitMotor_set_motor_enabled_507, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTranslationalLimitMotor_set_motor_enabled_507_comment},
  {"setMotorEnabled", (PyCFunction) &Dtool_BulletTranslationalLimitMotor_set_motor_enabled_507, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTranslationalLimitMotor_set_motor_enabled_507_comment},
  {"set_low_limit", &Dtool_BulletTranslationalLimitMotor_set_low_limit_508, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_low_limit_508_comment},
  {"setLowLimit", &Dtool_BulletTranslationalLimitMotor_set_low_limit_508, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_low_limit_508_comment},
  {"set_high_limit", &Dtool_BulletTranslationalLimitMotor_set_high_limit_509, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_high_limit_509_comment},
  {"setHighLimit", &Dtool_BulletTranslationalLimitMotor_set_high_limit_509, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_high_limit_509_comment},
  {"set_target_velocity", &Dtool_BulletTranslationalLimitMotor_set_target_velocity_510, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_target_velocity_510_comment},
  {"setTargetVelocity", &Dtool_BulletTranslationalLimitMotor_set_target_velocity_510, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_target_velocity_510_comment},
  {"set_max_motor_force", &Dtool_BulletTranslationalLimitMotor_set_max_motor_force_511, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_max_motor_force_511_comment},
  {"setMaxMotorForce", &Dtool_BulletTranslationalLimitMotor_set_max_motor_force_511, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_max_motor_force_511_comment},
  {"set_damping", &Dtool_BulletTranslationalLimitMotor_set_damping_512, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_damping_512_comment},
  {"setDamping", &Dtool_BulletTranslationalLimitMotor_set_damping_512, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_damping_512_comment},
  {"set_softness", &Dtool_BulletTranslationalLimitMotor_set_softness_513, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_softness_513_comment},
  {"setSoftness", &Dtool_BulletTranslationalLimitMotor_set_softness_513, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_softness_513_comment},
  {"set_restitution", &Dtool_BulletTranslationalLimitMotor_set_restitution_514, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_restitution_514_comment},
  {"setRestitution", &Dtool_BulletTranslationalLimitMotor_set_restitution_514, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_restitution_514_comment},
  {"set_normal_cfm", &Dtool_BulletTranslationalLimitMotor_set_normal_cfm_515, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_normal_cfm_515_comment},
  {"setNormalCfm", &Dtool_BulletTranslationalLimitMotor_set_normal_cfm_515, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_normal_cfm_515_comment},
  {"set_stop_erp", &Dtool_BulletTranslationalLimitMotor_set_stop_erp_516, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_stop_erp_516_comment},
  {"setStopErp", &Dtool_BulletTranslationalLimitMotor_set_stop_erp_516, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_stop_erp_516_comment},
  {"set_stop_cfm", &Dtool_BulletTranslationalLimitMotor_set_stop_cfm_517, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_stop_cfm_517_comment},
  {"setStopCfm", &Dtool_BulletTranslationalLimitMotor_set_stop_cfm_517, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_set_stop_cfm_517_comment},
  {"is_limited", &Dtool_BulletTranslationalLimitMotor_is_limited_518, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_is_limited_518_comment},
  {"isLimited", &Dtool_BulletTranslationalLimitMotor_is_limited_518, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_is_limited_518_comment},
  {"get_motor_enabled", &Dtool_BulletTranslationalLimitMotor_get_motor_enabled_519, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_get_motor_enabled_519_comment},
  {"getMotorEnabled", &Dtool_BulletTranslationalLimitMotor_get_motor_enabled_519, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_get_motor_enabled_519_comment},
  {"get_current_limit", &Dtool_BulletTranslationalLimitMotor_get_current_limit_520, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_get_current_limit_520_comment},
  {"getCurrentLimit", &Dtool_BulletTranslationalLimitMotor_get_current_limit_520, METH_O, (const char *)Dtool_BulletTranslationalLimitMotor_get_current_limit_520_comment},
  {"get_current_error", &Dtool_BulletTranslationalLimitMotor_get_current_error_521, METH_NOARGS, (const char *)Dtool_BulletTranslationalLimitMotor_get_current_error_521_comment},
  {"getCurrentError", &Dtool_BulletTranslationalLimitMotor_get_current_error_521, METH_NOARGS, (const char *)Dtool_BulletTranslationalLimitMotor_get_current_error_521_comment},
  {"get_current_diff", &Dtool_BulletTranslationalLimitMotor_get_current_diff_522, METH_NOARGS, (const char *)Dtool_BulletTranslationalLimitMotor_get_current_diff_522_comment},
  {"getCurrentDiff", &Dtool_BulletTranslationalLimitMotor_get_current_diff_522, METH_NOARGS, (const char *)Dtool_BulletTranslationalLimitMotor_get_current_diff_522_comment},
  {"get_accumulated_impulse", &Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_523, METH_NOARGS, (const char *)Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_523_comment},
  {"getAccumulatedImpulse", &Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_523, METH_NOARGS, (const char *)Dtool_BulletTranslationalLimitMotor_get_accumulated_impulse_523_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletTranslationalLimitMotor = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletTranslationalLimitMotor = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletTranslationalLimitMotor",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletTranslationalLimitMotor,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletTranslationalLimitMotor,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * Rotation Limit structure for generic joints.\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletTranslationalLimitMotor,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletTranslationalLimitMotor,
    PyType_GenericAlloc,
    Dtool_new_BulletTranslationalLimitMotor,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletTranslationalLimitMotor,
  Dtool_UpcastInterface_BulletTranslationalLimitMotor,
  Dtool_DowncastInterface_BulletTranslationalLimitMotor,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletTranslationalLimitMotor(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletTranslationalLimitMotor._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletTranslationalLimitMotor._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletTranslationalLimitMotor) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletTranslationalLimitMotor)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletTranslationalLimitMotor);
  }
}

/**
 * Python method tables for BulletGenericConstraint (BulletGenericConstraint)
 */
static PyMethodDef Dtool_Methods_BulletGenericConstraint[] = {
  {"get_axis", &Dtool_BulletGenericConstraint_get_axis_526, METH_O, (const char *)Dtool_BulletGenericConstraint_get_axis_526_comment},
  {"getAxis", &Dtool_BulletGenericConstraint_get_axis_526, METH_O, (const char *)Dtool_BulletGenericConstraint_get_axis_526_comment},
  {"get_pivot", &Dtool_BulletGenericConstraint_get_pivot_527, METH_O, (const char *)Dtool_BulletGenericConstraint_get_pivot_527_comment},
  {"getPivot", &Dtool_BulletGenericConstraint_get_pivot_527, METH_O, (const char *)Dtool_BulletGenericConstraint_get_pivot_527_comment},
  {"get_angle", &Dtool_BulletGenericConstraint_get_angle_528, METH_O, (const char *)Dtool_BulletGenericConstraint_get_angle_528_comment},
  {"getAngle", &Dtool_BulletGenericConstraint_get_angle_528, METH_O, (const char *)Dtool_BulletGenericConstraint_get_angle_528_comment},
  {"set_linear_limit", (PyCFunction) &Dtool_BulletGenericConstraint_set_linear_limit_529, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletGenericConstraint_set_linear_limit_529_comment},
  {"setLinearLimit", (PyCFunction) &Dtool_BulletGenericConstraint_set_linear_limit_529, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletGenericConstraint_set_linear_limit_529_comment},
  {"set_angular_limit", (PyCFunction) &Dtool_BulletGenericConstraint_set_angular_limit_530, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletGenericConstraint_set_angular_limit_530_comment},
  {"setAngularLimit", (PyCFunction) &Dtool_BulletGenericConstraint_set_angular_limit_530, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletGenericConstraint_set_angular_limit_530_comment},
  {"get_rotational_limit_motor", &Dtool_BulletGenericConstraint_get_rotational_limit_motor_531, METH_O, (const char *)Dtool_BulletGenericConstraint_get_rotational_limit_motor_531_comment},
  {"getRotationalLimitMotor", &Dtool_BulletGenericConstraint_get_rotational_limit_motor_531, METH_O, (const char *)Dtool_BulletGenericConstraint_get_rotational_limit_motor_531_comment},
  {"get_translational_limit_motor", &Dtool_BulletGenericConstraint_get_translational_limit_motor_532, METH_NOARGS, (const char *)Dtool_BulletGenericConstraint_get_translational_limit_motor_532_comment},
  {"getTranslationalLimitMotor", &Dtool_BulletGenericConstraint_get_translational_limit_motor_532, METH_NOARGS, (const char *)Dtool_BulletGenericConstraint_get_translational_limit_motor_532_comment},
  {"set_frames", (PyCFunction) &Dtool_BulletGenericConstraint_set_frames_533, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletGenericConstraint_set_frames_533_comment},
  {"setFrames", (PyCFunction) &Dtool_BulletGenericConstraint_set_frames_533, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletGenericConstraint_set_frames_533_comment},
  {"get_frame_a", &Dtool_BulletGenericConstraint_get_frame_a_534, METH_NOARGS, (const char *)Dtool_BulletGenericConstraint_get_frame_a_534_comment},
  {"getFrameA", &Dtool_BulletGenericConstraint_get_frame_a_534, METH_NOARGS, (const char *)Dtool_BulletGenericConstraint_get_frame_a_534_comment},
  {"get_frame_b", &Dtool_BulletGenericConstraint_get_frame_b_535, METH_NOARGS, (const char *)Dtool_BulletGenericConstraint_get_frame_b_535_comment},
  {"getFrameB", &Dtool_BulletGenericConstraint_get_frame_b_535, METH_NOARGS, (const char *)Dtool_BulletGenericConstraint_get_frame_b_535_comment},
  {"get_class_type", &Dtool_BulletGenericConstraint_get_class_type_536, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletGenericConstraint_get_class_type_536_comment},
  {"getClassType", &Dtool_BulletGenericConstraint_get_class_type_536, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletGenericConstraint_get_class_type_536_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletGenericConstraint = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletGenericConstraint = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletGenericConstraint = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletGenericConstraint = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletGenericConstraint = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletGenericConstraint",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletGenericConstraint,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletGenericConstraint,
    &Dtool_SequenceMethods_BulletGenericConstraint,
    &Dtool_MappingMethods_BulletGenericConstraint,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletGenericConstraint,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletGenericConstraint,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletGenericConstraint,
    PyType_GenericAlloc,
    Dtool_new_BulletGenericConstraint,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletGenericConstraint,
  Dtool_UpcastInterface_BulletGenericConstraint,
  Dtool_DowncastInterface_BulletGenericConstraint,
  (CoerceFunction)Dtool_ConstCoerce_BulletGenericConstraint,
  (CoerceFunction)Dtool_Coerce_BulletGenericConstraint,
};

static void Dtool_PyModuleClassInit_BulletGenericConstraint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletConstraint(NULL);
    Dtool_BulletGenericConstraint._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletConstraint);
    PyObject *dict = PyDict_New();
    Dtool_BulletGenericConstraint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletGenericConstraint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletGenericConstraint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletGenericConstraint);
  }
}

/**
 * Python method tables for BulletHeightfieldShape (BulletHeightfieldShape)
 */
static PyMethodDef Dtool_Methods_BulletHeightfieldShape[] = {
  {"assign", &Dtool_BulletHeightfieldShape_operator_539, METH_O, (const char *)Dtool_BulletHeightfieldShape_operator_539_comment},
  {"set_use_diamond_subdivision", (PyCFunction) &Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_540, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_540_comment},
  {"setUseDiamondSubdivision", (PyCFunction) &Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_540, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHeightfieldShape_set_use_diamond_subdivision_540_comment},
  {"get_class_type", &Dtool_BulletHeightfieldShape_get_class_type_541, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHeightfieldShape_get_class_type_541_comment},
  {"getClassType", &Dtool_BulletHeightfieldShape_get_class_type_541, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHeightfieldShape_get_class_type_541_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletHeightfieldShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletHeightfieldShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletHeightfieldShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletHeightfieldShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletHeightfieldShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletHeightfieldShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletHeightfieldShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletHeightfieldShape,
    &Dtool_SequenceMethods_BulletHeightfieldShape,
    &Dtool_MappingMethods_BulletHeightfieldShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletHeightfieldShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletHeightfieldShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletHeightfieldShape,
    PyType_GenericAlloc,
    Dtool_new_BulletHeightfieldShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletHeightfieldShape,
  Dtool_UpcastInterface_BulletHeightfieldShape,
  Dtool_DowncastInterface_BulletHeightfieldShape,
  (CoerceFunction)Dtool_ConstCoerce_BulletHeightfieldShape,
  (CoerceFunction)Dtool_Coerce_BulletHeightfieldShape,
};

static void Dtool_PyModuleClassInit_BulletHeightfieldShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletHeightfieldShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletHeightfieldShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletHeightfieldShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletHeightfieldShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletHeightfieldShape);
  }
}

/**
 * Python method tables for BulletHelper (BulletHelper)
 */
static PyMethodDef Dtool_Methods_BulletHelper[] = {
  {"from_collision_solids", (PyCFunction) &Dtool_BulletHelper_from_collision_solids_543, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_from_collision_solids_543_comment},
  {"fromCollisionSolids", (PyCFunction) &Dtool_BulletHelper_from_collision_solids_543, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_from_collision_solids_543_comment},
  {"get_sb_index", &Dtool_BulletHelper_get_sb_index_544, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHelper_get_sb_index_544_comment},
  {"getSbIndex", &Dtool_BulletHelper_get_sb_index_544, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHelper_get_sb_index_544_comment},
  {"get_sb_flip", &Dtool_BulletHelper_get_sb_flip_545, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHelper_get_sb_flip_545_comment},
  {"getSbFlip", &Dtool_BulletHelper_get_sb_flip_545, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHelper_get_sb_flip_545_comment},
  {"add_sb_index_column", &Dtool_BulletHelper_add_sb_index_column_546, METH_O | METH_STATIC, (const char *)Dtool_BulletHelper_add_sb_index_column_546_comment},
  {"addSbIndexColumn", &Dtool_BulletHelper_add_sb_index_column_546, METH_O | METH_STATIC, (const char *)Dtool_BulletHelper_add_sb_index_column_546_comment},
  {"add_sb_flip_column", &Dtool_BulletHelper_add_sb_flip_column_547, METH_O | METH_STATIC, (const char *)Dtool_BulletHelper_add_sb_flip_column_547_comment},
  {"addSbFlipColumn", &Dtool_BulletHelper_add_sb_flip_column_547, METH_O | METH_STATIC, (const char *)Dtool_BulletHelper_add_sb_flip_column_547_comment},
  {"make_geom_from_faces", (PyCFunction) &Dtool_BulletHelper_make_geom_from_faces_548, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_make_geom_from_faces_548_comment},
  {"makeGeomFromFaces", (PyCFunction) &Dtool_BulletHelper_make_geom_from_faces_548, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_make_geom_from_faces_548_comment},
  {"make_geom_from_links", (PyCFunction) &Dtool_BulletHelper_make_geom_from_links_549, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_make_geom_from_links_549_comment},
  {"makeGeomFromLinks", (PyCFunction) &Dtool_BulletHelper_make_geom_from_links_549, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_make_geom_from_links_549_comment},
  {"make_texcoords_for_patch", (PyCFunction) &Dtool_BulletHelper_make_texcoords_for_patch_550, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_make_texcoords_for_patch_550_comment},
  {"makeTexcoordsForPatch", (PyCFunction) &Dtool_BulletHelper_make_texcoords_for_patch_550, METH_VARARGS | METH_KEYWORDS | METH_STATIC, (const char *)Dtool_BulletHelper_make_texcoords_for_patch_550_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletHelper = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletHelper = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletHelper",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletHelper,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletHelper,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletHelper,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletHelper,
    PyType_GenericAlloc,
    Dtool_new_BulletHelper,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletHelper,
  Dtool_UpcastInterface_BulletHelper,
  Dtool_DowncastInterface_BulletHelper,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletHelper(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletHelper._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletHelper._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletHelper) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletHelper)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletHelper);
  }
}

/**
 * Python method tables for BulletHingeConstraint (BulletHingeConstraint)
 */
static PyMethodDef Dtool_Methods_BulletHingeConstraint[] = {
  {"get_hinge_angle", &Dtool_BulletHingeConstraint_get_hinge_angle_555, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_hinge_angle_555_comment},
  {"getHingeAngle", &Dtool_BulletHingeConstraint_get_hinge_angle_555, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_hinge_angle_555_comment},
  {"get_lower_limit", &Dtool_BulletHingeConstraint_get_lower_limit_556, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_lower_limit_556_comment},
  {"getLowerLimit", &Dtool_BulletHingeConstraint_get_lower_limit_556, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_lower_limit_556_comment},
  {"get_upper_limit", &Dtool_BulletHingeConstraint_get_upper_limit_557, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_upper_limit_557_comment},
  {"getUpperLimit", &Dtool_BulletHingeConstraint_get_upper_limit_557, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_upper_limit_557_comment},
  {"get_angular_only", &Dtool_BulletHingeConstraint_get_angular_only_558, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_angular_only_558_comment},
  {"getAngularOnly", &Dtool_BulletHingeConstraint_get_angular_only_558, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_angular_only_558_comment},
  {"set_angular_only", &Dtool_BulletHingeConstraint_set_angular_only_559, METH_O, (const char *)Dtool_BulletHingeConstraint_set_angular_only_559_comment},
  {"setAngularOnly", &Dtool_BulletHingeConstraint_set_angular_only_559, METH_O, (const char *)Dtool_BulletHingeConstraint_set_angular_only_559_comment},
  {"set_limit", (PyCFunction) &Dtool_BulletHingeConstraint_set_limit_560, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_set_limit_560_comment},
  {"setLimit", (PyCFunction) &Dtool_BulletHingeConstraint_set_limit_560, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_set_limit_560_comment},
  {"set_axis", &Dtool_BulletHingeConstraint_set_axis_561, METH_O, (const char *)Dtool_BulletHingeConstraint_set_axis_561_comment},
  {"setAxis", &Dtool_BulletHingeConstraint_set_axis_561, METH_O, (const char *)Dtool_BulletHingeConstraint_set_axis_561_comment},
  {"enable_angular_motor", (PyCFunction) &Dtool_BulletHingeConstraint_enable_angular_motor_562, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_enable_angular_motor_562_comment},
  {"enableAngularMotor", (PyCFunction) &Dtool_BulletHingeConstraint_enable_angular_motor_562, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_enable_angular_motor_562_comment},
  {"enable_motor", &Dtool_BulletHingeConstraint_enable_motor_563, METH_O, (const char *)Dtool_BulletHingeConstraint_enable_motor_563_comment},
  {"enableMotor", &Dtool_BulletHingeConstraint_enable_motor_563, METH_O, (const char *)Dtool_BulletHingeConstraint_enable_motor_563_comment},
  {"set_max_motor_impulse", &Dtool_BulletHingeConstraint_set_max_motor_impulse_564, METH_O, (const char *)Dtool_BulletHingeConstraint_set_max_motor_impulse_564_comment},
  {"setMaxMotorImpulse", &Dtool_BulletHingeConstraint_set_max_motor_impulse_564, METH_O, (const char *)Dtool_BulletHingeConstraint_set_max_motor_impulse_564_comment},
  {"set_motor_target", (PyCFunction) &Dtool_BulletHingeConstraint_set_motor_target_565, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_set_motor_target_565_comment},
  {"setMotorTarget", (PyCFunction) &Dtool_BulletHingeConstraint_set_motor_target_565, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_set_motor_target_565_comment},
  {"set_frames", (PyCFunction) &Dtool_BulletHingeConstraint_set_frames_566, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_set_frames_566_comment},
  {"setFrames", (PyCFunction) &Dtool_BulletHingeConstraint_set_frames_566, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletHingeConstraint_set_frames_566_comment},
  {"get_frame_a", &Dtool_BulletHingeConstraint_get_frame_a_567, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_frame_a_567_comment},
  {"getFrameA", &Dtool_BulletHingeConstraint_get_frame_a_567, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_frame_a_567_comment},
  {"get_frame_b", &Dtool_BulletHingeConstraint_get_frame_b_568, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_frame_b_568_comment},
  {"getFrameB", &Dtool_BulletHingeConstraint_get_frame_b_568, METH_NOARGS, (const char *)Dtool_BulletHingeConstraint_get_frame_b_568_comment},
  {"get_class_type", &Dtool_BulletHingeConstraint_get_class_type_569, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHingeConstraint_get_class_type_569_comment},
  {"getClassType", &Dtool_BulletHingeConstraint_get_class_type_569, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletHingeConstraint_get_class_type_569_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletHingeConstraint = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletHingeConstraint = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletHingeConstraint = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletHingeConstraint = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletHingeConstraint = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletHingeConstraint",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletHingeConstraint,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletHingeConstraint,
    &Dtool_SequenceMethods_BulletHingeConstraint,
    &Dtool_MappingMethods_BulletHingeConstraint,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletHingeConstraint,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * The hinge constraint lets two bodies rotate around a given axis while\n"
    " * adhering to specified limits.  It's motor can apply angular force to them.\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletHingeConstraint,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletHingeConstraint,
    PyType_GenericAlloc,
    Dtool_new_BulletHingeConstraint,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletHingeConstraint,
  Dtool_UpcastInterface_BulletHingeConstraint,
  Dtool_DowncastInterface_BulletHingeConstraint,
  (CoerceFunction)Dtool_ConstCoerce_BulletHingeConstraint,
  (CoerceFunction)Dtool_Coerce_BulletHingeConstraint,
};

static void Dtool_PyModuleClassInit_BulletHingeConstraint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletConstraint(NULL);
    Dtool_BulletHingeConstraint._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletConstraint);
    PyObject *dict = PyDict_New();
    Dtool_BulletHingeConstraint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletHingeConstraint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletHingeConstraint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletHingeConstraint);
  }
}

/**
 * Python method tables for BulletMinkowskiSumShape (BulletMinkowskiSumShape)
 */
static PyMethodDef Dtool_Methods_BulletMinkowskiSumShape[] = {
  {"assign", &Dtool_BulletMinkowskiSumShape_operator_572, METH_O, (const char *)Dtool_BulletMinkowskiSumShape_operator_572_comment},
  {"set_transform_a", &Dtool_BulletMinkowskiSumShape_set_transform_a_573, METH_O, (const char *)Dtool_BulletMinkowskiSumShape_set_transform_a_573_comment},
  {"setTransformA", &Dtool_BulletMinkowskiSumShape_set_transform_a_573, METH_O, (const char *)Dtool_BulletMinkowskiSumShape_set_transform_a_573_comment},
  {"set_transform_b", &Dtool_BulletMinkowskiSumShape_set_transform_b_574, METH_O, (const char *)Dtool_BulletMinkowskiSumShape_set_transform_b_574_comment},
  {"setTransformB", &Dtool_BulletMinkowskiSumShape_set_transform_b_574, METH_O, (const char *)Dtool_BulletMinkowskiSumShape_set_transform_b_574_comment},
  {"get_transform_a", &Dtool_BulletMinkowskiSumShape_get_transform_a_575, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_transform_a_575_comment},
  {"getTransformA", &Dtool_BulletMinkowskiSumShape_get_transform_a_575, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_transform_a_575_comment},
  {"get_transform_b", &Dtool_BulletMinkowskiSumShape_get_transform_b_576, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_transform_b_576_comment},
  {"getTransformB", &Dtool_BulletMinkowskiSumShape_get_transform_b_576, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_transform_b_576_comment},
  {"get_shape_a", &Dtool_BulletMinkowskiSumShape_get_shape_a_577, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_shape_a_577_comment},
  {"getShapeA", &Dtool_BulletMinkowskiSumShape_get_shape_a_577, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_shape_a_577_comment},
  {"get_shape_b", &Dtool_BulletMinkowskiSumShape_get_shape_b_578, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_shape_b_578_comment},
  {"getShapeB", &Dtool_BulletMinkowskiSumShape_get_shape_b_578, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_shape_b_578_comment},
  {"get_margin", &Dtool_BulletMinkowskiSumShape_get_margin_579, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_margin_579_comment},
  {"getMargin", &Dtool_BulletMinkowskiSumShape_get_margin_579, METH_NOARGS, (const char *)Dtool_BulletMinkowskiSumShape_get_margin_579_comment},
  {"get_class_type", &Dtool_BulletMinkowskiSumShape_get_class_type_580, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletMinkowskiSumShape_get_class_type_580_comment},
  {"getClassType", &Dtool_BulletMinkowskiSumShape_get_class_type_580, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletMinkowskiSumShape_get_class_type_580_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletMinkowskiSumShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletMinkowskiSumShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletMinkowskiSumShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletMinkowskiSumShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletMinkowskiSumShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletMinkowskiSumShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletMinkowskiSumShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletMinkowskiSumShape,
    &Dtool_SequenceMethods_BulletMinkowskiSumShape,
    &Dtool_MappingMethods_BulletMinkowskiSumShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletMinkowskiSumShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletMinkowskiSumShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletMinkowskiSumShape,
    PyType_GenericAlloc,
    Dtool_new_BulletMinkowskiSumShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletMinkowskiSumShape,
  Dtool_UpcastInterface_BulletMinkowskiSumShape,
  Dtool_DowncastInterface_BulletMinkowskiSumShape,
  (CoerceFunction)Dtool_ConstCoerce_BulletMinkowskiSumShape,
  (CoerceFunction)Dtool_Coerce_BulletMinkowskiSumShape,
};

static void Dtool_PyModuleClassInit_BulletMinkowskiSumShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletMinkowskiSumShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletMinkowskiSumShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletMinkowskiSumShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletMinkowskiSumShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletMinkowskiSumShape);
  }
}

/**
 * Python method tables for BulletMultiSphereShape (BulletMultiSphereShape)
 */
static PyMethodDef Dtool_Methods_BulletMultiSphereShape[] = {
  {"assign", &Dtool_BulletMultiSphereShape_operator_583, METH_O, (const char *)Dtool_BulletMultiSphereShape_operator_583_comment},
  {"get_sphere_count", &Dtool_BulletMultiSphereShape_get_sphere_count_584, METH_NOARGS, (const char *)Dtool_BulletMultiSphereShape_get_sphere_count_584_comment},
  {"getSphereCount", &Dtool_BulletMultiSphereShape_get_sphere_count_584, METH_NOARGS, (const char *)Dtool_BulletMultiSphereShape_get_sphere_count_584_comment},
  {"get_sphere_pos", &Dtool_BulletMultiSphereShape_get_sphere_pos_585, METH_O, (const char *)Dtool_BulletMultiSphereShape_get_sphere_pos_585_comment},
  {"getSpherePos", &Dtool_BulletMultiSphereShape_get_sphere_pos_585, METH_O, (const char *)Dtool_BulletMultiSphereShape_get_sphere_pos_585_comment},
  {"get_sphere_radius", &Dtool_BulletMultiSphereShape_get_sphere_radius_586, METH_O, (const char *)Dtool_BulletMultiSphereShape_get_sphere_radius_586_comment},
  {"getSphereRadius", &Dtool_BulletMultiSphereShape_get_sphere_radius_586, METH_O, (const char *)Dtool_BulletMultiSphereShape_get_sphere_radius_586_comment},
  {"get_class_type", &Dtool_BulletMultiSphereShape_get_class_type_587, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletMultiSphereShape_get_class_type_587_comment},
  {"getClassType", &Dtool_BulletMultiSphereShape_get_class_type_587, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletMultiSphereShape_get_class_type_587_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletMultiSphereShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletMultiSphereShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletMultiSphereShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletMultiSphereShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletMultiSphereShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletMultiSphereShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletMultiSphereShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletMultiSphereShape,
    &Dtool_SequenceMethods_BulletMultiSphereShape,
    &Dtool_MappingMethods_BulletMultiSphereShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletMultiSphereShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletMultiSphereShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletMultiSphereShape,
    PyType_GenericAlloc,
    Dtool_new_BulletMultiSphereShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletMultiSphereShape,
  Dtool_UpcastInterface_BulletMultiSphereShape,
  Dtool_DowncastInterface_BulletMultiSphereShape,
  (CoerceFunction)Dtool_ConstCoerce_BulletMultiSphereShape,
  (CoerceFunction)Dtool_Coerce_BulletMultiSphereShape,
};

static void Dtool_PyModuleClassInit_BulletMultiSphereShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletMultiSphereShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletMultiSphereShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletMultiSphereShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletMultiSphereShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletMultiSphereShape);
  }
}

/**
 * Python method tables for BulletPersistentManifold (BulletPersistentManifold)
 */
static PyMethodDef Dtool_Methods_BulletPersistentManifold[] = {
  {"get_node0", &Dtool_BulletPersistentManifold_get_node0_590, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_node0_590_comment},
  {"getNode0", &Dtool_BulletPersistentManifold_get_node0_590, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_node0_590_comment},
  {"get_node1", &Dtool_BulletPersistentManifold_get_node1_591, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_node1_591_comment},
  {"getNode1", &Dtool_BulletPersistentManifold_get_node1_591, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_node1_591_comment},
  {"get_num_manifold_points", &Dtool_BulletPersistentManifold_get_num_manifold_points_592, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_num_manifold_points_592_comment},
  {"getNumManifoldPoints", &Dtool_BulletPersistentManifold_get_num_manifold_points_592, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_num_manifold_points_592_comment},
  {"get_manifold_point", &Dtool_BulletPersistentManifold_get_manifold_point_593, METH_O, (const char *)Dtool_BulletPersistentManifold_get_manifold_point_593_comment},
  {"getManifoldPoint", &Dtool_BulletPersistentManifold_get_manifold_point_593, METH_O, (const char *)Dtool_BulletPersistentManifold_get_manifold_point_593_comment},
  {"get_contact_breaking_threshold", &Dtool_BulletPersistentManifold_get_contact_breaking_threshold_595, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_contact_breaking_threshold_595_comment},
  {"getContactBreakingThreshold", &Dtool_BulletPersistentManifold_get_contact_breaking_threshold_595, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_contact_breaking_threshold_595_comment},
  {"get_contact_processing_threshold", &Dtool_BulletPersistentManifold_get_contact_processing_threshold_596, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_contact_processing_threshold_596_comment},
  {"getContactProcessingThreshold", &Dtool_BulletPersistentManifold_get_contact_processing_threshold_596, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_get_contact_processing_threshold_596_comment},
  {"clear_manifold", &Dtool_BulletPersistentManifold_clear_manifold_597, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_clear_manifold_597_comment},
  {"clearManifold", &Dtool_BulletPersistentManifold_clear_manifold_597, METH_NOARGS, (const char *)Dtool_BulletPersistentManifold_clear_manifold_597_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {"get_manifold_points", (PyCFunction) &MakeSeq_BulletPersistentManifold_get_manifold_points, METH_NOARGS, NULL},
  { "getManifoldPoints", (PyCFunction) &MakeSeq_BulletPersistentManifold_get_manifold_points, METH_NOARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletPersistentManifold = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletPersistentManifold = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletPersistentManifold",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletPersistentManifold,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletPersistentManifold,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletPersistentManifold,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletPersistentManifold,
    PyType_GenericAlloc,
    Dtool_new_BulletPersistentManifold,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletPersistentManifold,
  Dtool_UpcastInterface_BulletPersistentManifold,
  Dtool_DowncastInterface_BulletPersistentManifold,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletPersistentManifold(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletPersistentManifold._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletPersistentManifold._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletPersistentManifold) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletPersistentManifold)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletPersistentManifold);
  }
}

/**
 * Python method tables for BulletPlaneShape (BulletPlaneShape)
 */
static PyMethodDef Dtool_Methods_BulletPlaneShape[] = {
  {"assign", &Dtool_BulletPlaneShape_operator_601, METH_O, (const char *)Dtool_BulletPlaneShape_operator_601_comment},
  {"get_plane_normal", &Dtool_BulletPlaneShape_get_plane_normal_602, METH_NOARGS, (const char *)Dtool_BulletPlaneShape_get_plane_normal_602_comment},
  {"getPlaneNormal", &Dtool_BulletPlaneShape_get_plane_normal_602, METH_NOARGS, (const char *)Dtool_BulletPlaneShape_get_plane_normal_602_comment},
  {"get_plane_constant", &Dtool_BulletPlaneShape_get_plane_constant_603, METH_NOARGS, (const char *)Dtool_BulletPlaneShape_get_plane_constant_603_comment},
  {"getPlaneConstant", &Dtool_BulletPlaneShape_get_plane_constant_603, METH_NOARGS, (const char *)Dtool_BulletPlaneShape_get_plane_constant_603_comment},
  {"make_from_solid", &Dtool_BulletPlaneShape_make_from_solid_604, METH_O | METH_STATIC, (const char *)Dtool_BulletPlaneShape_make_from_solid_604_comment},
  {"makeFromSolid", &Dtool_BulletPlaneShape_make_from_solid_604, METH_O | METH_STATIC, (const char *)Dtool_BulletPlaneShape_make_from_solid_604_comment},
  {"get_class_type", &Dtool_BulletPlaneShape_get_class_type_605, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletPlaneShape_get_class_type_605_comment},
  {"getClassType", &Dtool_BulletPlaneShape_get_class_type_605, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletPlaneShape_get_class_type_605_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletPlaneShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletPlaneShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletPlaneShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletPlaneShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletPlaneShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletPlaneShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletPlaneShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletPlaneShape,
    &Dtool_SequenceMethods_BulletPlaneShape,
    &Dtool_MappingMethods_BulletPlaneShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletPlaneShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletPlaneShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletPlaneShape,
    PyType_GenericAlloc,
    Dtool_new_BulletPlaneShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletPlaneShape,
  Dtool_UpcastInterface_BulletPlaneShape,
  Dtool_DowncastInterface_BulletPlaneShape,
  (CoerceFunction)Dtool_ConstCoerce_BulletPlaneShape,
  (CoerceFunction)Dtool_Coerce_BulletPlaneShape,
};

static void Dtool_PyModuleClassInit_BulletPlaneShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletPlaneShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletPlaneShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletPlaneShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletPlaneShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletPlaneShape);
  }
}

/**
 * Python method tables for BulletSliderConstraint (BulletSliderConstraint)
 */
static PyMethodDef Dtool_Methods_BulletSliderConstraint[] = {
  {"get_linear_pos", &Dtool_BulletSliderConstraint_get_linear_pos_608, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_linear_pos_608_comment},
  {"getLinearPos", &Dtool_BulletSliderConstraint_get_linear_pos_608, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_linear_pos_608_comment},
  {"get_angular_pos", &Dtool_BulletSliderConstraint_get_angular_pos_609, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_angular_pos_609_comment},
  {"getAngularPos", &Dtool_BulletSliderConstraint_get_angular_pos_609, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_angular_pos_609_comment},
  {"get_lower_linear_limit", &Dtool_BulletSliderConstraint_get_lower_linear_limit_610, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_lower_linear_limit_610_comment},
  {"getLowerLinearLimit", &Dtool_BulletSliderConstraint_get_lower_linear_limit_610, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_lower_linear_limit_610_comment},
  {"get_upper_linear_limit", &Dtool_BulletSliderConstraint_get_upper_linear_limit_611, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_upper_linear_limit_611_comment},
  {"getUpperLinearLimit", &Dtool_BulletSliderConstraint_get_upper_linear_limit_611, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_upper_linear_limit_611_comment},
  {"get_lower_angular_limit", &Dtool_BulletSliderConstraint_get_lower_angular_limit_612, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_lower_angular_limit_612_comment},
  {"getLowerAngularLimit", &Dtool_BulletSliderConstraint_get_lower_angular_limit_612, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_lower_angular_limit_612_comment},
  {"get_upper_angular_limit", &Dtool_BulletSliderConstraint_get_upper_angular_limit_613, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_upper_angular_limit_613_comment},
  {"getUpperAngularLimit", &Dtool_BulletSliderConstraint_get_upper_angular_limit_613, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_upper_angular_limit_613_comment},
  {"set_lower_linear_limit", &Dtool_BulletSliderConstraint_set_lower_linear_limit_614, METH_O, (const char *)Dtool_BulletSliderConstraint_set_lower_linear_limit_614_comment},
  {"setLowerLinearLimit", &Dtool_BulletSliderConstraint_set_lower_linear_limit_614, METH_O, (const char *)Dtool_BulletSliderConstraint_set_lower_linear_limit_614_comment},
  {"set_upper_linear_limit", &Dtool_BulletSliderConstraint_set_upper_linear_limit_615, METH_O, (const char *)Dtool_BulletSliderConstraint_set_upper_linear_limit_615_comment},
  {"setUpperLinearLimit", &Dtool_BulletSliderConstraint_set_upper_linear_limit_615, METH_O, (const char *)Dtool_BulletSliderConstraint_set_upper_linear_limit_615_comment},
  {"set_lower_angular_limit", &Dtool_BulletSliderConstraint_set_lower_angular_limit_616, METH_O, (const char *)Dtool_BulletSliderConstraint_set_lower_angular_limit_616_comment},
  {"setLowerAngularLimit", &Dtool_BulletSliderConstraint_set_lower_angular_limit_616, METH_O, (const char *)Dtool_BulletSliderConstraint_set_lower_angular_limit_616_comment},
  {"set_upper_angular_limit", &Dtool_BulletSliderConstraint_set_upper_angular_limit_617, METH_O, (const char *)Dtool_BulletSliderConstraint_set_upper_angular_limit_617_comment},
  {"setUpperAngularLimit", &Dtool_BulletSliderConstraint_set_upper_angular_limit_617, METH_O, (const char *)Dtool_BulletSliderConstraint_set_upper_angular_limit_617_comment},
  {"set_powered_linear_motor", &Dtool_BulletSliderConstraint_set_powered_linear_motor_618, METH_O, (const char *)Dtool_BulletSliderConstraint_set_powered_linear_motor_618_comment},
  {"setPoweredLinearMotor", &Dtool_BulletSliderConstraint_set_powered_linear_motor_618, METH_O, (const char *)Dtool_BulletSliderConstraint_set_powered_linear_motor_618_comment},
  {"set_target_linear_motor_velocity", &Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_619, METH_O, (const char *)Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_619_comment},
  {"setTargetLinearMotorVelocity", &Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_619, METH_O, (const char *)Dtool_BulletSliderConstraint_set_target_linear_motor_velocity_619_comment},
  {"set_max_linear_motor_force", &Dtool_BulletSliderConstraint_set_max_linear_motor_force_620, METH_O, (const char *)Dtool_BulletSliderConstraint_set_max_linear_motor_force_620_comment},
  {"setMaxLinearMotorForce", &Dtool_BulletSliderConstraint_set_max_linear_motor_force_620, METH_O, (const char *)Dtool_BulletSliderConstraint_set_max_linear_motor_force_620_comment},
  {"get_powered_linear_motor", &Dtool_BulletSliderConstraint_get_powered_linear_motor_621, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_powered_linear_motor_621_comment},
  {"getPoweredLinearMotor", &Dtool_BulletSliderConstraint_get_powered_linear_motor_621, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_powered_linear_motor_621_comment},
  {"get_target_linear_motor_velocity", &Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_622, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_622_comment},
  {"getTargetLinearMotorVelocity", &Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_622, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_target_linear_motor_velocity_622_comment},
  {"get_max_linear_motor_force", &Dtool_BulletSliderConstraint_get_max_linear_motor_force_623, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_max_linear_motor_force_623_comment},
  {"getMaxLinearMotorForce", &Dtool_BulletSliderConstraint_get_max_linear_motor_force_623, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_max_linear_motor_force_623_comment},
  {"set_powered_angular_motor", &Dtool_BulletSliderConstraint_set_powered_angular_motor_624, METH_O, (const char *)Dtool_BulletSliderConstraint_set_powered_angular_motor_624_comment},
  {"setPoweredAngularMotor", &Dtool_BulletSliderConstraint_set_powered_angular_motor_624, METH_O, (const char *)Dtool_BulletSliderConstraint_set_powered_angular_motor_624_comment},
  {"set_target_angular_motor_velocity", &Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_625, METH_O, (const char *)Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_625_comment},
  {"setTargetAngularMotorVelocity", &Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_625, METH_O, (const char *)Dtool_BulletSliderConstraint_set_target_angular_motor_velocity_625_comment},
  {"set_max_angular_motor_force", &Dtool_BulletSliderConstraint_set_max_angular_motor_force_626, METH_O, (const char *)Dtool_BulletSliderConstraint_set_max_angular_motor_force_626_comment},
  {"setMaxAngularMotorForce", &Dtool_BulletSliderConstraint_set_max_angular_motor_force_626, METH_O, (const char *)Dtool_BulletSliderConstraint_set_max_angular_motor_force_626_comment},
  {"get_powered_angular_motor", &Dtool_BulletSliderConstraint_get_powered_angular_motor_627, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_powered_angular_motor_627_comment},
  {"getPoweredAngularMotor", &Dtool_BulletSliderConstraint_get_powered_angular_motor_627, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_powered_angular_motor_627_comment},
  {"get_target_angular_motor_velocity", &Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_628, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_628_comment},
  {"getTargetAngularMotorVelocity", &Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_628, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_target_angular_motor_velocity_628_comment},
  {"get_max_angular_motor_force", &Dtool_BulletSliderConstraint_get_max_angular_motor_force_629, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_max_angular_motor_force_629_comment},
  {"getMaxAngularMotorForce", &Dtool_BulletSliderConstraint_get_max_angular_motor_force_629, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_max_angular_motor_force_629_comment},
  {"set_frames", (PyCFunction) &Dtool_BulletSliderConstraint_set_frames_630, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSliderConstraint_set_frames_630_comment},
  {"setFrames", (PyCFunction) &Dtool_BulletSliderConstraint_set_frames_630, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSliderConstraint_set_frames_630_comment},
  {"get_frame_a", &Dtool_BulletSliderConstraint_get_frame_a_631, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_frame_a_631_comment},
  {"getFrameA", &Dtool_BulletSliderConstraint_get_frame_a_631, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_frame_a_631_comment},
  {"get_frame_b", &Dtool_BulletSliderConstraint_get_frame_b_632, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_frame_b_632_comment},
  {"getFrameB", &Dtool_BulletSliderConstraint_get_frame_b_632, METH_NOARGS, (const char *)Dtool_BulletSliderConstraint_get_frame_b_632_comment},
  {"get_class_type", &Dtool_BulletSliderConstraint_get_class_type_633, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSliderConstraint_get_class_type_633_comment},
  {"getClassType", &Dtool_BulletSliderConstraint_get_class_type_633, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSliderConstraint_get_class_type_633_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletSliderConstraint = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletSliderConstraint = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletSliderConstraint = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletSliderConstraint = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSliderConstraint = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletSliderConstraint",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSliderConstraint,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletSliderConstraint,
    &Dtool_SequenceMethods_BulletSliderConstraint,
    &Dtool_MappingMethods_BulletSliderConstraint,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletSliderConstraint,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletSliderConstraint,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletSliderConstraint,
    PyType_GenericAlloc,
    Dtool_new_BulletSliderConstraint,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSliderConstraint,
  Dtool_UpcastInterface_BulletSliderConstraint,
  Dtool_DowncastInterface_BulletSliderConstraint,
  (CoerceFunction)Dtool_ConstCoerce_BulletSliderConstraint,
  (CoerceFunction)Dtool_Coerce_BulletSliderConstraint,
};

static void Dtool_PyModuleClassInit_BulletSliderConstraint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletConstraint(NULL);
    Dtool_BulletSliderConstraint._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletConstraint);
    PyObject *dict = PyDict_New();
    Dtool_BulletSliderConstraint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSliderConstraint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSliderConstraint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSliderConstraint);
  }
}

/**
 * Python method tables for BulletSoftBodyConfig (BulletSoftBodyConfig)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyConfig[] = {
  {"clear_all_collision_flags", &Dtool_BulletSoftBodyConfig_clear_all_collision_flags_638, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_clear_all_collision_flags_638_comment},
  {"clearAllCollisionFlags", &Dtool_BulletSoftBodyConfig_clear_all_collision_flags_638, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_clear_all_collision_flags_638_comment},
  {"set_collision_flag", (PyCFunction) &Dtool_BulletSoftBodyConfig_set_collision_flag_639, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyConfig_set_collision_flag_639_comment},
  {"setCollisionFlag", (PyCFunction) &Dtool_BulletSoftBodyConfig_set_collision_flag_639, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyConfig_set_collision_flag_639_comment},
  {"get_collision_flag", &Dtool_BulletSoftBodyConfig_get_collision_flag_640, METH_O, (const char *)Dtool_BulletSoftBodyConfig_get_collision_flag_640_comment},
  {"getCollisionFlag", &Dtool_BulletSoftBodyConfig_get_collision_flag_640, METH_O, (const char *)Dtool_BulletSoftBodyConfig_get_collision_flag_640_comment},
  {"set_aero_model", &Dtool_BulletSoftBodyConfig_set_aero_model_641, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_aero_model_641_comment},
  {"setAeroModel", &Dtool_BulletSoftBodyConfig_set_aero_model_641, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_aero_model_641_comment},
  {"get_aero_model", &Dtool_BulletSoftBodyConfig_get_aero_model_642, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_aero_model_642_comment},
  {"getAeroModel", &Dtool_BulletSoftBodyConfig_get_aero_model_642, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_aero_model_642_comment},
  {"set_velocities_correction_factor", &Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_643, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_643_comment},
  {"setVelocitiesCorrectionFactor", &Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_643, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_velocities_correction_factor_643_comment},
  {"set_damping_coefficient", &Dtool_BulletSoftBodyConfig_set_damping_coefficient_644, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_damping_coefficient_644_comment},
  {"setDampingCoefficient", &Dtool_BulletSoftBodyConfig_set_damping_coefficient_644, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_damping_coefficient_644_comment},
  {"set_drag_coefficient", &Dtool_BulletSoftBodyConfig_set_drag_coefficient_645, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_drag_coefficient_645_comment},
  {"setDragCoefficient", &Dtool_BulletSoftBodyConfig_set_drag_coefficient_645, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_drag_coefficient_645_comment},
  {"set_lift_coefficient", &Dtool_BulletSoftBodyConfig_set_lift_coefficient_646, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_lift_coefficient_646_comment},
  {"setLiftCoefficient", &Dtool_BulletSoftBodyConfig_set_lift_coefficient_646, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_lift_coefficient_646_comment},
  {"set_pressure_coefficient", &Dtool_BulletSoftBodyConfig_set_pressure_coefficient_647, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_pressure_coefficient_647_comment},
  {"setPressureCoefficient", &Dtool_BulletSoftBodyConfig_set_pressure_coefficient_647, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_pressure_coefficient_647_comment},
  {"set_volume_conversation_coefficient", &Dtool_BulletSoftBodyConfig_set_volume_conversation_coefficient_648, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_volume_conversation_coefficient_648_comment},
  {"setVolumeConversationCoefficient", &Dtool_BulletSoftBodyConfig_set_volume_conversation_coefficient_648, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_volume_conversation_coefficient_648_comment},
  {"set_dynamic_friction_coefficient", &Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_649, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_649_comment},
  {"setDynamicFrictionCoefficient", &Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_649, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_dynamic_friction_coefficient_649_comment},
  {"set_pose_matching_coefficient", &Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_650, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_650_comment},
  {"setPoseMatchingCoefficient", &Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_650, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_pose_matching_coefficient_650_comment},
  {"set_rigid_contacts_hardness", &Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_651, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_651_comment},
  {"setRigidContactsHardness", &Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_651, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_rigid_contacts_hardness_651_comment},
  {"set_kinetic_contacts_hardness", &Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_652, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_652_comment},
  {"setKineticContactsHardness", &Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_652, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_kinetic_contacts_hardness_652_comment},
  {"set_soft_contacts_hardness", &Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_653, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_653_comment},
  {"setSoftContactsHardness", &Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_653, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_contacts_hardness_653_comment},
  {"set_anchors_hardness", &Dtool_BulletSoftBodyConfig_set_anchors_hardness_654, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_anchors_hardness_654_comment},
  {"setAnchorsHardness", &Dtool_BulletSoftBodyConfig_set_anchors_hardness_654, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_anchors_hardness_654_comment},
  {"set_soft_vs_rigid_hardness", &Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_655, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_655_comment},
  {"setSoftVsRigidHardness", &Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_655, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_hardness_655_comment},
  {"set_soft_vs_kinetic_hardness", &Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_656, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_656_comment},
  {"setSoftVsKineticHardness", &Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_656, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_hardness_656_comment},
  {"set_soft_vs_soft_hardness", &Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_657, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_657_comment},
  {"setSoftVsSoftHardness", &Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_657, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_soft_hardness_657_comment},
  {"set_soft_vs_rigid_impulse_split", &Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_658, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_658_comment},
  {"setSoftVsRigidImpulseSplit", &Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_658, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_rigid_impulse_split_658_comment},
  {"set_soft_vs_kinetic_impulse_split", &Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_659, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_659_comment},
  {"setSoftVsKineticImpulseSplit", &Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_659, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_kinetic_impulse_split_659_comment},
  {"set_soft_vs_soft_impulse_split", &Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_660, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_660_comment},
  {"setSoftVsSoftImpulseSplit", &Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_660, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_soft_vs_soft_impulse_split_660_comment},
  {"set_maxvolume", &Dtool_BulletSoftBodyConfig_set_maxvolume_661, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_maxvolume_661_comment},
  {"setMaxvolume", &Dtool_BulletSoftBodyConfig_set_maxvolume_661, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_maxvolume_661_comment},
  {"set_timescale", &Dtool_BulletSoftBodyConfig_set_timescale_662, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_timescale_662_comment},
  {"setTimescale", &Dtool_BulletSoftBodyConfig_set_timescale_662, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_timescale_662_comment},
  {"set_positions_solver_iterations", &Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_663, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_663_comment},
  {"setPositionsSolverIterations", &Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_663, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_positions_solver_iterations_663_comment},
  {"set_velocities_solver_iterations", &Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_664, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_664_comment},
  {"setVelocitiesSolverIterations", &Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_664, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_velocities_solver_iterations_664_comment},
  {"set_drift_solver_iterations", &Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_665, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_665_comment},
  {"setDriftSolverIterations", &Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_665, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_drift_solver_iterations_665_comment},
  {"set_cluster_solver_iterations", &Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_666, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_666_comment},
  {"setClusterSolverIterations", &Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_666, METH_O, (const char *)Dtool_BulletSoftBodyConfig_set_cluster_solver_iterations_666_comment},
  {"get_velocities_correction_factor", &Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_667, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_667_comment},
  {"getVelocitiesCorrectionFactor", &Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_667, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_velocities_correction_factor_667_comment},
  {"get_damping_coefficient", &Dtool_BulletSoftBodyConfig_get_damping_coefficient_668, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_damping_coefficient_668_comment},
  {"getDampingCoefficient", &Dtool_BulletSoftBodyConfig_get_damping_coefficient_668, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_damping_coefficient_668_comment},
  {"get_drag_coefficient", &Dtool_BulletSoftBodyConfig_get_drag_coefficient_669, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_drag_coefficient_669_comment},
  {"getDragCoefficient", &Dtool_BulletSoftBodyConfig_get_drag_coefficient_669, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_drag_coefficient_669_comment},
  {"get_lift_coefficient", &Dtool_BulletSoftBodyConfig_get_lift_coefficient_670, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_lift_coefficient_670_comment},
  {"getLiftCoefficient", &Dtool_BulletSoftBodyConfig_get_lift_coefficient_670, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_lift_coefficient_670_comment},
  {"get_pressure_coefficient", &Dtool_BulletSoftBodyConfig_get_pressure_coefficient_671, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_pressure_coefficient_671_comment},
  {"getPressureCoefficient", &Dtool_BulletSoftBodyConfig_get_pressure_coefficient_671, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_pressure_coefficient_671_comment},
  {"get_volume_conversation_coefficient", &Dtool_BulletSoftBodyConfig_get_volume_conversation_coefficient_672, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_volume_conversation_coefficient_672_comment},
  {"getVolumeConversationCoefficient", &Dtool_BulletSoftBodyConfig_get_volume_conversation_coefficient_672, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_volume_conversation_coefficient_672_comment},
  {"get_dynamic_friction_coefficient", &Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_673, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_673_comment},
  {"getDynamicFrictionCoefficient", &Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_673, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_dynamic_friction_coefficient_673_comment},
  {"get_pose_matching_coefficient", &Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_674, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_674_comment},
  {"getPoseMatchingCoefficient", &Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_674, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_pose_matching_coefficient_674_comment},
  {"get_rigid_contacts_hardness", &Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_675, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_675_comment},
  {"getRigidContactsHardness", &Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_675, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_rigid_contacts_hardness_675_comment},
  {"get_kinetic_contacts_hardness", &Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_676, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_676_comment},
  {"getKineticContactsHardness", &Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_676, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_kinetic_contacts_hardness_676_comment},
  {"get_soft_contacts_hardness", &Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_677, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_677_comment},
  {"getSoftContactsHardness", &Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_677, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_contacts_hardness_677_comment},
  {"get_anchors_hardness", &Dtool_BulletSoftBodyConfig_get_anchors_hardness_678, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_anchors_hardness_678_comment},
  {"getAnchorsHardness", &Dtool_BulletSoftBodyConfig_get_anchors_hardness_678, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_anchors_hardness_678_comment},
  {"get_soft_vs_rigid_hardness", &Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_679, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_679_comment},
  {"getSoftVsRigidHardness", &Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_679, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_hardness_679_comment},
  {"get_soft_vs_kinetic_hardness", &Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_680, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_680_comment},
  {"getSoftVsKineticHardness", &Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_680, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_hardness_680_comment},
  {"get_soft_vs_soft_hardness", &Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_681, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_681_comment},
  {"getSoftVsSoftHardness", &Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_681, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_soft_hardness_681_comment},
  {"get_soft_vs_rigid_impulse_split", &Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_682, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_682_comment},
  {"getSoftVsRigidImpulseSplit", &Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_682, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_rigid_impulse_split_682_comment},
  {"get_soft_vs_kinetic_impulse_split", &Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_683, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_683_comment},
  {"getSoftVsKineticImpulseSplit", &Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_683, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_kinetic_impulse_split_683_comment},
  {"get_soft_vs_soft_impulse_split", &Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_684, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_684_comment},
  {"getSoftVsSoftImpulseSplit", &Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_684, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_soft_vs_soft_impulse_split_684_comment},
  {"get_maxvolume", &Dtool_BulletSoftBodyConfig_get_maxvolume_685, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_maxvolume_685_comment},
  {"getMaxvolume", &Dtool_BulletSoftBodyConfig_get_maxvolume_685, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_maxvolume_685_comment},
  {"get_timescale", &Dtool_BulletSoftBodyConfig_get_timescale_686, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_timescale_686_comment},
  {"getTimescale", &Dtool_BulletSoftBodyConfig_get_timescale_686, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_timescale_686_comment},
  {"get_positions_solver_iterations", &Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_687, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_687_comment},
  {"getPositionsSolverIterations", &Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_687, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_positions_solver_iterations_687_comment},
  {"get_velocities_solver_iterations", &Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_688, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_688_comment},
  {"getVelocitiesSolverIterations", &Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_688, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_velocities_solver_iterations_688_comment},
  {"get_drift_solver_iterations", &Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_689, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_689_comment},
  {"getDriftSolverIterations", &Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_689, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_drift_solver_iterations_689_comment},
  {"get_cluster_solver_iterations", &Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_690, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_690_comment},
  {"getClusterSolverIterations", &Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_690, METH_NOARGS, (const char *)Dtool_BulletSoftBodyConfig_get_cluster_solver_iterations_690_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyConfig = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSoftBodyConfig = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletSoftBodyConfig",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyConfig,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletSoftBodyConfig,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletSoftBodyConfig,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyConfig,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyConfig,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyConfig,
  Dtool_UpcastInterface_BulletSoftBodyConfig,
  Dtool_DowncastInterface_BulletSoftBodyConfig,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyConfig(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletSoftBodyConfig._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = _PyDict_NewPresized(25);
    Dtool_BulletSoftBodyConfig._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    // enum BulletSoftBodyConfig::CollisionFlag;
    PyDict_SetItemString(dict, "CF_rigid_vs_soft_mask", Dtool_WrapValue(BulletSoftBodyConfig::CF_rigid_vs_soft_mask));
    PyDict_SetItemString(dict, "CFRigidVsSoftMask", Dtool_WrapValue(BulletSoftBodyConfig::CF_rigid_vs_soft_mask));
    PyDict_SetItemString(dict, "CF_sdf_rigid_soft", Dtool_WrapValue(BulletSoftBodyConfig::CF_sdf_rigid_soft));
    PyDict_SetItemString(dict, "CFSdfRigidSoft", Dtool_WrapValue(BulletSoftBodyConfig::CF_sdf_rigid_soft));
    PyDict_SetItemString(dict, "CF_cluster_rigid_soft", Dtool_WrapValue(BulletSoftBodyConfig::CF_cluster_rigid_soft));
    PyDict_SetItemString(dict, "CFClusterRigidSoft", Dtool_WrapValue(BulletSoftBodyConfig::CF_cluster_rigid_soft));
    PyDict_SetItemString(dict, "CF_soft_vs_soft_mask", Dtool_WrapValue(BulletSoftBodyConfig::CF_soft_vs_soft_mask));
    PyDict_SetItemString(dict, "CFSoftVsSoftMask", Dtool_WrapValue(BulletSoftBodyConfig::CF_soft_vs_soft_mask));
    PyDict_SetItemString(dict, "CF_vertex_face_soft_soft", Dtool_WrapValue(BulletSoftBodyConfig::CF_vertex_face_soft_soft));
    PyDict_SetItemString(dict, "CFVertexFaceSoftSoft", Dtool_WrapValue(BulletSoftBodyConfig::CF_vertex_face_soft_soft));
    PyDict_SetItemString(dict, "CF_cluster_soft_soft", Dtool_WrapValue(BulletSoftBodyConfig::CF_cluster_soft_soft));
    PyDict_SetItemString(dict, "CFClusterSoftSoft", Dtool_WrapValue(BulletSoftBodyConfig::CF_cluster_soft_soft));
    PyDict_SetItemString(dict, "CF_cluster_self", Dtool_WrapValue(BulletSoftBodyConfig::CF_cluster_self));
    PyDict_SetItemString(dict, "CFClusterSelf", Dtool_WrapValue(BulletSoftBodyConfig::CF_cluster_self));
    // enum BulletSoftBodyConfig::AeroModel;
    PyDict_SetItemString(dict, "AM_vertex_point", Dtool_WrapValue(BulletSoftBodyConfig::AM_vertex_point));
    PyDict_SetItemString(dict, "AMVertexPoint", Dtool_WrapValue(BulletSoftBodyConfig::AM_vertex_point));
    PyDict_SetItemString(dict, "AM_vertex_two_sided", Dtool_WrapValue(BulletSoftBodyConfig::AM_vertex_two_sided));
    PyDict_SetItemString(dict, "AMVertexTwoSided", Dtool_WrapValue(BulletSoftBodyConfig::AM_vertex_two_sided));
    PyDict_SetItemString(dict, "AM_vertex_one_sided", Dtool_WrapValue(BulletSoftBodyConfig::AM_vertex_one_sided));
    PyDict_SetItemString(dict, "AMVertexOneSided", Dtool_WrapValue(BulletSoftBodyConfig::AM_vertex_one_sided));
    PyDict_SetItemString(dict, "AM_face_two_sided", Dtool_WrapValue(BulletSoftBodyConfig::AM_face_two_sided));
    PyDict_SetItemString(dict, "AMFaceTwoSided", Dtool_WrapValue(BulletSoftBodyConfig::AM_face_two_sided));
    PyDict_SetItemString(dict, "AM_face_one_sided", Dtool_WrapValue(BulletSoftBodyConfig::AM_face_one_sided));
    PyDict_SetItemString(dict, "AMFaceOneSided", Dtool_WrapValue(BulletSoftBodyConfig::AM_face_one_sided));
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyConfig) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyConfig)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyConfig);
  }
}

/**
 * Python method tables for BulletSoftBodyControl (BulletSoftBodyControl)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyControl[] = {
  {"set_goal", &Dtool_BulletSoftBodyControl_set_goal_700, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_goal_700_comment},
  {"setGoal", &Dtool_BulletSoftBodyControl_set_goal_700, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_goal_700_comment},
  {"set_max_torque", &Dtool_BulletSoftBodyControl_set_max_torque_701, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_max_torque_701_comment},
  {"setMaxTorque", &Dtool_BulletSoftBodyControl_set_max_torque_701, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_max_torque_701_comment},
  {"set_angle", &Dtool_BulletSoftBodyControl_set_angle_702, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_angle_702_comment},
  {"setAngle", &Dtool_BulletSoftBodyControl_set_angle_702, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_angle_702_comment},
  {"set_sign", &Dtool_BulletSoftBodyControl_set_sign_703, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_sign_703_comment},
  {"setSign", &Dtool_BulletSoftBodyControl_set_sign_703, METH_O, (const char *)Dtool_BulletSoftBodyControl_set_sign_703_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyControl = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletSoftBodyControl = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletSoftBodyControl = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletSoftBodyControl = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSoftBodyControl = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletSoftBodyControl",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyControl,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletSoftBodyControl,
    &Dtool_SequenceMethods_BulletSoftBodyControl,
    &Dtool_MappingMethods_BulletSoftBodyControl,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletSoftBodyControl,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletSoftBodyControl,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyControl,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyControl,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyControl,
  Dtool_UpcastInterface_BulletSoftBodyControl,
  Dtool_DowncastInterface_BulletSoftBodyControl,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyControl(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletSoftBodyControl._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletSoftBodyControl._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyControl) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyControl)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyControl);
  }
}

/**
 * Python method tables for BulletSoftBodyMaterial (BulletSoftBodyMaterial)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyMaterial[] = {
  {"empty", &Dtool_BulletSoftBodyMaterial_empty_706, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSoftBodyMaterial_empty_706_comment},
  {"set_linear_stiffness", &Dtool_BulletSoftBodyMaterial_set_linear_stiffness_707, METH_O, (const char *)Dtool_BulletSoftBodyMaterial_set_linear_stiffness_707_comment},
  {"setLinearStiffness", &Dtool_BulletSoftBodyMaterial_set_linear_stiffness_707, METH_O, (const char *)Dtool_BulletSoftBodyMaterial_set_linear_stiffness_707_comment},
  {"get_linear_stiffness", &Dtool_BulletSoftBodyMaterial_get_linear_stiffness_708, METH_NOARGS, (const char *)Dtool_BulletSoftBodyMaterial_get_linear_stiffness_708_comment},
  {"getLinearStiffness", &Dtool_BulletSoftBodyMaterial_get_linear_stiffness_708, METH_NOARGS, (const char *)Dtool_BulletSoftBodyMaterial_get_linear_stiffness_708_comment},
  {"set_angular_stiffness", &Dtool_BulletSoftBodyMaterial_set_angular_stiffness_712, METH_O, (const char *)Dtool_BulletSoftBodyMaterial_set_angular_stiffness_712_comment},
  {"setAngularStiffness", &Dtool_BulletSoftBodyMaterial_set_angular_stiffness_712, METH_O, (const char *)Dtool_BulletSoftBodyMaterial_set_angular_stiffness_712_comment},
  {"get_angular_stiffness", &Dtool_BulletSoftBodyMaterial_get_angular_stiffness_713, METH_NOARGS, (const char *)Dtool_BulletSoftBodyMaterial_get_angular_stiffness_713_comment},
  {"getAngularStiffness", &Dtool_BulletSoftBodyMaterial_get_angular_stiffness_713, METH_NOARGS, (const char *)Dtool_BulletSoftBodyMaterial_get_angular_stiffness_713_comment},
  {"set_volume_preservation", &Dtool_BulletSoftBodyMaterial_set_volume_preservation_715, METH_O, (const char *)Dtool_BulletSoftBodyMaterial_set_volume_preservation_715_comment},
  {"setVolumePreservation", &Dtool_BulletSoftBodyMaterial_set_volume_preservation_715, METH_O, (const char *)Dtool_BulletSoftBodyMaterial_set_volume_preservation_715_comment},
  {"get_volume_preservation", &Dtool_BulletSoftBodyMaterial_get_volume_preservation_716, METH_NOARGS, (const char *)Dtool_BulletSoftBodyMaterial_get_volume_preservation_716_comment},
  {"getVolumePreservation", &Dtool_BulletSoftBodyMaterial_get_volume_preservation_716, METH_NOARGS, (const char *)Dtool_BulletSoftBodyMaterial_get_volume_preservation_716_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyGetSetDef Dtool_Properties_BulletSoftBodyMaterial[] = {
  {(char *)"linear_stiffness", &Dtool_BulletSoftBodyMaterial_linear_stiffness_Getter, &Dtool_BulletSoftBodyMaterial_linear_stiffness_Setter, NULL, NULL},
  {(char *)"angular_stiffness", &Dtool_BulletSoftBodyMaterial_angular_stiffness_Getter, &Dtool_BulletSoftBodyMaterial_angular_stiffness_Setter, NULL, NULL},
  {(char *)"volume_preservation", &Dtool_BulletSoftBodyMaterial_volume_preservation_Getter, &Dtool_BulletSoftBodyMaterial_volume_preservation_Setter, NULL, NULL},
  {NULL},
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyMaterial = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSoftBodyMaterial = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletSoftBodyMaterial",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyMaterial,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletSoftBodyMaterial,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletSoftBodyMaterial,
    0, // tp_members
    Dtool_Properties_BulletSoftBodyMaterial,
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyMaterial,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyMaterial,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyMaterial,
  Dtool_UpcastInterface_BulletSoftBodyMaterial,
  Dtool_DowncastInterface_BulletSoftBodyMaterial,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyMaterial(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletSoftBodyMaterial._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletSoftBodyMaterial._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyMaterial) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyMaterial)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyMaterial);
  }
}

/**
 * Python method tables for BulletSoftBodyShape (BulletSoftBodyShape)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyShape[] = {
  {"get_body", &Dtool_BulletSoftBodyShape_get_body_720, METH_NOARGS, (const char *)Dtool_BulletSoftBodyShape_get_body_720_comment},
  {"getBody", &Dtool_BulletSoftBodyShape_get_body_720, METH_NOARGS, (const char *)Dtool_BulletSoftBodyShape_get_body_720_comment},
  {"get_class_type", &Dtool_BulletSoftBodyShape_get_class_type_721, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSoftBodyShape_get_class_type_721_comment},
  {"getClassType", &Dtool_BulletSoftBodyShape_get_class_type_721, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSoftBodyShape_get_class_type_721_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletSoftBodyShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletSoftBodyShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletSoftBodyShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSoftBodyShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletSoftBodyShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletSoftBodyShape,
    &Dtool_SequenceMethods_BulletSoftBodyShape,
    &Dtool_MappingMethods_BulletSoftBodyShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletSoftBodyShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletSoftBodyShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyShape,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyShape,
  Dtool_UpcastInterface_BulletSoftBodyShape,
  Dtool_DowncastInterface_BulletSoftBodyShape,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletSoftBodyShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletSoftBodyShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyShape);
  }
}

/**
 * Python method tables for BulletSoftBodyWorldInfo (BulletSoftBodyWorldInfo)
 */
static PyMethodDef Dtool_Methods_BulletSoftBodyWorldInfo[] = {
  {"set_air_density", &Dtool_BulletSoftBodyWorldInfo_set_air_density_724, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_air_density_724_comment},
  {"setAirDensity", &Dtool_BulletSoftBodyWorldInfo_set_air_density_724, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_air_density_724_comment},
  {"set_water_density", &Dtool_BulletSoftBodyWorldInfo_set_water_density_725, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_water_density_725_comment},
  {"setWaterDensity", &Dtool_BulletSoftBodyWorldInfo_set_water_density_725, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_water_density_725_comment},
  {"set_water_offset", &Dtool_BulletSoftBodyWorldInfo_set_water_offset_726, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_water_offset_726_comment},
  {"setWaterOffset", &Dtool_BulletSoftBodyWorldInfo_set_water_offset_726, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_water_offset_726_comment},
  {"set_water_normal", &Dtool_BulletSoftBodyWorldInfo_set_water_normal_727, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_water_normal_727_comment},
  {"setWaterNormal", &Dtool_BulletSoftBodyWorldInfo_set_water_normal_727, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_water_normal_727_comment},
  {"set_gravity", &Dtool_BulletSoftBodyWorldInfo_set_gravity_728, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_gravity_728_comment},
  {"setGravity", &Dtool_BulletSoftBodyWorldInfo_set_gravity_728, METH_O, (const char *)Dtool_BulletSoftBodyWorldInfo_set_gravity_728_comment},
  {"get_air_density", &Dtool_BulletSoftBodyWorldInfo_get_air_density_729, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_air_density_729_comment},
  {"getAirDensity", &Dtool_BulletSoftBodyWorldInfo_get_air_density_729, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_air_density_729_comment},
  {"get_water_density", &Dtool_BulletSoftBodyWorldInfo_get_water_density_730, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_water_density_730_comment},
  {"getWaterDensity", &Dtool_BulletSoftBodyWorldInfo_get_water_density_730, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_water_density_730_comment},
  {"get_water_offset", &Dtool_BulletSoftBodyWorldInfo_get_water_offset_731, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_water_offset_731_comment},
  {"getWaterOffset", &Dtool_BulletSoftBodyWorldInfo_get_water_offset_731, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_water_offset_731_comment},
  {"get_water_normal", &Dtool_BulletSoftBodyWorldInfo_get_water_normal_732, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_water_normal_732_comment},
  {"getWaterNormal", &Dtool_BulletSoftBodyWorldInfo_get_water_normal_732, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_water_normal_732_comment},
  {"get_gravity", &Dtool_BulletSoftBodyWorldInfo_get_gravity_733, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_gravity_733_comment},
  {"getGravity", &Dtool_BulletSoftBodyWorldInfo_get_gravity_733, METH_NOARGS, (const char *)Dtool_BulletSoftBodyWorldInfo_get_gravity_733_comment},
  {"garbage_collect", (PyCFunction) &Dtool_BulletSoftBodyWorldInfo_garbage_collect_734, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyWorldInfo_garbage_collect_734_comment},
  {"garbageCollect", (PyCFunction) &Dtool_BulletSoftBodyWorldInfo_garbage_collect_734, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletSoftBodyWorldInfo_garbage_collect_734_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletSoftBodyWorldInfo = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSoftBodyWorldInfo = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletSoftBodyWorldInfo",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSoftBodyWorldInfo,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletSoftBodyWorldInfo,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletSoftBodyWorldInfo,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletSoftBodyWorldInfo,
    PyType_GenericAlloc,
    Dtool_new_BulletSoftBodyWorldInfo,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSoftBodyWorldInfo,
  Dtool_UpcastInterface_BulletSoftBodyWorldInfo,
  Dtool_DowncastInterface_BulletSoftBodyWorldInfo,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletSoftBodyWorldInfo(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletSoftBodyWorldInfo._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletSoftBodyWorldInfo._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSoftBodyWorldInfo) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSoftBodyWorldInfo)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSoftBodyWorldInfo);
  }
}

/**
 * Python method tables for BulletSphereShape (BulletSphereShape)
 */
static PyMethodDef Dtool_Methods_BulletSphereShape[] = {
  {"assign", &Dtool_BulletSphereShape_operator_738, METH_O, (const char *)Dtool_BulletSphereShape_operator_738_comment},
  {"get_radius", &Dtool_BulletSphereShape_get_radius_739, METH_NOARGS, (const char *)Dtool_BulletSphereShape_get_radius_739_comment},
  {"getRadius", &Dtool_BulletSphereShape_get_radius_739, METH_NOARGS, (const char *)Dtool_BulletSphereShape_get_radius_739_comment},
  {"make_from_solid", &Dtool_BulletSphereShape_make_from_solid_740, METH_O | METH_STATIC, (const char *)Dtool_BulletSphereShape_make_from_solid_740_comment},
  {"makeFromSolid", &Dtool_BulletSphereShape_make_from_solid_740, METH_O | METH_STATIC, (const char *)Dtool_BulletSphereShape_make_from_solid_740_comment},
  {"get_class_type", &Dtool_BulletSphereShape_get_class_type_741, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSphereShape_get_class_type_741_comment},
  {"getClassType", &Dtool_BulletSphereShape_get_class_type_741, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSphereShape_get_class_type_741_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletSphereShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletSphereShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletSphereShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletSphereShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSphereShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletSphereShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSphereShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletSphereShape,
    &Dtool_SequenceMethods_BulletSphereShape,
    &Dtool_MappingMethods_BulletSphereShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletSphereShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletSphereShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletSphereShape,
    PyType_GenericAlloc,
    Dtool_new_BulletSphereShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSphereShape,
  Dtool_UpcastInterface_BulletSphereShape,
  Dtool_DowncastInterface_BulletSphereShape,
  (CoerceFunction)Dtool_ConstCoerce_BulletSphereShape,
  (CoerceFunction)Dtool_Coerce_BulletSphereShape,
};

static void Dtool_PyModuleClassInit_BulletSphereShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletSphereShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletSphereShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSphereShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSphereShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSphereShape);
  }
}

/**
 * Python method tables for BulletSphericalConstraint (BulletSphericalConstraint)
 */
static PyMethodDef Dtool_Methods_BulletSphericalConstraint[] = {
  {"set_pivot_a", &Dtool_BulletSphericalConstraint_set_pivot_a_744, METH_O, (const char *)Dtool_BulletSphericalConstraint_set_pivot_a_744_comment},
  {"setPivotA", &Dtool_BulletSphericalConstraint_set_pivot_a_744, METH_O, (const char *)Dtool_BulletSphericalConstraint_set_pivot_a_744_comment},
  {"set_pivot_b", &Dtool_BulletSphericalConstraint_set_pivot_b_745, METH_O, (const char *)Dtool_BulletSphericalConstraint_set_pivot_b_745_comment},
  {"setPivotB", &Dtool_BulletSphericalConstraint_set_pivot_b_745, METH_O, (const char *)Dtool_BulletSphericalConstraint_set_pivot_b_745_comment},
  {"get_pivot_in_a", &Dtool_BulletSphericalConstraint_get_pivot_in_a_746, METH_NOARGS, (const char *)Dtool_BulletSphericalConstraint_get_pivot_in_a_746_comment},
  {"getPivotInA", &Dtool_BulletSphericalConstraint_get_pivot_in_a_746, METH_NOARGS, (const char *)Dtool_BulletSphericalConstraint_get_pivot_in_a_746_comment},
  {"get_pivot_in_b", &Dtool_BulletSphericalConstraint_get_pivot_in_b_747, METH_NOARGS, (const char *)Dtool_BulletSphericalConstraint_get_pivot_in_b_747_comment},
  {"getPivotInB", &Dtool_BulletSphericalConstraint_get_pivot_in_b_747, METH_NOARGS, (const char *)Dtool_BulletSphericalConstraint_get_pivot_in_b_747_comment},
  {"get_class_type", &Dtool_BulletSphericalConstraint_get_class_type_748, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSphericalConstraint_get_class_type_748_comment},
  {"getClassType", &Dtool_BulletSphericalConstraint_get_class_type_748, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletSphericalConstraint_get_class_type_748_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletSphericalConstraint = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletSphericalConstraint = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletSphericalConstraint = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletSphericalConstraint = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletSphericalConstraint = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletSphericalConstraint",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletSphericalConstraint,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletSphericalConstraint,
    &Dtool_SequenceMethods_BulletSphericalConstraint,
    &Dtool_MappingMethods_BulletSphericalConstraint,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletSphericalConstraint,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * A constraint between two rigid bodies, each with a pivot point.  The pivot\n"
    " * points are described in the body's local space.  The constraint limits\n"
    " * movement of the two rigid bodies in such a way that the pivot points match\n"
    " * in global space.  The spherical constraint can be seen as a \"ball and\n"
    " * socket\" joint.\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletSphericalConstraint,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletSphericalConstraint,
    PyType_GenericAlloc,
    Dtool_new_BulletSphericalConstraint,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletSphericalConstraint,
  Dtool_UpcastInterface_BulletSphericalConstraint,
  Dtool_DowncastInterface_BulletSphericalConstraint,
  (CoerceFunction)Dtool_ConstCoerce_BulletSphericalConstraint,
  (CoerceFunction)Dtool_Coerce_BulletSphericalConstraint,
};

static void Dtool_PyModuleClassInit_BulletSphericalConstraint(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletConstraint(NULL);
    Dtool_BulletSphericalConstraint._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletConstraint);
    PyObject *dict = PyDict_New();
    Dtool_BulletSphericalConstraint._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletSphericalConstraint) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletSphericalConstraint)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletSphericalConstraint);
  }
}

/**
 * Python method tables for BulletTickCallbackData (BulletTickCallbackData)
 */
static PyMethodDef Dtool_Methods_BulletTickCallbackData[] = {
  {"get_timestep", &Dtool_BulletTickCallbackData_get_timestep_751, METH_NOARGS, (const char *)Dtool_BulletTickCallbackData_get_timestep_751_comment},
  {"getTimestep", &Dtool_BulletTickCallbackData_get_timestep_751, METH_NOARGS, (const char *)Dtool_BulletTickCallbackData_get_timestep_751_comment},
  {"get_class_type", &Dtool_BulletTickCallbackData_get_class_type_752, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletTickCallbackData_get_class_type_752_comment},
  {"getClassType", &Dtool_BulletTickCallbackData_get_class_type_752, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletTickCallbackData_get_class_type_752_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletTickCallbackData = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletTickCallbackData = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletTickCallbackData = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletTickCallbackData = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletTickCallbackData = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletTickCallbackData",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletTickCallbackData,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletTickCallbackData,
    &Dtool_SequenceMethods_BulletTickCallbackData,
    &Dtool_MappingMethods_BulletTickCallbackData,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletTickCallbackData,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletTickCallbackData,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletTickCallbackData,
    PyType_GenericAlloc,
    Dtool_new_BulletTickCallbackData,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletTickCallbackData,
  Dtool_UpcastInterface_BulletTickCallbackData,
  Dtool_DowncastInterface_BulletTickCallbackData,
  (CoerceFunction)Dtool_ConstCoerce_BulletTickCallbackData,
  (CoerceFunction)Dtool_Coerce_BulletTickCallbackData,
};

static void Dtool_PyModuleClassInit_BulletTickCallbackData(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_CallbackData != NULL);
    assert(Dtool_Ptr_CallbackData->_Dtool_ModuleClassInit != NULL);
    Dtool_Ptr_CallbackData->_Dtool_ModuleClassInit(NULL);
    Dtool_BulletTickCallbackData._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_CallbackData);
    PyObject *dict = PyDict_New();
    Dtool_BulletTickCallbackData._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletTickCallbackData) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletTickCallbackData)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletTickCallbackData);
  }
}

/**
 * Python method tables for BulletTriangleMesh (BulletTriangleMesh)
 */
static PyMethodDef Dtool_Methods_BulletTriangleMesh[] = {
  {"add_triangle", (PyCFunction) &Dtool_BulletTriangleMesh_add_triangle_756, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_add_triangle_756_comment},
  {"addTriangle", (PyCFunction) &Dtool_BulletTriangleMesh_add_triangle_756, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_add_triangle_756_comment},
  {"add_array", (PyCFunction) &Dtool_BulletTriangleMesh_add_array_757, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_add_array_757_comment},
  {"addArray", (PyCFunction) &Dtool_BulletTriangleMesh_add_array_757, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_add_array_757_comment},
  {"add_geom", (PyCFunction) &Dtool_BulletTriangleMesh_add_geom_758, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_add_geom_758_comment},
  {"addGeom", (PyCFunction) &Dtool_BulletTriangleMesh_add_geom_758, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_add_geom_758_comment},
  {"set_welding_distance", &Dtool_BulletTriangleMesh_set_welding_distance_759, METH_O, (const char *)Dtool_BulletTriangleMesh_set_welding_distance_759_comment},
  {"setWeldingDistance", &Dtool_BulletTriangleMesh_set_welding_distance_759, METH_O, (const char *)Dtool_BulletTriangleMesh_set_welding_distance_759_comment},
  {"preallocate", (PyCFunction) &Dtool_BulletTriangleMesh_preallocate_760, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_preallocate_760_comment},
  {"get_num_triangles", &Dtool_BulletTriangleMesh_get_num_triangles_761, METH_NOARGS, (const char *)Dtool_BulletTriangleMesh_get_num_triangles_761_comment},
  {"getNumTriangles", &Dtool_BulletTriangleMesh_get_num_triangles_761, METH_NOARGS, (const char *)Dtool_BulletTriangleMesh_get_num_triangles_761_comment},
  {"get_welding_distance", &Dtool_BulletTriangleMesh_get_welding_distance_762, METH_NOARGS, (const char *)Dtool_BulletTriangleMesh_get_welding_distance_762_comment},
  {"getWeldingDistance", &Dtool_BulletTriangleMesh_get_welding_distance_762, METH_NOARGS, (const char *)Dtool_BulletTriangleMesh_get_welding_distance_762_comment},
  {"output", &Dtool_BulletTriangleMesh_output_763, METH_O, (const char *)Dtool_BulletTriangleMesh_output_763_comment},
  {"write", (PyCFunction) &Dtool_BulletTriangleMesh_write_764, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMesh_write_764_comment},
  {"get_class_type", &Dtool_BulletTriangleMesh_get_class_type_765, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletTriangleMesh_get_class_type_765_comment},
  {"getClassType", &Dtool_BulletTriangleMesh_get_class_type_765, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletTriangleMesh_get_class_type_765_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

//////////////////
//  A __repr__ function
//     BulletTriangleMesh
//////////////////
static PyObject *Dtool_Repr_BulletTriangleMesh(PyObject *self) {
  BulletTriangleMesh *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return NULL;
  }

  ostringstream os;
  local_this->output(os);
  std::string ss = os.str();
  return Dtool_WrapValue(ss);
}

//////////////////
//  A __str__ function
//     BulletTriangleMesh
//////////////////
static PyObject *Dtool_Str_BulletTriangleMesh(PyObject *self) {
  BulletTriangleMesh *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_BulletTriangleMesh, (void **)&local_this)) {
    return NULL;
  }

  ostringstream os;
  local_this->write(os, 0);
  std::string ss = os.str();
  return Dtool_WrapValue(ss);
}

static PyNumberMethods Dtool_NumberMethods_BulletTriangleMesh = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletTriangleMesh = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletTriangleMesh = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletTriangleMesh = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletTriangleMesh = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletTriangleMesh",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletTriangleMesh,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    &Dtool_Repr_BulletTriangleMesh,
    &Dtool_NumberMethods_BulletTriangleMesh,
    &Dtool_SequenceMethods_BulletTriangleMesh,
    &Dtool_MappingMethods_BulletTriangleMesh,
    0, // tp_hash
    0, // tp_call
    &Dtool_Str_BulletTriangleMesh,
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletTriangleMesh,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletTriangleMesh,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletTriangleMesh,
    PyType_GenericAlloc,
    Dtool_new_BulletTriangleMesh,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletTriangleMesh,
  Dtool_UpcastInterface_BulletTriangleMesh,
  Dtool_DowncastInterface_BulletTriangleMesh,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletTriangleMesh(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_TypedWritableReferenceCount != NULL);
    assert(Dtool_Ptr_TypedWritableReferenceCount->_Dtool_ModuleClassInit != NULL);
    Dtool_Ptr_TypedWritableReferenceCount->_Dtool_ModuleClassInit(NULL);
    Dtool_BulletTriangleMesh._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_TypedWritableReferenceCount);
    PyObject *dict = PyDict_New();
    Dtool_BulletTriangleMesh._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletTriangleMesh) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletTriangleMesh)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletTriangleMesh);
  }
}

/**
 * Python method tables for BulletTriangleMeshShape (BulletTriangleMeshShape)
 */
static PyMethodDef Dtool_Methods_BulletTriangleMeshShape[] = {
  {"assign", &Dtool_BulletTriangleMeshShape_operator_768, METH_O, (const char *)Dtool_BulletTriangleMeshShape_operator_768_comment},
  {"refit_tree", (PyCFunction) &Dtool_BulletTriangleMeshShape_refit_tree_769, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMeshShape_refit_tree_769_comment},
  {"refitTree", (PyCFunction) &Dtool_BulletTriangleMeshShape_refit_tree_769, METH_VARARGS | METH_KEYWORDS, (const char *)Dtool_BulletTriangleMeshShape_refit_tree_769_comment},
  {"is_static", &Dtool_BulletTriangleMeshShape_is_static_770, METH_NOARGS, (const char *)Dtool_BulletTriangleMeshShape_is_static_770_comment},
  {"isStatic", &Dtool_BulletTriangleMeshShape_is_static_770, METH_NOARGS, (const char *)Dtool_BulletTriangleMeshShape_is_static_770_comment},
  {"is_dynamic", &Dtool_BulletTriangleMeshShape_is_dynamic_771, METH_NOARGS, (const char *)Dtool_BulletTriangleMeshShape_is_dynamic_771_comment},
  {"isDynamic", &Dtool_BulletTriangleMeshShape_is_dynamic_771, METH_NOARGS, (const char *)Dtool_BulletTriangleMeshShape_is_dynamic_771_comment},
  {"get_class_type", &Dtool_BulletTriangleMeshShape_get_class_type_772, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletTriangleMeshShape_get_class_type_772_comment},
  {"getClassType", &Dtool_BulletTriangleMeshShape_get_class_type_772, METH_NOARGS | METH_STATIC, (const char *)Dtool_BulletTriangleMeshShape_get_class_type_772_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletTriangleMeshShape = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_BulletTriangleMeshShape = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_BulletTriangleMeshShape = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_BulletTriangleMeshShape = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_BulletTriangleMeshShape = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletTriangleMeshShape",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletTriangleMeshShape,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletTriangleMeshShape,
    &Dtool_SequenceMethods_BulletTriangleMeshShape,
    &Dtool_MappingMethods_BulletTriangleMeshShape,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_BulletTriangleMeshShape,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletTriangleMeshShape,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletTriangleMeshShape,
    PyType_GenericAlloc,
    Dtool_new_BulletTriangleMeshShape,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletTriangleMeshShape,
  Dtool_UpcastInterface_BulletTriangleMeshShape,
  Dtool_DowncastInterface_BulletTriangleMeshShape,
  (CoerceFunction)Dtool_ConstCoerce_BulletTriangleMeshShape,
  (CoerceFunction)Dtool_Coerce_BulletTriangleMeshShape,
};

static void Dtool_PyModuleClassInit_BulletTriangleMeshShape(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_PyModuleClassInit_BulletShape(NULL);
    Dtool_BulletTriangleMeshShape._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)&Dtool_BulletShape);
    PyObject *dict = PyDict_New();
    Dtool_BulletTriangleMeshShape._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletTriangleMeshShape) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletTriangleMeshShape)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletTriangleMeshShape);
  }
}

/**
 * Python method tables for BulletWheelRaycastInfo (BulletWheelRaycastInfo)
 */
static PyMethodDef Dtool_Methods_BulletWheelRaycastInfo[] = {
  {"is_in_contact", &Dtool_BulletWheelRaycastInfo_is_in_contact_775, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_is_in_contact_775_comment},
  {"isInContact", &Dtool_BulletWheelRaycastInfo_is_in_contact_775, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_is_in_contact_775_comment},
  {"get_suspension_length", &Dtool_BulletWheelRaycastInfo_get_suspension_length_776, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_suspension_length_776_comment},
  {"getSuspensionLength", &Dtool_BulletWheelRaycastInfo_get_suspension_length_776, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_suspension_length_776_comment},
  {"get_contact_normal_ws", &Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_777, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_777_comment},
  {"getContactNormalWs", &Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_777, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_contact_normal_ws_777_comment},
  {"get_wheel_direction_ws", &Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_778, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_778_comment},
  {"getWheelDirectionWs", &Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_778, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_wheel_direction_ws_778_comment},
  {"get_wheel_axle_ws", &Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_779, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_779_comment},
  {"getWheelAxleWs", &Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_779, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_wheel_axle_ws_779_comment},
  {"get_contact_point_ws", &Dtool_BulletWheelRaycastInfo_get_contact_point_ws_780, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_contact_point_ws_780_comment},
  {"getContactPointWs", &Dtool_BulletWheelRaycastInfo_get_contact_point_ws_780, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_contact_point_ws_780_comment},
  {"get_hard_point_ws", &Dtool_BulletWheelRaycastInfo_get_hard_point_ws_781, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_hard_point_ws_781_comment},
  {"getHardPointWs", &Dtool_BulletWheelRaycastInfo_get_hard_point_ws_781, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_hard_point_ws_781_comment},
  {"get_ground_object", &Dtool_BulletWheelRaycastInfo_get_ground_object_782, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_ground_object_782_comment},
  {"getGroundObject", &Dtool_BulletWheelRaycastInfo_get_ground_object_782, METH_NOARGS, (const char *)Dtool_BulletWheelRaycastInfo_get_ground_object_782_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletWheelRaycastInfo = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletWheelRaycastInfo = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletWheelRaycastInfo",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletWheelRaycastInfo,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletWheelRaycastInfo,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " *\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletWheelRaycastInfo,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletWheelRaycastInfo,
    PyType_GenericAlloc,
    Dtool_new_BulletWheelRaycastInfo,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletWheelRaycastInfo,
  Dtool_UpcastInterface_BulletWheelRaycastInfo,
  Dtool_DowncastInterface_BulletWheelRaycastInfo,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletWheelRaycastInfo(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletWheelRaycastInfo._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletWheelRaycastInfo._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletWheelRaycastInfo) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletWheelRaycastInfo)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletWheelRaycastInfo);
  }
}

/**
 * Python method tables for BulletWheel (BulletWheel)
 */
static PyMethodDef Dtool_Methods_BulletWheel[] = {
  {"set_suspension_stiffness", &Dtool_BulletWheel_set_suspension_stiffness_786, METH_O, (const char *)Dtool_BulletWheel_set_suspension_stiffness_786_comment},
  {"setSuspensionStiffness", &Dtool_BulletWheel_set_suspension_stiffness_786, METH_O, (const char *)Dtool_BulletWheel_set_suspension_stiffness_786_comment},
  {"set_max_suspension_travel_cm", &Dtool_BulletWheel_set_max_suspension_travel_cm_787, METH_O, (const char *)Dtool_BulletWheel_set_max_suspension_travel_cm_787_comment},
  {"setMaxSuspensionTravelCm", &Dtool_BulletWheel_set_max_suspension_travel_cm_787, METH_O, (const char *)Dtool_BulletWheel_set_max_suspension_travel_cm_787_comment},
  {"set_friction_slip", &Dtool_BulletWheel_set_friction_slip_788, METH_O, (const char *)Dtool_BulletWheel_set_friction_slip_788_comment},
  {"setFrictionSlip", &Dtool_BulletWheel_set_friction_slip_788, METH_O, (const char *)Dtool_BulletWheel_set_friction_slip_788_comment},
  {"set_max_suspension_force", &Dtool_BulletWheel_set_max_suspension_force_789, METH_O, (const char *)Dtool_BulletWheel_set_max_suspension_force_789_comment},
  {"setMaxSuspensionForce", &Dtool_BulletWheel_set_max_suspension_force_789, METH_O, (const char *)Dtool_BulletWheel_set_max_suspension_force_789_comment},
  {"set_wheels_damping_compression", &Dtool_BulletWheel_set_wheels_damping_compression_790, METH_O, (const char *)Dtool_BulletWheel_set_wheels_damping_compression_790_comment},
  {"setWheelsDampingCompression", &Dtool_BulletWheel_set_wheels_damping_compression_790, METH_O, (const char *)Dtool_BulletWheel_set_wheels_damping_compression_790_comment},
  {"set_wheels_damping_relaxation", &Dtool_BulletWheel_set_wheels_damping_relaxation_791, METH_O, (const char *)Dtool_BulletWheel_set_wheels_damping_relaxation_791_comment},
  {"setWheelsDampingRelaxation", &Dtool_BulletWheel_set_wheels_damping_relaxation_791, METH_O, (const char *)Dtool_BulletWheel_set_wheels_damping_relaxation_791_comment},
  {"set_roll_influence", &Dtool_BulletWheel_set_roll_influence_792, METH_O, (const char *)Dtool_BulletWheel_set_roll_influence_792_comment},
  {"setRollInfluence", &Dtool_BulletWheel_set_roll_influence_792, METH_O, (const char *)Dtool_BulletWheel_set_roll_influence_792_comment},
  {"set_wheel_radius", &Dtool_BulletWheel_set_wheel_radius_793, METH_O, (const char *)Dtool_BulletWheel_set_wheel_radius_793_comment},
  {"setWheelRadius", &Dtool_BulletWheel_set_wheel_radius_793, METH_O, (const char *)Dtool_BulletWheel_set_wheel_radius_793_comment},
  {"set_steering", &Dtool_BulletWheel_set_steering_794, METH_O, (const char *)Dtool_BulletWheel_set_steering_794_comment},
  {"setSteering", &Dtool_BulletWheel_set_steering_794, METH_O, (const char *)Dtool_BulletWheel_set_steering_794_comment},
  {"set_rotation", &Dtool_BulletWheel_set_rotation_795, METH_O, (const char *)Dtool_BulletWheel_set_rotation_795_comment},
  {"setRotation", &Dtool_BulletWheel_set_rotation_795, METH_O, (const char *)Dtool_BulletWheel_set_rotation_795_comment},
  {"set_delta_rotation", &Dtool_BulletWheel_set_delta_rotation_796, METH_O, (const char *)Dtool_BulletWheel_set_delta_rotation_796_comment},
  {"setDeltaRotation", &Dtool_BulletWheel_set_delta_rotation_796, METH_O, (const char *)Dtool_BulletWheel_set_delta_rotation_796_comment},
  {"set_engine_force", &Dtool_BulletWheel_set_engine_force_797, METH_O, (const char *)Dtool_BulletWheel_set_engine_force_797_comment},
  {"setEngineForce", &Dtool_BulletWheel_set_engine_force_797, METH_O, (const char *)Dtool_BulletWheel_set_engine_force_797_comment},
  {"set_brake", &Dtool_BulletWheel_set_brake_798, METH_O, (const char *)Dtool_BulletWheel_set_brake_798_comment},
  {"setBrake", &Dtool_BulletWheel_set_brake_798, METH_O, (const char *)Dtool_BulletWheel_set_brake_798_comment},
  {"set_skid_info", &Dtool_BulletWheel_set_skid_info_799, METH_O, (const char *)Dtool_BulletWheel_set_skid_info_799_comment},
  {"setSkidInfo", &Dtool_BulletWheel_set_skid_info_799, METH_O, (const char *)Dtool_BulletWheel_set_skid_info_799_comment},
  {"set_wheels_suspension_force", &Dtool_BulletWheel_set_wheels_suspension_force_800, METH_O, (const char *)Dtool_BulletWheel_set_wheels_suspension_force_800_comment},
  {"setWheelsSuspensionForce", &Dtool_BulletWheel_set_wheels_suspension_force_800, METH_O, (const char *)Dtool_BulletWheel_set_wheels_suspension_force_800_comment},
  {"set_suspension_relative_velocity", &Dtool_BulletWheel_set_suspension_relative_velocity_801, METH_O, (const char *)Dtool_BulletWheel_set_suspension_relative_velocity_801_comment},
  {"setSuspensionRelativeVelocity", &Dtool_BulletWheel_set_suspension_relative_velocity_801, METH_O, (const char *)Dtool_BulletWheel_set_suspension_relative_velocity_801_comment},
  {"set_clipped_inv_connection_point_cs", &Dtool_BulletWheel_set_clipped_inv_connection_point_cs_802, METH_O, (const char *)Dtool_BulletWheel_set_clipped_inv_connection_point_cs_802_comment},
  {"setClippedInvConnectionPointCs", &Dtool_BulletWheel_set_clipped_inv_connection_point_cs_802, METH_O, (const char *)Dtool_BulletWheel_set_clipped_inv_connection_point_cs_802_comment},
  {"set_chassis_connection_point_cs", &Dtool_BulletWheel_set_chassis_connection_point_cs_803, METH_O, (const char *)Dtool_BulletWheel_set_chassis_connection_point_cs_803_comment},
  {"setChassisConnectionPointCs", &Dtool_BulletWheel_set_chassis_connection_point_cs_803, METH_O, (const char *)Dtool_BulletWheel_set_chassis_connection_point_cs_803_comment},
  {"set_wheel_direction_cs", &Dtool_BulletWheel_set_wheel_direction_cs_804, METH_O, (const char *)Dtool_BulletWheel_set_wheel_direction_cs_804_comment},
  {"setWheelDirectionCs", &Dtool_BulletWheel_set_wheel_direction_cs_804, METH_O, (const char *)Dtool_BulletWheel_set_wheel_direction_cs_804_comment},
  {"set_wheel_axle_cs", &Dtool_BulletWheel_set_wheel_axle_cs_805, METH_O, (const char *)Dtool_BulletWheel_set_wheel_axle_cs_805_comment},
  {"setWheelAxleCs", &Dtool_BulletWheel_set_wheel_axle_cs_805, METH_O, (const char *)Dtool_BulletWheel_set_wheel_axle_cs_805_comment},
  {"set_world_transform", &Dtool_BulletWheel_set_world_transform_806, METH_O, (const char *)Dtool_BulletWheel_set_world_transform_806_comment},
  {"setWorldTransform", &Dtool_BulletWheel_set_world_transform_806, METH_O, (const char *)Dtool_BulletWheel_set_world_transform_806_comment},
  {"set_front_wheel", &Dtool_BulletWheel_set_front_wheel_807, METH_O, (const char *)Dtool_BulletWheel_set_front_wheel_807_comment},
  {"setFrontWheel", &Dtool_BulletWheel_set_front_wheel_807, METH_O, (const char *)Dtool_BulletWheel_set_front_wheel_807_comment},
  {"set_node", &Dtool_BulletWheel_set_node_808, METH_O, (const char *)Dtool_BulletWheel_set_node_808_comment},
  {"setNode", &Dtool_BulletWheel_set_node_808, METH_O, (const char *)Dtool_BulletWheel_set_node_808_comment},
  {"get_suspension_rest_length", &Dtool_BulletWheel_get_suspension_rest_length_809, METH_NOARGS, (const char *)Dtool_BulletWheel_get_suspension_rest_length_809_comment},
  {"getSuspensionRestLength", &Dtool_BulletWheel_get_suspension_rest_length_809, METH_NOARGS, (const char *)Dtool_BulletWheel_get_suspension_rest_length_809_comment},
  {"get_suspension_stiffness", &Dtool_BulletWheel_get_suspension_stiffness_810, METH_NOARGS, (const char *)Dtool_BulletWheel_get_suspension_stiffness_810_comment},
  {"getSuspensionStiffness", &Dtool_BulletWheel_get_suspension_stiffness_810, METH_NOARGS, (const char *)Dtool_BulletWheel_get_suspension_stiffness_810_comment},
  {"get_max_suspension_travel_cm", &Dtool_BulletWheel_get_max_suspension_travel_cm_811, METH_NOARGS, (const char *)Dtool_BulletWheel_get_max_suspension_travel_cm_811_comment},
  {"getMaxSuspensionTravelCm", &Dtool_BulletWheel_get_max_suspension_travel_cm_811, METH_NOARGS, (const char *)Dtool_BulletWheel_get_max_suspension_travel_cm_811_comment},
  {"get_friction_slip", &Dtool_BulletWheel_get_friction_slip_812, METH_NOARGS, (const char *)Dtool_BulletWheel_get_friction_slip_812_comment},
  {"getFrictionSlip", &Dtool_BulletWheel_get_friction_slip_812, METH_NOARGS, (const char *)Dtool_BulletWheel_get_friction_slip_812_comment},
  {"get_max_suspension_force", &Dtool_BulletWheel_get_max_suspension_force_813, METH_NOARGS, (const char *)Dtool_BulletWheel_get_max_suspension_force_813_comment},
  {"getMaxSuspensionForce", &Dtool_BulletWheel_get_max_suspension_force_813, METH_NOARGS, (const char *)Dtool_BulletWheel_get_max_suspension_force_813_comment},
  {"get_wheels_damping_compression", &Dtool_BulletWheel_get_wheels_damping_compression_814, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheels_damping_compression_814_comment},
  {"getWheelsDampingCompression", &Dtool_BulletWheel_get_wheels_damping_compression_814, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheels_damping_compression_814_comment},
  {"get_wheels_damping_relaxation", &Dtool_BulletWheel_get_wheels_damping_relaxation_815, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheels_damping_relaxation_815_comment},
  {"getWheelsDampingRelaxation", &Dtool_BulletWheel_get_wheels_damping_relaxation_815, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheels_damping_relaxation_815_comment},
  {"get_roll_influence", &Dtool_BulletWheel_get_roll_influence_816, METH_NOARGS, (const char *)Dtool_BulletWheel_get_roll_influence_816_comment},
  {"getRollInfluence", &Dtool_BulletWheel_get_roll_influence_816, METH_NOARGS, (const char *)Dtool_BulletWheel_get_roll_influence_816_comment},
  {"get_wheel_radius", &Dtool_BulletWheel_get_wheel_radius_817, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheel_radius_817_comment},
  {"getWheelRadius", &Dtool_BulletWheel_get_wheel_radius_817, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheel_radius_817_comment},
  {"get_steering", &Dtool_BulletWheel_get_steering_818, METH_NOARGS, (const char *)Dtool_BulletWheel_get_steering_818_comment},
  {"getSteering", &Dtool_BulletWheel_get_steering_818, METH_NOARGS, (const char *)Dtool_BulletWheel_get_steering_818_comment},
  {"get_rotation", &Dtool_BulletWheel_get_rotation_819, METH_NOARGS, (const char *)Dtool_BulletWheel_get_rotation_819_comment},
  {"getRotation", &Dtool_BulletWheel_get_rotation_819, METH_NOARGS, (const char *)Dtool_BulletWheel_get_rotation_819_comment},
  {"get_delta_rotation", &Dtool_BulletWheel_get_delta_rotation_820, METH_NOARGS, (const char *)Dtool_BulletWheel_get_delta_rotation_820_comment},
  {"getDeltaRotation", &Dtool_BulletWheel_get_delta_rotation_820, METH_NOARGS, (const char *)Dtool_BulletWheel_get_delta_rotation_820_comment},
  {"get_engine_force", &Dtool_BulletWheel_get_engine_force_821, METH_NOARGS, (const char *)Dtool_BulletWheel_get_engine_force_821_comment},
  {"getEngineForce", &Dtool_BulletWheel_get_engine_force_821, METH_NOARGS, (const char *)Dtool_BulletWheel_get_engine_force_821_comment},
  {"get_brake", &Dtool_BulletWheel_get_brake_822, METH_NOARGS, (const char *)Dtool_BulletWheel_get_brake_822_comment},
  {"getBrake", &Dtool_BulletWheel_get_brake_822, METH_NOARGS, (const char *)Dtool_BulletWheel_get_brake_822_comment},
  {"get_skid_info", &Dtool_BulletWheel_get_skid_info_823, METH_NOARGS, (const char *)Dtool_BulletWheel_get_skid_info_823_comment},
  {"getSkidInfo", &Dtool_BulletWheel_get_skid_info_823, METH_NOARGS, (const char *)Dtool_BulletWheel_get_skid_info_823_comment},
  {"get_wheels_suspension_force", &Dtool_BulletWheel_get_wheels_suspension_force_824, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheels_suspension_force_824_comment},
  {"getWheelsSuspensionForce", &Dtool_BulletWheel_get_wheels_suspension_force_824, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheels_suspension_force_824_comment},
  {"get_suspension_relative_velocity", &Dtool_BulletWheel_get_suspension_relative_velocity_825, METH_NOARGS, (const char *)Dtool_BulletWheel_get_suspension_relative_velocity_825_comment},
  {"getSuspensionRelativeVelocity", &Dtool_BulletWheel_get_suspension_relative_velocity_825, METH_NOARGS, (const char *)Dtool_BulletWheel_get_suspension_relative_velocity_825_comment},
  {"get_clipped_inv_connection_point_cs", &Dtool_BulletWheel_get_clipped_inv_connection_point_cs_826, METH_NOARGS, (const char *)Dtool_BulletWheel_get_clipped_inv_connection_point_cs_826_comment},
  {"getClippedInvConnectionPointCs", &Dtool_BulletWheel_get_clipped_inv_connection_point_cs_826, METH_NOARGS, (const char *)Dtool_BulletWheel_get_clipped_inv_connection_point_cs_826_comment},
  {"get_chassis_connection_point_cs", &Dtool_BulletWheel_get_chassis_connection_point_cs_827, METH_NOARGS, (const char *)Dtool_BulletWheel_get_chassis_connection_point_cs_827_comment},
  {"getChassisConnectionPointCs", &Dtool_BulletWheel_get_chassis_connection_point_cs_827, METH_NOARGS, (const char *)Dtool_BulletWheel_get_chassis_connection_point_cs_827_comment},
  {"get_wheel_direction_cs", &Dtool_BulletWheel_get_wheel_direction_cs_828, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheel_direction_cs_828_comment},
  {"getWheelDirectionCs", &Dtool_BulletWheel_get_wheel_direction_cs_828, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheel_direction_cs_828_comment},
  {"get_wheel_axle_cs", &Dtool_BulletWheel_get_wheel_axle_cs_829, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheel_axle_cs_829_comment},
  {"getWheelAxleCs", &Dtool_BulletWheel_get_wheel_axle_cs_829, METH_NOARGS, (const char *)Dtool_BulletWheel_get_wheel_axle_cs_829_comment},
  {"get_world_transform", &Dtool_BulletWheel_get_world_transform_830, METH_NOARGS, (const char *)Dtool_BulletWheel_get_world_transform_830_comment},
  {"getWorldTransform", &Dtool_BulletWheel_get_world_transform_830, METH_NOARGS, (const char *)Dtool_BulletWheel_get_world_transform_830_comment},
  {"is_front_wheel", &Dtool_BulletWheel_is_front_wheel_831, METH_NOARGS, (const char *)Dtool_BulletWheel_is_front_wheel_831_comment},
  {"isFrontWheel", &Dtool_BulletWheel_is_front_wheel_831, METH_NOARGS, (const char *)Dtool_BulletWheel_is_front_wheel_831_comment},
  {"get_node", &Dtool_BulletWheel_get_node_832, METH_NOARGS, (const char *)Dtool_BulletWheel_get_node_832_comment},
  {"getNode", &Dtool_BulletWheel_get_node_832, METH_NOARGS, (const char *)Dtool_BulletWheel_get_node_832_comment},
  {"get_raycast_info", &Dtool_BulletWheel_get_raycast_info_833, METH_NOARGS, (const char *)Dtool_BulletWheel_get_raycast_info_833_comment},
  {"getRaycastInfo", &Dtool_BulletWheel_get_raycast_info_833, METH_NOARGS, (const char *)Dtool_BulletWheel_get_raycast_info_833_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_BulletWheel = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_BulletWheel = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.bullet.BulletWheel",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_BulletWheel,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_BulletWheel,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * One wheel of a BulletVehicle.  Instances should not be created directly but\n"
    " * using the factory method BulletVehicle::create_wheel().\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_BulletWheel,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_BulletWheel,
    PyType_GenericAlloc,
    Dtool_new_BulletWheel,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_BulletWheel,
  Dtool_UpcastInterface_BulletWheel,
  Dtool_DowncastInterface_BulletWheel,
  (CoerceFunction)0,
  (CoerceFunction)0,
};

static void Dtool_PyModuleClassInit_BulletWheel(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_BulletWheel._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_BulletWheel._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_BulletWheel) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(BulletWheel)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_BulletWheel);
  }
}


/**
 * Module Object Linker ..
 */
void Dtool_libpandabullet_RegisterTypes() {
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletRayHit", Dtool_BulletRayHit);
#endif
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletAllHitsRayResult", Dtool_BulletAllHitsRayResult);
#endif
  Dtool_BulletShape._type = BulletShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletShape);
  Dtool_BulletBaseCharacterControllerNode._type = BulletBaseCharacterControllerNode::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletBaseCharacterControllerNode);
  Dtool_BulletBodyNode._type = BulletBodyNode::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletBodyNode);
  Dtool_BulletBoxShape._type = BulletBoxShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletBoxShape);
  Dtool_BulletCapsuleShape._type = BulletCapsuleShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletCapsuleShape);
  Dtool_BulletCharacterControllerNode._type = BulletCharacterControllerNode::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletCharacterControllerNode);
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletClosestHitRayResult", Dtool_BulletClosestHitRayResult);
#endif
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletClosestHitSweepResult", Dtool_BulletClosestHitSweepResult);
#endif
  Dtool_BulletConeShape._type = BulletConeShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletConeShape);
  Dtool_BulletConstraint._type = BulletConstraint::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletConstraint);
  Dtool_BulletConeTwistConstraint._type = BulletConeTwistConstraint::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletConeTwistConstraint);
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletManifoldPoint", Dtool_BulletManifoldPoint);
#endif
  Dtool_BulletContactCallbackData._type = BulletContactCallbackData::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletContactCallbackData);
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletContact", Dtool_BulletContact);
#endif
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletContactResult", Dtool_BulletContactResult);
#endif
  Dtool_BulletDebugNode._type = BulletDebugNode::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletDebugNode);
  Dtool_BulletGhostNode._type = BulletGhostNode::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletGhostNode);
  Dtool_BulletRigidBodyNode._type = BulletRigidBodyNode::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletRigidBodyNode);
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletSoftBodyNodeElement", Dtool_BulletSoftBodyNodeElement);
#endif
  Dtool_BulletSoftBodyNode._type = BulletSoftBodyNode::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletSoftBodyNode);
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletVehicleTuning", Dtool_BulletVehicleTuning);
#endif
  Dtool_BulletVehicle._type = BulletVehicle::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletVehicle);
  Dtool_BulletWorld._type = BulletWorld::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletWorld);
  Dtool_BulletConvexHullShape._type = BulletConvexHullShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletConvexHullShape);
  Dtool_BulletConvexPointCloudShape._type = BulletConvexPointCloudShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletConvexPointCloudShape);
  Dtool_BulletCylinderShape._type = BulletCylinderShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletCylinderShape);
  Dtool_BulletFilterCallbackData._type = BulletFilterCallbackData::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletFilterCallbackData);
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletRotationalLimitMotor", Dtool_BulletRotationalLimitMotor);
#endif
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletTranslationalLimitMotor", Dtool_BulletTranslationalLimitMotor);
#endif
  Dtool_BulletGenericConstraint._type = BulletGenericConstraint::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletGenericConstraint);
  Dtool_BulletHeightfieldShape._type = BulletHeightfieldShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletHeightfieldShape);
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletHelper", Dtool_BulletHelper);
#endif
  Dtool_BulletHingeConstraint._type = BulletHingeConstraint::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletHingeConstraint);
  Dtool_BulletMinkowskiSumShape._type = BulletMinkowskiSumShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletMinkowskiSumShape);
  Dtool_BulletMultiSphereShape._type = BulletMultiSphereShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletMultiSphereShape);
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletPersistentManifold", Dtool_BulletPersistentManifold);
#endif
  Dtool_BulletPlaneShape._type = BulletPlaneShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletPlaneShape);
  Dtool_BulletSliderConstraint._type = BulletSliderConstraint::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletSliderConstraint);
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletSoftBodyConfig", Dtool_BulletSoftBodyConfig);
#endif
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletSoftBodyControl", Dtool_BulletSoftBodyControl);
#endif
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletSoftBodyMaterial", Dtool_BulletSoftBodyMaterial);
#endif
  Dtool_BulletSoftBodyShape._type = BulletSoftBodyShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletSoftBodyShape);
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletSoftBodyWorldInfo", Dtool_BulletSoftBodyWorldInfo);
#endif
  Dtool_BulletSphereShape._type = BulletSphereShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletSphereShape);
  Dtool_BulletSphericalConstraint._type = BulletSphericalConstraint::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletSphericalConstraint);
  Dtool_BulletTickCallbackData._type = BulletTickCallbackData::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletTickCallbackData);
  Dtool_BulletTriangleMesh._type = BulletTriangleMesh::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletTriangleMesh);
  Dtool_BulletTriangleMeshShape._type = BulletTriangleMeshShape::get_class_type();
  RegisterRuntimeTypedClass(Dtool_BulletTriangleMeshShape);
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletWheelRaycastInfo", Dtool_BulletWheelRaycastInfo);
#endif
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("BulletWheel", Dtool_BulletWheel);
#endif
}

void Dtool_libpandabullet_ResolveExternals() {
#ifndef LINK_ALL_STATIC
  // Resolve externally imported types.
  Dtool_Ptr_ostream = LookupNamedClass("ostream");
  Dtool_Ptr_TypeHandle = LookupNamedClass("TypeHandle");
  Dtool_Ptr_TypedObject = LookupRuntimeTypedClass(TypedObject::get_class_type());
  Dtool_Ptr_ReferenceCount = LookupRuntimeTypedClass(ReferenceCount::get_class_type());
  Dtool_Ptr_LPoint3f = LookupRuntimeTypedClass(LPoint3f::get_class_type());
  Dtool_Ptr_LVector3f = LookupRuntimeTypedClass(LVector3f::get_class_type());
  Dtool_Ptr_LVecBase3f = LookupRuntimeTypedClass(LVecBase3f::get_class_type());
  Dtool_Ptr_LMatrix3f = LookupRuntimeTypedClass(LMatrix3f::get_class_type());
  Dtool_Ptr_LMatrix4f = LookupRuntimeTypedClass(LMatrix4f::get_class_type());
  Dtool_Ptr_Namable = LookupRuntimeTypedClass(Namable::get_class_type());
  Dtool_Ptr_TypedReferenceCount = LookupRuntimeTypedClass(TypedReferenceCount::get_class_type());
  Dtool_Ptr_LQuaternionf = LookupRuntimeTypedClass(LQuaternionf::get_class_type());
  Dtool_Ptr_TypedWritable = LookupRuntimeTypedClass(TypedWritable::get_class_type());
  Dtool_Ptr_TypedWritableReferenceCount = LookupRuntimeTypedClass(TypedWritableReferenceCount::get_class_type());
  Dtool_Ptr_InternalName = LookupRuntimeTypedClass(InternalName::get_class_type());
  Dtool_Ptr_BitMask_uint32_t_32 = LookupRuntimeTypedClass(BitMask< uint32_t, 32 >::get_class_type());
  Dtool_Ptr_GeomVertexFormat = LookupRuntimeTypedClass(GeomVertexFormat::get_class_type());
  Dtool_Ptr_PointerToArray_int = LookupNamedClass("PointerToArray< int >");
  Dtool_Ptr_Geom = LookupRuntimeTypedClass(Geom::get_class_type());
  Dtool_Ptr_TransformState = LookupRuntimeTypedClass(TransformState::get_class_type());
  Dtool_Ptr_PandaNode = LookupRuntimeTypedClass(PandaNode::get_class_type());
  Dtool_Ptr_PointerToArray_float = LookupNamedClass("PointerToArray< float >");
  Dtool_Ptr_PointerToArray_LVecBase3f = LookupNamedClass("PointerToArray< LVecBase3f >");
  Dtool_Ptr_Texture = LookupRuntimeTypedClass(Texture::get_class_type());
  Dtool_Ptr_NodePath = LookupRuntimeTypedClass(NodePath::get_class_type());
  Dtool_Ptr_GeomNode = LookupRuntimeTypedClass(GeomNode::get_class_type());
  Dtool_Ptr_BoundingSphere = LookupRuntimeTypedClass(BoundingSphere::get_class_type());
  Dtool_Ptr_CollisionNode = LookupRuntimeTypedClass(CollisionNode::get_class_type());
  Dtool_Ptr_CallbackData = LookupRuntimeTypedClass(CallbackData::get_class_type());
  Dtool_Ptr_CollisionBox = LookupRuntimeTypedClass(CollisionBox::get_class_type());
  Dtool_Ptr_CallbackObject = LookupRuntimeTypedClass(CallbackObject::get_class_type());
  Dtool_Ptr_BoundingBox = LookupRuntimeTypedClass(BoundingBox::get_class_type());
  Dtool_Ptr_NurbsSurfaceEvaluator = LookupNamedClass("NurbsSurfaceEvaluator");
  Dtool_Ptr_NurbsCurveEvaluator = LookupNamedClass("NurbsCurveEvaluator");
  Dtool_Ptr_PNMImage = LookupNamedClass("PNMImage");
  Dtool_Ptr_NodePathCollection = LookupNamedClass("NodePathCollection");
  Dtool_Ptr_CollisionSphere = LookupRuntimeTypedClass(CollisionSphere::get_class_type());
  Dtool_Ptr_CollisionPlane = LookupRuntimeTypedClass(CollisionPlane::get_class_type());
#endif
}

void Dtool_libpandabullet_BuildInstants(PyObject *module) {
  (void) module;
  // enum BulletUpAxis
  PyModule_AddObject(module, "X_up", Dtool_WrapValue(::X_up));
  PyModule_AddObject(module, "XUp", Dtool_WrapValue(::X_up));
  PyModule_AddObject(module, "Y_up", Dtool_WrapValue(::Y_up));
  PyModule_AddObject(module, "YUp", Dtool_WrapValue(::Y_up));
  PyModule_AddObject(module, "Z_up", Dtool_WrapValue(::Z_up));
  PyModule_AddObject(module, "ZUp", Dtool_WrapValue(::Z_up));
  // BulletRayHit
  Dtool_PyModuleClassInit_BulletRayHit(module);
  PyModule_AddObject(module, "BulletRayHit", (PyObject *)&Dtool_BulletRayHit);
  // BulletAllHitsRayResult
  Dtool_PyModuleClassInit_BulletAllHitsRayResult(module);
  PyModule_AddObject(module, "BulletAllHitsRayResult", (PyObject *)&Dtool_BulletAllHitsRayResult);
  // BulletShape
  Dtool_PyModuleClassInit_BulletShape(module);
  PyModule_AddObject(module, "BulletShape", (PyObject *)&Dtool_BulletShape);
  // BulletBaseCharacterControllerNode
  Dtool_PyModuleClassInit_BulletBaseCharacterControllerNode(module);
  PyModule_AddObject(module, "BulletBaseCharacterControllerNode", (PyObject *)&Dtool_BulletBaseCharacterControllerNode);
  // BulletBodyNode
  Dtool_PyModuleClassInit_BulletBodyNode(module);
  PyModule_AddObject(module, "BulletBodyNode", (PyObject *)&Dtool_BulletBodyNode);
  // BulletBoxShape
  Dtool_PyModuleClassInit_BulletBoxShape(module);
  PyModule_AddObject(module, "BulletBoxShape", (PyObject *)&Dtool_BulletBoxShape);
  // BulletCapsuleShape
  Dtool_PyModuleClassInit_BulletCapsuleShape(module);
  PyModule_AddObject(module, "BulletCapsuleShape", (PyObject *)&Dtool_BulletCapsuleShape);
  // BulletCharacterControllerNode
  Dtool_PyModuleClassInit_BulletCharacterControllerNode(module);
  PyModule_AddObject(module, "BulletCharacterControllerNode", (PyObject *)&Dtool_BulletCharacterControllerNode);
  // BulletClosestHitRayResult
  Dtool_PyModuleClassInit_BulletClosestHitRayResult(module);
  PyModule_AddObject(module, "BulletClosestHitRayResult", (PyObject *)&Dtool_BulletClosestHitRayResult);
  // BulletClosestHitSweepResult
  Dtool_PyModuleClassInit_BulletClosestHitSweepResult(module);
  PyModule_AddObject(module, "BulletClosestHitSweepResult", (PyObject *)&Dtool_BulletClosestHitSweepResult);
  // BulletConeShape
  Dtool_PyModuleClassInit_BulletConeShape(module);
  PyModule_AddObject(module, "BulletConeShape", (PyObject *)&Dtool_BulletConeShape);
  // BulletConstraint
  Dtool_PyModuleClassInit_BulletConstraint(module);
  PyModule_AddObject(module, "BulletConstraint", (PyObject *)&Dtool_BulletConstraint);
  // BulletConeTwistConstraint
  Dtool_PyModuleClassInit_BulletConeTwistConstraint(module);
  PyModule_AddObject(module, "BulletConeTwistConstraint", (PyObject *)&Dtool_BulletConeTwistConstraint);
  // BulletManifoldPoint
  Dtool_PyModuleClassInit_BulletManifoldPoint(module);
  PyModule_AddObject(module, "BulletManifoldPoint", (PyObject *)&Dtool_BulletManifoldPoint);
  // BulletContactCallbackData
  Dtool_PyModuleClassInit_BulletContactCallbackData(module);
  PyModule_AddObject(module, "BulletContactCallbackData", (PyObject *)&Dtool_BulletContactCallbackData);
  // BulletContact
  Dtool_PyModuleClassInit_BulletContact(module);
  PyModule_AddObject(module, "BulletContact", (PyObject *)&Dtool_BulletContact);
  // BulletContactResult
  Dtool_PyModuleClassInit_BulletContactResult(module);
  PyModule_AddObject(module, "BulletContactResult", (PyObject *)&Dtool_BulletContactResult);
  // BulletDebugNode
  Dtool_PyModuleClassInit_BulletDebugNode(module);
  PyModule_AddObject(module, "BulletDebugNode", (PyObject *)&Dtool_BulletDebugNode);
  // BulletGhostNode
  Dtool_PyModuleClassInit_BulletGhostNode(module);
  PyModule_AddObject(module, "BulletGhostNode", (PyObject *)&Dtool_BulletGhostNode);
  // BulletRigidBodyNode
  Dtool_PyModuleClassInit_BulletRigidBodyNode(module);
  PyModule_AddObject(module, "BulletRigidBodyNode", (PyObject *)&Dtool_BulletRigidBodyNode);
  // BulletSoftBodyNodeElement
  Dtool_PyModuleClassInit_BulletSoftBodyNodeElement(module);
  PyModule_AddObject(module, "BulletSoftBodyNodeElement", (PyObject *)&Dtool_BulletSoftBodyNodeElement);
  // BulletSoftBodyNode
  Dtool_PyModuleClassInit_BulletSoftBodyNode(module);
  PyModule_AddObject(module, "BulletSoftBodyNode", (PyObject *)&Dtool_BulletSoftBodyNode);
  // BulletVehicleTuning
  Dtool_PyModuleClassInit_BulletVehicleTuning(module);
  PyModule_AddObject(module, "BulletVehicleTuning", (PyObject *)&Dtool_BulletVehicleTuning);
  // BulletVehicle
  Dtool_PyModuleClassInit_BulletVehicle(module);
  PyModule_AddObject(module, "BulletVehicle", (PyObject *)&Dtool_BulletVehicle);
  // BulletWorld
  Dtool_PyModuleClassInit_BulletWorld(module);
  PyModule_AddObject(module, "BulletWorld", (PyObject *)&Dtool_BulletWorld);
  // BulletConvexHullShape
  Dtool_PyModuleClassInit_BulletConvexHullShape(module);
  PyModule_AddObject(module, "BulletConvexHullShape", (PyObject *)&Dtool_BulletConvexHullShape);
  // BulletConvexPointCloudShape
  Dtool_PyModuleClassInit_BulletConvexPointCloudShape(module);
  PyModule_AddObject(module, "BulletConvexPointCloudShape", (PyObject *)&Dtool_BulletConvexPointCloudShape);
  // BulletCylinderShape
  Dtool_PyModuleClassInit_BulletCylinderShape(module);
  PyModule_AddObject(module, "BulletCylinderShape", (PyObject *)&Dtool_BulletCylinderShape);
  // BulletFilterCallbackData
  Dtool_PyModuleClassInit_BulletFilterCallbackData(module);
  PyModule_AddObject(module, "BulletFilterCallbackData", (PyObject *)&Dtool_BulletFilterCallbackData);
  // BulletRotationalLimitMotor
  Dtool_PyModuleClassInit_BulletRotationalLimitMotor(module);
  PyModule_AddObject(module, "BulletRotationalLimitMotor", (PyObject *)&Dtool_BulletRotationalLimitMotor);
  // BulletTranslationalLimitMotor
  Dtool_PyModuleClassInit_BulletTranslationalLimitMotor(module);
  PyModule_AddObject(module, "BulletTranslationalLimitMotor", (PyObject *)&Dtool_BulletTranslationalLimitMotor);
  // BulletGenericConstraint
  Dtool_PyModuleClassInit_BulletGenericConstraint(module);
  PyModule_AddObject(module, "BulletGenericConstraint", (PyObject *)&Dtool_BulletGenericConstraint);
  // BulletHeightfieldShape
  Dtool_PyModuleClassInit_BulletHeightfieldShape(module);
  PyModule_AddObject(module, "BulletHeightfieldShape", (PyObject *)&Dtool_BulletHeightfieldShape);
  // BulletHelper
  Dtool_PyModuleClassInit_BulletHelper(module);
  PyModule_AddObject(module, "BulletHelper", (PyObject *)&Dtool_BulletHelper);
  // BulletHingeConstraint
  Dtool_PyModuleClassInit_BulletHingeConstraint(module);
  PyModule_AddObject(module, "BulletHingeConstraint", (PyObject *)&Dtool_BulletHingeConstraint);
  // BulletMinkowskiSumShape
  Dtool_PyModuleClassInit_BulletMinkowskiSumShape(module);
  PyModule_AddObject(module, "BulletMinkowskiSumShape", (PyObject *)&Dtool_BulletMinkowskiSumShape);
  // BulletMultiSphereShape
  Dtool_PyModuleClassInit_BulletMultiSphereShape(module);
  PyModule_AddObject(module, "BulletMultiSphereShape", (PyObject *)&Dtool_BulletMultiSphereShape);
  // BulletPersistentManifold
  Dtool_PyModuleClassInit_BulletPersistentManifold(module);
  PyModule_AddObject(module, "BulletPersistentManifold", (PyObject *)&Dtool_BulletPersistentManifold);
  // BulletPlaneShape
  Dtool_PyModuleClassInit_BulletPlaneShape(module);
  PyModule_AddObject(module, "BulletPlaneShape", (PyObject *)&Dtool_BulletPlaneShape);
  // BulletSliderConstraint
  Dtool_PyModuleClassInit_BulletSliderConstraint(module);
  PyModule_AddObject(module, "BulletSliderConstraint", (PyObject *)&Dtool_BulletSliderConstraint);
  // BulletSoftBodyConfig
  Dtool_PyModuleClassInit_BulletSoftBodyConfig(module);
  PyModule_AddObject(module, "BulletSoftBodyConfig", (PyObject *)&Dtool_BulletSoftBodyConfig);
  // BulletSoftBodyControl
  Dtool_PyModuleClassInit_BulletSoftBodyControl(module);
  PyModule_AddObject(module, "BulletSoftBodyControl", (PyObject *)&Dtool_BulletSoftBodyControl);
  // BulletSoftBodyMaterial
  Dtool_PyModuleClassInit_BulletSoftBodyMaterial(module);
  PyModule_AddObject(module, "BulletSoftBodyMaterial", (PyObject *)&Dtool_BulletSoftBodyMaterial);
  // BulletSoftBodyShape
  Dtool_PyModuleClassInit_BulletSoftBodyShape(module);
  PyModule_AddObject(module, "BulletSoftBodyShape", (PyObject *)&Dtool_BulletSoftBodyShape);
  // BulletSoftBodyWorldInfo
  Dtool_PyModuleClassInit_BulletSoftBodyWorldInfo(module);
  PyModule_AddObject(module, "BulletSoftBodyWorldInfo", (PyObject *)&Dtool_BulletSoftBodyWorldInfo);
  // BulletSphereShape
  Dtool_PyModuleClassInit_BulletSphereShape(module);
  PyModule_AddObject(module, "BulletSphereShape", (PyObject *)&Dtool_BulletSphereShape);
  // BulletSphericalConstraint
  Dtool_PyModuleClassInit_BulletSphericalConstraint(module);
  PyModule_AddObject(module, "BulletSphericalConstraint", (PyObject *)&Dtool_BulletSphericalConstraint);
  // BulletTickCallbackData
  Dtool_PyModuleClassInit_BulletTickCallbackData(module);
  PyModule_AddObject(module, "BulletTickCallbackData", (PyObject *)&Dtool_BulletTickCallbackData);
  // BulletTriangleMesh
  Dtool_PyModuleClassInit_BulletTriangleMesh(module);
  PyModule_AddObject(module, "BulletTriangleMesh", (PyObject *)&Dtool_BulletTriangleMesh);
  // BulletTriangleMeshShape
  Dtool_PyModuleClassInit_BulletTriangleMeshShape(module);
  PyModule_AddObject(module, "BulletTriangleMeshShape", (PyObject *)&Dtool_BulletTriangleMeshShape);
  // BulletWheelRaycastInfo
  Dtool_PyModuleClassInit_BulletWheelRaycastInfo(module);
  PyModule_AddObject(module, "BulletWheelRaycastInfo", (PyObject *)&Dtool_BulletWheelRaycastInfo);
  // BulletWheel
  Dtool_PyModuleClassInit_BulletWheel(module);
  PyModule_AddObject(module, "BulletWheel", (PyObject *)&Dtool_BulletWheel);
}

static PyMethodDef python_simple_funcs[] = {
  {"get_default_up_axis", &Dtool_get_default_up_axis_2, METH_NOARGS, (const char *)Dtool_get_default_up_axis_2_comment},
  {"getDefaultUpAxis", &Dtool_get_default_up_axis_2, METH_NOARGS, (const char *)Dtool_get_default_up_axis_2_comment},
  {"get_bullet_version", &Dtool_get_bullet_version_3, METH_NOARGS, (const char *)Dtool_get_bullet_version_3_comment},
  {"getBulletVersion", &Dtool_get_bullet_version_3, METH_NOARGS, (const char *)Dtool_get_bullet_version_3_comment},
  // Support Function For Dtool_types ... for now in each module ??
  {"Dtool_BorrowThisReference", &Dtool_BorrowThisReference, METH_VARARGS, "Used to borrow 'this' pointer (to, from)\nAssumes no ownership."},
  {"Dtool_AddToDictionary", &Dtool_AddToDictionary, METH_VARARGS, "Used to add items into a tp_dict"},
  {NULL, NULL, 0, NULL}
};

struct LibraryDef libpandabullet_moddef = {python_simple_funcs};
static InterrogateModuleDef _in_module_def = {
  1478214269,  /* file_identifier */
  "libpandabullet",  /* library_name */
  "fCJ_",  /* library_hash_name */
  "panda3d.bullet",  /* module_name */
  "libpandabullet.in",  /* database_filename */
  (InterrogateUniqueNameDef *)0,  /* unique_names */
  0,  /* num_unique_names */
  (void **)0,  /* fptrs */
  0,  /* num_fptrs */
  1,  /* first_index */
  1854  /* next_index */
};

Configure(_in_configure_libpandabullet);
ConfigureFn(_in_configure_libpandabullet) {
  interrogate_request_module(&_in_module_def);
}

