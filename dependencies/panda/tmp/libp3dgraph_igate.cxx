/*
 * This file was generated by:
 * built\bin\interrogate -v -srcdir panda/src/dgraph -Ipanda/src/dgraph -DCPPPARSER -D__STDC__=1 -D__cplusplus=201103L -DWIN32_VC -DWIN32 -D_WIN32 -D_M_IX86 -D_MSC_VER=1600 -D__declspec(param)= -D__cdecl -D_near -D_far -D__near -D__far -D__stdcall -oc built/tmp/libp3dgraph_igate.cxx -od built/pandac/input/libp3dgraph.in -fnames -string -refcount -assert -python-native -Sbuilt/include/parser-inc -Ipanda/src/dgraph -Sbuilt/tmp -Sbuilt/include -Sthirdparty/win-python/include -Sthirdparty/win-libs-vc10/extras/include -module panda3d.core -library libp3dgraph config_dgraph.h dataGraphTraverser.h dataNode.h dataNodeTransmit.h p3dgraph_composite1.cxx p3dgraph_composite2.cxx 
 *
 */

#include "dtoolbase.h"
#include "interrogate_request.h"
#include "dconfig.h"
#include "pnotify.h"
#include <sstream>
#define PANDA_LIBRARY_NAME_libp3dgraph
#include "py_panda.h"
#include "extension.h"
#include "dcast.h"

#include "config_dgraph.h"
#include "dataGraphTraverser.h"
#include "dataNode.h"
#include "dataNodeTransmit.h"
#include "notifyCategoryProxy.h"
#include "pandaNode.h"
#include "pandabase.h"
#include "pmap.h"
#include "pointerTo.h"
#include "pvector.h"

#undef _POSIX_C_SOURCE
#undef _XOPEN_SOURCE
#define PY_SSIZE_T_CLEAN 1

#if PYTHON_FRAMEWORK
  #include <Python/Python.h>
#else
  #include "Python.h"
#endif

/**
 * Forward declarations for top-level class DataGraphTraverser
 */
typedef DataGraphTraverser DataGraphTraverser_localtype;
Define_Module_Class(panda3d.core, DataGraphTraverser, DataGraphTraverser_localtype, DataGraphTraverser);
static struct Dtool_PyTypedObject *const Dtool_Ptr_DataGraphTraverser = &Dtool_DataGraphTraverser;
static void Dtool_PyModuleClassInit_DataGraphTraverser(PyObject *module);
bool Dtool_ConstCoerce_DataGraphTraverser(PyObject *args, DataGraphTraverser const *&coerced, bool &manage);
bool Dtool_Coerce_DataGraphTraverser(PyObject *args, DataGraphTraverser *&coerced, bool &manage);

/**
 * Forward declarations for top-level class DataNode
 */
typedef DataNode DataNode_localtype;
Define_Module_ClassRef(panda3d.core, DataNode, DataNode_localtype, DataNode);
static struct Dtool_PyTypedObject *const Dtool_Ptr_DataNode = &Dtool_DataNode;
static void Dtool_PyModuleClassInit_DataNode(PyObject *module);
bool Dtool_ConstCoerce_DataNode(PyObject *args, CPT(DataNode) &coerced);
bool Dtool_Coerce_DataNode(PyObject *args, PT(DataNode) &coerced);

/**
 * Extern declarations for imported classes
 */
// ostream
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_ostream;
#else
extern struct Dtool_PyTypedObject Dtool_ostream;
static struct Dtool_PyTypedObject *const Dtool_Ptr_ostream = &Dtool_ostream;
#endif
// TypeHandle
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_TypeHandle;
inline static TypeHandle *Dtool_Coerce_TypeHandle(PyObject *args, TypeHandle &coerced) {
  nassertr(Dtool_Ptr_TypeHandle != NULL, NULL);
  nassertr(Dtool_Ptr_TypeHandle->_Dtool_Coerce != NULL, NULL);
  return ((TypeHandle *(*)(PyObject *, TypeHandle &))Dtool_Ptr_TypeHandle->_Dtool_Coerce)(args, coerced);
}
#else
extern struct Dtool_PyTypedObject Dtool_TypeHandle;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypeHandle = &Dtool_TypeHandle;
extern TypeHandle *Dtool_Coerce_TypeHandle(PyObject *args, TypeHandle &coerced);
#endif
// Namable
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_Namable;
#else
extern struct Dtool_PyTypedObject Dtool_Namable;
static struct Dtool_PyTypedObject *const Dtool_Ptr_Namable = &Dtool_Namable;
#endif
// TypedObject
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_TypedObject;
#else
extern struct Dtool_PyTypedObject Dtool_TypedObject;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedObject = &Dtool_TypedObject;
#endif
// ReferenceCount
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_ReferenceCount;
#else
extern struct Dtool_PyTypedObject Dtool_ReferenceCount;
static struct Dtool_PyTypedObject *const Dtool_Ptr_ReferenceCount = &Dtool_ReferenceCount;
#endif
// Thread
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_Thread;
#else
extern struct Dtool_PyTypedObject Dtool_Thread;
static struct Dtool_PyTypedObject *const Dtool_Ptr_Thread = &Dtool_Thread;
#endif
// TypedWritable
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_TypedWritable;
#else
extern struct Dtool_PyTypedObject Dtool_TypedWritable;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedWritable = &Dtool_TypedWritable;
#endif
// TypedWritableReferenceCount
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_TypedWritableReferenceCount;
#else
extern struct Dtool_PyTypedObject Dtool_TypedWritableReferenceCount;
static struct Dtool_PyTypedObject *const Dtool_Ptr_TypedWritableReferenceCount = &Dtool_TypedWritableReferenceCount;
#endif
// PandaNode
#ifndef LINK_ALL_STATIC
static struct Dtool_PyTypedObject *Dtool_Ptr_PandaNode;
#else
extern struct Dtool_PyTypedObject Dtool_PandaNode;
static struct Dtool_PyTypedObject *const Dtool_Ptr_PandaNode = &Dtool_PandaNode;
#endif

/**
 * Python wrappers for global functions
 */
/**
 * Python wrappers for functions of class DataGraphTraverser
 */
/**
 * Python function wrapper for:
 * inline Thread *DataGraphTraverser::get_current_thread(void) const
 */
static PyObject *Dtool_DataGraphTraverser_get_current_thread_4(PyObject *self, PyObject *) {
  DataGraphTraverser *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_DataGraphTraverser, (void **)&local_this)) {
    return NULL;
  }
  // 1-inline Thread *DataGraphTraverser::get_current_thread(void) const
  Thread *return_value = (*(const DataGraphTraverser*)local_this).get_current_thread();
  if (return_value != (Thread *)NULL) {
    return_value->ref();
  }
  if (Dtool_CheckErrorOccurred()) {
    if (return_value != (Thread *)NULL) {
      unref_delete(return_value);
    }
    return NULL;
  }
  if (return_value == NULL) {
    Py_INCREF(Py_None);
    return Py_None;
  } else {
    return DTool_CreatePyInstanceTyped((void *)return_value, *Dtool_Ptr_Thread, true, false, return_value->as_typed_object()->get_type_index());
  }
}

#ifndef NDEBUG
static const char *Dtool_DataGraphTraverser_get_current_thread_4_comment =
  "C++ Interface:\n"
  "get_current_thread(DataGraphTraverser self)\n"
  "\n"
  "/**\n"
  " * Returns the currently-executing thread object, as passed to the\n"
  " * DataGraphTraverser constructor.\n"
  " */";
#else
static const char *Dtool_DataGraphTraverser_get_current_thread_4_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void DataGraphTraverser::traverse(PandaNode *node)
 */
static PyObject *Dtool_DataGraphTraverser_traverse_5(PyObject *self, PyObject *arg) {
  DataGraphTraverser *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_DataGraphTraverser, (void **)&local_this, "DataGraphTraverser.traverse")) {
    return NULL;
  }
  // 1-void DataGraphTraverser::traverse(PandaNode *node)
  PandaNode *arg_this = (PandaNode *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_PandaNode, 1, "DataGraphTraverser.traverse", false, true);
  if (arg_this != NULL) {
    (*local_this).traverse(arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "traverse(const DataGraphTraverser self, PandaNode node)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_DataGraphTraverser_traverse_5_comment =
  "C++ Interface:\n"
  "traverse(const DataGraphTraverser self, PandaNode node)\n"
  "\n"
  "/**\n"
  " * Starts the traversal of the data graph at the indicated root node.\n"
  " */";
#else
static const char *Dtool_DataGraphTraverser_traverse_5_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void DataGraphTraverser::collect_leftovers(void)
 */
static PyObject *Dtool_DataGraphTraverser_collect_leftovers_7(PyObject *self, PyObject *) {
  DataGraphTraverser *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer_NonConst(self, Dtool_DataGraphTraverser, (void **)&local_this, "DataGraphTraverser.collect_leftovers")) {
    return NULL;
  }
  // 1-void DataGraphTraverser::collect_leftovers(void)
  (*local_this).collect_leftovers();
  return Dtool_Return_None();
}

#ifndef NDEBUG
static const char *Dtool_DataGraphTraverser_collect_leftovers_7_comment =
  "C++ Interface:\n"
  "collect_leftovers(const DataGraphTraverser self)\n"
  "\n"
  "/**\n"
  " * Pick up any nodes that didn't get completely traversed.  These must be\n"
  " * nodes that have multiple parents, with at least one parent completely\n"
  " * outside of the data graph.\n"
  " */";
#else
static const char *Dtool_DataGraphTraverser_collect_leftovers_7_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline DataGraphTraverser::DataGraphTraverser(DataGraphTraverser const &) = default
 * DataGraphTraverser::DataGraphTraverser(Thread *current_thread = Thread::get_current_thread())
 */
static int Dtool_Init_DataGraphTraverser(PyObject *self, PyObject *args, PyObject *kwds) {
  int parameter_count = (int)PyTuple_Size(args);
  if (kwds != NULL) {
    parameter_count += (int)PyDict_Size(kwds);
  }
  switch (parameter_count) {
  case 0:
    {
      // 1-DataGraphTraverser::DataGraphTraverser(Thread *current_thread)
      DataGraphTraverser *return_value = new DataGraphTraverser();
      if (return_value == NULL) {
        PyErr_NoMemory();
        return -1;
      }
      if (Dtool_CheckErrorOccurred()) {
        delete return_value;
        return -1;
      }
      return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_DataGraphTraverser, true, false);
    }
    break;
  case 1:
    {
      {
        // -2 inline DataGraphTraverser::DataGraphTraverser(DataGraphTraverser const &) = default
        PyObject *param0;
        static const char *keyword_list[] = {"param0", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:DataGraphTraverser", (char **)keyword_list, &param0)) {
          DataGraphTraverser const *param0_this;
          DTOOL_Call_ExtractThisPointerForType(param0, Dtool_Ptr_DataGraphTraverser, (void **)&param0_this);
          if (param0_this != NULL) {
            DataGraphTraverser *return_value = new DataGraphTraverser(*param0_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            if (Dtool_CheckErrorOccurred()) {
              delete return_value;
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_DataGraphTraverser, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 DataGraphTraverser::DataGraphTraverser(Thread *current_thread)
        PyObject *param0;
        static const char *keyword_list[] = {"current_thread", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:DataGraphTraverser", (char **)keyword_list, &param0)) {
          Thread *param0_this = (Thread *)DTOOL_Call_GetPointerThisClass(param0, Dtool_Ptr_Thread, 0, "DataGraphTraverser.DataGraphTraverser", false, false);
          if (param0_this != NULL) {
            DataGraphTraverser *return_value = new DataGraphTraverser(param0_this);
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            if (Dtool_CheckErrorOccurred()) {
              delete return_value;
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_DataGraphTraverser, true, false);
          }
        }
        PyErr_Clear();
      }

      {
        // -2 inline DataGraphTraverser::DataGraphTraverser(DataGraphTraverser const &) = default
        PyObject *param0;
        static const char *keyword_list[] = {"param0", NULL};
        if (PyArg_ParseTupleAndKeywords(args, kwds, "O:DataGraphTraverser", (char **)keyword_list, &param0)) {
          DataGraphTraverser const *param0_this;
          bool param0_manage = false;
          if (Dtool_ConstCoerce_DataGraphTraverser(param0, param0_this, param0_manage)) {
            DataGraphTraverser *return_value = new DataGraphTraverser(*param0_this);
            if (param0_manage) {
              delete param0_this;
            }
            if (return_value == NULL) {
              PyErr_NoMemory();
              return -1;
            }
            if (Dtool_CheckErrorOccurred()) {
              delete return_value;
              return -1;
            }
            return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_DataGraphTraverser, true, false);
          }
        }
        PyErr_Clear();
      }

      // No coercion possible: DataGraphTraverser::DataGraphTraverser(Thread *current_thread)
    }
    break;
#ifndef NDEBUG
  default:
    PyErr_Format(PyExc_TypeError,
                 "DataGraphTraverser() takes 0 or 1 arguments (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "DataGraphTraverser()\n"
      "DataGraphTraverser(const DataGraphTraverser param0)\n"
      "DataGraphTraverser(Thread current_thread)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_DataGraphTraverser(PyObject *args, DataGraphTraverser const *&coerced, bool &manage) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_DataGraphTraverser, (void**)&coerced);
  if (coerced != NULL) {
    return true;
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-DataGraphTraverser::DataGraphTraverser(Thread *current_thread)
    Thread *arg_this = (Thread *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_Thread, 0, "DataGraphTraverser.DataGraphTraverser", false, false);
    if (arg_this != NULL) {
      DataGraphTraverser *return_value = new DataGraphTraverser(arg_this);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      if (_PyErr_OCCURRED()) {
        delete return_value;
        return false;
      } else {
        coerced = return_value;
        manage = true;
        return true;
      }
    }
  }
  return false;
}

bool Dtool_Coerce_DataGraphTraverser(PyObject *args, DataGraphTraverser *&coerced, bool &manage) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_DataGraphTraverser, (void**)&coerced);
  if (coerced != NULL) {
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      return true;
    }
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-DataGraphTraverser::DataGraphTraverser(Thread *current_thread)
    Thread *arg_this = (Thread *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_Thread, 0, "DataGraphTraverser.DataGraphTraverser", false, false);
    if (arg_this != NULL) {
      DataGraphTraverser *return_value = new DataGraphTraverser(arg_this);
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      if (_PyErr_OCCURRED()) {
        delete return_value;
        return false;
      } else {
        coerced = return_value;
        manage = true;
        return true;
      }
    }
  }
  return false;
}

static void *Dtool_UpcastInterface_DataGraphTraverser(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_DataGraphTraverser) {
    printf("DataGraphTraverser ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  DataGraphTraverser *local_this = (DataGraphTraverser *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_DataGraphTraverser) {
    return local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_DataGraphTraverser(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_DataGraphTraverser) {
    return from_this;
  }
  return (void *) NULL;
}

/**
 * Python wrappers for functions of class DataNode
 */
/**
 * Python function wrapper for:
 * void DataNode::write_inputs(ostream &out) const
 */
static PyObject *Dtool_DataNode_write_inputs_11(PyObject *self, PyObject *arg) {
  DataNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_DataNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-void DataNode::write_inputs(ostream &out) const
  ostream *arg_this = (ostream *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_ostream, 1, "DataNode.write_inputs", false, true);
  if (arg_this != NULL) {
    (*(const DataNode*)local_this).write_inputs(*arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "write_inputs(DataNode self, ostream out)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_DataNode_write_inputs_11_comment =
  "C++ Interface:\n"
  "write_inputs(DataNode self, ostream out)\n"
  "\n"
  "/**\n"
  " * Writes to the indicated ostream a list of all the inputs this DataNode\n"
  " * might expect to receive.\n"
  " */";
#else
static const char *Dtool_DataNode_write_inputs_11_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void DataNode::write_outputs(ostream &out) const
 */
static PyObject *Dtool_DataNode_write_outputs_12(PyObject *self, PyObject *arg) {
  DataNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_DataNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-void DataNode::write_outputs(ostream &out) const
  ostream *arg_this = (ostream *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_ostream, 1, "DataNode.write_outputs", false, true);
  if (arg_this != NULL) {
    (*(const DataNode*)local_this).write_outputs(*arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "write_outputs(DataNode self, ostream out)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_DataNode_write_outputs_12_comment =
  "C++ Interface:\n"
  "write_outputs(DataNode self, ostream out)\n"
  "\n"
  "/**\n"
  " * Writes to the indicated ostream a list of all the outputs this DataNode\n"
  " * might generate.\n"
  " */";
#else
static const char *Dtool_DataNode_write_outputs_12_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * void DataNode::write_connections(ostream &out) const
 */
static PyObject *Dtool_DataNode_write_connections_13(PyObject *self, PyObject *arg) {
  DataNode *local_this = NULL;
  if (!Dtool_Call_ExtractThisPointer(self, Dtool_DataNode, (void **)&local_this)) {
    return NULL;
  }
  // 1-void DataNode::write_connections(ostream &out) const
  ostream *arg_this = (ostream *)DTOOL_Call_GetPointerThisClass(arg, Dtool_Ptr_ostream, 1, "DataNode.write_connections", false, true);
  if (arg_this != NULL) {
    (*(const DataNode*)local_this).write_connections(*arg_this);
    return Dtool_Return_None();
  }
  if (!_PyErr_OCCURRED()) {
    return Dtool_Raise_BadArgumentsError(
      "write_connections(DataNode self, ostream out)\n");
  }
  return NULL;
}

#ifndef NDEBUG
static const char *Dtool_DataNode_write_connections_13_comment =
  "C++ Interface:\n"
  "write_connections(DataNode self, ostream out)\n"
  "\n"
  "/**\n"
  " * Writes to the indicated ostream a list of all the connections currently\n"
  " * showing between this DataNode and its parent(s).\n"
  " */";
#else
static const char *Dtool_DataNode_write_connections_13_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * static TypeHandle DataNode::get_class_type(void)
 */
static PyObject *Dtool_DataNode_get_class_type_14(PyObject *, PyObject *) {
  // 1-static TypeHandle DataNode::get_class_type(void)
  TypeHandle *return_value = new TypeHandle(DataNode::get_class_type());
  if (return_value == NULL) {
    return PyErr_NoMemory();
  }
  if (Dtool_CheckErrorOccurred()) {
    delete return_value;
    return NULL;
  }
  return DTool_CreatePyInstance((void *)return_value, *Dtool_Ptr_TypeHandle, true, false);
}

#ifndef NDEBUG
static const char *Dtool_DataNode_get_class_type_14_comment =
  "C++ Interface:\n"
  "get_class_type()\n";
#else
static const char *Dtool_DataNode_get_class_type_14_comment = NULL;
#endif

/**
 * Python function wrapper for:
 * inline DataNode::DataNode(std::string const &name)
 */
static int Dtool_Init_DataNode(PyObject *self, PyObject *args, PyObject *kwds) {
    int parameter_count = (int)PyTuple_Size(args);
    if (kwds != NULL) {
      parameter_count += (int)PyDict_Size(kwds);
    }
  if (parameter_count != 1) {
#ifdef NDEBUG
    Dtool_Raise_TypeError("function takes exactly 1 argument");
    return -1;
#else
    PyErr_Format(PyExc_TypeError,
                 "DataNode() takes exactly 1 argument (%d given)",
                 parameter_count);
    return -1;
#endif
  }
  PyObject *arg = NULL;
  if (PyTuple_GET_SIZE(args) == 1) {
    arg = PyTuple_GET_ITEM(args, 0);
  } else if (kwds != NULL) {
    arg = PyDict_GetItemString(kwds, "name");
  }
  if (arg == (PyObject *)NULL) {
    Dtool_Raise_TypeError("Required argument 'name' (pos 1) not found");
    return -1;
  }
  // 1-inline DataNode::DataNode(std::string const &name)
  char *param0_str = NULL;
  Py_ssize_t param0_len;
#if PY_MAJOR_VERSION >= 3
  param0_str = PyUnicode_AsUTF8AndSize(arg, &param0_len);
#else
  if (PyString_AsStringAndSize(arg, &param0_str, &param0_len) == -1) {
    param0_str = NULL;
  }
#endif
  if (param0_str != NULL) {
    DataNode *return_value = new DataNode(std::string(param0_str, param0_len));
    if (return_value == NULL) {
      PyErr_NoMemory();
      return -1;
    }
    return_value->ref();
    if (Dtool_CheckErrorOccurred()) {
      unref_delete(return_value);
      return -1;
    }
    return DTool_PyInit_Finalize(self, (void *)return_value, &Dtool_DataNode, true, false);
  }
  if (!_PyErr_OCCURRED()) {
    Dtool_Raise_BadArgumentsError(
      "DataNode(str name)\n");
  }
  return -1;
}

bool Dtool_ConstCoerce_DataNode(PyObject *args, CPT(DataNode) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_DataNode, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    coerced->ref();
    return true;
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-inline DataNode::DataNode(std::string const &name)
    char *param0_str = NULL;
    Py_ssize_t param0_len;
#if PY_MAJOR_VERSION >= 3
    param0_str = PyUnicode_AsUTF8AndSize(arg, &param0_len);
#else
    if (PyString_AsStringAndSize(arg, &param0_str, &param0_len) == -1) {
      param0_str = NULL;
    }
#endif
    if (param0_str != NULL) {
      DataNode *return_value = new DataNode(std::string(param0_str, param0_len));
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      return_value->ref();
      if (_PyErr_OCCURRED()) {
        unref_delete(return_value);
        return false;
      } else {
        coerced = MOVE(return_value);
        return true;
      }
    }
    PyErr_Clear();
  }
  return false;
}

bool Dtool_Coerce_DataNode(PyObject *args, PT(DataNode) &coerced) {
  DTOOL_Call_ExtractThisPointerForType(args, &Dtool_DataNode, (void**)&coerced.cheat());
  if (coerced != NULL) {
    // The argument is already of matching type, no need to coerce.
    if (!((Dtool_PyInstDef *)args)->_is_const) {
      // A non-const instance is required, which this is.
      coerced->ref();
      return true;
    }
  }

  if (!PyTuple_Check(args)) {
    PyObject *arg = args;
    // 1-inline DataNode::DataNode(std::string const &name)
    char *param0_str = NULL;
    Py_ssize_t param0_len;
#if PY_MAJOR_VERSION >= 3
    param0_str = PyUnicode_AsUTF8AndSize(arg, &param0_len);
#else
    if (PyString_AsStringAndSize(arg, &param0_str, &param0_len) == -1) {
      param0_str = NULL;
    }
#endif
    if (param0_str != NULL) {
      DataNode *return_value = new DataNode(std::string(param0_str, param0_len));
      if (return_value == NULL) {
        PyErr_NoMemory();
        return false;
      }
      return_value->ref();
      if (_PyErr_OCCURRED()) {
        unref_delete(return_value);
        return false;
      } else {
        coerced = MOVE(return_value);
        return true;
      }
    }
    PyErr_Clear();
  }
  return false;
}

static void *Dtool_UpcastInterface_DataNode(PyObject *self, Dtool_PyTypedObject *requested_type) {
  Dtool_PyTypedObject *SelfType = ((Dtool_PyInstDef *)self)->_My_Type;
  if (SelfType != Dtool_Ptr_DataNode) {
    printf("DataNode ** Bad Source Type-- Requesting Conversion from %s to %s\n", Py_TYPE(self)->tp_name, requested_type->_PyType.tp_name); fflush(NULL);
    return NULL;
  }

  DataNode *local_this = (DataNode *)((Dtool_PyInstDef *)self)->_ptr_to_object;
  if (requested_type == Dtool_Ptr_DataNode) {
    return local_this;
  }
  if (requested_type == Dtool_Ptr_Namable) {
    return (Namable *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_PandaNode) {
    return (PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_ReferenceCount) {
    return (ReferenceCount *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedObject) {
    return (TypedObject *)(TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritable) {
    return (TypedWritable *)(TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  if (requested_type == Dtool_Ptr_TypedWritableReferenceCount) {
    return (TypedWritableReferenceCount *)(PandaNode *) local_this;
  }
  return NULL;
}

static void *Dtool_DowncastInterface_DataNode(void *from_this, Dtool_PyTypedObject *from_type) {
  if (from_this == NULL || from_type == NULL) {
    return NULL;
  }
  if (from_type == Dtool_Ptr_DataNode) {
    return from_this;
  }
  if (from_type == Dtool_Ptr_Namable) {
    Namable* other_this = (Namable*)from_this;
    return (DataNode*)other_this;
  }
  if (from_type == Dtool_Ptr_PandaNode) {
    PandaNode* other_this = (PandaNode*)from_this;
    return (DataNode*)other_this;
  }
  if (from_type == Dtool_Ptr_ReferenceCount) {
    ReferenceCount* other_this = (ReferenceCount*)from_this;
    return (DataNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedObject) {
    TypedObject* other_this = (TypedObject*)from_this;
    return (DataNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritable) {
    TypedWritable* other_this = (TypedWritable*)from_this;
    return (DataNode*)other_this;
  }
  if (from_type == Dtool_Ptr_TypedWritableReferenceCount) {
    TypedWritableReferenceCount* other_this = (TypedWritableReferenceCount*)from_this;
    return (DataNode*)other_this;
  }
  return (void *) NULL;
}

/**
 * Python method tables for DataGraphTraverser (DataGraphTraverser)
 */
static PyMethodDef Dtool_Methods_DataGraphTraverser[] = {
  {"get_current_thread", &Dtool_DataGraphTraverser_get_current_thread_4, METH_NOARGS, (const char *)Dtool_DataGraphTraverser_get_current_thread_4_comment},
  {"getCurrentThread", &Dtool_DataGraphTraverser_get_current_thread_4, METH_NOARGS, (const char *)Dtool_DataGraphTraverser_get_current_thread_4_comment},
  {"traverse", &Dtool_DataGraphTraverser_traverse_5, METH_O, (const char *)Dtool_DataGraphTraverser_traverse_5_comment},
  {"collect_leftovers", &Dtool_DataGraphTraverser_collect_leftovers_7, METH_NOARGS, (const char *)Dtool_DataGraphTraverser_collect_leftovers_7_comment},
  {"collectLeftovers", &Dtool_DataGraphTraverser_collect_leftovers_7, METH_NOARGS, (const char *)Dtool_DataGraphTraverser_collect_leftovers_7_comment},
  {"__copy__", &copy_from_copy_constructor, METH_NOARGS, NULL},
  {"__deepcopy__", &map_deepcopy_to_copy, METH_VARARGS, NULL},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_DataGraphTraverser = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

struct Dtool_PyTypedObject Dtool_DataGraphTraverser = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.core.DataGraphTraverser",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_DataGraphTraverser,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_DataGraphTraverser,
    0, // tp_as_sequence
    0, // tp_as_mapping
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    0, // tp_as_buffer
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * This object supervises the traversal of the data graph and the moving of\n"
    " * data from one DataNode to its children.  The data graph is used to manage\n"
    " * data from input devices, etc.  See the overview of the data graph in\n"
    " * dataNode.h.\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_DataGraphTraverser,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_DataGraphTraverser,
    PyType_GenericAlloc,
    Dtool_new_DataGraphTraverser,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_DataGraphTraverser,
  Dtool_UpcastInterface_DataGraphTraverser,
  Dtool_DowncastInterface_DataGraphTraverser,
  (CoerceFunction)Dtool_ConstCoerce_DataGraphTraverser,
  (CoerceFunction)Dtool_Coerce_DataGraphTraverser,
};

static void Dtool_PyModuleClassInit_DataGraphTraverser(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    Dtool_DataGraphTraverser._PyType.tp_base = (PyTypeObject *)Dtool_Ptr_DTOOL_SUPER_BASE;
    PyObject *dict = PyDict_New();
    Dtool_DataGraphTraverser._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_DataGraphTraverser) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(DataGraphTraverser)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_DataGraphTraverser);
  }
}

/**
 * Python method tables for DataNode (DataNode)
 */
static PyMethodDef Dtool_Methods_DataNode[] = {
  {"write_inputs", &Dtool_DataNode_write_inputs_11, METH_O, (const char *)Dtool_DataNode_write_inputs_11_comment},
  {"writeInputs", &Dtool_DataNode_write_inputs_11, METH_O, (const char *)Dtool_DataNode_write_inputs_11_comment},
  {"write_outputs", &Dtool_DataNode_write_outputs_12, METH_O, (const char *)Dtool_DataNode_write_outputs_12_comment},
  {"writeOutputs", &Dtool_DataNode_write_outputs_12, METH_O, (const char *)Dtool_DataNode_write_outputs_12_comment},
  {"write_connections", &Dtool_DataNode_write_connections_13, METH_O, (const char *)Dtool_DataNode_write_connections_13_comment},
  {"writeConnections", &Dtool_DataNode_write_connections_13, METH_O, (const char *)Dtool_DataNode_write_connections_13_comment},
  {"get_class_type", &Dtool_DataNode_get_class_type_14, METH_NOARGS | METH_STATIC, (const char *)Dtool_DataNode_get_class_type_14_comment},
  {"getClassType", &Dtool_DataNode_get_class_type_14, METH_NOARGS | METH_STATIC, (const char *)Dtool_DataNode_get_class_type_14_comment},
  {NULL, NULL, 0, NULL}
};

static PyNumberMethods Dtool_NumberMethods_DataNode = {
  0, // nb_add
  0, // nb_subtract
  0, // nb_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_divide
#endif
  0, // nb_remainder
  0, // nb_divmod
  0, // nb_power
  0, // nb_negative
  0, // nb_positive
  0, // nb_absolute
  0, // nb_bool
  0, // nb_invert
  0, // nb_lshift
  0, // nb_rshift
  0, // nb_and
  0, // nb_xor
  0, // nb_or
#if PY_MAJOR_VERSION < 3
  0, // nb_coerce
#endif
  0, // nb_int
  0, // nb_long
  0, // nb_float
#if PY_MAJOR_VERSION < 3
  0, // nb_oct
  0, // nb_hex
#endif
  0, // nb_inplace_add
  0, // nb_inplace_subtract
  0, // nb_inplace_multiply
#if PY_MAJOR_VERSION < 3
  0, // nb_inplace_divide
#endif
  0, // nb_inplace_remainder
  0, // nb_inplace_power
  0, // nb_inplace_lshift
  0, // nb_inplace_rshift
  0, // nb_inplace_and
  0, // nb_inplace_xor
  0, // nb_inplace_or
  0, // nb_floor_divide
  0, // nb_true_divide
  0, // nb_inplace_floor_divide
  0, // nb_inplace_true_divide
#if PY_VERSION_HEX >= 0x02050000
  0, // nb_index
#endif
#if PY_VERSION_HEX >= 0x03050000
  0, // nb_matrix_multiply
  0, // nb_inplace_matrix_multiply
#endif
};

static PySequenceMethods Dtool_SequenceMethods_DataNode = {
  0, // sq_length
  0, // sq_concat
  0, // sq_repeat
  0, // sq_item
  0, // sq_slice
  0, // sq_ass_item
  0, // sq_ass_slice
  0, // sq_contains
  0, // sq_inplace_concat
  0, // sq_inplace_repeat
};

static PyMappingMethods Dtool_MappingMethods_DataNode = {
  0, // mp_length
  0, // mp_subscript
  0, // mp_ass_subscript
};

static PyBufferProcs Dtool_BufferProcs_DataNode = {
#if PY_MAJOR_VERSION < 3
  0, // bf_getreadbuffer
  0, // bf_getwritebuffer
  0, // bf_getsegcount
  0, // bf_getcharbuffer
#endif
#if PY_VERSION_HEX >= 0x02060000
  0, // bf_getbuffer
  0, // bf_releasebuffer
#endif
};

struct Dtool_PyTypedObject Dtool_DataNode = {
  {
    PyVarObject_HEAD_INIT(NULL, 0)
    "panda3d.core.DataNode",
    sizeof(Dtool_PyInstDef),
    0, // tp_itemsize
    &Dtool_FreeInstance_DataNode,
    0, // tp_print
    0, // tp_getattr
    0, // tp_setattr
#if PY_MAJOR_VERSION >= 3
    0, // tp_reserved
#else
    0, // tp_compare
#endif
    0, // tp_repr
    &Dtool_NumberMethods_DataNode,
    &Dtool_SequenceMethods_DataNode,
    &Dtool_MappingMethods_DataNode,
    0, // tp_hash
    0, // tp_call
    0, // tp_str
    PyObject_GenericGetAttr,
    PyObject_GenericSetAttr,
    &Dtool_BufferProcs_DataNode,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES,
#ifdef NDEBUG
    0,
#else
    "/**\n"
    " * The fundamental type of node for the data graph.  The DataNode class is\n"
    " * itself primarily intended as an abstract class; it defines no inputs and no\n"
    " * outputs.  Most kinds of data nodes will derive from this to specify the\n"
    " * inputs and outputs in the constructor.\n"
    " *\n"
    " * DataNode does not attempt to cycle its data with a PipelineCycler.  The\n"
    " * data graph is intended to be used only within a single thread.\n"
    " */",
#endif
    0, // tp_traverse
    0, // tp_clear
    0, // tp_richcompare
    0, // tp_weaklistoffset
    0, // tp_iter
    0, // tp_iternext
    Dtool_Methods_DataNode,
    0, // tp_members
    0, // tp_getset
    0, // tp_base
    0, // tp_dict
    0, // tp_descr_get
    0, // tp_descr_set
    0, // tp_dictoffset
    Dtool_Init_DataNode,
    PyType_GenericAlloc,
    Dtool_new_DataNode,
    PyObject_Del,
    0, // tp_is_gc
    0, // tp_bases
    0, // tp_mro
    0, // tp_cache
    0, // tp_subclasses
    0, // tp_weaklist
    0, // tp_del
#if PY_VERSION_HEX >= 0x02060000
    0, // tp_version_tag
#endif
#if PY_VERSION_HEX >= 0x03040000
    0, // tp_finalize
#endif
  },
  TypeHandle::none(),
  Dtool_PyModuleClassInit_DataNode,
  Dtool_UpcastInterface_DataNode,
  Dtool_DowncastInterface_DataNode,
  (CoerceFunction)Dtool_ConstCoerce_DataNode,
  (CoerceFunction)Dtool_Coerce_DataNode,
};

static void Dtool_PyModuleClassInit_DataNode(PyObject *module) {
  (void) module; // Unused
  static bool initdone = false;
  if (!initdone) {
    initdone = true;
    // Dependent objects
    assert(Dtool_Ptr_PandaNode != NULL);
    assert(Dtool_Ptr_PandaNode->_Dtool_ModuleClassInit != NULL);
    Dtool_Ptr_PandaNode->_Dtool_ModuleClassInit(NULL);
    Dtool_DataNode._PyType.tp_bases = PyTuple_Pack(1, (PyTypeObject *)Dtool_Ptr_PandaNode);
    PyObject *dict = PyDict_New();
    Dtool_DataNode._PyType.tp_dict = dict;
    PyDict_SetItemString(dict, "DtoolClassDict", dict);
    if (PyType_Ready((PyTypeObject *)&Dtool_DataNode) < 0) {
      Dtool_Raise_TypeError("PyType_Ready(DataNode)");
      return;
    }
    Py_INCREF((PyTypeObject *)&Dtool_DataNode);
  }
}


/**
 * Module Object Linker ..
 */
void Dtool_libp3dgraph_RegisterTypes() {
#ifndef LINK_ALL_STATIC
  RegisterNamedClass("DataGraphTraverser", Dtool_DataGraphTraverser);
#endif
  Dtool_DataNode._type = DataNode::get_class_type();
  RegisterRuntimeTypedClass(Dtool_DataNode);
}

void Dtool_libp3dgraph_ResolveExternals() {
#ifndef LINK_ALL_STATIC
  // Resolve externally imported types.
  Dtool_Ptr_ostream = LookupNamedClass("ostream");
  Dtool_Ptr_TypeHandle = LookupNamedClass("TypeHandle");
  Dtool_Ptr_Namable = LookupRuntimeTypedClass(Namable::get_class_type());
  Dtool_Ptr_TypedObject = LookupRuntimeTypedClass(TypedObject::get_class_type());
  Dtool_Ptr_ReferenceCount = LookupRuntimeTypedClass(ReferenceCount::get_class_type());
  Dtool_Ptr_Thread = LookupRuntimeTypedClass(Thread::get_class_type());
  Dtool_Ptr_TypedWritable = LookupRuntimeTypedClass(TypedWritable::get_class_type());
  Dtool_Ptr_TypedWritableReferenceCount = LookupRuntimeTypedClass(TypedWritableReferenceCount::get_class_type());
  Dtool_Ptr_PandaNode = LookupRuntimeTypedClass(PandaNode::get_class_type());
#endif
}

void Dtool_libp3dgraph_BuildInstants(PyObject *module) {
  (void) module;
  // DataGraphTraverser
  Dtool_PyModuleClassInit_DataGraphTraverser(module);
  PyModule_AddObject(module, "DataGraphTraverser", (PyObject *)&Dtool_DataGraphTraverser);
  // DataNode
  Dtool_PyModuleClassInit_DataNode(module);
  PyModule_AddObject(module, "DataNode", (PyObject *)&Dtool_DataNode);
}

static PyMethodDef python_simple_funcs[] = {
  // Support Function For Dtool_types ... for now in each module ??
  {"Dtool_BorrowThisReference", &Dtool_BorrowThisReference, METH_VARARGS, "Used to borrow 'this' pointer (to, from)\nAssumes no ownership."},
  {"Dtool_AddToDictionary", &Dtool_AddToDictionary, METH_VARARGS, "Used to add items into a tp_dict"},
  {NULL, NULL, 0, NULL}
};

struct LibraryDef libp3dgraph_moddef = {python_simple_funcs};
static InterrogateModuleDef _in_module_def = {
  1478212751,  /* file_identifier */
  "libp3dgraph",  /* library_name */
  "YJkp",  /* library_hash_name */
  "panda3d.core",  /* module_name */
  "libp3dgraph.in",  /* database_filename */
  (InterrogateUniqueNameDef *)0,  /* unique_names */
  0,  /* num_unique_names */
  (void **)0,  /* fptrs */
  0,  /* num_fptrs */
  1,  /* first_index */
  45  /* next_index */
};

Configure(_in_configure_libp3dgraph);
ConfigureFn(_in_configure_libp3dgraph) {
  interrogate_request_module(&_in_module_def);
}

