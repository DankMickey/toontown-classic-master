1478214176
3 2
11 libpandaode 4 sTqO 11 panda3d.ode 
590
698 8 OdeWorld 0 4 1295 18 OdeWorld::OdeWorld 0 2 1 2 0
67
OdeWorld::OdeWorld(void);
OdeWorld::OdeWorld(OdeWorld const &copy);

699 7 destroy 0 4 1295 17 OdeWorld::destroy 0 1 3 0
29
void OdeWorld::destroy(void);

700 8 is_empty 0 4 1295 18 OdeWorld::is_empty 0 1 4 205
/**
 * Returns true if the ID is 0, meaning the OdeWorld does not point to a valid
 * world.  It is an error to call a method on an empty world.  Note that an
 * empty OdeWorld also evaluates to False.
 */
43
inline bool OdeWorld::is_empty(void) const;

701 6 get_id 0 4 1295 16 OdeWorld::get_id 0 1 5 43
/**
 * Returns the underlying dWorldID.
 */
45
inline dWorldID OdeWorld::get_id(void) const;

702 11 set_gravity 0 4 1295 21 OdeWorld::set_gravity 0 2 6 7 0
119
inline void OdeWorld::set_gravity(dReal x, dReal y, dReal z);
inline void OdeWorld::set_gravity(LVecBase3f const &vec);

703 7 set_erp 0 4 1295 17 OdeWorld::set_erp 0 1 8 0
41
inline void OdeWorld::set_erp(dReal erp);

704 7 set_cfm 0 4 1295 17 OdeWorld::set_cfm 0 1 9 0
41
inline void OdeWorld::set_cfm(dReal cfm);

705 29 set_quick_step_num_iterations 0 4 1295 39 OdeWorld::set_quick_step_num_iterations 0 1 10 0
61
inline void OdeWorld::set_quick_step_num_iterations(int num);

706 16 set_quick_step_w 0 4 1295 26 OdeWorld::set_quick_step_w 0 1 11 0
62
inline void OdeWorld::set_quick_step_w(dReal over_relaxation);

707 30 set_contact_max_correcting_vel 0 4 1295 40 OdeWorld::set_contact_max_correcting_vel 0 1 12 0
64
inline void OdeWorld::set_contact_max_correcting_vel(dReal vel);

708 25 set_contact_surface_layer 0 4 1295 35 OdeWorld::set_contact_surface_layer 0 1 13 0
61
inline void OdeWorld::set_contact_surface_layer(dReal depth);

709 33 set_auto_disable_linear_threshold 0 4 1295 43 OdeWorld::set_auto_disable_linear_threshold 0 1 14 0
80
inline void OdeWorld::set_auto_disable_linear_threshold(dReal linear_threshold);

710 34 set_auto_disable_angular_threshold 0 4 1295 44 OdeWorld::set_auto_disable_angular_threshold 0 1 15 0
82
inline void OdeWorld::set_auto_disable_angular_threshold(dReal angular_threshold);

711 22 set_auto_disable_steps 0 4 1295 32 OdeWorld::set_auto_disable_steps 0 1 16 0
56
inline void OdeWorld::set_auto_disable_steps(int steps);

712 21 set_auto_disable_time 0 4 1295 31 OdeWorld::set_auto_disable_time 0 1 17 0
56
inline void OdeWorld::set_auto_disable_time(dReal time);

713 21 set_auto_disable_flag 0 4 1295 31 OdeWorld::set_auto_disable_flag 0 1 18 0
65
inline void OdeWorld::set_auto_disable_flag(int do_auto_disable);

714 11 get_gravity 0 4 1295 21 OdeWorld::get_gravity 0 1 19 0
52
inline LVecBase3f OdeWorld::get_gravity(void) const;

715 7 get_erp 0 4 1295 17 OdeWorld::get_erp 0 1 20 0
43
inline dReal OdeWorld::get_erp(void) const;

716 7 get_cfm 0 4 1295 17 OdeWorld::get_cfm 0 1 21 0
43
inline dReal OdeWorld::get_cfm(void) const;

717 29 get_quick_step_num_iterations 0 4 1295 39 OdeWorld::get_quick_step_num_iterations 0 1 22 0
63
inline int OdeWorld::get_quick_step_num_iterations(void) const;

718 16 get_quick_step_w 0 4 1295 26 OdeWorld::get_quick_step_w 0 1 23 0
52
inline dReal OdeWorld::get_quick_step_w(void) const;

719 30 get_contact_max_correcting_vel 0 4 1295 40 OdeWorld::get_contact_max_correcting_vel 0 1 24 0
66
inline dReal OdeWorld::get_contact_max_correcting_vel(void) const;

720 25 get_contact_surface_layer 0 4 1295 35 OdeWorld::get_contact_surface_layer 0 1 25 0
61
inline dReal OdeWorld::get_contact_surface_layer(void) const;

721 33 get_auto_disable_linear_threshold 0 4 1295 43 OdeWorld::get_auto_disable_linear_threshold 0 1 26 0
69
inline dReal OdeWorld::get_auto_disable_linear_threshold(void) const;

722 34 get_auto_disable_angular_threshold 0 4 1295 44 OdeWorld::get_auto_disable_angular_threshold 0 1 27 0
70
inline dReal OdeWorld::get_auto_disable_angular_threshold(void) const;

723 22 get_auto_disable_steps 0 4 1295 32 OdeWorld::get_auto_disable_steps 0 1 28 0
56
inline int OdeWorld::get_auto_disable_steps(void) const;

724 21 get_auto_disable_time 0 4 1295 31 OdeWorld::get_auto_disable_time 0 1 29 0
57
inline dReal OdeWorld::get_auto_disable_time(void) const;

725 21 get_auto_disable_flag 0 4 1295 31 OdeWorld::get_auto_disable_flag 0 1 30 0
55
inline int OdeWorld::get_auto_disable_flag(void) const;

726 16 impulse_to_force 0 4 1295 26 OdeWorld::impulse_to_force 0 2 31 32 0
180
inline LVecBase3f OdeWorld::impulse_to_force(dReal stepsize, dReal ix, dReal iy, dReal iz);
inline LVecBase3f OdeWorld::impulse_to_force(dReal stepsize, LVecBase3f const &impulse);

727 4 step 0 4 1295 14 OdeWorld::step 0 1 33 0
43
inline void OdeWorld::step(dReal stepsize);

728 10 quick_step 0 4 1295 20 OdeWorld::quick_step 0 1 34 0
49
inline void OdeWorld::quick_step(dReal stepsize);

729 10 compare_to 0 4 1295 20 OdeWorld::compare_to 0 1 35 0
61
inline int OdeWorld::compare_to(OdeWorld const &other) const;

730 18 init_surface_table 0 4 1295 28 OdeWorld::init_surface_table 0 1 36 0
56
void OdeWorld::init_surface_table(uint8_t num_surfaces);

731 18 add_body_dampening 0 4 1295 28 OdeWorld::add_body_dampening 0 1 37 56
// void assign_surface_body(OdeBody& body, int surface);
62
void OdeWorld::add_body_dampening(OdeBody &body, int surface);

732 17 set_surface_entry 0 4 1295 27 OdeWorld::set_surface_entry 0 1 38 0
161
void OdeWorld::set_surface_entry(uint8_t pos1, uint8_t pos2, dReal mu, dReal bounce, dReal bounce_vel, dReal soft_erp, dReal soft_cfm, dReal slip, dReal dampen);

733 15 apply_dampening 0 4 1295 25 OdeWorld::apply_dampening 0 1 39 0
57
float OdeWorld::apply_dampening(float dt, OdeBody &body);

734 22 operator typecast bool 0 132 1295 32 OdeWorld::operator typecast bool 0 1 41 0
50
bool OdeWorld::operator typecast bool(void) const;

735 14 get_class_type 0 4 1295 24 OdeWorld::get_class_type 0 1 40 0
49
static TypeHandle OdeWorld::get_class_type(void);

736 13 OdeJointGroup 0 4 1297 28 OdeJointGroup::OdeJointGroup 0 2 42 43 0
105
OdeJointGroup::OdeJointGroup(void);
inline OdeJointGroup::OdeJointGroup(OdeJointGroup const &) = default;

737 7 destroy 0 4 1297 22 OdeJointGroup::destroy 0 1 44 0
34
void OdeJointGroup::destroy(void);

738 6 get_id 0 4 1297 21 OdeJointGroup::get_id 0 1 45 0
55
inline dJointGroupID OdeJointGroup::get_id(void) const;

739 5 empty 0 4 1297 20 OdeJointGroup::empty 0 1 46 0
45
inline void OdeJointGroup::empty(void) const;

740 10 compare_to 0 4 1297 25 OdeJointGroup::compare_to 0 1 47 0
71
inline int OdeJointGroup::compare_to(OdeJointGroup const &other) const;

741 14 get_class_type 0 4 1297 29 OdeJointGroup::get_class_type 0 1 48 0
54
static TypeHandle OdeJointGroup::get_class_type(void);

742 10 get_force1 0 4 1298 28 OdeJointFeedback::get_force1 0 1 50 0
64
inline LVector3f const OdeJointFeedback::get_force1(void) const;

743 10 get_force2 0 4 1298 28 OdeJointFeedback::get_force2 0 1 51 0
64
inline LVector3f const OdeJointFeedback::get_force2(void) const;

744 11 get_torque1 0 4 1298 29 OdeJointFeedback::get_torque1 0 1 52 0
65
inline LVector3f const OdeJointFeedback::get_torque1(void) const;

745 11 get_torque2 0 4 1298 29 OdeJointFeedback::get_torque2 0 1 53 0
65
inline LVector3f const OdeJointFeedback::get_torque2(void) const;

746 16 OdeJointFeedback 0 4 1298 34 OdeJointFeedback::OdeJointFeedback 0 1 49 0
58
inline OdeJointFeedback::OdeJointFeedback(void) = default;

747 17 ~OdeJointFeedback 0 4 1298 35 OdeJointFeedback::~OdeJointFeedback 0 0 0
42
OdeJointFeedback::~OdeJointFeedback(void);

748 7 destroy 0 4 1300 17 OdeJoint::destroy 0 1 55 0
29
void OdeJoint::destroy(void);

749 8 is_empty 0 4 1300 18 OdeJoint::is_empty 0 1 56 205
/**
 * Returns true if the ID is 0, meaning the OdeJoint does not point to a valid
 * joint.  It is an error to call a method on an empty joint.  Note that an
 * empty OdeJoint also evaluates to False.
 */
43
inline bool OdeJoint::is_empty(void) const;

750 6 get_id 0 4 1300 16 OdeJoint::get_id 0 1 57 43
/**
 * Returns the underlying dJointID.
 */
45
inline dJointID OdeJoint::get_id(void) const;

751 14 get_joint_type 0 4 1300 24 OdeJoint::get_joint_type 0 1 58 30
/* INLINE void *get_data(); */
48
inline int OdeJoint::get_joint_type(void) const;

752 8 get_body 0 4 1300 18 OdeJoint::get_body 0 1 59 0
44
OdeBody OdeJoint::get_body(int index) const;

753 12 set_feedback 0 4 1300 22 OdeJoint::set_feedback 0 2 60 61 0
109
inline void OdeJoint::set_feedback(OdeJointFeedback *);
inline void OdeJoint::set_feedback(bool flag = true);

754 12 get_feedback 0 4 1300 22 OdeJoint::get_feedback 0 1 62 0
54
inline OdeJointFeedback *OdeJoint::get_feedback(void);

755 6 attach 0 4 1300 16 OdeJoint::attach 0 1 63 0
66
void OdeJoint::attach(OdeBody const *body1, OdeBody const *body2);

756 13 attach_bodies 0 4 1300 23 OdeJoint::attach_bodies 0 1 64 175
/**
 * Attaches two OdeBody objects to this joint.  Order is important.  Consider
 * using the OdeJoint::attach extension function if you're using the Python
 * interface.
 */
73
void OdeJoint::attach_bodies(OdeBody const &body1, OdeBody const &body2);

757 11 attach_body 0 4 1300 21 OdeJoint::attach_body 0 1 65 237
/**
 * Attaches a single OdeBody to this joint at the specified index (0 or 1).
 * The other index will be set to the environment (null). Consider using the
 * OdeJoint::attach extension function if you're using the Python interface.
 */
59
void OdeJoint::attach_body(OdeBody const &body, int index);

758 6 detach 0 4 1300 16 OdeJoint::detach 0 1 66 0
28
void OdeJoint::detach(void);

759 5 write 0 6 1300 15 OdeJoint::write 0 1 67 0
83
virtual void OdeJoint::write(ostream &out = ::cout, unsigned int indent = 0) const;

760 10 compare_to 0 4 1300 20 OdeJoint::compare_to 0 1 68 0
61
inline int OdeJoint::compare_to(OdeJoint const &other) const;

761 11 operator == 0 4 1300 21 OdeJoint::operator == 0 1 69 0
63
inline bool OdeJoint::operator ==(OdeJoint const &other) const;

762 22 operator typecast bool 0 132 1300 32 OdeJoint::operator typecast bool 0 1 83 0
50
bool OdeJoint::operator typecast bool(void) const;

763 7 convert 0 4 1300 17 OdeJoint::convert 0 1 70 0
40
PyObject *OdeJoint::convert(void) const;

764 15 convert_to_ball 0 4 1300 25 OdeJoint::convert_to_ball 0 1 71 0
51
OdeBallJoint OdeJoint::convert_to_ball(void) const;

765 16 convert_to_hinge 0 4 1300 26 OdeJoint::convert_to_hinge 0 1 72 0
53
OdeHingeJoint OdeJoint::convert_to_hinge(void) const;

766 17 convert_to_slider 0 4 1300 27 OdeJoint::convert_to_slider 0 1 73 0
55
OdeSliderJoint OdeJoint::convert_to_slider(void) const;

767 18 convert_to_contact 0 4 1300 28 OdeJoint::convert_to_contact 0 1 74 0
57
OdeContactJoint OdeJoint::convert_to_contact(void) const;

768 20 convert_to_universal 0 4 1300 30 OdeJoint::convert_to_universal 0 1 75 0
61
OdeUniversalJoint OdeJoint::convert_to_universal(void) const;

769 17 convert_to_hinge2 0 4 1300 27 OdeJoint::convert_to_hinge2 0 1 76 0
55
OdeHinge2Joint OdeJoint::convert_to_hinge2(void) const;

770 16 convert_to_fixed 0 4 1300 26 OdeJoint::convert_to_fixed 0 1 77 0
53
OdeFixedJoint OdeJoint::convert_to_fixed(void) const;

771 15 convert_to_null 0 4 1300 25 OdeJoint::convert_to_null 0 1 78 0
51
OdeNullJoint OdeJoint::convert_to_null(void) const;

772 18 convert_to_a_motor 0 4 1300 28 OdeJoint::convert_to_a_motor 0 1 79 0
56
OdeAMotorJoint OdeJoint::convert_to_a_motor(void) const;

773 18 convert_to_l_motor 0 4 1300 28 OdeJoint::convert_to_l_motor 0 1 80 0
56
OdeLMotorJoint OdeJoint::convert_to_l_motor(void) const;

774 18 convert_to_plane2d 0 4 1300 28 OdeJoint::convert_to_plane2d 0 1 81 0
57
OdePlane2dJoint OdeJoint::convert_to_plane2d(void) const;

775 14 get_class_type 0 4 1300 24 OdeJoint::get_class_type 0 1 82 0
49
static TypeHandle OdeJoint::get_class_type(void);

776 8 OdeJoint 0 4 1300 18 OdeJoint::OdeJoint 0 1 54 0
54
inline OdeJoint::OdeJoint(OdeJoint const &) = default;

777 14 OdeAMotorJoint 0 4 1302 30 OdeAMotorJoint::OdeAMotorJoint 0 3 84 85 86 0
198
OdeAMotorJoint::OdeAMotorJoint(OdeWorld &world);
OdeAMotorJoint::OdeAMotorJoint(OdeWorld &world, OdeJointGroup &joint_group);
inline OdeAMotorJoint::OdeAMotorJoint(OdeAMotorJoint const &) = default;

778 12 set_num_axes 0 4 1302 28 OdeAMotorJoint::set_num_axes 0 1 87 0
50
inline void OdeAMotorJoint::set_num_axes(int num);

779 8 set_axis 0 4 1302 24 OdeAMotorJoint::set_axis 0 2 88 89 0
164
inline void OdeAMotorJoint::set_axis(int anum, int rel, dReal x, dReal y, dReal z);
inline void OdeAMotorJoint::set_axis(int anum, int rel, LVecBase3f const &axis);

780 9 set_angle 0 4 1302 25 OdeAMotorJoint::set_angle 0 1 90 0
61
inline void OdeAMotorJoint::set_angle(int anum, dReal angle);

781 8 set_mode 0 4 1302 24 OdeAMotorJoint::set_mode 0 1 91 0
47
inline void OdeAMotorJoint::set_mode(int mode);

782 11 add_torques 0 4 1302 27 OdeAMotorJoint::add_torques 0 1 92 0
85
inline void OdeAMotorJoint::add_torques(dReal torque1, dReal torque2, dReal torque3);

783 12 get_num_axes 0 4 1302 28 OdeAMotorJoint::get_num_axes 0 1 93 0
52
inline int OdeAMotorJoint::get_num_axes(void) const;

784 8 get_axis 0 4 1302 24 OdeAMotorJoint::get_axis 0 1 94 0
59
inline LVecBase3f OdeAMotorJoint::get_axis(int anum) const;

785 12 get_axis_rel 0 4 1302 28 OdeAMotorJoint::get_axis_rel 0 1 95 0
56
inline int OdeAMotorJoint::get_axis_rel(int anum) const;

786 9 get_angle 0 4 1302 25 OdeAMotorJoint::get_angle 0 1 96 0
55
inline dReal OdeAMotorJoint::get_angle(int anum) const;

787 14 get_angle_rate 0 4 1302 30 OdeAMotorJoint::get_angle_rate 0 1 97 0
60
inline dReal OdeAMotorJoint::get_angle_rate(int anum) const;

788 8 get_mode 0 4 1302 24 OdeAMotorJoint::get_mode 0 1 98 0
48
inline int OdeAMotorJoint::get_mode(void) const;

789 17 set_param_lo_stop 0 4 1302 33 OdeAMotorJoint::set_param_lo_stop 0 1 99 0
67
inline void OdeAMotorJoint::set_param_lo_stop(int axis, dReal val);

790 17 set_param_hi_stop 0 4 1302 33 OdeAMotorJoint::set_param_hi_stop 0 1 100 0
67
inline void OdeAMotorJoint::set_param_hi_stop(int axis, dReal val);

791 13 set_param_vel 0 4 1302 29 OdeAMotorJoint::set_param_vel 0 1 101 0
63
inline void OdeAMotorJoint::set_param_vel(int axis, dReal val);

792 15 set_param_f_max 0 4 1302 31 OdeAMotorJoint::set_param_f_max 0 1 102 0
65
inline void OdeAMotorJoint::set_param_f_max(int axis, dReal val);

793 22 set_param_fudge_factor 0 4 1302 38 OdeAMotorJoint::set_param_fudge_factor 0 1 103 0
72
inline void OdeAMotorJoint::set_param_fudge_factor(int axis, dReal val);

794 16 set_param_bounce 0 4 1302 32 OdeAMotorJoint::set_param_bounce 0 1 104 0
66
inline void OdeAMotorJoint::set_param_bounce(int axis, dReal val);

795 13 set_param_CFM 0 4 1302 29 OdeAMotorJoint::set_param_CFM 0 1 105 0
63
inline void OdeAMotorJoint::set_param_CFM(int axis, dReal val);

796 18 set_param_stop_ERP 0 4 1302 34 OdeAMotorJoint::set_param_stop_ERP 0 1 106 0
68
inline void OdeAMotorJoint::set_param_stop_ERP(int axis, dReal val);

797 18 set_param_stop_CFM 0 4 1302 34 OdeAMotorJoint::set_param_stop_CFM 0 1 107 0
68
inline void OdeAMotorJoint::set_param_stop_CFM(int axis, dReal val);

798 17 get_param_lo_stop 0 4 1302 33 OdeAMotorJoint::get_param_lo_stop 0 1 108 0
63
inline dReal OdeAMotorJoint::get_param_lo_stop(int axis) const;

799 17 get_param_hi_stop 0 4 1302 33 OdeAMotorJoint::get_param_hi_stop 0 1 109 0
63
inline dReal OdeAMotorJoint::get_param_hi_stop(int axis) const;

800 13 get_param_vel 0 4 1302 29 OdeAMotorJoint::get_param_vel 0 1 110 0
59
inline dReal OdeAMotorJoint::get_param_vel(int axis) const;

801 15 get_param_f_max 0 4 1302 31 OdeAMotorJoint::get_param_f_max 0 1 111 0
61
inline dReal OdeAMotorJoint::get_param_f_max(int axis) const;

802 22 get_param_fudge_factor 0 4 1302 38 OdeAMotorJoint::get_param_fudge_factor 0 1 112 0
68
inline dReal OdeAMotorJoint::get_param_fudge_factor(int axis) const;

803 16 get_param_bounce 0 4 1302 32 OdeAMotorJoint::get_param_bounce 0 1 113 0
62
inline dReal OdeAMotorJoint::get_param_bounce(int axis) const;

804 13 get_param_CFM 0 4 1302 29 OdeAMotorJoint::get_param_CFM 0 1 114 0
59
inline dReal OdeAMotorJoint::get_param_CFM(int axis) const;

805 18 get_param_stop_ERP 0 4 1302 34 OdeAMotorJoint::get_param_stop_ERP 0 1 115 0
64
inline dReal OdeAMotorJoint::get_param_stop_ERP(int axis) const;

806 18 get_param_stop_CFM 0 4 1302 34 OdeAMotorJoint::get_param_stop_CFM 0 1 116 0
64
inline dReal OdeAMotorJoint::get_param_stop_CFM(int axis) const;

807 14 get_class_type 0 4 1302 30 OdeAMotorJoint::get_class_type 0 1 117 0
55
static TypeHandle OdeAMotorJoint::get_class_type(void);

808 12 OdeBallJoint 0 4 1303 26 OdeBallJoint::OdeBallJoint 0 3 118 119 120 0
184
OdeBallJoint::OdeBallJoint(OdeWorld &world);
OdeBallJoint::OdeBallJoint(OdeWorld &world, OdeJointGroup &joint_group);
inline OdeBallJoint::OdeBallJoint(OdeBallJoint const &) = default;

809 10 set_anchor 0 4 1303 24 OdeBallJoint::set_anchor 0 2 121 122 0
128
inline void OdeBallJoint::set_anchor(dReal x, dReal y, dReal z);
inline void OdeBallJoint::set_anchor(LVecBase3f const &anchor);

810 11 set_anchor2 0 4 1303 25 OdeBallJoint::set_anchor2 0 2 123 124 0
130
inline void OdeBallJoint::set_anchor2(dReal x, dReal y, dReal z);
inline void OdeBallJoint::set_anchor2(LVecBase3f const &anchor);

811 10 get_anchor 0 4 1303 24 OdeBallJoint::get_anchor 0 1 125 0
55
inline LVecBase3f OdeBallJoint::get_anchor(void) const;

812 11 get_anchor2 0 4 1303 25 OdeBallJoint::get_anchor2 0 1 126 0
56
inline LVecBase3f OdeBallJoint::get_anchor2(void) const;

813 14 get_class_type 0 4 1303 28 OdeBallJoint::get_class_type 0 1 127 0
53
static TypeHandle OdeBallJoint::get_class_type(void);

814 7 OdeMass 0 4 1304 16 OdeMass::OdeMass 0 2 128 129 0
62
OdeMass::OdeMass(void);
OdeMass::OdeMass(OdeMass const &copy);

815 5 check 0 4 1304 14 OdeMass::check 0 1 130 0
32
inline int OdeMass::check(void);

816 8 set_zero 0 4 1304 17 OdeMass::set_zero 0 1 131 0
36
inline void OdeMass::set_zero(void);

817 14 set_parameters 0 4 1304 23 OdeMass::set_parameters 0 2 132 133 0
248
inline void OdeMass::set_parameters(dReal themass, dReal cgx, dReal cgy, dReal cgz, dReal I11, dReal I22, dReal I33, dReal I12, dReal I13, dReal I23);
inline void OdeMass::set_parameters(dReal themass, LVecBase3f const &center, LMatrix3f const &r);

818 10 set_sphere 0 4 1304 19 OdeMass::set_sphere 0 1 134 0
61
inline void OdeMass::set_sphere(dReal density, dReal radius);

819 16 set_sphere_total 0 4 1304 25 OdeMass::set_sphere_total 0 1 135 0
70
inline void OdeMass::set_sphere_total(dReal total_mass, dReal radius);

820 11 set_capsule 0 4 1304 20 OdeMass::set_capsule 0 1 136 0
91
inline void OdeMass::set_capsule(dReal density, int direction, dReal radius, dReal length);

821 17 set_capsule_total 0 4 1304 26 OdeMass::set_capsule_total 0 1 137 0
100
inline void OdeMass::set_capsule_total(dReal total_mass, int direction, dReal radius, dReal length);

822 12 set_cylinder 0 4 1304 21 OdeMass::set_cylinder 0 1 138 0
92
inline void OdeMass::set_cylinder(dReal density, int direction, dReal radius, dReal length);

823 18 set_cylinder_total 0 4 1304 27 OdeMass::set_cylinder_total 0 1 139 0
101
inline void OdeMass::set_cylinder_total(dReal total_mass, int direction, dReal radius, dReal length);

824 7 set_box 0 4 1304 16 OdeMass::set_box 0 2 140 141 0
143
inline void OdeMass::set_box(dReal density, dReal lx, dReal ly, dReal lz);
inline void OdeMass::set_box(dReal density, LVecBase3f const &size);

825 13 set_box_total 0 4 1304 22 OdeMass::set_box_total 0 2 142 143 0
161
inline void OdeMass::set_box_total(dReal total_mass, dReal lx, dReal ly, dReal lz);
inline void OdeMass::set_box_total(dReal total_mass, LVecBase3f const &size);

826 6 adjust 0 4 1304 15 OdeMass::adjust 0 1 144 0
43
inline void OdeMass::adjust(dReal newmass);

827 9 translate 0 4 1304 18 OdeMass::translate 0 2 145 146 0
113
inline void OdeMass::translate(dReal x, dReal y, dReal z);
inline void OdeMass::translate(LVecBase3f const &pos);

828 6 rotate 0 4 1304 15 OdeMass::rotate 0 1 147 0
48
inline void OdeMass::rotate(LMatrix3f const &r);

829 3 add 0 4 1304 12 OdeMass::add 0 1 148 0
41
inline void OdeMass::add(OdeMass &other);

830 13 get_magnitude 0 4 1304 22 OdeMass::get_magnitude 0 1 149 0
48
inline dReal OdeMass::get_magnitude(void) const;

831 10 get_center 0 4 1304 19 OdeMass::get_center 0 1 150 0
48
inline LPoint3f OdeMass::get_center(void) const;

832 19 get_inertial_tensor 0 4 1304 28 OdeMass::get_inertial_tensor 0 1 151 0
58
inline LMatrix3f OdeMass::get_inertial_tensor(void) const;

833 5 write 0 6 1304 14 OdeMass::write 0 1 152 0
82
virtual void OdeMass::write(ostream &out = ::cout, unsigned int indent = 0) const;

834 14 get_class_type 0 4 1304 23 OdeMass::get_class_type 0 1 153 0
48
static TypeHandle OdeMass::get_class_type(void);

835 7 OdeBody 0 4 1306 16 OdeBody::OdeBody 0 2 154 155 0
86
OdeBody::OdeBody(OdeWorld &world);
inline OdeBody::OdeBody(OdeBody const &) = default;

836 7 destroy 0 4 1306 16 OdeBody::destroy 0 1 156 0
28
void OdeBody::destroy(void);

837 8 is_empty 0 4 1306 17 OdeBody::is_empty 0 1 157 201
/**
 * Returns true if the ID is 0, meaning the OdeBody does not point to a valid
 * body.  It is an error to call a method on an empty body.  Note that an
 * empty OdeBody also evaluates to False.
 */
42
inline bool OdeBody::is_empty(void) const;

838 6 get_id 0 4 1306 15 OdeBody::get_id 0 1 158 42
/**
 * Returns the underlying dBodyID.
 */
43
inline dBodyID OdeBody::get_id(void) const;

839 33 set_auto_disable_linear_threshold 0 4 1306 42 OdeBody::set_auto_disable_linear_threshold 0 1 159 0
79
inline void OdeBody::set_auto_disable_linear_threshold(dReal linear_threshold);

840 34 set_auto_disable_angular_threshold 0 4 1306 43 OdeBody::set_auto_disable_angular_threshold 0 1 160 0
81
inline void OdeBody::set_auto_disable_angular_threshold(dReal angular_threshold);

841 22 set_auto_disable_steps 0 4 1306 31 OdeBody::set_auto_disable_steps 0 1 161 0
55
inline void OdeBody::set_auto_disable_steps(int steps);

842 21 set_auto_disable_time 0 4 1306 30 OdeBody::set_auto_disable_time 0 1 162 0
55
inline void OdeBody::set_auto_disable_time(dReal time);

843 21 set_auto_disable_flag 0 4 1306 30 OdeBody::set_auto_disable_flag 0 1 163 0
64
inline void OdeBody::set_auto_disable_flag(int do_auto_disable);

844 25 set_auto_disable_defaults 0 4 1306 34 OdeBody::set_auto_disable_defaults 0 1 164 0
53
inline void OdeBody::set_auto_disable_defaults(void);

845 8 set_data 0 4 1306 17 OdeBody::set_data 0 1 165 0
82
inline void OdeBody::set_data(void *data);
void OdeBody::set_data(PyObject *data);

846 12 set_position 0 4 1306 21 OdeBody::set_position 0 2 166 167 0
119
inline void OdeBody::set_position(dReal x, dReal y, dReal z);
inline void OdeBody::set_position(LVecBase3f const &pos);

847 12 set_rotation 0 4 1306 21 OdeBody::set_rotation 0 1 168 0
54
inline void OdeBody::set_rotation(LMatrix3f const &r);

848 14 set_quaternion 0 4 1306 23 OdeBody::set_quaternion 0 1 169 0
59
inline void OdeBody::set_quaternion(LQuaternionf const &q);

849 14 set_linear_vel 0 4 1306 23 OdeBody::set_linear_vel 0 2 170 171 0
123
inline void OdeBody::set_linear_vel(dReal x, dReal y, dReal z);
inline void OdeBody::set_linear_vel(LVecBase3f const &vel);

850 15 set_angular_vel 0 4 1306 24 OdeBody::set_angular_vel 0 2 172 173 0
125
inline void OdeBody::set_angular_vel(dReal x, dReal y, dReal z);
inline void OdeBody::set_angular_vel(LVecBase3f const &vel);

851 8 set_mass 0 4 1306 17 OdeBody::set_mass 0 1 174 0
45
inline void OdeBody::set_mass(OdeMass &mass);

852 33 get_auto_disable_linear_threshold 0 4 1306 42 OdeBody::get_auto_disable_linear_threshold 0 1 175 0
68
inline dReal OdeBody::get_auto_disable_linear_threshold(void) const;

853 34 get_auto_disable_angular_threshold 0 4 1306 43 OdeBody::get_auto_disable_angular_threshold 0 1 176 0
69
inline dReal OdeBody::get_auto_disable_angular_threshold(void) const;

854 22 get_auto_disable_steps 0 4 1306 31 OdeBody::get_auto_disable_steps 0 1 177 0
55
inline int OdeBody::get_auto_disable_steps(void) const;

855 21 get_auto_disable_time 0 4 1306 30 OdeBody::get_auto_disable_time 0 1 178 0
56
inline dReal OdeBody::get_auto_disable_time(void) const;

856 21 get_auto_disable_flag 0 4 1306 30 OdeBody::get_auto_disable_flag 0 1 179 0
54
inline int OdeBody::get_auto_disable_flag(void) const;

857 8 get_data 0 4 1306 17 OdeBody::get_data 0 1 180 0
40
PyObject *OdeBody::get_data(void) const;

858 12 get_position 0 4 1306 21 OdeBody::get_position 0 1 181 0
52
inline LVecBase3f OdeBody::get_position(void) const;

859 12 get_rotation 0 4 1306 21 OdeBody::get_rotation 0 1 182 0
51
inline LMatrix3f OdeBody::get_rotation(void) const;

860 14 get_quaternion 0 4 1306 23 OdeBody::get_quaternion 0 1 183 0
54
inline LVecBase4f OdeBody::get_quaternion(void) const;

861 14 get_linear_vel 0 4 1306 23 OdeBody::get_linear_vel 0 1 184 0
54
inline LVecBase3f OdeBody::get_linear_vel(void) const;

862 15 get_angular_vel 0 4 1306 24 OdeBody::get_angular_vel 0 1 185 0
55
inline LVecBase3f OdeBody::get_angular_vel(void) const;

863 8 get_mass 0 4 1306 17 OdeBody::get_mass 0 1 186 0
45
inline OdeMass OdeBody::get_mass(void) const;

864 9 add_force 0 4 1306 18 OdeBody::add_force 0 2 187 188 0
114
inline void OdeBody::add_force(dReal fx, dReal fy, dReal fz);
inline void OdeBody::add_force(LVecBase3f const &f);

865 10 add_torque 0 4 1306 19 OdeBody::add_torque 0 2 189 190 0
116
inline void OdeBody::add_torque(dReal fx, dReal fy, dReal fz);
inline void OdeBody::add_torque(LVecBase3f const &f);

866 13 add_rel_force 0 4 1306 22 OdeBody::add_rel_force 0 2 191 192 0
122
inline void OdeBody::add_rel_force(dReal fx, dReal fy, dReal fz);
inline void OdeBody::add_rel_force(LVecBase3f const &f);

867 14 add_rel_torque 0 4 1306 23 OdeBody::add_rel_torque 0 2 193 194 0
124
inline void OdeBody::add_rel_torque(dReal fx, dReal fy, dReal fz);
inline void OdeBody::add_rel_torque(LVecBase3f const &f);

868 16 add_force_at_pos 0 4 1306 25 OdeBody::add_force_at_pos 0 2 195 196 0
181
inline void OdeBody::add_force_at_pos(dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
inline void OdeBody::add_force_at_pos(LVecBase3f const &f, LVecBase3f const &pos);

869 20 add_force_at_rel_pos 0 4 1306 29 OdeBody::add_force_at_rel_pos 0 2 197 198 0
189
inline void OdeBody::add_force_at_rel_pos(dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
inline void OdeBody::add_force_at_rel_pos(LVecBase3f const &f, LVecBase3f const &pos);

870 20 add_rel_force_at_pos 0 4 1306 29 OdeBody::add_rel_force_at_pos 0 2 199 200 0
189
inline void OdeBody::add_rel_force_at_pos(dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
inline void OdeBody::add_rel_force_at_pos(LVecBase3f const &f, LVecBase3f const &pos);

871 24 add_rel_force_at_rel_pos 0 4 1306 33 OdeBody::add_rel_force_at_rel_pos 0 2 201 202 0
197
inline void OdeBody::add_rel_force_at_rel_pos(dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
inline void OdeBody::add_rel_force_at_rel_pos(LVecBase3f const &f, LVecBase3f const &pos);

872 9 set_force 0 4 1306 18 OdeBody::set_force 0 2 203 204 0
111
inline void OdeBody::set_force(dReal x, dReal y, dReal z);
inline void OdeBody::set_force(LVecBase3f const &f);

873 10 set_torque 0 4 1306 19 OdeBody::set_torque 0 2 205 206 0
113
inline void OdeBody::set_torque(dReal x, dReal y, dReal z);
inline void OdeBody::set_torque(LVecBase3f const &f);

874 17 get_rel_point_pos 0 4 1306 26 OdeBody::get_rel_point_pos 0 2 207 208 0
152
inline LPoint3f OdeBody::get_rel_point_pos(dReal px, dReal py, dReal pz) const;
inline LPoint3f OdeBody::get_rel_point_pos(LVecBase3f const &pos) const;

875 17 get_rel_point_vel 0 4 1306 26 OdeBody::get_rel_point_vel 0 2 209 210 0
152
inline LPoint3f OdeBody::get_rel_point_vel(dReal px, dReal py, dReal pz) const;
inline LPoint3f OdeBody::get_rel_point_vel(LVecBase3f const &pos) const;

876 13 get_point_vel 0 4 1306 22 OdeBody::get_point_vel 0 2 211 212 0
144
inline LPoint3f OdeBody::get_point_vel(dReal px, dReal py, dReal pz) const;
inline LPoint3f OdeBody::get_point_vel(LVecBase3f const &pos) const;

877 17 get_pos_rel_point 0 4 1306 26 OdeBody::get_pos_rel_point 0 2 213 214 0
152
inline LPoint3f OdeBody::get_pos_rel_point(dReal px, dReal py, dReal pz) const;
inline LPoint3f OdeBody::get_pos_rel_point(LVecBase3f const &pos) const;

878 15 vector_to_world 0 4 1306 24 OdeBody::vector_to_world 0 2 215 216 0
152
inline LVecBase3f OdeBody::vector_to_world(dReal px, dReal py, dReal pz) const;
inline LVecBase3f OdeBody::vector_to_world(LVecBase3f const &pos) const;

879 17 vector_from_world 0 4 1306 26 OdeBody::vector_from_world 0 2 217 218 0
156
inline LVecBase3f OdeBody::vector_from_world(dReal px, dReal py, dReal pz) const;
inline LVecBase3f OdeBody::vector_from_world(LVecBase3f const &pos) const;

880 24 set_finite_rotation_mode 0 4 1306 33 OdeBody::set_finite_rotation_mode 0 1 219 0
56
inline void OdeBody::set_finite_rotation_mode(int mode);

881 24 set_finite_rotation_axis 0 4 1306 33 OdeBody::set_finite_rotation_axis 0 2 220 221 0
144
inline void OdeBody::set_finite_rotation_axis(dReal x, dReal y, dReal z);
inline void OdeBody::set_finite_rotation_axis(LVecBase3f const &axis);

882 24 get_finite_rotation_mode 0 4 1306 33 OdeBody::get_finite_rotation_mode 0 1 222 0
57
inline int OdeBody::get_finite_rotation_mode(void) const;

883 24 get_finite_rotation_axis 0 4 1306 33 OdeBody::get_finite_rotation_axis 0 1 223 0
64
inline LVecBase3f OdeBody::get_finite_rotation_axis(void) const;

884 14 get_num_joints 0 4 1306 23 OdeBody::get_num_joints 0 1 224 0
47
inline int OdeBody::get_num_joints(void) const;

885 9 get_joint 0 4 1306 18 OdeBody::get_joint 0 1 225 0
45
OdeJoint OdeBody::get_joint(int index) const;

886 19 get_converted_joint 0 4 1306 28 OdeBody::get_converted_joint 0 1 226 0
59
inline PyObject *OdeBody::get_converted_joint(int i) const;

887 6 enable 0 4 1306 15 OdeBody::enable 0 1 227 0
34
inline void OdeBody::enable(void);

888 7 disable 0 4 1306 16 OdeBody::disable 0 1 228 0
35
inline void OdeBody::disable(void);

889 10 is_enabled 0 4 1306 19 OdeBody::is_enabled 0 1 229 0
43
inline int OdeBody::is_enabled(void) const;

890 16 set_gravity_mode 0 4 1306 25 OdeBody::set_gravity_mode 0 1 230 0
48
inline void OdeBody::set_gravity_mode(int mode);

891 16 get_gravity_mode 0 4 1306 25 OdeBody::get_gravity_mode 0 1 231 0
49
inline int OdeBody::get_gravity_mode(void) const;

892 5 write 0 6 1306 14 OdeBody::write 0 1 232 0
82
virtual void OdeBody::write(ostream &out = ::cout, unsigned int indent = 0) const;

893 22 operator typecast bool 0 132 1306 31 OdeBody::operator typecast bool 0 1 235 0
49
bool OdeBody::operator typecast bool(void) const;

894 10 compare_to 0 4 1306 19 OdeBody::compare_to 0 1 233 0
59
inline int OdeBody::compare_to(OdeBody const &other) const;

895 14 get_class_type 0 4 1306 23 OdeBody::get_class_type 0 1 234 0
48
static TypeHandle OdeBody::get_class_type(void);

896 7 destroy 0 4 1307 17 OdeSpace::destroy 0 1 237 0
29
void OdeSpace::destroy(void);

897 8 is_empty 0 4 1307 18 OdeSpace::is_empty 0 1 238 205
/**
 * Returns true if the ID is 0, meaning the OdeSpace does not point to a valid
 * space.  It is an error to call a method on an empty space.  Note that an
 * empty OdeSpace also evaluates to False.
 */
43
inline bool OdeSpace::is_empty(void) const;

898 11 set_cleanup 0 4 1307 21 OdeSpace::set_cleanup 0 1 239 0
44
inline void OdeSpace::set_cleanup(int mode);

899 11 get_cleanup 0 4 1307 21 OdeSpace::get_cleanup 0 1 240 0
45
inline int OdeSpace::get_cleanup(void) const;

900 5 query 0 4 1307 15 OdeSpace::query 0 2 241 242 0
97
int OdeSpace::query(OdeGeom const &geom) const;
int OdeSpace::query(OdeSpace const &space) const;

901 13 get_num_geoms 0 4 1307 23 OdeSpace::get_num_geoms 0 1 243 0
47
inline int OdeSpace::get_num_geoms(void) const;

902 8 get_AABB 0 4 1307 18 OdeSpace::get_AABB 0 1 244 0
71
inline void OdeSpace::get_AABB(LVecBase3f &min, LVecBase3f &max) const;

903 13 get_AA_bounds 0 4 1307 23 OdeSpace::get_AA_bounds 0 1 245 0
53
inline PyObject *OdeSpace::get_AA_bounds(void) const;

904 8 is_space 0 4 1307 18 OdeSpace::is_space 0 1 246 0
36
inline int OdeSpace::is_space(void);

905 9 get_class 0 4 1307 19 OdeSpace::get_class 0 1 247 0
43
inline int OdeSpace::get_class(void) const;

906 17 set_category_bits 0 4 1307 27 OdeSpace::set_category_bits 0 1 248 0
63
inline void OdeSpace::set_category_bits(BitMask32 const &bits);

907 16 set_collide_bits 0 4 1307 26 OdeSpace::set_collide_bits 0 1 249 0
62
inline void OdeSpace::set_collide_bits(BitMask32 const &bits);

908 17 get_category_bits 0 4 1307 27 OdeSpace::get_category_bits 0 1 250 0
51
inline BitMask32 OdeSpace::get_category_bits(void);

909 16 get_collide_bits 0 4 1307 26 OdeSpace::get_collide_bits 0 1 251 0
50
inline BitMask32 OdeSpace::get_collide_bits(void);

910 6 enable 0 4 1307 16 OdeSpace::enable 0 1 252 0
35
inline void OdeSpace::enable(void);

911 7 disable 0 4 1307 17 OdeSpace::disable 0 1 253 0
36
inline void OdeSpace::disable(void);

912 10 is_enabled 0 4 1307 20 OdeSpace::is_enabled 0 1 254 0
38
inline int OdeSpace::is_enabled(void);

913 22 set_auto_collide_world 0 4 1307 32 OdeSpace::set_auto_collide_world 0 1 255 0
50
void OdeSpace::set_auto_collide_world(OdeWorld &);

914 28 set_auto_collide_joint_group 0 4 1307 38 OdeSpace::set_auto_collide_joint_group 0 1 256 0
61
void OdeSpace::set_auto_collide_joint_group(OdeJointGroup &);

915 3 add 0 4 1307 13 OdeSpace::add 0 2 257 258 0
71
void OdeSpace::add(OdeGeom &geom);
void OdeSpace::add(OdeSpace &space);

916 6 remove 0 4 1307 16 OdeSpace::remove 0 2 259 260 0
77
void OdeSpace::remove(OdeGeom &geom);
void OdeSpace::remove(OdeSpace &space);

917 5 clean 0 4 1307 15 OdeSpace::clean 0 1 261 0
27
void OdeSpace::clean(void);

918 8 get_geom 0 4 1307 18 OdeSpace::get_geom 0 1 262 0
34
OdeGeom OdeSpace::get_geom(int i);

919 9 get_space 0 4 1307 19 OdeSpace::get_space 0 1 263 0
48
inline OdeSpace OdeSpace::get_space(void) const;

920 5 write 0 6 1307 15 OdeSpace::write 0 1 264 0
83
virtual void OdeSpace::write(ostream &out = ::cout, unsigned int indent = 0) const;

921 22 operator typecast bool 0 132 1307 32 OdeSpace::operator typecast bool 0 1 284 0
50
bool OdeSpace::operator typecast bool(void) const;

922 23 convert_to_simple_space 0 4 1307 33 OdeSpace::convert_to_simple_space 0 1 265 0
61
OdeSimpleSpace OdeSpace::convert_to_simple_space(void) const;

923 21 convert_to_hash_space 0 4 1307 31 OdeSpace::convert_to_hash_space 0 1 266 0
57
OdeHashSpace OdeSpace::convert_to_hash_space(void) const;

924 26 convert_to_quad_tree_space 0 4 1307 36 OdeSpace::convert_to_quad_tree_space 0 1 267 0
66
OdeQuadTreeSpace OdeSpace::convert_to_quad_tree_space(void) const;

925 7 convert 0 4 1307 17 OdeSpace::convert 0 1 268 0
40
PyObject *OdeSpace::convert(void) const;

926 18 get_converted_geom 0 4 1307 28 OdeSpace::get_converted_geom 0 1 269 0
59
inline PyObject *OdeSpace::get_converted_geom(int i) const;

927 19 get_converted_space 0 4 1307 29 OdeSpace::get_converted_space 0 1 270 0
59
inline PyObject *OdeSpace::get_converted_space(void) const;

928 12 auto_collide 0 4 1307 22 OdeSpace::auto_collide 0 1 271 0
34
void OdeSpace::auto_collide(void);

929 7 collide 0 4 1307 17 OdeSpace::collide 0 1 272 0
62
int OdeSpace::collide(PyObject *arg, PyObject *near_callback);

930 14 set_collide_id 0 4 1307 24 OdeSpace::set_collide_id 0 2 273 274 0
118
int OdeSpace::set_collide_id(int collide_id, dGeomID id);
int OdeSpace::set_collide_id(OdeGeom &geom, int collide_id);

931 16 set_surface_type 0 4 1307 26 OdeSpace::set_surface_type 0 2 275 276 0
128
void OdeSpace::set_surface_type(int surface_type, dGeomID id);
void OdeSpace::set_surface_type(OdeGeom &geom, int surface_type);

932 16 get_surface_type 0 4 1307 26 OdeSpace::get_surface_type 0 2 277 278 0
90
int OdeSpace::get_surface_type(dGeomID o1);
int OdeSpace::get_surface_type(OdeGeom &geom);

933 14 get_collide_id 0 4 1307 24 OdeSpace::get_collide_id 0 2 279 280 0
86
int OdeSpace::get_collide_id(dGeomID o1);
int OdeSpace::get_collide_id(OdeGeom &geom);

934 19 set_collision_event 0 4 1307 29 OdeSpace::set_collision_event 0 1 281 0
73
inline void OdeSpace::set_collision_event(std::string const &event_name);

935 19 get_collision_event 0 4 1307 29 OdeSpace::get_collision_event 0 1 282 0
55
inline std::string OdeSpace::get_collision_event(void);

936 14 get_class_type 0 4 1307 24 OdeSpace::get_class_type 0 1 283 0
49
static TypeHandle OdeSpace::get_class_type(void);

937 8 OdeSpace 0 4 1307 18 OdeSpace::OdeSpace 0 1 236 0
54
inline OdeSpace::OdeSpace(OdeSpace const &) = default;

938 7 destroy 0 4 1308 16 OdeGeom::destroy 0 1 286 0
28
void OdeGeom::destroy(void);

939 8 is_empty 0 4 1308 17 OdeGeom::is_empty 0 1 287 201
/**
 * Returns true if the ID is 0, meaning the OdeGeom does not point to a valid
 * geom.  It is an error to call a method on an empty geom.  Note that an
 * empty OdeGeom also evaluates to False.
 */
42
inline bool OdeGeom::is_empty(void) const;

940 6 get_id 0 4 1308 15 OdeGeom::get_id 0 1 288 42
/**
 * Returns the underlying dGeomID.
 */
43
inline dGeomID OdeGeom::get_id(void) const;

941 8 set_body 0 4 1308 17 OdeGeom::set_body 0 1 289 36
// INLINE void set_data(void* data);
45
inline void OdeGeom::set_body(OdeBody &body);

942 8 has_body 0 4 1308 17 OdeGeom::has_body 0 1 290 0
42
inline bool OdeGeom::has_body(void) const;

943 8 get_body 0 4 1308 17 OdeGeom::get_body 0 1 291 0
45
inline OdeBody OdeGeom::get_body(void) const;

944 12 set_position 0 4 1308 21 OdeGeom::set_position 0 2 292 293 0
119
inline void OdeGeom::set_position(dReal x, dReal y, dReal z);
inline void OdeGeom::set_position(LVecBase3f const &pos);

945 12 set_rotation 0 4 1308 21 OdeGeom::set_rotation 0 1 294 0
54
inline void OdeGeom::set_rotation(LMatrix3f const &r);

946 14 set_quaternion 0 4 1308 23 OdeGeom::set_quaternion 0 1 295 0
59
inline void OdeGeom::set_quaternion(LQuaternionf const &q);

947 12 get_position 0 4 1308 21 OdeGeom::get_position 0 1 296 0
50
inline LPoint3f OdeGeom::get_position(void) const;

948 12 get_rotation 0 4 1308 21 OdeGeom::get_rotation 0 1 297 0
51
inline LMatrix3f OdeGeom::get_rotation(void) const;

949 14 get_quaternion 0 4 1308 23 OdeGeom::get_quaternion 0 1 298 0
56
inline LQuaternionf OdeGeom::get_quaternion(void) const;

950 8 get_AABB 0 4 1308 17 OdeGeom::get_AABB 0 1 299 0
70
inline void OdeGeom::get_AABB(LVecBase3f &min, LVecBase3f &max) const;

951 13 get_AA_bounds 0 4 1308 22 OdeGeom::get_AA_bounds 0 1 300 0
52
inline PyObject *OdeGeom::get_AA_bounds(void) const;

952 8 is_space 0 4 1308 17 OdeGeom::is_space 0 1 301 0
35
inline int OdeGeom::is_space(void);

953 9 get_class 0 4 1308 18 OdeGeom::get_class 0 1 302 0
42
inline int OdeGeom::get_class(void) const;

954 17 set_category_bits 0 4 1308 26 OdeGeom::set_category_bits 0 1 303 0
62
inline void OdeGeom::set_category_bits(BitMask32 const &bits);

955 16 set_collide_bits 0 4 1308 25 OdeGeom::set_collide_bits 0 1 304 0
61
inline void OdeGeom::set_collide_bits(BitMask32 const &bits);

956 17 get_category_bits 0 4 1308 26 OdeGeom::get_category_bits 0 1 305 0
50
inline BitMask32 OdeGeom::get_category_bits(void);

957 16 get_collide_bits 0 4 1308 25 OdeGeom::get_collide_bits 0 1 306 0
49
inline BitMask32 OdeGeom::get_collide_bits(void);

958 6 enable 0 4 1308 15 OdeGeom::enable 0 1 307 0
34
inline void OdeGeom::enable(void);

959 7 disable 0 4 1308 16 OdeGeom::disable 0 1 308 0
35
inline void OdeGeom::disable(void);

960 10 is_enabled 0 4 1308 19 OdeGeom::is_enabled 0 1 309 0
37
inline int OdeGeom::is_enabled(void);

961 19 set_offset_position 0 4 1308 28 OdeGeom::set_offset_position 0 2 310 311 0
133
inline void OdeGeom::set_offset_position(dReal x, dReal y, dReal z);
inline void OdeGeom::set_offset_position(LVecBase3f const &pos);

962 19 set_offset_rotation 0 4 1308 28 OdeGeom::set_offset_rotation 0 1 312 0
61
inline void OdeGeom::set_offset_rotation(LMatrix3f const &r);

963 21 set_offset_quaternion 0 4 1308 30 OdeGeom::set_offset_quaternion 0 1 313 0
66
inline void OdeGeom::set_offset_quaternion(LQuaternionf const &q);

964 25 set_offset_world_position 0 4 1308 34 OdeGeom::set_offset_world_position 0 2 314 315 0
145
inline void OdeGeom::set_offset_world_position(dReal x, dReal y, dReal z);
inline void OdeGeom::set_offset_world_position(LVecBase3f const &pos);

965 25 set_offset_world_rotation 0 4 1308 34 OdeGeom::set_offset_world_rotation 0 1 316 0
67
inline void OdeGeom::set_offset_world_rotation(LMatrix3f const &r);

966 27 set_offset_world_quaternion 0 4 1308 36 OdeGeom::set_offset_world_quaternion 0 1 317 0
72
inline void OdeGeom::set_offset_world_quaternion(LQuaternionf const &q);

967 12 clear_offset 0 4 1308 21 OdeGeom::clear_offset 0 1 318 0
40
inline void OdeGeom::clear_offset(void);

968 9 is_offset 0 4 1308 18 OdeGeom::is_offset 0 1 319 0
36
inline int OdeGeom::is_offset(void);

969 19 get_offset_position 0 4 1308 28 OdeGeom::get_offset_position 0 1 320 0
57
inline LPoint3f OdeGeom::get_offset_position(void) const;

970 19 get_offset_rotation 0 4 1308 28 OdeGeom::get_offset_rotation 0 1 321 0
58
inline LMatrix3f OdeGeom::get_offset_rotation(void) const;

971 21 get_offset_quaternion 0 4 1308 30 OdeGeom::get_offset_quaternion 0 1 322 0
63
inline LQuaternionf OdeGeom::get_offset_quaternion(void) const;

972 9 get_space 0 4 1308 18 OdeGeom::get_space 0 1 323 0
40
OdeSpace OdeGeom::get_space(void) const;

973 19 get_converted_space 0 4 1308 28 OdeGeom::get_converted_space 0 1 324 0
58
inline PyObject *OdeGeom::get_converted_space(void) const;

974 5 write 0 6 1308 14 OdeGeom::write 0 1 325 0
82
virtual void OdeGeom::write(ostream &out = ::cout, unsigned int indent = 0) const;

975 22 operator typecast bool 0 132 1308 31 OdeGeom::operator typecast bool 0 1 339 0
49
bool OdeGeom::operator typecast bool(void) const;

976 10 compare_to 0 4 1308 19 OdeGeom::compare_to 0 1 326 0
59
inline int OdeGeom::compare_to(OdeGeom const &other) const;

977 7 convert 0 4 1308 16 OdeGeom::convert 0 1 327 0
39
PyObject *OdeGeom::convert(void) const;

978 14 convert_to_box 0 4 1308 23 OdeGeom::convert_to_box 0 1 328 0
47
OdeBoxGeom OdeGeom::convert_to_box(void) const;

979 26 convert_to_capped_cylinder 0 4 1308 35 OdeGeom::convert_to_capped_cylinder 0 1 329 0
70
OdeCappedCylinderGeom OdeGeom::convert_to_capped_cylinder(void) const;

980 19 convert_to_cylinder 0 4 1308 28 OdeGeom::convert_to_cylinder 0 1 330 43
// OdeConvexGeom convert_to_convex() const;
57
OdeCylinderGeom OdeGeom::convert_to_cylinder(void) const;

981 16 convert_to_plane 0 4 1308 25 OdeGeom::convert_to_plane 0 1 331 53
// OdeHeightfieldGeom convert_to_heightfield() const;
51
OdePlaneGeom OdeGeom::convert_to_plane(void) const;

982 14 convert_to_ray 0 4 1308 23 OdeGeom::convert_to_ray 0 1 332 0
47
OdeRayGeom OdeGeom::convert_to_ray(void) const;

983 17 convert_to_sphere 0 4 1308 26 OdeGeom::convert_to_sphere 0 1 333 0
53
OdeSphereGeom OdeGeom::convert_to_sphere(void) const;

984 19 convert_to_tri_mesh 0 4 1308 28 OdeGeom::convert_to_tri_mesh 0 1 334 0
56
OdeTriMeshGeom OdeGeom::convert_to_tri_mesh(void) const;

985 23 convert_to_simple_space 0 4 1308 32 OdeGeom::convert_to_simple_space 0 1 335 0
60
OdeSimpleSpace OdeGeom::convert_to_simple_space(void) const;

986 21 convert_to_hash_space 0 4 1308 30 OdeGeom::convert_to_hash_space 0 1 336 0
56
OdeHashSpace OdeGeom::convert_to_hash_space(void) const;

987 26 convert_to_quad_tree_space 0 4 1308 35 OdeGeom::convert_to_quad_tree_space 0 1 337 0
65
OdeQuadTreeSpace OdeGeom::convert_to_quad_tree_space(void) const;

988 14 get_class_type 0 4 1308 23 OdeGeom::get_class_type 0 1 338 0
48
static TypeHandle OdeGeom::get_class_type(void);

989 7 OdeGeom 0 4 1308 16 OdeGeom::OdeGeom 0 1 285 0
51
inline OdeGeom::OdeGeom(OdeGeom const &) = default;

990 10 OdeBoxGeom 0 4 1310 22 OdeBoxGeom::OdeBoxGeom 0 4 340 341 342 343 0
250
OdeBoxGeom::OdeBoxGeom(dReal lx, dReal ly, dReal lz);
OdeBoxGeom::OdeBoxGeom(OdeSpace &space, dReal lx, dReal ly, dReal lz);
OdeBoxGeom::OdeBoxGeom(OdeSpace &space, LVecBase3f const &size);
inline OdeBoxGeom::OdeBoxGeom(OdeBoxGeom const &) = default;

991 11 set_lengths 0 4 1310 23 OdeBoxGeom::set_lengths 0 2 344 345 0
127
inline void OdeBoxGeom::set_lengths(dReal lx, dReal ly, dReal lz);
inline void OdeBoxGeom::set_lengths(LVecBase3f const &size);

992 11 get_lengths 0 4 1310 23 OdeBoxGeom::get_lengths 0 1 346 0
48
inline LVecBase3f OdeBoxGeom::get_lengths(void);

993 15 get_point_depth 0 4 1310 27 OdeBoxGeom::get_point_depth 0 2 347 348 0
129
inline dReal OdeBoxGeom::get_point_depth(dReal x, dReal y, dReal z);
inline dReal OdeBoxGeom::get_point_depth(LPoint3f const &p);

994 14 get_class_type 0 4 1310 26 OdeBoxGeom::get_class_type 0 1 349 0
51
static TypeHandle OdeBoxGeom::get_class_type(void);

995 21 OdeCappedCylinderGeom 0 4 1311 44 OdeCappedCylinderGeom::OdeCappedCylinderGeom 0 3 350 351 352 0
258
OdeCappedCylinderGeom::OdeCappedCylinderGeom(dReal radius, dReal length);
OdeCappedCylinderGeom::OdeCappedCylinderGeom(OdeSpace &space, dReal radius, dReal length);
inline OdeCappedCylinderGeom::OdeCappedCylinderGeom(OdeCappedCylinderGeom const &) = default;

996 10 set_params 0 4 1311 33 OdeCappedCylinderGeom::set_params 0 1 353 0
74
inline void OdeCappedCylinderGeom::set_params(dReal radius, dReal length);

997 10 get_params 0 4 1311 33 OdeCappedCylinderGeom::get_params 0 0 0
82
inline void OdeCappedCylinderGeom::get_params(dReal *radius, dReal *length) const;

998 10 get_radius 0 4 1311 33 OdeCappedCylinderGeom::get_radius 0 1 354 0
59
inline dReal OdeCappedCylinderGeom::get_radius(void) const;

999 10 get_length 0 4 1311 33 OdeCappedCylinderGeom::get_length 0 1 355 0
59
inline dReal OdeCappedCylinderGeom::get_length(void) const;

1000 15 get_point_depth 0 4 1311 38 OdeCappedCylinderGeom::get_point_depth 0 2 356 357 0
163
inline dReal OdeCappedCylinderGeom::get_point_depth(dReal x, dReal y, dReal z) const;
inline dReal OdeCappedCylinderGeom::get_point_depth(LPoint3f const &p) const;

1001 14 get_class_type 0 4 1311 37 OdeCappedCylinderGeom::get_class_type 0 1 358 0
62
static TypeHandle OdeCappedCylinderGeom::get_class_type(void);

1002 14 OdeContactGeom 0 4 1312 30 OdeContactGeom::OdeContactGeom 0 2 359 360 0
97
OdeContactGeom::OdeContactGeom(void);
OdeContactGeom::OdeContactGeom(OdeContactGeom const &copy);

1003 7 get_pos 0 4 1312 23 OdeContactGeom::get_pos 0 1 361 0
54
inline LVecBase3f OdeContactGeom::get_pos(void) const;

1004 10 get_normal 0 4 1312 26 OdeContactGeom::get_normal 0 1 362 0
57
inline LVecBase3f OdeContactGeom::get_normal(void) const;

1005 9 get_depth 0 4 1312 25 OdeContactGeom::get_depth 0 1 363 0
51
inline dReal OdeContactGeom::get_depth(void) const;

1006 6 get_g1 0 4 1312 22 OdeContactGeom::get_g1 0 1 364 0
50
inline OdeGeom OdeContactGeom::get_g1(void) const;

1007 6 get_g2 0 4 1312 22 OdeContactGeom::get_g2 0 1 365 0
50
inline OdeGeom OdeContactGeom::get_g2(void) const;

1008 9 get_side1 0 4 1312 25 OdeContactGeom::get_side1 0 1 366 0
49
inline int OdeContactGeom::get_side1(void) const;

1009 9 get_side2 0 4 1312 25 OdeContactGeom::get_side2 0 1 367 0
49
inline int OdeContactGeom::get_side2(void) const;

1010 7 set_pos 0 4 1312 23 OdeContactGeom::set_pos 0 1 368 0
59
inline void OdeContactGeom::set_pos(LVecBase3f const &pos);

1011 10 set_normal 0 4 1312 26 OdeContactGeom::set_normal 0 1 369 0
65
inline void OdeContactGeom::set_normal(LVecBase3f const &normal);

1012 9 set_depth 0 4 1312 25 OdeContactGeom::set_depth 0 1 370 0
57
inline void OdeContactGeom::set_depth(dReal const depth);

1013 6 set_g1 0 4 1312 22 OdeContactGeom::set_g1 0 1 371 0
56
inline void OdeContactGeom::set_g1(OdeGeom const &geom);

1014 6 set_g2 0 4 1312 22 OdeContactGeom::set_g2 0 1 372 0
56
inline void OdeContactGeom::set_g2(OdeGeom const &geom);

1015 14 get_class_type 0 4 1312 30 OdeContactGeom::get_class_type 0 1 373 0
55
static TypeHandle OdeContactGeom::get_class_type(void);

1016 9 get_geom1 0 4 1313 28 OdeCollisionEntry::get_geom1 0 1 375 51
/**
 * Returns the first geom in the collision.
 */
56
inline OdeGeom OdeCollisionEntry::get_geom1(void) const;

1017 9 get_geom2 0 4 1313 28 OdeCollisionEntry::get_geom2 0 1 376 52
/**
 * Returns the second geom in the collision.
 */
56
inline OdeGeom OdeCollisionEntry::get_geom2(void) const;

1018 9 get_body1 0 4 1313 28 OdeCollisionEntry::get_body1 0 1 377 51
/**
 * Returns the first body in the collision.
 */
56
inline OdeBody OdeCollisionEntry::get_body1(void) const;

1019 9 get_body2 0 4 1313 28 OdeCollisionEntry::get_body2 0 1 378 52
/**
 * Returns the second body in the collision.
 */
56
inline OdeBody OdeCollisionEntry::get_body2(void) const;

1020 16 get_num_contacts 0 4 1313 35 OdeCollisionEntry::get_num_contacts 0 1 379 59
/**
 * Returns the number of contacts in the collision.
 */
67
inline std::size_t OdeCollisionEntry::get_num_contacts(void) const;

1021 17 get_contact_point 0 4 1313 36 OdeCollisionEntry::get_contact_point 0 1 380 123
/**
 * Returns the nth contact point in the collision.  This does exactly the same
 * as get_contact_geom(n).get_pos().
 */
74
inline LPoint3f OdeCollisionEntry::get_contact_point(std::size_t n) const;

1022 16 get_contact_geom 0 4 1313 35 OdeCollisionEntry::get_contact_geom 0 1 381 57
/**
 * Returns the nth contact geom in the collision.
 */
79
inline OdeContactGeom OdeCollisionEntry::get_contact_geom(std::size_t n) const;

1023 11 operator [] 0 4 1313 30 OdeCollisionEntry::operator [] 0 1 382 0
74
inline OdeContactGeom OdeCollisionEntry::operator [](std::size_t n) const;

1024 22 operator typecast bool 0 132 1313 41 OdeCollisionEntry::operator typecast bool 0 1 385 0
66
inline bool OdeCollisionEntry::operator typecast bool(void) const;

1025 8 is_empty 0 4 1313 27 OdeCollisionEntry::is_empty 0 1 383 55
/**
 * Returns true if the entry holds no contacts.
 */
52
inline bool OdeCollisionEntry::is_empty(void) const;

1026 14 get_class_type 0 4 1313 33 OdeCollisionEntry::get_class_type 0 1 384 0
58
static TypeHandle OdeCollisionEntry::get_class_type(void);

1027 17 OdeCollisionEntry 0 4 1313 36 OdeCollisionEntry::OdeCollisionEntry 0 1 374 10
/**
 *
 */
81
inline OdeCollisionEntry::OdeCollisionEntry(OdeCollisionEntry const &) = default;

1028 20 OdeSurfaceParameters 0 4 1314 42 OdeSurfaceParameters::OdeSurfaceParameters 0 1 386 0
71
OdeSurfaceParameters::OdeSurfaceParameters(int mode = 0, dReal mu = 0);

1029 8 set_mode 0 4 1314 30 OdeSurfaceParameters::set_mode 0 1 387 0
53
inline void OdeSurfaceParameters::set_mode(int mode);

1030 6 set_mu 0 4 1314 28 OdeSurfaceParameters::set_mu 0 1 388 0
51
inline void OdeSurfaceParameters::set_mu(dReal mu);

1031 7 set_mu2 0 4 1314 29 OdeSurfaceParameters::set_mu2 0 1 389 0
53
inline void OdeSurfaceParameters::set_mu2(dReal mu2);

1032 10 set_bounce 0 4 1314 32 OdeSurfaceParameters::set_bounce 0 1 390 0
59
inline void OdeSurfaceParameters::set_bounce(dReal bounce);

1033 14 set_bounce_vel 0 4 1314 36 OdeSurfaceParameters::set_bounce_vel 0 1 391 0
67
inline void OdeSurfaceParameters::set_bounce_vel(dReal bounce_vel);

1034 12 set_soft_erp 0 4 1314 34 OdeSurfaceParameters::set_soft_erp 0 1 392 0
63
inline void OdeSurfaceParameters::set_soft_erp(dReal soft_erp);

1035 12 set_soft_cfm 0 4 1314 34 OdeSurfaceParameters::set_soft_cfm 0 1 393 0
63
inline void OdeSurfaceParameters::set_soft_cfm(dReal soft_cfm);

1036 11 set_motion1 0 4 1314 33 OdeSurfaceParameters::set_motion1 0 1 394 0
60
inline void OdeSurfaceParameters::set_motion1(dReal motion);

1037 11 set_motion2 0 4 1314 33 OdeSurfaceParameters::set_motion2 0 1 395 0
60
inline void OdeSurfaceParameters::set_motion2(dReal motion);

1038 9 set_slip1 0 4 1314 31 OdeSurfaceParameters::set_slip1 0 1 396 0
56
inline void OdeSurfaceParameters::set_slip1(dReal slip);

1039 9 set_slip2 0 4 1314 31 OdeSurfaceParameters::set_slip2 0 1 397 0
56
inline void OdeSurfaceParameters::set_slip2(dReal slip);

1040 8 get_mode 0 4 1314 30 OdeSurfaceParameters::get_mode 0 1 398 0
54
inline int OdeSurfaceParameters::get_mode(void) const;

1041 6 get_mu 0 4 1314 28 OdeSurfaceParameters::get_mu 0 1 399 0
54
inline dReal OdeSurfaceParameters::get_mu(void) const;

1042 7 get_mu2 0 4 1314 29 OdeSurfaceParameters::get_mu2 0 1 400 0
55
inline dReal OdeSurfaceParameters::get_mu2(void) const;

1043 10 get_bounce 0 4 1314 32 OdeSurfaceParameters::get_bounce 0 1 401 0
58
inline dReal OdeSurfaceParameters::get_bounce(void) const;

1044 14 get_bounce_vel 0 4 1314 36 OdeSurfaceParameters::get_bounce_vel 0 1 402 0
62
inline dReal OdeSurfaceParameters::get_bounce_vel(void) const;

1045 12 get_soft_erp 0 4 1314 34 OdeSurfaceParameters::get_soft_erp 0 1 403 0
60
inline dReal OdeSurfaceParameters::get_soft_erp(void) const;

1046 12 get_soft_cfm 0 4 1314 34 OdeSurfaceParameters::get_soft_cfm 0 1 404 0
60
inline dReal OdeSurfaceParameters::get_soft_cfm(void) const;

1047 11 get_motion1 0 4 1314 33 OdeSurfaceParameters::get_motion1 0 1 405 0
59
inline dReal OdeSurfaceParameters::get_motion1(void) const;

1048 11 get_motion2 0 4 1314 33 OdeSurfaceParameters::get_motion2 0 1 406 0
59
inline dReal OdeSurfaceParameters::get_motion2(void) const;

1049 9 get_slip1 0 4 1314 31 OdeSurfaceParameters::get_slip1 0 1 407 0
57
inline dReal OdeSurfaceParameters::get_slip1(void) const;

1050 9 get_slip2 0 4 1314 31 OdeSurfaceParameters::get_slip2 0 1 408 0
57
inline dReal OdeSurfaceParameters::get_slip2(void) const;

1051 14 get_class_type 0 4 1314 36 OdeSurfaceParameters::get_class_type 0 1 409 0
61
static TypeHandle OdeSurfaceParameters::get_class_type(void);

1052 10 OdeContact 0 4 1316 22 OdeContact::OdeContact 0 2 410 411 38
// OdeContact(const OdeContact &copy);
78
OdeContact::OdeContact(void);
OdeContact::OdeContact(dContact const &contact);

1053 11 get_surface 0 4 1316 23 OdeContact::get_surface 0 1 412 0
64
inline OdeSurfaceParameters OdeContact::get_surface(void) const;

1054 8 get_geom 0 4 1316 20 OdeContact::get_geom 0 1 413 0
49
inline OdeContactGeom OdeContact::get_geom(void);

1055 9 get_fdir1 0 4 1316 21 OdeContact::get_fdir1 0 1 414 0
52
inline LVecBase3f OdeContact::get_fdir1(void) const;

1056 11 set_surface 0 4 1316 23 OdeContact::set_surface 0 1 415 0
84
inline void OdeContact::set_surface(OdeSurfaceParameters const &surface_parameters);

1057 8 set_geom 0 4 1316 20 OdeContact::set_geom 0 1 416 0
69
inline void OdeContact::set_geom(OdeContactGeom const &contact_geom);

1058 9 set_fdir1 0 4 1316 21 OdeContact::set_fdir1 0 1 417 0
59
inline void OdeContact::set_fdir1(LVecBase3f const &fdir1);

1059 14 get_class_type 0 4 1316 26 OdeContact::get_class_type 0 1 418 0
51
static TypeHandle OdeContact::get_class_type(void);

1060 15 OdeContactJoint 0 4 1317 32 OdeContactJoint::OdeContactJoint 0 3 419 420 421 0
259
OdeContactJoint::OdeContactJoint(OdeWorld &world, OdeContact const &contact);
OdeContactJoint::OdeContactJoint(OdeWorld &world, OdeJointGroup &joint_group, OdeContact const &contact);
inline OdeContactJoint::OdeContactJoint(OdeContactJoint const &) = default;

1061 14 get_class_type 0 4 1317 31 OdeContactJoint::get_class_type 0 1 422 0
56
static TypeHandle OdeContactJoint::get_class_type(void);

1062 15 OdeCylinderGeom 0 4 1318 32 OdeCylinderGeom::OdeCylinderGeom 0 3 423 424 425 0
216
OdeCylinderGeom::OdeCylinderGeom(dReal radius, dReal length);
OdeCylinderGeom::OdeCylinderGeom(OdeSpace &space, dReal radius, dReal length);
inline OdeCylinderGeom::OdeCylinderGeom(OdeCylinderGeom const &) = default;

1063 10 set_params 0 4 1318 27 OdeCylinderGeom::set_params 0 1 426 0
68
inline void OdeCylinderGeom::set_params(dReal radius, dReal length);

1064 10 get_params 0 4 1318 27 OdeCylinderGeom::get_params 0 0 0
76
inline void OdeCylinderGeom::get_params(dReal *radius, dReal *length) const;

1065 10 get_radius 0 4 1318 27 OdeCylinderGeom::get_radius 0 1 427 0
53
inline dReal OdeCylinderGeom::get_radius(void) const;

1066 10 get_length 0 4 1318 27 OdeCylinderGeom::get_length 0 1 428 0
53
inline dReal OdeCylinderGeom::get_length(void) const;

1067 14 get_class_type 0 4 1318 31 OdeCylinderGeom::get_class_type 0 1 429 0
56
static TypeHandle OdeCylinderGeom::get_class_type(void);

1068 13 OdeFixedJoint 0 4 1319 28 OdeFixedJoint::OdeFixedJoint 0 3 430 431 432 0
191
OdeFixedJoint::OdeFixedJoint(OdeWorld &world);
OdeFixedJoint::OdeFixedJoint(OdeWorld &world, OdeJointGroup &joint_group);
inline OdeFixedJoint::OdeFixedJoint(OdeFixedJoint const &) = default;

1069 3 set 0 4 1319 18 OdeFixedJoint::set 0 1 433 0
37
inline void OdeFixedJoint::set(void);

1070 14 get_class_type 0 4 1319 29 OdeFixedJoint::get_class_type 0 1 434 0
54
static TypeHandle OdeFixedJoint::get_class_type(void);

1071 12 OdeHashSpace 0 4 1320 26 OdeHashSpace::OdeHashSpace 0 3 435 436 437 0
145
OdeHashSpace::OdeHashSpace(void);
OdeHashSpace::OdeHashSpace(OdeSpace &space);
inline OdeHashSpace::OdeHashSpace(OdeHashSpace const &) = default;

1072 10 set_levels 0 4 1320 24 OdeHashSpace::set_levels 0 1 438 0
65
inline void OdeHashSpace::set_levels(int minlevel, int maxlevel);

1073 13 get_min_level 0 4 1320 27 OdeHashSpace::get_min_level 0 1 439 0
51
inline int OdeHashSpace::get_min_level(void) const;

1074 13 get_max_level 0 4 1320 27 OdeHashSpace::get_max_level 0 1 440 0
51
inline int OdeHashSpace::get_max_level(void) const;

1075 14 get_class_type 0 4 1320 28 OdeHashSpace::get_class_type 0 1 441 0
53
static TypeHandle OdeHashSpace::get_class_type(void);

1076 14 OdeHinge2Joint 0 4 1321 30 OdeHinge2Joint::OdeHinge2Joint 0 3 442 443 444 0
198
OdeHinge2Joint::OdeHinge2Joint(OdeWorld &world, OdeJointGroup &joint_group);
OdeHinge2Joint::OdeHinge2Joint(OdeWorld &world);
inline OdeHinge2Joint::OdeHinge2Joint(OdeHinge2Joint const &) = default;

1077 10 set_anchor 0 4 1321 26 OdeHinge2Joint::set_anchor 0 2 445 446 0
132
inline void OdeHinge2Joint::set_anchor(dReal x, dReal y, dReal z);
inline void OdeHinge2Joint::set_anchor(LVecBase3f const &anchor);

1078 9 set_axis1 0 4 1321 25 OdeHinge2Joint::set_axis1 0 2 447 448 0
128
inline void OdeHinge2Joint::set_axis1(dReal x, dReal y, dReal z);
inline void OdeHinge2Joint::set_axis1(LVecBase3f const &axis);

1079 9 set_axis2 0 4 1321 25 OdeHinge2Joint::set_axis2 0 2 449 450 0
128
inline void OdeHinge2Joint::set_axis2(dReal x, dReal y, dReal z);
inline void OdeHinge2Joint::set_axis2(LVecBase3f const &axis);

1080 11 add_torques 0 4 1321 27 OdeHinge2Joint::add_torques 0 1 451 0
70
inline void OdeHinge2Joint::add_torques(dReal torque1, dReal torque2);

1081 10 get_anchor 0 4 1321 26 OdeHinge2Joint::get_anchor 0 1 452 0
57
inline LVecBase3f OdeHinge2Joint::get_anchor(void) const;

1082 11 get_anchor2 0 4 1321 27 OdeHinge2Joint::get_anchor2 0 1 453 0
58
inline LVecBase3f OdeHinge2Joint::get_anchor2(void) const;

1083 9 get_axis1 0 4 1321 25 OdeHinge2Joint::get_axis1 0 1 454 0
56
inline LVecBase3f OdeHinge2Joint::get_axis1(void) const;

1084 9 get_axis2 0 4 1321 25 OdeHinge2Joint::get_axis2 0 1 455 0
56
inline LVecBase3f OdeHinge2Joint::get_axis2(void) const;

1085 10 get_angle1 0 4 1321 26 OdeHinge2Joint::get_angle1 0 1 456 0
52
inline dReal OdeHinge2Joint::get_angle1(void) const;

1086 15 get_angle1_rate 0 4 1321 31 OdeHinge2Joint::get_angle1_rate 0 1 457 0
57
inline dReal OdeHinge2Joint::get_angle1_rate(void) const;

1087 15 get_angle2_rate 0 4 1321 31 OdeHinge2Joint::get_angle2_rate 0 1 458 0
57
inline dReal OdeHinge2Joint::get_angle2_rate(void) const;

1088 17 set_param_lo_stop 0 4 1321 33 OdeHinge2Joint::set_param_lo_stop 0 1 459 0
67
inline void OdeHinge2Joint::set_param_lo_stop(int axis, dReal val);

1089 17 set_param_hi_stop 0 4 1321 33 OdeHinge2Joint::set_param_hi_stop 0 1 460 0
67
inline void OdeHinge2Joint::set_param_hi_stop(int axis, dReal val);

1090 13 set_param_vel 0 4 1321 29 OdeHinge2Joint::set_param_vel 0 1 461 0
63
inline void OdeHinge2Joint::set_param_vel(int axis, dReal val);

1091 15 set_param_f_max 0 4 1321 31 OdeHinge2Joint::set_param_f_max 0 1 462 0
65
inline void OdeHinge2Joint::set_param_f_max(int axis, dReal val);

1092 22 set_param_fudge_factor 0 4 1321 38 OdeHinge2Joint::set_param_fudge_factor 0 1 463 0
72
inline void OdeHinge2Joint::set_param_fudge_factor(int axis, dReal val);

1093 16 set_param_bounce 0 4 1321 32 OdeHinge2Joint::set_param_bounce 0 1 464 0
66
inline void OdeHinge2Joint::set_param_bounce(int axis, dReal val);

1094 13 set_param_CFM 0 4 1321 29 OdeHinge2Joint::set_param_CFM 0 1 465 0
63
inline void OdeHinge2Joint::set_param_CFM(int axis, dReal val);

1095 18 set_param_stop_ERP 0 4 1321 34 OdeHinge2Joint::set_param_stop_ERP 0 1 466 0
68
inline void OdeHinge2Joint::set_param_stop_ERP(int axis, dReal val);

1096 18 set_param_stop_CFM 0 4 1321 34 OdeHinge2Joint::set_param_stop_CFM 0 1 467 0
68
inline void OdeHinge2Joint::set_param_stop_CFM(int axis, dReal val);

1097 24 set_param_suspension_ERP 0 4 1321 40 OdeHinge2Joint::set_param_suspension_ERP 0 1 468 0
74
inline void OdeHinge2Joint::set_param_suspension_ERP(int axis, dReal val);

1098 24 set_param_suspension_CFM 0 4 1321 40 OdeHinge2Joint::set_param_suspension_CFM 0 1 469 0
74
inline void OdeHinge2Joint::set_param_suspension_CFM(int axis, dReal val);

1099 17 get_param_lo_stop 0 4 1321 33 OdeHinge2Joint::get_param_lo_stop 0 1 470 0
63
inline dReal OdeHinge2Joint::get_param_lo_stop(int axis) const;

1100 17 get_param_hi_stop 0 4 1321 33 OdeHinge2Joint::get_param_hi_stop 0 1 471 0
63
inline dReal OdeHinge2Joint::get_param_hi_stop(int axis) const;

1101 13 get_param_vel 0 4 1321 29 OdeHinge2Joint::get_param_vel 0 1 472 0
59
inline dReal OdeHinge2Joint::get_param_vel(int axis) const;

1102 15 get_param_f_max 0 4 1321 31 OdeHinge2Joint::get_param_f_max 0 1 473 0
61
inline dReal OdeHinge2Joint::get_param_f_max(int axis) const;

1103 22 get_param_fudge_factor 0 4 1321 38 OdeHinge2Joint::get_param_fudge_factor 0 1 474 0
68
inline dReal OdeHinge2Joint::get_param_fudge_factor(int axis) const;

1104 16 get_param_bounce 0 4 1321 32 OdeHinge2Joint::get_param_bounce 0 1 475 0
62
inline dReal OdeHinge2Joint::get_param_bounce(int axis) const;

1105 13 get_param_CFM 0 4 1321 29 OdeHinge2Joint::get_param_CFM 0 1 476 0
59
inline dReal OdeHinge2Joint::get_param_CFM(int axis) const;

1106 18 get_param_stop_ERP 0 4 1321 34 OdeHinge2Joint::get_param_stop_ERP 0 1 477 0
64
inline dReal OdeHinge2Joint::get_param_stop_ERP(int axis) const;

1107 18 get_param_stop_CFM 0 4 1321 34 OdeHinge2Joint::get_param_stop_CFM 0 1 478 0
64
inline dReal OdeHinge2Joint::get_param_stop_CFM(int axis) const;

1108 24 get_param_suspension_ERP 0 4 1321 40 OdeHinge2Joint::get_param_suspension_ERP 0 1 479 0
70
inline dReal OdeHinge2Joint::get_param_suspension_ERP(int axis) const;

1109 24 get_param_suspension_CFM 0 4 1321 40 OdeHinge2Joint::get_param_suspension_CFM 0 1 480 0
70
inline dReal OdeHinge2Joint::get_param_suspension_CFM(int axis) const;

1110 14 get_class_type 0 4 1321 30 OdeHinge2Joint::get_class_type 0 1 481 0
55
static TypeHandle OdeHinge2Joint::get_class_type(void);

1111 13 OdeHingeJoint 0 4 1322 28 OdeHingeJoint::OdeHingeJoint 0 3 482 483 484 0
191
OdeHingeJoint::OdeHingeJoint(OdeWorld &world);
OdeHingeJoint::OdeHingeJoint(OdeWorld &world, OdeJointGroup &joint_group);
inline OdeHingeJoint::OdeHingeJoint(OdeHingeJoint const &) = default;

1112 10 set_anchor 0 4 1322 25 OdeHingeJoint::set_anchor 0 2 485 486 0
130
inline void OdeHingeJoint::set_anchor(dReal x, dReal y, dReal z);
inline void OdeHingeJoint::set_anchor(LVecBase3f const &anchor);

1113 16 set_anchor_delta 0 4 1322 31 OdeHingeJoint::set_anchor_delta 0 2 487 488 0
195
inline void OdeHingeJoint::set_anchor_delta(dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
inline void OdeHingeJoint::set_anchor_delta(LVecBase3f const &anchor, LVecBase3f const &vec);

1114 8 set_axis 0 4 1322 23 OdeHingeJoint::set_axis 0 2 489 490 0
124
inline void OdeHingeJoint::set_axis(dReal x, dReal y, dReal z);
inline void OdeHingeJoint::set_axis(LVecBase3f const &axis);

1115 10 add_torque 0 4 1322 25 OdeHingeJoint::add_torque 0 1 491 0
52
inline void OdeHingeJoint::add_torque(dReal torque);

1116 10 get_anchor 0 4 1322 25 OdeHingeJoint::get_anchor 0 1 492 0
56
inline LVecBase3f OdeHingeJoint::get_anchor(void) const;

1117 11 get_anchor2 0 4 1322 26 OdeHingeJoint::get_anchor2 0 1 493 0
57
inline LVecBase3f OdeHingeJoint::get_anchor2(void) const;

1118 8 get_axis 0 4 1322 23 OdeHingeJoint::get_axis 0 1 494 0
54
inline LVecBase3f OdeHingeJoint::get_axis(void) const;

1119 9 get_angle 0 4 1322 24 OdeHingeJoint::get_angle 0 1 495 0
50
inline dReal OdeHingeJoint::get_angle(void) const;

1120 14 get_angle_rate 0 4 1322 29 OdeHingeJoint::get_angle_rate 0 1 496 0
55
inline dReal OdeHingeJoint::get_angle_rate(void) const;

1121 17 set_param_lo_stop 0 4 1322 32 OdeHingeJoint::set_param_lo_stop 0 1 497 0
56
inline void OdeHingeJoint::set_param_lo_stop(dReal val);

1122 17 set_param_hi_stop 0 4 1322 32 OdeHingeJoint::set_param_hi_stop 0 1 498 0
56
inline void OdeHingeJoint::set_param_hi_stop(dReal val);

1123 13 set_param_vel 0 4 1322 28 OdeHingeJoint::set_param_vel 0 1 499 0
52
inline void OdeHingeJoint::set_param_vel(dReal val);

1124 15 set_param_f_max 0 4 1322 30 OdeHingeJoint::set_param_f_max 0 1 500 0
54
inline void OdeHingeJoint::set_param_f_max(dReal val);

1125 22 set_param_fudge_factor 0 4 1322 37 OdeHingeJoint::set_param_fudge_factor 0 1 501 0
61
inline void OdeHingeJoint::set_param_fudge_factor(dReal val);

1126 16 set_param_bounce 0 4 1322 31 OdeHingeJoint::set_param_bounce 0 1 502 0
55
inline void OdeHingeJoint::set_param_bounce(dReal val);

1127 13 set_param_CFM 0 4 1322 28 OdeHingeJoint::set_param_CFM 0 1 503 0
52
inline void OdeHingeJoint::set_param_CFM(dReal val);

1128 18 set_param_stop_ERP 0 4 1322 33 OdeHingeJoint::set_param_stop_ERP 0 1 504 0
57
inline void OdeHingeJoint::set_param_stop_ERP(dReal val);

1129 18 set_param_stop_CFM 0 4 1322 33 OdeHingeJoint::set_param_stop_CFM 0 1 505 0
57
inline void OdeHingeJoint::set_param_stop_CFM(dReal val);

1130 17 get_param_lo_stop 0 4 1322 32 OdeHingeJoint::get_param_lo_stop 0 1 506 0
58
inline dReal OdeHingeJoint::get_param_lo_stop(void) const;

1131 17 get_param_hi_stop 0 4 1322 32 OdeHingeJoint::get_param_hi_stop 0 1 507 0
58
inline dReal OdeHingeJoint::get_param_hi_stop(void) const;

1132 13 get_param_vel 0 4 1322 28 OdeHingeJoint::get_param_vel 0 1 508 0
54
inline dReal OdeHingeJoint::get_param_vel(void) const;

1133 15 get_param_f_max 0 4 1322 30 OdeHingeJoint::get_param_f_max 0 1 509 0
56
inline dReal OdeHingeJoint::get_param_f_max(void) const;

1134 22 get_param_fudge_factor 0 4 1322 37 OdeHingeJoint::get_param_fudge_factor 0 1 510 0
63
inline dReal OdeHingeJoint::get_param_fudge_factor(void) const;

1135 16 get_param_bounce 0 4 1322 31 OdeHingeJoint::get_param_bounce 0 1 511 0
57
inline dReal OdeHingeJoint::get_param_bounce(void) const;

1136 13 get_param_CFM 0 4 1322 28 OdeHingeJoint::get_param_CFM 0 1 512 0
54
inline dReal OdeHingeJoint::get_param_CFM(void) const;

1137 18 get_param_stop_ERP 0 4 1322 33 OdeHingeJoint::get_param_stop_ERP 0 1 513 0
59
inline dReal OdeHingeJoint::get_param_stop_ERP(void) const;

1138 18 get_param_stop_CFM 0 4 1322 33 OdeHingeJoint::get_param_stop_CFM 0 1 514 0
59
inline dReal OdeHingeJoint::get_param_stop_CFM(void) const;

1139 14 get_class_type 0 4 1322 29 OdeHingeJoint::get_class_type 0 1 515 0
54
static TypeHandle OdeHingeJoint::get_class_type(void);

1140 18 OdeJointCollection 0 4 1323 38 OdeJointCollection::OdeJointCollection 0 2 516 517 0
117
OdeJointCollection::OdeJointCollection(void);
OdeJointCollection::OdeJointCollection(OdeJointCollection const &copy);

1141 10 operator = 0 4 1323 30 OdeJointCollection::operator = 0 1 518 0
68
void OdeJointCollection::operator =(OdeJointCollection const &copy);

1142 19 ~OdeJointCollection 0 4 1323 39 OdeJointCollection::~OdeJointCollection 0 0 10
/**
 *
 */
53
inline OdeJointCollection::~OdeJointCollection(void);

1143 9 add_joint 0 4 1323 29 OdeJointCollection::add_joint 0 1 519 0
58
void OdeJointCollection::add_joint(OdeJoint const &joint);

1144 12 remove_joint 0 4 1323 32 OdeJointCollection::remove_joint 0 1 520 0
61
bool OdeJointCollection::remove_joint(OdeJoint const &joint);

1145 15 add_joints_from 0 4 1323 35 OdeJointCollection::add_joints_from 0 1 521 0
74
void OdeJointCollection::add_joints_from(OdeJointCollection const &other);

1146 18 remove_joints_from 0 4 1323 38 OdeJointCollection::remove_joints_from 0 1 522 0
77
void OdeJointCollection::remove_joints_from(OdeJointCollection const &other);

1147 23 remove_duplicate_joints 0 4 1323 43 OdeJointCollection::remove_duplicate_joints 0 1 523 0
55
void OdeJointCollection::remove_duplicate_joints(void);

1148 9 has_joint 0 4 1323 29 OdeJointCollection::has_joint 0 1 524 0
64
bool OdeJointCollection::has_joint(OdeJoint const &joint) const;

1149 5 clear 0 4 1323 25 OdeJointCollection::clear 0 1 525 0
37
void OdeJointCollection::clear(void);

1150 8 is_empty 0 4 1323 28 OdeJointCollection::is_empty 0 1 526 0
46
bool OdeJointCollection::is_empty(void) const;

1151 14 get_num_joints 0 4 1323 34 OdeJointCollection::get_num_joints 0 1 527 0
51
int OdeJointCollection::get_num_joints(void) const;

1152 9 get_joint 0 4 1323 29 OdeJointCollection::get_joint 0 1 528 0
56
OdeJoint OdeJointCollection::get_joint(int index) const;

1153 11 operator [] 0 4 1323 31 OdeJointCollection::operator [] 0 1 529 0
58
OdeJoint OdeJointCollection::operator [](int index) const;

1154 4 size 0 4 1323 24 OdeJointCollection::size 0 1 530 106
/**
 * Returns the number of joints in the collection.  This is the same thing as
 * get_num_joints().
 */
41
int OdeJointCollection::size(void) const;

1155 11 operator += 0 4 1323 31 OdeJointCollection::operator += 0 1 531 0
77
inline void OdeJointCollection::operator +=(OdeJointCollection const &other);

1156 10 operator + 0 4 1323 30 OdeJointCollection::operator + 0 1 532 0
96
inline OdeJointCollection OdeJointCollection::operator +(OdeJointCollection const &other) const;

1157 14 OdeLMotorJoint 0 4 1324 30 OdeLMotorJoint::OdeLMotorJoint 0 3 533 534 535 0
198
OdeLMotorJoint::OdeLMotorJoint(OdeWorld &world);
OdeLMotorJoint::OdeLMotorJoint(OdeWorld &world, OdeJointGroup &joint_group);
inline OdeLMotorJoint::OdeLMotorJoint(OdeLMotorJoint const &) = default;

1158 12 set_num_axes 0 4 1324 28 OdeLMotorJoint::set_num_axes 0 1 536 0
50
inline void OdeLMotorJoint::set_num_axes(int num);

1159 8 set_axis 0 4 1324 24 OdeLMotorJoint::set_axis 0 2 537 538 0
164
inline void OdeLMotorJoint::set_axis(int anum, int rel, dReal x, dReal y, dReal z);
inline void OdeLMotorJoint::set_axis(int anum, int rel, LVecBase3f const &axis);

1160 9 set_param 0 4 1324 25 OdeLMotorJoint::set_param 0 1 539 0
66
inline void OdeLMotorJoint::set_param(int parameter, dReal value);

1161 12 get_num_axes 0 4 1324 28 OdeLMotorJoint::get_num_axes 0 1 540 0
52
inline int OdeLMotorJoint::get_num_axes(void) const;

1162 8 get_axis 0 4 1324 24 OdeLMotorJoint::get_axis 0 1 541 0
59
inline LVecBase3f OdeLMotorJoint::get_axis(int anum) const;

1163 9 get_param 0 4 1324 25 OdeLMotorJoint::get_param 0 1 542 0
60
inline dReal OdeLMotorJoint::get_param(int parameter) const;

1164 14 get_class_type 0 4 1324 30 OdeLMotorJoint::get_class_type 0 1 543 0
55
static TypeHandle OdeLMotorJoint::get_class_type(void);

1165 12 OdeNullJoint 0 4 1325 26 OdeNullJoint::OdeNullJoint 0 3 544 545 546 0
184
OdeNullJoint::OdeNullJoint(OdeWorld &world);
OdeNullJoint::OdeNullJoint(OdeWorld &world, OdeJointGroup &joint_group);
inline OdeNullJoint::OdeNullJoint(OdeNullJoint const &) = default;

1166 14 get_class_type 0 4 1325 28 OdeNullJoint::get_class_type 0 1 547 0
53
static TypeHandle OdeNullJoint::get_class_type(void);

1167 15 OdePlane2dJoint 0 4 1326 32 OdePlane2dJoint::OdePlane2dJoint 0 3 548 549 550 0
205
OdePlane2dJoint::OdePlane2dJoint(OdeWorld &world);
OdePlane2dJoint::OdePlane2dJoint(OdeWorld &world, OdeJointGroup &joint_group);
inline OdePlane2dJoint::OdePlane2dJoint(OdePlane2dJoint const &) = default;

1168 11 set_x_param 0 4 1326 28 OdePlane2dJoint::set_x_param 0 1 551 0
69
inline void OdePlane2dJoint::set_x_param(int parameter, dReal value);

1169 11 set_y_param 0 4 1326 28 OdePlane2dJoint::set_y_param 0 1 552 0
69
inline void OdePlane2dJoint::set_y_param(int parameter, dReal value);

1170 15 set_angle_param 0 4 1326 32 OdePlane2dJoint::set_angle_param 0 1 553 0
73
inline void OdePlane2dJoint::set_angle_param(int parameter, dReal value);

1171 14 get_class_type 0 4 1326 31 OdePlane2dJoint::get_class_type 0 1 554 0
56
static TypeHandle OdePlane2dJoint::get_class_type(void);

1172 12 OdePlaneGeom 0 4 1327 26 OdePlaneGeom::OdePlaneGeom 0 5 555 556 557 558 559 0
336
OdePlaneGeom::OdePlaneGeom(dReal a, dReal b, dReal c, dReal d);
OdePlaneGeom::OdePlaneGeom(LVecBase4f const &params);
OdePlaneGeom::OdePlaneGeom(OdeSpace &space, dReal a, dReal b, dReal c, dReal d);
OdePlaneGeom::OdePlaneGeom(OdeSpace &space, LVecBase4f const &params);
inline OdePlaneGeom::OdePlaneGeom(OdePlaneGeom const &) = default;

1173 10 set_params 0 4 1327 24 OdePlaneGeom::set_params 0 2 560 561 0
137
inline void OdePlaneGeom::set_params(dReal a, dReal b, dReal c, dReal d);
inline void OdePlaneGeom::set_params(LVecBase4f const &params);

1174 10 get_params 0 4 1327 24 OdePlaneGeom::get_params 0 1 562 0
55
inline LVecBase4f OdePlaneGeom::get_params(void) const;

1175 15 get_point_depth 0 4 1327 29 OdePlaneGeom::get_point_depth 0 2 563 564 0
145
inline dReal OdePlaneGeom::get_point_depth(dReal x, dReal y, dReal z) const;
inline dReal OdePlaneGeom::get_point_depth(LPoint3f const &p) const;

1176 14 get_class_type 0 4 1327 28 OdePlaneGeom::get_class_type 0 1 565 0
53
static TypeHandle OdePlaneGeom::get_class_type(void);

1177 16 OdeQuadTreeSpace 0 4 1328 34 OdeQuadTreeSpace::OdeQuadTreeSpace 0 3 566 567 568 0
303
OdeQuadTreeSpace::OdeQuadTreeSpace(LPoint3f const &center, LVecBase3f const &extents, int const depth);
OdeQuadTreeSpace::OdeQuadTreeSpace(OdeSpace &space, LPoint3f const &center, LVecBase3f const &extents, int const depth);
inline OdeQuadTreeSpace::OdeQuadTreeSpace(OdeQuadTreeSpace const &) = default;

1178 14 get_class_type 0 4 1328 32 OdeQuadTreeSpace::get_class_type 0 1 569 0
57
static TypeHandle OdeQuadTreeSpace::get_class_type(void);

1179 10 OdeRayGeom 0 4 1329 22 OdeRayGeom::OdeRayGeom 0 3 570 571 572 0
153
OdeRayGeom::OdeRayGeom(dReal length);
OdeRayGeom::OdeRayGeom(OdeSpace &space, dReal length);
inline OdeRayGeom::OdeRayGeom(OdeRayGeom const &) = default;

1180 10 set_length 0 4 1329 22 OdeRayGeom::set_length 0 1 573 0
49
inline void OdeRayGeom::set_length(dReal length);

1181 10 get_length 0 4 1329 22 OdeRayGeom::get_length 0 1 574 0
42
inline dReal OdeRayGeom::get_length(void);

1182 3 set 0 4 1329 15 OdeRayGeom::set 0 2 575 576 0
165
inline void OdeRayGeom::set(dReal px, dReal py, dReal pz, dReal dx, dReal dy, dReal dz);
inline void OdeRayGeom::set(LVecBase3f const &start, LVecBase3f const &dir);

1183 3 get 0 4 1329 15 OdeRayGeom::get 0 1 577 0
70
inline void OdeRayGeom::get(LVecBase3f &start, LVecBase3f &dir) const;

1184 9 get_start 0 4 1329 21 OdeRayGeom::get_start 0 1 578 0
52
inline LVecBase3f OdeRayGeom::get_start(void) const;

1185 13 get_direction 0 4 1329 25 OdeRayGeom::get_direction 0 1 579 0
56
inline LVecBase3f OdeRayGeom::get_direction(void) const;

1186 10 set_params 0 4 1329 22 OdeRayGeom::set_params 0 1 580 0
73
inline void OdeRayGeom::set_params(int first_contact, int backface_cull);

1187 10 get_params 0 4 1329 22 OdeRayGeom::get_params 0 0 0
81
inline void OdeRayGeom::get_params(int &first_contact, int &backface_cull) const;

1188 17 get_first_contact 0 4 1329 29 OdeRayGeom::get_first_contact 0 1 581 0
53
inline int OdeRayGeom::get_first_contact(void) const;

1189 17 get_backface_cull 0 4 1329 29 OdeRayGeom::get_backface_cull 0 1 582 0
53
inline int OdeRayGeom::get_backface_cull(void) const;

1190 15 set_closest_hit 0 4 1329 27 OdeRayGeom::set_closest_hit 0 1 583 0
57
inline void OdeRayGeom::set_closest_hit(int closest_hit);

1191 15 get_closest_hit 0 4 1329 27 OdeRayGeom::get_closest_hit 0 1 584 0
45
inline int OdeRayGeom::get_closest_hit(void);

1192 14 get_class_type 0 4 1329 26 OdeRayGeom::get_class_type 0 1 585 0
51
static TypeHandle OdeRayGeom::get_class_type(void);

1193 14 OdeSimpleSpace 0 4 1330 30 OdeSimpleSpace::OdeSimpleSpace 0 3 586 587 588 0
159
OdeSimpleSpace::OdeSimpleSpace(void);
OdeSimpleSpace::OdeSimpleSpace(OdeSpace &space);
inline OdeSimpleSpace::OdeSimpleSpace(OdeSimpleSpace const &) = default;

1194 14 get_class_type 0 4 1330 30 OdeSimpleSpace::get_class_type 0 1 589 0
55
static TypeHandle OdeSimpleSpace::get_class_type(void);

1195 14 OdeSliderJoint 0 4 1331 30 OdeSliderJoint::OdeSliderJoint 0 3 590 591 592 0
198
OdeSliderJoint::OdeSliderJoint(OdeWorld &world);
OdeSliderJoint::OdeSliderJoint(OdeWorld &world, OdeJointGroup &joint_group);
inline OdeSliderJoint::OdeSliderJoint(OdeSliderJoint const &) = default;

1196 8 set_axis 0 4 1331 24 OdeSliderJoint::set_axis 0 2 593 594 0
126
inline void OdeSliderJoint::set_axis(dReal x, dReal y, dReal z);
inline void OdeSliderJoint::set_axis(LVecBase3f const &axis);

1197 14 set_axis_delta 0 4 1331 30 OdeSliderJoint::set_axis_delta 0 2 595 596 0
191
inline void OdeSliderJoint::set_axis_delta(dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
inline void OdeSliderJoint::set_axis_delta(LVecBase3f const &axis, LVecBase3f const &vec);

1198 9 add_force 0 4 1331 25 OdeSliderJoint::add_force 0 1 597 0
51
inline void OdeSliderJoint::add_force(dReal force);

1199 12 get_position 0 4 1331 28 OdeSliderJoint::get_position 0 1 598 0
54
inline dReal OdeSliderJoint::get_position(void) const;

1200 17 get_position_rate 0 4 1331 33 OdeSliderJoint::get_position_rate 0 1 599 0
59
inline dReal OdeSliderJoint::get_position_rate(void) const;

1201 8 get_axis 0 4 1331 24 OdeSliderJoint::get_axis 0 1 600 0
55
inline LVecBase3f OdeSliderJoint::get_axis(void) const;

1202 17 set_param_lo_stop 0 4 1331 33 OdeSliderJoint::set_param_lo_stop 0 1 601 0
57
inline void OdeSliderJoint::set_param_lo_stop(dReal val);

1203 17 set_param_hi_stop 0 4 1331 33 OdeSliderJoint::set_param_hi_stop 0 1 602 0
57
inline void OdeSliderJoint::set_param_hi_stop(dReal val);

1204 13 set_param_vel 0 4 1331 29 OdeSliderJoint::set_param_vel 0 1 603 0
53
inline void OdeSliderJoint::set_param_vel(dReal val);

1205 15 set_param_f_max 0 4 1331 31 OdeSliderJoint::set_param_f_max 0 1 604 0
55
inline void OdeSliderJoint::set_param_f_max(dReal val);

1206 22 set_param_fudge_factor 0 4 1331 38 OdeSliderJoint::set_param_fudge_factor 0 1 605 0
62
inline void OdeSliderJoint::set_param_fudge_factor(dReal val);

1207 16 set_param_bounce 0 4 1331 32 OdeSliderJoint::set_param_bounce 0 1 606 0
56
inline void OdeSliderJoint::set_param_bounce(dReal val);

1208 13 set_param_CFM 0 4 1331 29 OdeSliderJoint::set_param_CFM 0 1 607 0
53
inline void OdeSliderJoint::set_param_CFM(dReal val);

1209 18 set_param_stop_ERP 0 4 1331 34 OdeSliderJoint::set_param_stop_ERP 0 1 608 0
58
inline void OdeSliderJoint::set_param_stop_ERP(dReal val);

1210 18 set_param_stop_CFM 0 4 1331 34 OdeSliderJoint::set_param_stop_CFM 0 1 609 0
58
inline void OdeSliderJoint::set_param_stop_CFM(dReal val);

1211 17 get_param_lo_stop 0 4 1331 33 OdeSliderJoint::get_param_lo_stop 0 1 610 0
59
inline dReal OdeSliderJoint::get_param_lo_stop(void) const;

1212 17 get_param_hi_stop 0 4 1331 33 OdeSliderJoint::get_param_hi_stop 0 1 611 0
59
inline dReal OdeSliderJoint::get_param_hi_stop(void) const;

1213 13 get_param_vel 0 4 1331 29 OdeSliderJoint::get_param_vel 0 1 612 0
55
inline dReal OdeSliderJoint::get_param_vel(void) const;

1214 15 get_param_f_max 0 4 1331 31 OdeSliderJoint::get_param_f_max 0 1 613 0
57
inline dReal OdeSliderJoint::get_param_f_max(void) const;

1215 22 get_param_fudge_factor 0 4 1331 38 OdeSliderJoint::get_param_fudge_factor 0 1 614 0
64
inline dReal OdeSliderJoint::get_param_fudge_factor(void) const;

1216 16 get_param_bounce 0 4 1331 32 OdeSliderJoint::get_param_bounce 0 1 615 0
58
inline dReal OdeSliderJoint::get_param_bounce(void) const;

1217 13 get_param_CFM 0 4 1331 29 OdeSliderJoint::get_param_CFM 0 1 616 0
55
inline dReal OdeSliderJoint::get_param_CFM(void) const;

1218 18 get_param_stop_ERP 0 4 1331 34 OdeSliderJoint::get_param_stop_ERP 0 1 617 0
60
inline dReal OdeSliderJoint::get_param_stop_ERP(void) const;

1219 18 get_param_stop_CFM 0 4 1331 34 OdeSliderJoint::get_param_stop_CFM 0 1 618 0
60
inline dReal OdeSliderJoint::get_param_stop_CFM(void) const;

1220 14 get_class_type 0 4 1331 30 OdeSliderJoint::get_class_type 0 1 619 0
55
static TypeHandle OdeSliderJoint::get_class_type(void);

1221 13 OdeSphereGeom 0 4 1332 28 OdeSphereGeom::OdeSphereGeom 0 4 620 621 622 623 0
219
OdeSphereGeom::OdeSphereGeom(dReal radius);
OdeSphereGeom::OdeSphereGeom(OdeSpace &space, dReal radius);
OdeSphereGeom::OdeSphereGeom(OdeGeom &geom);
inline OdeSphereGeom::OdeSphereGeom(OdeSphereGeom const &) = default;

1222 10 set_radius 0 4 1332 25 OdeSphereGeom::set_radius 0 1 624 0
52
inline void OdeSphereGeom::set_radius(dReal radius);

1223 10 get_radius 0 4 1332 25 OdeSphereGeom::get_radius 0 1 625 0
51
inline dReal OdeSphereGeom::get_radius(void) const;

1224 15 get_point_depth 0 4 1332 30 OdeSphereGeom::get_point_depth 0 2 626 627 0
147
inline dReal OdeSphereGeom::get_point_depth(dReal x, dReal y, dReal z) const;
inline dReal OdeSphereGeom::get_point_depth(LPoint3f const &p) const;

1225 14 get_class_type 0 4 1332 29 OdeSphereGeom::get_class_type 0 1 628 0
54
static TypeHandle OdeSphereGeom::get_class_type(void);

1226 14 OdeTriMeshData 0 4 1333 30 OdeTriMeshData::OdeTriMeshData 0 1 629 63
// Private copy constructor, shouldn't be copying these objects
80
OdeTriMeshData::OdeTriMeshData(NodePath const &model, bool use_normals = false);

1227 7 destroy 0 4 1333 23 OdeTriMeshData::destroy 0 1 630 0
35
void OdeTriMeshData::destroy(void);

1228 5 write 0 6 1333 21 OdeTriMeshData::write 0 1 631 0
89
virtual void OdeTriMeshData::write(ostream &out = ::cout, unsigned int indent = 0) const;

1229 11 write_faces 0 4 1333 27 OdeTriMeshData::write_faces 0 1 632 0
53
void OdeTriMeshData::write_faces(ostream &out) const;

1230 14 get_class_type 0 4 1333 30 OdeTriMeshData::get_class_type 0 1 633 0
55
static TypeHandle OdeTriMeshData::get_class_type(void);

1231 14 OdeTriMeshGeom 0 4 1335 30 OdeTriMeshGeom::OdeTriMeshGeom 0 3 634 635 636 162
/* ODE_API dGeomID dCreateTriMesh(dSpaceID space, dTriMeshDataID Data, dTriCallback* Callback, dTriArrayCallback* ArrayCallback, dTriRayCallback* RayCallback); */
184
OdeTriMeshGeom::OdeTriMeshGeom(OdeTriMeshData &data);
OdeTriMeshGeom::OdeTriMeshGeom(OdeSpace &space, OdeTriMeshData &data);
OdeTriMeshGeom::OdeTriMeshGeom(OdeTriMeshGeom const &copy);

1232 7 destroy 0 4 1335 23 OdeTriMeshGeom::destroy 0 1 637 0
35
void OdeTriMeshGeom::destroy(void);

1233 17 set_tri_mesh_data 0 4 1335 33 OdeTriMeshGeom::set_tri_mesh_data 0 1 638 0
68
inline void OdeTriMeshGeom::set_tri_mesh_data(OdeTriMeshData &data);

1234 17 get_tri_mesh_data 0 4 1335 33 OdeTriMeshGeom::get_tri_mesh_data 0 1 639 0
81
inline PointerTo< OdeTriMeshData > OdeTriMeshGeom::get_tri_mesh_data(void) const;

1235 8 set_data 0 4 1335 24 OdeTriMeshGeom::set_data 0 1 640 0
59
inline void OdeTriMeshGeom::set_data(OdeTriMeshData &data);

1236 8 get_data 0 4 1335 24 OdeTriMeshGeom::get_data 0 1 641 0
72
inline PointerTo< OdeTriMeshData > OdeTriMeshGeom::get_data(void) const;

1237 9 enable_TC 0 4 1335 25 OdeTriMeshGeom::enable_TC 0 1 642 0
66
inline void OdeTriMeshGeom::enable_TC(int geom_class, int enable);

1238 13 is_TC_enabled 0 4 1335 29 OdeTriMeshGeom::is_TC_enabled 0 1 643 0
63
inline int OdeTriMeshGeom::is_TC_enabled(int geom_class) const;

1239 14 clear_TC_cache 0 4 1335 30 OdeTriMeshGeom::clear_TC_cache 0 1 644 0
64
inline void OdeTriMeshGeom::clear_TC_cache(OdeGeom const &geom);

1240 12 get_triangle 0 4 1335 28 OdeTriMeshGeom::get_triangle 0 1 645 0
105
inline void OdeTriMeshGeom::get_triangle(int face_index, LPoint3f &v0, LPoint3f &v1, LPoint3f &v2) const;

1241 9 get_point 0 4 1335 25 OdeTriMeshGeom::get_point 0 1 646 0
82
inline LPoint3f OdeTriMeshGeom::get_point(int face_index, dReal u, dReal v) const;

1242 17 get_num_triangles 0 4 1335 33 OdeTriMeshGeom::get_num_triangles 0 1 647 0
57
inline int OdeTriMeshGeom::get_num_triangles(void) const;

1243 14 get_class_type 0 4 1335 30 OdeTriMeshGeom::get_class_type 0 1 648 0
55
static TypeHandle OdeTriMeshGeom::get_class_type(void);

1244 17 OdeUniversalJoint 0 4 1336 36 OdeUniversalJoint::OdeUniversalJoint 0 3 649 650 651 0
219
OdeUniversalJoint::OdeUniversalJoint(OdeWorld &world);
OdeUniversalJoint::OdeUniversalJoint(OdeWorld &world, OdeJointGroup &joint_group);
inline OdeUniversalJoint::OdeUniversalJoint(OdeUniversalJoint const &) = default;

1245 10 set_anchor 0 4 1336 29 OdeUniversalJoint::set_anchor 0 2 652 653 0
138
inline void OdeUniversalJoint::set_anchor(dReal x, dReal y, dReal z);
inline void OdeUniversalJoint::set_anchor(LVecBase3f const &anchor);

1246 9 set_axis1 0 4 1336 28 OdeUniversalJoint::set_axis1 0 2 654 655 0
134
inline void OdeUniversalJoint::set_axis1(dReal x, dReal y, dReal z);
inline void OdeUniversalJoint::set_axis1(LVecBase3f const &axis);

1247 9 set_axis2 0 4 1336 28 OdeUniversalJoint::set_axis2 0 2 656 657 0
134
inline void OdeUniversalJoint::set_axis2(dReal x, dReal y, dReal z);
inline void OdeUniversalJoint::set_axis2(LVecBase3f const &axis);

1248 11 add_torques 0 4 1336 30 OdeUniversalJoint::add_torques 0 1 658 0
73
inline void OdeUniversalJoint::add_torques(dReal torque1, dReal torque2);

1249 10 get_anchor 0 4 1336 29 OdeUniversalJoint::get_anchor 0 1 659 0
60
inline LVecBase3f OdeUniversalJoint::get_anchor(void) const;

1250 11 get_anchor2 0 4 1336 30 OdeUniversalJoint::get_anchor2 0 1 660 0
61
inline LVecBase3f OdeUniversalJoint::get_anchor2(void) const;

1251 9 get_axis1 0 4 1336 28 OdeUniversalJoint::get_axis1 0 1 661 0
59
inline LVecBase3f OdeUniversalJoint::get_axis1(void) const;

1252 9 get_axis2 0 4 1336 28 OdeUniversalJoint::get_axis2 0 1 662 0
59
inline LVecBase3f OdeUniversalJoint::get_axis2(void) const;

1253 10 get_angle1 0 4 1336 29 OdeUniversalJoint::get_angle1 0 1 663 0
55
inline dReal OdeUniversalJoint::get_angle1(void) const;

1254 10 get_angle2 0 4 1336 29 OdeUniversalJoint::get_angle2 0 1 664 0
55
inline dReal OdeUniversalJoint::get_angle2(void) const;

1255 15 get_angle1_rate 0 4 1336 34 OdeUniversalJoint::get_angle1_rate 0 1 665 0
60
inline dReal OdeUniversalJoint::get_angle1_rate(void) const;

1256 15 get_angle2_rate 0 4 1336 34 OdeUniversalJoint::get_angle2_rate 0 1 666 0
60
inline dReal OdeUniversalJoint::get_angle2_rate(void) const;

1257 17 set_param_lo_stop 0 4 1336 36 OdeUniversalJoint::set_param_lo_stop 0 1 667 0
70
inline void OdeUniversalJoint::set_param_lo_stop(int axis, dReal val);

1258 17 set_param_hi_stop 0 4 1336 36 OdeUniversalJoint::set_param_hi_stop 0 1 668 0
70
inline void OdeUniversalJoint::set_param_hi_stop(int axis, dReal val);

1259 13 set_param_vel 0 4 1336 32 OdeUniversalJoint::set_param_vel 0 1 669 0
66
inline void OdeUniversalJoint::set_param_vel(int axis, dReal val);

1260 15 set_param_f_max 0 4 1336 34 OdeUniversalJoint::set_param_f_max 0 1 670 0
68
inline void OdeUniversalJoint::set_param_f_max(int axis, dReal val);

1261 22 set_param_fudge_factor 0 4 1336 41 OdeUniversalJoint::set_param_fudge_factor 0 1 671 0
75
inline void OdeUniversalJoint::set_param_fudge_factor(int axis, dReal val);

1262 16 set_param_bounce 0 4 1336 35 OdeUniversalJoint::set_param_bounce 0 1 672 0
69
inline void OdeUniversalJoint::set_param_bounce(int axis, dReal val);

1263 13 set_param_CFM 0 4 1336 32 OdeUniversalJoint::set_param_CFM 0 1 673 0
66
inline void OdeUniversalJoint::set_param_CFM(int axis, dReal val);

1264 18 set_param_stop_ERP 0 4 1336 37 OdeUniversalJoint::set_param_stop_ERP 0 1 674 0
71
inline void OdeUniversalJoint::set_param_stop_ERP(int axis, dReal val);

1265 18 set_param_stop_CFM 0 4 1336 37 OdeUniversalJoint::set_param_stop_CFM 0 1 675 0
71
inline void OdeUniversalJoint::set_param_stop_CFM(int axis, dReal val);

1266 17 get_param_lo_stop 0 4 1336 36 OdeUniversalJoint::get_param_lo_stop 0 1 676 0
66
inline dReal OdeUniversalJoint::get_param_lo_stop(int axis) const;

1267 17 get_param_hi_stop 0 4 1336 36 OdeUniversalJoint::get_param_hi_stop 0 1 677 0
66
inline dReal OdeUniversalJoint::get_param_hi_stop(int axis) const;

1268 13 get_param_vel 0 4 1336 32 OdeUniversalJoint::get_param_vel 0 1 678 0
62
inline dReal OdeUniversalJoint::get_param_vel(int axis) const;

1269 15 get_param_f_max 0 4 1336 34 OdeUniversalJoint::get_param_f_max 0 1 679 0
64
inline dReal OdeUniversalJoint::get_param_f_max(int axis) const;

1270 22 get_param_fudge_factor 0 4 1336 41 OdeUniversalJoint::get_param_fudge_factor 0 1 680 0
71
inline dReal OdeUniversalJoint::get_param_fudge_factor(int axis) const;

1271 16 get_param_bounce 0 4 1336 35 OdeUniversalJoint::get_param_bounce 0 1 681 0
65
inline dReal OdeUniversalJoint::get_param_bounce(int axis) const;

1272 13 get_param_CFM 0 4 1336 32 OdeUniversalJoint::get_param_CFM 0 1 682 0
62
inline dReal OdeUniversalJoint::get_param_CFM(int axis) const;

1273 18 get_param_stop_ERP 0 4 1336 37 OdeUniversalJoint::get_param_stop_ERP 0 1 683 0
67
inline dReal OdeUniversalJoint::get_param_stop_ERP(int axis) const;

1274 18 get_param_stop_CFM 0 4 1336 37 OdeUniversalJoint::get_param_stop_CFM 0 1 684 0
67
inline dReal OdeUniversalJoint::get_param_stop_CFM(int axis) const;

1275 14 get_class_type 0 4 1336 33 OdeUniversalJoint::get_class_type 0 1 685 0
58
static TypeHandle OdeUniversalJoint::get_class_type(void);

1276 20 get_connecting_joint 0 4 1337 29 OdeUtil::get_connecting_joint 0 1 688 60
/**
 * Returns the joint that connects the given bodies.
 */
90
static OdeJoint OdeUtil::get_connecting_joint(OdeBody const &body1, OdeBody const &body2);

1277 25 get_connecting_joint_list 0 4 1337 34 OdeUtil::get_connecting_joint_list 0 1 689 74
/**
 * Returns a collection of joints connecting the specified bodies.
 */
105
static OdeJointCollection OdeUtil::get_connecting_joint_list(OdeBody const &body1, OdeBody const &body2);

1278 13 are_connected 0 4 1337 22 OdeUtil::are_connected 0 1 690 90
/**
 * Returns 1 if the given bodies are connected by a joint, returns 0
 * otherwise.
 */
78
static int OdeUtil::are_connected(OdeBody const &body1, OdeBody const &body2);

1279 23 are_connected_excluding 0 4 1337 32 OdeUtil::are_connected_excluding 0 1 691 404
/**
 * Returns 1 if the given bodies are connected by a joint that does not match
 * the given joint_type, returns 0 otherwise.  This is useful for deciding
 * whether to add contact joints between two bodies: if they are already
 * connected by non-contact joints then it may not be appropriate to add
 * contacts, however it is okay to add more contact between bodies that
 * already have contacts.
 */
110
static int OdeUtil::are_connected_excluding(OdeBody const &body1, OdeBody const &body2, int const joint_type);

1280 7 collide 0 4 1337 16 OdeUtil::collide 0 1 692 152
/**
 * Given two geometry objects that potentially touch (geom1 and geom2),
 * generate contact information for them.  Returns an OdeCollisionEntry.
 */
135
static PointerTo< OdeCollisionEntry > OdeUtil::collide(OdeGeom const &geom1, OdeGeom const &geom2, short int const max_contacts = 150);

1281 8 collide2 0 4 1337 17 OdeUtil::collide2 0 1 693 0
108
static int OdeUtil::collide2(OdeGeom const &geom1, OdeGeom const &geom2, PyObject *arg, PyObject *callback);

1282 13 space_to_geom 0 4 1337 22 OdeUtil::space_to_geom 0 1 694 0
61
static OdeGeom OdeUtil::space_to_geom(OdeSpace const &space);

1283 12 get_infinity 0 4 1337 21 OdeUtil::get_infinity 0 1 695 73
// RAU we can't access OC_infinity as constants are not exposed in python
41
static dReal OdeUtil::get_infinity(void);

1284 13 rand_get_seed 0 4 1337 22 OdeUtil::rand_get_seed 0 1 696 0
40
static int OdeUtil::rand_get_seed(void);

1285 13 rand_set_seed 0 4 1337 22 OdeUtil::rand_set_seed 0 1 697 0
42
static void OdeUtil::rand_set_seed(int s);

1286 7 OdeUtil 0 4 1337 16 OdeUtil::OdeUtil 0 2 686 687 0
92
inline OdeUtil::OdeUtil(void) = default;
inline OdeUtil::OdeUtil(OdeUtil const &) = default;

1287 8 ~OdeUtil 0 4 1337 17 OdeUtil::~OdeUtil 0 0 0
24
OdeUtil::~OdeUtil(void);

697
1 0 0 7 10 1338 0 0 0 0 
2 0 0 7 10 1338 0 0 0 1 4 copy 1 1339  
3 0 0 4 11 1341 0 0 0 1 4 this 3 1338  
4 0 0 6 12 1342 0 0 205 /**
 * Returns true if the ID is 0, meaning the OdeWorld does not point to a valid
 * world.  It is an error to call a method on an empty world.  Note that an
 * empty OdeWorld also evaluates to False.
 */ 1 4 this 3 1339  
5 0 0 6 13 1343 0 0 43 /**
 * Returns the underlying dWorldID.
 */ 1 4 this 3 1339  
6 0 0 4 14 1341 0 0 0 2 4 this 3 1338  3 vec 1 1345  
7 0 0 4 14 1341 0 0 0 4 4 this 3 1338  1 x 1 1348  1 y 1 1348  1 z 1 1348  
8 0 0 4 15 1341 0 0 0 2 4 this 3 1338  3 erp 1 1348  
9 0 0 4 16 1341 0 0 0 2 4 this 3 1338  3 cfm 1 1348  
10 0 0 4 17 1341 0 0 0 2 4 this 3 1338  3 num 1 1350  
11 0 0 4 18 1341 0 0 0 2 4 this 3 1338  15 over_relaxation 1 1348  
12 0 0 4 19 1341 0 0 0 2 4 this 3 1338  3 vel 1 1348  
13 0 0 4 20 1341 0 0 0 2 4 this 3 1338  5 depth 1 1348  
14 0 0 4 21 1341 0 0 0 2 4 this 3 1338  16 linear_threshold 1 1348  
15 0 0 4 22 1341 0 0 0 2 4 this 3 1338  17 angular_threshold 1 1348  
16 0 0 4 23 1341 0 0 0 2 4 this 3 1338  5 steps 1 1350  
17 0 0 4 24 1341 0 0 0 2 4 this 3 1338  4 time 1 1348  
18 0 0 4 25 1341 0 0 0 2 4 this 3 1338  15 do_auto_disable 1 1350  
19 0 0 7 26 1351 0 0 0 1 4 this 3 1339  
20 0 0 6 27 1348 0 0 0 1 4 this 3 1339  
21 0 0 6 28 1348 0 0 0 1 4 this 3 1339  
22 0 0 6 29 1350 0 0 0 1 4 this 3 1339  
23 0 0 6 30 1348 0 0 0 1 4 this 3 1339  
24 0 0 6 31 1348 0 0 0 1 4 this 3 1339  
25 0 0 6 32 1348 0 0 0 1 4 this 3 1339  
26 0 0 6 33 1348 0 0 0 1 4 this 3 1339  
27 0 0 6 34 1348 0 0 0 1 4 this 3 1339  
28 0 0 6 35 1350 0 0 0 1 4 this 3 1339  
29 0 0 6 36 1348 0 0 0 1 4 this 3 1339  
30 0 0 6 37 1350 0 0 0 1 4 this 3 1339  
31 0 0 7 38 1351 0 0 0 3 4 this 3 1338  8 stepsize 1 1348  7 impulse 1 1345  
32 0 0 7 38 1351 0 0 0 5 4 this 3 1338  8 stepsize 1 1348  2 ix 1 1348  2 iy 1 1348  2 iz 1 1348  
33 0 0 4 39 1341 0 0 0 2 4 this 3 1338  8 stepsize 1 1348  
34 0 0 4 40 1341 0 0 0 2 4 this 3 1338  8 stepsize 1 1348  
35 0 0 6 41 1350 0 0 0 2 4 this 3 1339  5 other 1 1339  
36 0 0 4 42 1341 0 0 0 2 4 this 3 1338  12 num_surfaces 1 1352  
37 0 0 4 43 1341 0 0 56 // void assign_surface_body(OdeBody& body, int surface); 3 4 this 3 1338  4 body 1 1354  7 surface 1 1350  
38 0 0 4 44 1341 0 0 0 10 4 this 3 1338  4 pos1 1 1352  4 pos2 1 1352  2 mu 1 1348  6 bounce 1 1348  10 bounce_vel 1 1348  8 soft_erp 1 1348  8 soft_cfm 1 1348  4 slip 1 1348  6 dampen 1 1348  
39 0 0 6 45 1349 0 0 0 3 4 this 3 1338  2 dt 1 1349  4 body 1 1354  
40 0 0 7 47 1356 0 0 0 0 
41 0 0 6 46 1342 0 0 0 1 4 this 3 1339  
42 0 0 7 49 1357 0 0 0 0 
43 0 0 7 49 1357 0 0 0 1 6 param0 0 1358  
44 0 0 4 50 1341 0 0 0 1 4 this 3 1357  
45 0 0 6 51 1360 0 0 0 1 4 this 3 1358  
46 0 0 4 52 1341 0 0 0 1 4 this 3 1358  
47 0 0 6 53 1350 0 0 0 2 4 this 3 1358  5 other 1 1358  
48 0 0 7 54 1356 0 0 0 0 
49 0 0 7 61 1362 747 0 0 0 
50 0 0 7 57 1367 0 0 0 1 4 this 3 1365  
51 0 0 7 58 1367 0 0 0 1 4 this 3 1365  
52 0 0 7 59 1367 0 0 0 1 4 this 3 1365  
53 0 0 7 60 1367 0 0 0 1 4 this 3 1365  
54 0 0 7 93 1370 0 0 0 1 6 param0 0 1368  
55 0 0 4 65 1341 0 0 0 1 4 this 3 1370  
56 0 0 6 66 1342 0 0 205 /**
 * Returns true if the ID is 0, meaning the OdeJoint does not point to a valid
 * joint.  It is an error to call a method on an empty joint.  Note that an
 * empty OdeJoint also evaluates to False.
 */ 1 4 this 3 1368  
57 0 0 6 67 1371 0 0 43 /**
 * Returns the underlying dJointID.
 */ 1 4 this 3 1368  
58 0 0 6 68 1350 0 0 30 /* INLINE void *get_data(); */ 1 4 this 3 1368  
59 0 0 7 69 1354 0 0 0 2 4 this 3 1368  5 index 1 1350  
60 0 0 4 70 1341 0 0 0 2 4 this 3 1370  6 param0 0 1362  
61 0 0 4 70 1341 0 0 0 2 4 this 3 1370  4 flag 1 1342  
62 0 0 6 71 1362 0 0 0 1 4 this 3 1370  
63 0 0 4 72 1341 0 0 0 3 4 this 3 1370  5 body1 1 1373  5 body2 1 1373  
64 0 0 4 73 1341 0 0 175 /**
 * Attaches two OdeBody objects to this joint.  Order is important.  Consider
 * using the OdeJoint::attach extension function if you're using the Python
 * interface.
 */ 3 4 this 3 1370  5 body1 1 1373  5 body2 1 1373  
65 0 0 4 74 1341 0 0 237 /**
 * Attaches a single OdeBody to this joint at the specified index (0 or 1).
 * The other index will be set to the environment (null). Consider using the
 * OdeJoint::attach extension function if you're using the Python interface.
 */ 3 4 this 3 1370  4 body 1 1373  5 index 1 1350  
66 0 0 4 75 1341 0 0 0 1 4 this 3 1370  
67 0 0 4 76 1341 0 0 0 3 4 this 3 1368  3 out 1 1375  6 indent 1 1377  
68 0 0 6 77 1350 0 0 0 2 4 this 3 1368  5 other 1 1368  
69 0 0 6 78 1342 0 0 0 2 4 this 3 1368  5 other 1 1368  
70 0 0 6 80 1378 0 0 0 1 4 this 3 1368  
71 0 0 7 81 1381 0 0 0 1 4 this 3 1368  
72 0 0 7 82 1382 0 0 0 1 4 this 3 1368  
73 0 0 7 83 1383 0 0 0 1 4 this 3 1368  
74 0 0 7 84 1384 0 0 0 1 4 this 3 1368  
75 0 0 7 85 1385 0 0 0 1 4 this 3 1368  
76 0 0 7 86 1386 0 0 0 1 4 this 3 1368  
77 0 0 7 87 1387 0 0 0 1 4 this 3 1368  
78 0 0 7 88 1388 0 0 0 1 4 this 3 1368  
79 0 0 7 89 1389 0 0 0 1 4 this 3 1368  
80 0 0 7 90 1390 0 0 0 1 4 this 3 1368  
81 0 0 7 91 1391 0 0 0 1 4 this 3 1368  
82 0 0 7 92 1356 0 0 0 0 
83 0 0 6 79 1342 0 0 0 1 4 this 3 1368  
84 0 0 7 95 1389 0 0 0 1 6 param0 0 1392  
85 0 0 7 95 1389 0 0 0 1 5 world 1 1338  
86 0 0 7 95 1389 0 0 0 2 5 world 1 1338  11 joint_group 1 1357  
87 0 0 4 96 1341 0 0 0 2 4 this 3 1389  3 num 1 1350  
88 0 0 4 97 1341 0 0 0 4 4 this 3 1389  4 anum 1 1350  3 rel 1 1350  4 axis 1 1345  
89 0 0 4 97 1341 0 0 0 6 4 this 3 1389  4 anum 1 1350  3 rel 1 1350  1 x 1 1348  1 y 1 1348  1 z 1 1348  
90 0 0 4 98 1341 0 0 0 3 4 this 3 1389  4 anum 1 1350  5 angle 1 1348  
91 0 0 4 99 1341 0 0 0 2 4 this 3 1389  4 mode 1 1350  
92 0 0 4 100 1341 0 0 0 4 4 this 3 1389  7 torque1 1 1348  7 torque2 1 1348  7 torque3 1 1348  
93 0 0 6 101 1350 0 0 0 1 4 this 3 1392  
94 0 0 7 102 1351 0 0 0 2 4 this 3 1392  4 anum 1 1350  
95 0 0 6 104 1350 0 0 0 2 4 this 3 1392  4 anum 1 1350  
96 0 0 6 105 1348 0 0 0 2 4 this 3 1392  4 anum 1 1350  
97 0 0 6 106 1348 0 0 0 2 4 this 3 1392  4 anum 1 1350  
98 0 0 6 107 1350 0 0 0 1 4 this 3 1392  
99 0 0 4 108 1341 0 0 0 3 4 this 3 1389  4 axis 1 1350  3 val 1 1348  
100 0 0 4 109 1341 0 0 0 3 4 this 3 1389  4 axis 1 1350  3 val 1 1348  
101 0 0 4 110 1341 0 0 0 3 4 this 3 1389  4 axis 1 1350  3 val 1 1348  
102 0 0 4 111 1341 0 0 0 3 4 this 3 1389  4 axis 1 1350  3 val 1 1348  
103 0 0 4 112 1341 0 0 0 3 4 this 3 1389  4 axis 1 1350  3 val 1 1348  
104 0 0 4 113 1341 0 0 0 3 4 this 3 1389  4 axis 1 1350  3 val 1 1348  
105 0 0 4 114 1341 0 0 0 3 4 this 3 1389  4 axis 1 1350  3 val 1 1348  
106 0 0 4 115 1341 0 0 0 3 4 this 3 1389  4 axis 1 1350  3 val 1 1348  
107 0 0 4 116 1341 0 0 0 3 4 this 3 1389  4 axis 1 1350  3 val 1 1348  
108 0 0 6 117 1348 0 0 0 2 4 this 3 1392  4 axis 1 1350  
109 0 0 6 118 1348 0 0 0 2 4 this 3 1392  4 axis 1 1350  
110 0 0 6 119 1348 0 0 0 2 4 this 3 1392  4 axis 1 1350  
111 0 0 6 120 1348 0 0 0 2 4 this 3 1392  4 axis 1 1350  
112 0 0 6 121 1348 0 0 0 2 4 this 3 1392  4 axis 1 1350  
113 0 0 6 122 1348 0 0 0 2 4 this 3 1392  4 axis 1 1350  
114 0 0 6 123 1348 0 0 0 2 4 this 3 1392  4 axis 1 1350  
115 0 0 6 124 1348 0 0 0 2 4 this 3 1392  4 axis 1 1350  
116 0 0 6 125 1348 0 0 0 2 4 this 3 1392  4 axis 1 1350  
117 0 0 7 126 1356 0 0 0 0 
118 0 0 7 128 1381 0 0 0 1 6 param0 0 1394  
119 0 0 7 128 1381 0 0 0 1 5 world 1 1338  
120 0 0 7 128 1381 0 0 0 2 5 world 1 1338  11 joint_group 1 1357  
121 0 0 4 129 1341 0 0 0 2 4 this 3 1381  6 anchor 1 1345  
122 0 0 4 129 1341 0 0 0 4 4 this 3 1381  1 x 1 1348  1 y 1 1348  1 z 1 1348  
123 0 0 4 130 1341 0 0 0 2 4 this 3 1381  6 anchor 1 1345  
124 0 0 4 130 1341 0 0 0 4 4 this 3 1381  1 x 1 1348  1 y 1 1348  1 z 1 1348  
125 0 0 7 131 1351 0 0 0 1 4 this 3 1394  
126 0 0 7 132 1351 0 0 0 1 4 this 3 1394  
127 0 0 7 133 1356 0 0 0 0 
128 0 0 7 136 1396 0 0 0 0 
129 0 0 7 136 1396 0 0 0 1 4 copy 1 1397  
130 0 0 6 137 1350 0 0 0 1 4 this 3 1396  
131 0 0 4 138 1341 0 0 0 1 4 this 3 1396  
132 0 0 4 139 1341 0 0 0 4 4 this 3 1396  7 themass 1 1348  6 center 1 1345  1 r 1 1399  
133 0 0 4 139 1341 0 0 0 11 4 this 3 1396  7 themass 1 1348  3 cgx 1 1348  3 cgy 1 1348  3 cgz 1 1348  3 I11 1 1348  3 I22 1 1348  3 I33 1 1348  3 I12 1 1348  3 I13 1 1348  3 I23 1 1348  
134 0 0 4 140 1341 0 0 0 3 4 this 3 1396  7 density 1 1348  6 radius 1 1348  
135 0 0 4 141 1341 0 0 0 3 4 this 3 1396  10 total_mass 1 1348  6 radius 1 1348  
136 0 0 4 142 1341 0 0 0 5 4 this 3 1396  7 density 1 1348  9 direction 1 1350  6 radius 1 1348  6 length 1 1348  
137 0 0 4 143 1341 0 0 0 5 4 this 3 1396  10 total_mass 1 1348  9 direction 1 1350  6 radius 1 1348  6 length 1 1348  
138 0 0 4 144 1341 0 0 0 5 4 this 3 1396  7 density 1 1348  9 direction 1 1350  6 radius 1 1348  6 length 1 1348  
139 0 0 4 145 1341 0 0 0 5 4 this 3 1396  10 total_mass 1 1348  9 direction 1 1350  6 radius 1 1348  6 length 1 1348  
140 0 0 4 146 1341 0 0 0 3 4 this 3 1396  7 density 1 1348  4 size 1 1345  
141 0 0 4 146 1341 0 0 0 5 4 this 3 1396  7 density 1 1348  2 lx 1 1348  2 ly 1 1348  2 lz 1 1348  
142 0 0 4 147 1341 0 0 0 3 4 this 3 1396  10 total_mass 1 1348  4 size 1 1345  
143 0 0 4 147 1341 0 0 0 5 4 this 3 1396  10 total_mass 1 1348  2 lx 1 1348  2 ly 1 1348  2 lz 1 1348  
144 0 0 4 148 1341 0 0 0 2 4 this 3 1396  7 newmass 1 1348  
145 0 0 4 149 1341 0 0 0 2 4 this 3 1396  3 pos 1 1345  
146 0 0 4 149 1341 0 0 0 4 4 this 3 1396  1 x 1 1348  1 y 1 1348  1 z 1 1348  
147 0 0 4 150 1341 0 0 0 2 4 this 3 1396  1 r 1 1399  
148 0 0 4 151 1341 0 0 0 2 4 this 3 1396  5 other 1 1396  
149 0 0 6 152 1348 0 0 0 1 4 this 3 1397  
150 0 0 7 153 1403 0 0 0 1 4 this 3 1397  
151 0 0 7 154 1404 0 0 0 1 4 this 3 1397  
152 0 0 4 155 1341 0 0 0 3 4 this 3 1397  3 out 1 1375  6 indent 1 1377  
153 0 0 7 156 1356 0 0 0 0 
154 0 0 7 158 1354 0 0 0 1 6 param0 0 1373  
155 0 0 7 158 1354 0 0 0 1 5 world 1 1338  
156 0 0 4 159 1341 0 0 0 1 4 this 3 1354  
157 0 0 6 160 1342 0 0 201 /**
 * Returns true if the ID is 0, meaning the OdeBody does not point to a valid
 * body.  It is an error to call a method on an empty body.  Note that an
 * empty OdeBody also evaluates to False.
 */ 1 4 this 3 1373  
158 0 0 6 161 1405 0 0 42 /**
 * Returns the underlying dBodyID.
 */ 1 4 this 3 1373  
159 0 0 4 162 1341 0 0 0 2 4 this 3 1354  16 linear_threshold 1 1348  
160 0 0 4 163 1341 0 0 0 2 4 this 3 1354  17 angular_threshold 1 1348  
161 0 0 4 164 1341 0 0 0 2 4 this 3 1354  5 steps 1 1350  
162 0 0 4 165 1341 0 0 0 2 4 this 3 1354  4 time 1 1348  
163 0 0 4 166 1341 0 0 0 2 4 this 3 1354  15 do_auto_disable 1 1350  
164 0 0 4 167 1341 0 0 0 1 4 this 3 1354  
165 0 0 4 168 1341 0 0 0 2 4 this 3 1354  4 data 1 1378  
166 0 0 4 169 1341 0 0 0 2 4 this 3 1354  3 pos 1 1345  
167 0 0 4 169 1341 0 0 0 4 4 this 3 1354  1 x 1 1348  1 y 1 1348  1 z 1 1348  
168 0 0 4 170 1341 0 0 0 2 4 this 3 1354  1 r 1 1399  
169 0 0 4 171 1341 0 0 0 2 4 this 3 1354  1 q 1 1407  
170 0 0 4 172 1341 0 0 0 2 4 this 3 1354  3 vel 1 1345  
171 0 0 4 172 1341 0 0 0 4 4 this 3 1354  1 x 1 1348  1 y 1 1348  1 z 1 1348  
172 0 0 4 173 1341 0 0 0 2 4 this 3 1354  3 vel 1 1345  
173 0 0 4 173 1341 0 0 0 4 4 this 3 1354  1 x 1 1348  1 y 1 1348  1 z 1 1348  
174 0 0 4 174 1341 0 0 0 2 4 this 3 1354  4 mass 1 1396  
175 0 0 6 175 1348 0 0 0 1 4 this 3 1373  
176 0 0 6 176 1348 0 0 0 1 4 this 3 1373  
177 0 0 6 177 1350 0 0 0 1 4 this 3 1373  
178 0 0 6 178 1348 0 0 0 1 4 this 3 1373  
179 0 0 6 179 1350 0 0 0 1 4 this 3 1373  
180 0 0 6 180 1378 0 0 0 1 4 this 3 1373  
181 0 0 7 181 1351 0 0 0 1 4 this 3 1373  
182 0 0 7 182 1404 0 0 0 1 4 this 3 1373  
183 0 0 7 183 1411 0 0 0 1 4 this 3 1373  
184 0 0 7 184 1351 0 0 0 1 4 this 3 1373  
185 0 0 7 185 1351 0 0 0 1 4 this 3 1373  
186 0 0 7 186 1396 0 0 0 1 4 this 3 1373  
187 0 0 4 187 1341 0 0 0 2 4 this 3 1354  1 f 1 1345  
188 0 0 4 187 1341 0 0 0 4 4 this 3 1354  2 fx 1 1348  2 fy 1 1348  2 fz 1 1348  
189 0 0 4 188 1341 0 0 0 2 4 this 3 1354  1 f 1 1345  
190 0 0 4 188 1341 0 0 0 4 4 this 3 1354  2 fx 1 1348  2 fy 1 1348  2 fz 1 1348  
191 0 0 4 189 1341 0 0 0 2 4 this 3 1354  1 f 1 1345  
192 0 0 4 189 1341 0 0 0 4 4 this 3 1354  2 fx 1 1348  2 fy 1 1348  2 fz 1 1348  
193 0 0 4 190 1341 0 0 0 2 4 this 3 1354  1 f 1 1345  
194 0 0 4 190 1341 0 0 0 4 4 this 3 1354  2 fx 1 1348  2 fy 1 1348  2 fz 1 1348  
195 0 0 4 191 1341 0 0 0 3 4 this 3 1354  1 f 1 1345  3 pos 1 1345  
196 0 0 4 191 1341 0 0 0 7 4 this 3 1354  2 fx 1 1348  2 fy 1 1348  2 fz 1 1348  2 px 1 1348  2 py 1 1348  2 pz 1 1348  
197 0 0 4 192 1341 0 0 0 3 4 this 3 1354  1 f 1 1345  3 pos 1 1345  
198 0 0 4 192 1341 0 0 0 7 4 this 3 1354  2 fx 1 1348  2 fy 1 1348  2 fz 1 1348  2 px 1 1348  2 py 1 1348  2 pz 1 1348  
199 0 0 4 193 1341 0 0 0 3 4 this 3 1354  1 f 1 1345  3 pos 1 1345  
200 0 0 4 193 1341 0 0 0 7 4 this 3 1354  2 fx 1 1348  2 fy 1 1348  2 fz 1 1348  2 px 1 1348  2 py 1 1348  2 pz 1 1348  
201 0 0 4 194 1341 0 0 0 3 4 this 3 1354  1 f 1 1345  3 pos 1 1345  
202 0 0 4 194 1341 0 0 0 7 4 this 3 1354  2 fx 1 1348  2 fy 1 1348  2 fz 1 1348  2 px 1 1348  2 py 1 1348  2 pz 1 1348  
203 0 0 4 195 1341 0 0 0 2 4 this 3 1354  1 f 1 1345  
204 0 0 4 195 1341 0 0 0 4 4 this 3 1354  1 x 1 1348  1 y 1 1348  1 z 1 1348  
205 0 0 4 196 1341 0 0 0 2 4 this 3 1354  1 f 1 1345  
206 0 0 4 196 1341 0 0 0 4 4 this 3 1354  1 x 1 1348  1 y 1 1348  1 z 1 1348  
207 0 0 7 197 1403 0 0 0 2 4 this 3 1373  3 pos 1 1345  
208 0 0 7 197 1403 0 0 0 4 4 this 3 1373  2 px 1 1348  2 py 1 1348  2 pz 1 1348  
209 0 0 7 198 1403 0 0 0 2 4 this 3 1373  3 pos 1 1345  
210 0 0 7 198 1403 0 0 0 4 4 this 3 1373  2 px 1 1348  2 py 1 1348  2 pz 1 1348  
211 0 0 7 199 1403 0 0 0 2 4 this 3 1373  3 pos 1 1345  
212 0 0 7 199 1403 0 0 0 4 4 this 3 1373  2 px 1 1348  2 py 1 1348  2 pz 1 1348  
213 0 0 7 200 1403 0 0 0 2 4 this 3 1373  3 pos 1 1345  
214 0 0 7 200 1403 0 0 0 4 4 this 3 1373  2 px 1 1348  2 py 1 1348  2 pz 1 1348  
215 0 0 7 201 1351 0 0 0 2 4 this 3 1373  3 pos 1 1345  
216 0 0 7 201 1351 0 0 0 4 4 this 3 1373  2 px 1 1348  2 py 1 1348  2 pz 1 1348  
217 0 0 7 202 1351 0 0 0 2 4 this 3 1373  3 pos 1 1345  
218 0 0 7 202 1351 0 0 0 4 4 this 3 1373  2 px 1 1348  2 py 1 1348  2 pz 1 1348  
219 0 0 4 203 1341 0 0 0 2 4 this 3 1354  4 mode 1 1350  
220 0 0 4 204 1341 0 0 0 2 4 this 3 1354  4 axis 1 1345  
221 0 0 4 204 1341 0 0 0 4 4 this 3 1354  1 x 1 1348  1 y 1 1348  1 z 1 1348  
222 0 0 6 205 1350 0 0 0 1 4 this 3 1373  
223 0 0 7 206 1351 0 0 0 1 4 this 3 1373  
224 0 0 6 207 1350 0 0 0 1 4 this 3 1373  
225 0 0 7 208 1370 0 0 0 2 4 this 3 1373  5 index 1 1350  
226 0 0 6 210 1378 0 0 0 2 4 this 3 1373  1 i 1 1350  
227 0 0 4 211 1341 0 0 0 1 4 this 3 1354  
228 0 0 4 212 1341 0 0 0 1 4 this 3 1354  
229 0 0 6 213 1350 0 0 0 1 4 this 3 1373  
230 0 0 4 214 1341 0 0 0 2 4 this 3 1354  4 mode 1 1350  
231 0 0 6 215 1350 0 0 0 1 4 this 3 1373  
232 0 0 4 216 1341 0 0 0 3 4 this 3 1373  3 out 1 1375  6 indent 1 1377  
233 0 0 6 218 1350 0 0 0 2 4 this 3 1373  5 other 1 1373  
234 0 0 7 219 1356 0 0 0 0 
235 0 0 6 217 1342 0 0 0 1 4 this 3 1373  
236 0 0 7 262 1414 0 0 0 1 6 param0 0 1412  
237 0 0 4 221 1341 0 0 0 1 4 this 3 1414  
238 0 0 6 222 1342 0 0 205 /**
 * Returns true if the ID is 0, meaning the OdeSpace does not point to a valid
 * space.  It is an error to call a method on an empty space.  Note that an
 * empty OdeSpace also evaluates to False.
 */ 1 4 this 3 1412  
239 0 0 4 223 1341 0 0 0 2 4 this 3 1414  4 mode 1 1350  
240 0 0 6 224 1350 0 0 0 1 4 this 3 1412  
241 0 0 6 225 1350 0 0 0 2 4 this 3 1412  4 geom 1 1415  
242 0 0 6 225 1350 0 0 0 2 4 this 3 1412  5 space 1 1412  
243 0 0 6 226 1350 0 0 0 1 4 this 3 1412  
244 0 0 4 227 1341 0 0 0 3 4 this 3 1412  3 min 1 1351  3 max 1 1351  
245 0 0 6 228 1378 0 0 0 1 4 this 3 1412  
246 0 0 6 229 1350 0 0 0 1 4 this 3 1414  
247 0 0 6 230 1350 0 0 0 1 4 this 3 1412  
248 0 0 4 231 1341 0 0 0 2 4 this 3 1414  4 bits 1 1417  
249 0 0 4 232 1341 0 0 0 2 4 this 3 1414  4 bits 1 1417  
250 0 0 7 233 1421 0 0 0 1 4 this 3 1414  
251 0 0 7 234 1421 0 0 0 1 4 this 3 1414  
252 0 0 4 235 1341 0 0 0 1 4 this 3 1414  
253 0 0 4 236 1341 0 0 0 1 4 this 3 1414  
254 0 0 6 237 1350 0 0 0 1 4 this 3 1414  
255 0 0 4 238 1341 0 0 0 2 4 this 3 1414  6 param0 0 1338  
256 0 0 4 239 1341 0 0 0 2 4 this 3 1414  6 param0 0 1357  
257 0 0 4 240 1341 0 0 0 2 4 this 3 1414  4 geom 1 1422  
258 0 0 4 240 1341 0 0 0 2 4 this 3 1414  5 space 1 1414  
259 0 0 4 241 1341 0 0 0 2 4 this 3 1414  4 geom 1 1422  
260 0 0 4 241 1341 0 0 0 2 4 this 3 1414  5 space 1 1414  
261 0 0 4 242 1341 0 0 0 1 4 this 3 1414  
262 0 0 7 243 1422 0 0 0 2 4 this 3 1414  1 i 1 1350  
263 0 0 7 244 1414 0 0 0 1 4 this 3 1412  
264 0 0 4 245 1341 0 0 0 3 4 this 3 1412  3 out 1 1375  6 indent 1 1377  
265 0 0 7 247 1423 0 0 0 1 4 this 3 1412  
266 0 0 7 248 1424 0 0 0 1 4 this 3 1412  
267 0 0 7 249 1425 0 0 0 1 4 this 3 1412  
268 0 0 6 250 1378 0 0 0 1 4 this 3 1412  
269 0 0 6 251 1378 0 0 0 2 4 this 3 1412  1 i 1 1350  
270 0 0 6 252 1378 0 0 0 1 4 this 3 1412  
271 0 0 4 253 1341 0 0 0 1 4 this 3 1414  
272 0 0 6 254 1350 0 0 0 3 4 this 3 1414  3 arg 1 1378  13 near_callback 1 1378  
273 0 0 6 255 1350 0 0 0 3 4 this 3 1414  4 geom 1 1422  10 collide_id 1 1350  
274 0 0 6 255 1350 0 0 0 3 4 this 3 1414  10 collide_id 1 1350  2 id 1 1426  
275 0 0 4 256 1341 0 0 0 3 4 this 3 1414  4 geom 1 1422  12 surface_type 1 1350  
276 0 0 4 256 1341 0 0 0 3 4 this 3 1414  12 surface_type 1 1350  2 id 1 1426  
277 0 0 6 257 1350 0 0 0 2 4 this 3 1414  4 geom 1 1422  
278 0 0 6 257 1350 0 0 0 2 4 this 3 1414  2 o1 1 1426  
279 0 0 6 258 1350 0 0 0 2 4 this 3 1414  4 geom 1 1422  
280 0 0 6 258 1350 0 0 0 2 4 this 3 1414  2 o1 1 1426  
281 0 0 4 259 1341 0 0 0 2 4 this 3 1414  10 event_name 1 1428  
282 0 0 6 260 1428 0 0 0 1 4 this 3 1414  
283 0 0 7 261 1356 0 0 0 0 
284 0 0 6 246 1342 0 0 0 1 4 this 3 1412  
285 0 0 7 316 1422 0 0 0 1 6 param0 0 1415  
286 0 0 4 265 1341 0 0 0 1 4 this 3 1422  
287 0 0 6 266 1342 0 0 201 /**
 * Returns true if the ID is 0, meaning the OdeGeom does not point to a valid
 * geom.  It is an error to call a method on an empty geom.  Note that an
 * empty OdeGeom also evaluates to False.
 */ 1 4 this 3 1415  
288 0 0 6 267 1426 0 0 42 /**
 * Returns the underlying dGeomID.
 */ 1 4 this 3 1415  
289 0 0 4 268 1341 0 0 36 // INLINE void set_data(void* data); 2 4 this 3 1422  4 body 1 1354  
290 0 0 6 269 1342 0 0 0 1 4 this 3 1415  
291 0 0 7 270 1354 0 0 0 1 4 this 3 1415  
292 0 0 4 271 1341 0 0 0 2 4 this 3 1422  3 pos 1 1345  
293 0 0 4 271 1341 0 0 0 4 4 this 3 1422  1 x 1 1348  1 y 1 1348  1 z 1 1348  
294 0 0 4 272 1341 0 0 0 2 4 this 3 1422  1 r 1 1399  
295 0 0 4 273 1341 0 0 0 2 4 this 3 1422  1 q 1 1407  
296 0 0 7 274 1403 0 0 0 1 4 this 3 1415  
297 0 0 7 275 1404 0 0 0 1 4 this 3 1415  
298 0 0 7 276 1429 0 0 0 1 4 this 3 1415  
299 0 0 4 277 1341 0 0 0 3 4 this 3 1415  3 min 1 1351  3 max 1 1351  
300 0 0 6 278 1378 0 0 0 1 4 this 3 1415  
301 0 0 6 279 1350 0 0 0 1 4 this 3 1422  
302 0 0 6 280 1350 0 0 0 1 4 this 3 1415  
303 0 0 4 281 1341 0 0 0 2 4 this 3 1422  4 bits 1 1417  
304 0 0 4 282 1341 0 0 0 2 4 this 3 1422  4 bits 1 1417  
305 0 0 7 283 1421 0 0 0 1 4 this 3 1422  
306 0 0 7 284 1421 0 0 0 1 4 this 3 1422  
307 0 0 4 285 1341 0 0 0 1 4 this 3 1422  
308 0 0 4 286 1341 0 0 0 1 4 this 3 1422  
309 0 0 6 287 1350 0 0 0 1 4 this 3 1422  
310 0 0 4 288 1341 0 0 0 2 4 this 3 1422  3 pos 1 1345  
311 0 0 4 288 1341 0 0 0 4 4 this 3 1422  1 x 1 1348  1 y 1 1348  1 z 1 1348  
312 0 0 4 289 1341 0 0 0 2 4 this 3 1422  1 r 1 1399  
313 0 0 4 290 1341 0 0 0 2 4 this 3 1422  1 q 1 1407  
314 0 0 4 291 1341 0 0 0 2 4 this 3 1422  3 pos 1 1345  
315 0 0 4 291 1341 0 0 0 4 4 this 3 1422  1 x 1 1348  1 y 1 1348  1 z 1 1348  
316 0 0 4 292 1341 0 0 0 2 4 this 3 1422  1 r 1 1399  
317 0 0 4 293 1341 0 0 0 2 4 this 3 1422  1 q 1 1407  
318 0 0 4 294 1341 0 0 0 1 4 this 3 1422  
319 0 0 6 295 1350 0 0 0 1 4 this 3 1422  
320 0 0 7 296 1403 0 0 0 1 4 this 3 1415  
321 0 0 7 297 1404 0 0 0 1 4 this 3 1415  
322 0 0 7 298 1429 0 0 0 1 4 this 3 1415  
323 0 0 7 299 1414 0 0 0 1 4 this 3 1415  
324 0 0 6 300 1378 0 0 0 1 4 this 3 1415  
325 0 0 4 301 1341 0 0 0 3 4 this 3 1415  3 out 1 1375  6 indent 1 1377  
326 0 0 6 303 1350 0 0 0 2 4 this 3 1415  5 other 1 1415  
327 0 0 6 304 1378 0 0 0 1 4 this 3 1415  
328 0 0 7 305 1430 0 0 0 1 4 this 3 1415  
329 0 0 7 306 1431 0 0 0 1 4 this 3 1415  
330 0 0 7 307 1432 0 0 43 // OdeConvexGeom convert_to_convex() const; 1 4 this 3 1415  
331 0 0 7 308 1433 0 0 53 // OdeHeightfieldGeom convert_to_heightfield() const; 1 4 this 3 1415  
332 0 0 7 309 1434 0 0 0 1 4 this 3 1415  
333 0 0 7 310 1435 0 0 0 1 4 this 3 1415  
334 0 0 7 311 1436 0 0 0 1 4 this 3 1415  
335 0 0 7 312 1423 0 0 0 1 4 this 3 1415  
336 0 0 7 313 1424 0 0 0 1 4 this 3 1415  
337 0 0 7 314 1425 0 0 0 1 4 this 3 1415  
338 0 0 7 315 1356 0 0 0 0 
339 0 0 6 302 1342 0 0 0 1 4 this 3 1415  
340 0 0 7 318 1430 0 0 0 1 6 param0 0 1437  
341 0 0 7 318 1430 0 0 0 2 5 space 1 1414  4 size 1 1345  
342 0 0 7 318 1430 0 0 0 4 5 space 1 1414  2 lx 1 1348  2 ly 1 1348  2 lz 1 1348  
343 0 0 7 318 1430 0 0 0 3 2 lx 1 1348  2 ly 1 1348  2 lz 1 1348  
344 0 0 4 319 1341 0 0 0 2 4 this 3 1430  4 size 1 1345  
345 0 0 4 319 1341 0 0 0 4 4 this 3 1430  2 lx 1 1348  2 ly 1 1348  2 lz 1 1348  
346 0 0 7 320 1351 0 0 0 1 4 this 3 1430  
347 0 0 6 321 1348 0 0 0 2 4 this 3 1430  1 p 1 1439  
348 0 0 6 321 1348 0 0 0 4 4 this 3 1430  1 x 1 1348  1 y 1 1348  1 z 1 1348  
349 0 0 7 322 1356 0 0 0 0 
350 0 0 7 324 1431 0 0 0 1 6 param0 0 1441  
351 0 0 7 324 1431 0 0 0 3 5 space 1 1414  6 radius 1 1348  6 length 1 1348  
352 0 0 7 324 1431 0 0 0 2 6 radius 1 1348  6 length 1 1348  
353 0 0 4 325 1341 0 0 0 3 4 this 3 1431  6 radius 1 1348  6 length 1 1348  
354 0 0 6 327 1348 0 0 0 1 4 this 3 1441  
355 0 0 6 328 1348 0 0 0 1 4 this 3 1441  
356 0 0 6 329 1348 0 0 0 2 4 this 3 1441  1 p 1 1439  
357 0 0 6 329 1348 0 0 0 4 4 this 3 1441  1 x 1 1348  1 y 1 1348  1 z 1 1348  
358 0 0 7 330 1356 0 0 0 0 
359 0 0 7 332 1443 0 0 0 0 
360 0 0 7 332 1443 0 0 0 1 4 copy 1 1444  
361 0 0 7 333 1351 0 0 0 1 4 this 3 1444  
362 0 0 7 334 1351 0 0 0 1 4 this 3 1444  
363 0 0 6 335 1348 0 0 0 1 4 this 3 1444  
364 0 0 7 336 1422 0 0 0 1 4 this 3 1444  
365 0 0 7 337 1422 0 0 0 1 4 this 3 1444  
366 0 0 6 338 1350 0 0 0 1 4 this 3 1444  
367 0 0 6 339 1350 0 0 0 1 4 this 3 1444  
368 0 0 4 340 1341 0 0 0 2 4 this 3 1443  3 pos 1 1345  
369 0 0 4 341 1341 0 0 0 2 4 this 3 1443  6 normal 1 1345  
370 0 0 4 342 1341 0 0 0 2 4 this 3 1443  5 depth 1 1446  
371 0 0 4 343 1341 0 0 0 2 4 this 3 1443  4 geom 1 1415  
372 0 0 4 344 1341 0 0 0 2 4 this 3 1443  4 geom 1 1415  
373 0 0 7 345 1356 0 0 0 0 
374 0 0 7 360 1449 0 0 0 1 6 param0 0 1447  
375 0 0 7 347 1422 0 0 51 /**
 * Returns the first geom in the collision.
 */ 1 4 this 3 1447  
376 0 0 7 348 1422 0 0 52 /**
 * Returns the second geom in the collision.
 */ 1 4 this 3 1447  
377 0 0 7 349 1354 0 0 51 /**
 * Returns the first body in the collision.
 */ 1 4 this 3 1447  
378 0 0 7 350 1354 0 0 52 /**
 * Returns the second body in the collision.
 */ 1 4 this 3 1447  
379 0 0 6 351 1450 0 0 59 /**
 * Returns the number of contacts in the collision.
 */ 1 4 this 3 1447  
380 0 0 7 352 1403 0 0 123 /**
 * Returns the nth contact point in the collision.  This does exactly the same
 * as get_contact_geom(n).get_pos().
 */ 2 4 this 3 1447  1 n 1 1450  
381 0 0 7 353 1443 0 0 57 /**
 * Returns the nth contact geom in the collision.
 */ 2 4 this 3 1447  1 n 1 1450  
382 0 0 7 354 1443 0 0 0 2 4 this 3 1447  1 n 1 1450  
383 0 0 6 358 1342 0 0 55 /**
 * Returns true if the entry holds no contacts.
 */ 1 4 this 3 1447  
384 0 0 7 359 1356 0 0 0 0 
385 0 0 6 357 1342 0 0 0 1 4 this 3 1447  
386 0 0 7 363 1452 0 0 0 2 4 mode 1 1350  2 mu 1 1348  
387 0 0 4 364 1341 0 0 0 2 4 this 3 1452  4 mode 1 1350  
388 0 0 4 365 1341 0 0 0 2 4 this 3 1452  2 mu 1 1348  
389 0 0 4 366 1341 0 0 0 2 4 this 3 1452  3 mu2 1 1348  
390 0 0 4 367 1341 0 0 0 2 4 this 3 1452  6 bounce 1 1348  
391 0 0 4 368 1341 0 0 0 2 4 this 3 1452  10 bounce_vel 1 1348  
392 0 0 4 369 1341 0 0 0 2 4 this 3 1452  8 soft_erp 1 1348  
393 0 0 4 370 1341 0 0 0 2 4 this 3 1452  8 soft_cfm 1 1348  
394 0 0 4 371 1341 0 0 0 2 4 this 3 1452  6 motion 1 1348  
395 0 0 4 372 1341 0 0 0 2 4 this 3 1452  6 motion 1 1348  
396 0 0 4 373 1341 0 0 0 2 4 this 3 1452  4 slip 1 1348  
397 0 0 4 374 1341 0 0 0 2 4 this 3 1452  4 slip 1 1348  
398 0 0 6 375 1350 0 0 0 1 4 this 3 1453  
399 0 0 6 376 1348 0 0 0 1 4 this 3 1453  
400 0 0 6 377 1348 0 0 0 1 4 this 3 1453  
401 0 0 6 378 1348 0 0 0 1 4 this 3 1453  
402 0 0 6 379 1348 0 0 0 1 4 this 3 1453  
403 0 0 6 380 1348 0 0 0 1 4 this 3 1453  
404 0 0 6 381 1348 0 0 0 1 4 this 3 1453  
405 0 0 6 382 1348 0 0 0 1 4 this 3 1453  
406 0 0 6 383 1348 0 0 0 1 4 this 3 1453  
407 0 0 6 384 1348 0 0 0 1 4 this 3 1453  
408 0 0 6 385 1348 0 0 0 1 4 this 3 1453  
409 0 0 7 386 1356 0 0 0 0 
410 0 0 7 388 1455 0 0 0 0 
411 0 0 7 388 1455 0 0 38 // OdeContact(const OdeContact &copy); 1 7 contact 1 1456  
412 0 0 7 389 1452 0 0 0 1 4 this 3 1459  
413 0 0 7 390 1443 0 0 0 1 4 this 3 1455  
414 0 0 7 391 1351 0 0 0 1 4 this 3 1459  
415 0 0 4 392 1341 0 0 0 2 4 this 3 1455  18 surface_parameters 1 1453  
416 0 0 4 393 1341 0 0 0 2 4 this 3 1455  12 contact_geom 1 1444  
417 0 0 4 394 1341 0 0 0 2 4 this 3 1455  5 fdir1 1 1345  
418 0 0 7 395 1356 0 0 0 0 
419 0 0 7 397 1384 0 0 0 1 6 param0 0 1461  
420 0 0 7 397 1384 0 0 0 2 5 world 1 1338  7 contact 1 1459  
421 0 0 7 397 1384 0 0 0 3 5 world 1 1338  11 joint_group 1 1357  7 contact 1 1459  
422 0 0 7 398 1356 0 0 0 0 
423 0 0 7 400 1432 0 0 0 1 6 param0 0 1463  
424 0 0 7 400 1432 0 0 0 3 5 space 1 1414  6 radius 1 1348  6 length 1 1348  
425 0 0 7 400 1432 0 0 0 2 6 radius 1 1348  6 length 1 1348  
426 0 0 4 401 1341 0 0 0 3 4 this 3 1432  6 radius 1 1348  6 length 1 1348  
427 0 0 6 403 1348 0 0 0 1 4 this 3 1463  
428 0 0 6 404 1348 0 0 0 1 4 this 3 1463  
429 0 0 7 405 1356 0 0 0 0 
430 0 0 7 407 1387 0 0 0 1 6 param0 0 1465  
431 0 0 7 407 1387 0 0 0 1 5 world 1 1338  
432 0 0 7 407 1387 0 0 0 2 5 world 1 1338  11 joint_group 1 1357  
433 0 0 4 408 1341 0 0 0 1 4 this 3 1387  
434 0 0 7 409 1356 0 0 0 0 
435 0 0 7 411 1424 0 0 0 0 
436 0 0 7 411 1424 0 0 0 1 6 param0 0 1467  
437 0 0 7 411 1424 0 0 0 1 5 space 1 1414  
438 0 0 4 412 1341 0 0 0 3 4 this 3 1424  8 minlevel 1 1350  8 maxlevel 1 1350  
439 0 0 6 413 1350 0 0 0 1 4 this 3 1467  
440 0 0 6 414 1350 0 0 0 1 4 this 3 1467  
441 0 0 7 415 1356 0 0 0 0 
442 0 0 7 417 1386 0 0 0 1 6 param0 0 1469  
443 0 0 7 417 1386 0 0 0 1 5 world 1 1338  
444 0 0 7 417 1386 0 0 0 2 5 world 1 1338  11 joint_group 1 1357  
445 0 0 4 418 1341 0 0 0 2 4 this 3 1386  6 anchor 1 1345  
446 0 0 4 418 1341 0 0 0 4 4 this 3 1386  1 x 1 1348  1 y 1 1348  1 z 1 1348  
447 0 0 4 419 1341 0 0 0 2 4 this 3 1386  4 axis 1 1345  
448 0 0 4 419 1341 0 0 0 4 4 this 3 1386  1 x 1 1348  1 y 1 1348  1 z 1 1348  
449 0 0 4 420 1341 0 0 0 2 4 this 3 1386  4 axis 1 1345  
450 0 0 4 420 1341 0 0 0 4 4 this 3 1386  1 x 1 1348  1 y 1 1348  1 z 1 1348  
451 0 0 4 421 1341 0 0 0 3 4 this 3 1386  7 torque1 1 1348  7 torque2 1 1348  
452 0 0 7 422 1351 0 0 0 1 4 this 3 1469  
453 0 0 7 423 1351 0 0 0 1 4 this 3 1469  
454 0 0 7 424 1351 0 0 0 1 4 this 3 1469  
455 0 0 7 425 1351 0 0 0 1 4 this 3 1469  
456 0 0 6 426 1348 0 0 0 1 4 this 3 1469  
457 0 0 6 427 1348 0 0 0 1 4 this 3 1469  
458 0 0 6 428 1348 0 0 0 1 4 this 3 1469  
459 0 0 4 429 1341 0 0 0 3 4 this 3 1386  4 axis 1 1350  3 val 1 1348  
460 0 0 4 430 1341 0 0 0 3 4 this 3 1386  4 axis 1 1350  3 val 1 1348  
461 0 0 4 431 1341 0 0 0 3 4 this 3 1386  4 axis 1 1350  3 val 1 1348  
462 0 0 4 432 1341 0 0 0 3 4 this 3 1386  4 axis 1 1350  3 val 1 1348  
463 0 0 4 433 1341 0 0 0 3 4 this 3 1386  4 axis 1 1350  3 val 1 1348  
464 0 0 4 434 1341 0 0 0 3 4 this 3 1386  4 axis 1 1350  3 val 1 1348  
465 0 0 4 435 1341 0 0 0 3 4 this 3 1386  4 axis 1 1350  3 val 1 1348  
466 0 0 4 436 1341 0 0 0 3 4 this 3 1386  4 axis 1 1350  3 val 1 1348  
467 0 0 4 437 1341 0 0 0 3 4 this 3 1386  4 axis 1 1350  3 val 1 1348  
468 0 0 4 438 1341 0 0 0 3 4 this 3 1386  4 axis 1 1350  3 val 1 1348  
469 0 0 4 439 1341 0 0 0 3 4 this 3 1386  4 axis 1 1350  3 val 1 1348  
470 0 0 6 440 1348 0 0 0 2 4 this 3 1469  4 axis 1 1350  
471 0 0 6 441 1348 0 0 0 2 4 this 3 1469  4 axis 1 1350  
472 0 0 6 442 1348 0 0 0 2 4 this 3 1469  4 axis 1 1350  
473 0 0 6 443 1348 0 0 0 2 4 this 3 1469  4 axis 1 1350  
474 0 0 6 444 1348 0 0 0 2 4 this 3 1469  4 axis 1 1350  
475 0 0 6 445 1348 0 0 0 2 4 this 3 1469  4 axis 1 1350  
476 0 0 6 446 1348 0 0 0 2 4 this 3 1469  4 axis 1 1350  
477 0 0 6 447 1348 0 0 0 2 4 this 3 1469  4 axis 1 1350  
478 0 0 6 448 1348 0 0 0 2 4 this 3 1469  4 axis 1 1350  
479 0 0 6 449 1348 0 0 0 2 4 this 3 1469  4 axis 1 1350  
480 0 0 6 450 1348 0 0 0 2 4 this 3 1469  4 axis 1 1350  
481 0 0 7 451 1356 0 0 0 0 
482 0 0 7 453 1382 0 0 0 1 6 param0 0 1471  
483 0 0 7 453 1382 0 0 0 1 5 world 1 1338  
484 0 0 7 453 1382 0 0 0 2 5 world 1 1338  11 joint_group 1 1357  
485 0 0 4 454 1341 0 0 0 2 4 this 3 1382  6 anchor 1 1345  
486 0 0 4 454 1341 0 0 0 4 4 this 3 1382  1 x 1 1348  1 y 1 1348  1 z 1 1348  
487 0 0 4 455 1341 0 0 0 3 4 this 3 1382  6 anchor 1 1345  3 vec 1 1345  
488 0 0 4 455 1341 0 0 0 7 4 this 3 1382  1 x 1 1348  1 y 1 1348  1 z 1 1348  2 ax 1 1348  2 ay 1 1348  2 az 1 1348  
489 0 0 4 456 1341 0 0 0 2 4 this 3 1382  4 axis 1 1345  
490 0 0 4 456 1341 0 0 0 4 4 this 3 1382  1 x 1 1348  1 y 1 1348  1 z 1 1348  
491 0 0 4 457 1341 0 0 0 2 4 this 3 1382  6 torque 1 1348  
492 0 0 7 458 1351 0 0 0 1 4 this 3 1471  
493 0 0 7 459 1351 0 0 0 1 4 this 3 1471  
494 0 0 7 460 1351 0 0 0 1 4 this 3 1471  
495 0 0 6 461 1348 0 0 0 1 4 this 3 1471  
496 0 0 6 462 1348 0 0 0 1 4 this 3 1471  
497 0 0 4 463 1341 0 0 0 2 4 this 3 1382  3 val 1 1348  
498 0 0 4 464 1341 0 0 0 2 4 this 3 1382  3 val 1 1348  
499 0 0 4 465 1341 0 0 0 2 4 this 3 1382  3 val 1 1348  
500 0 0 4 466 1341 0 0 0 2 4 this 3 1382  3 val 1 1348  
501 0 0 4 467 1341 0 0 0 2 4 this 3 1382  3 val 1 1348  
502 0 0 4 468 1341 0 0 0 2 4 this 3 1382  3 val 1 1348  
503 0 0 4 469 1341 0 0 0 2 4 this 3 1382  3 val 1 1348  
504 0 0 4 470 1341 0 0 0 2 4 this 3 1382  3 val 1 1348  
505 0 0 4 471 1341 0 0 0 2 4 this 3 1382  3 val 1 1348  
506 0 0 6 472 1348 0 0 0 1 4 this 3 1471  
507 0 0 6 473 1348 0 0 0 1 4 this 3 1471  
508 0 0 6 474 1348 0 0 0 1 4 this 3 1471  
509 0 0 6 475 1348 0 0 0 1 4 this 3 1471  
510 0 0 6 476 1348 0 0 0 1 4 this 3 1471  
511 0 0 6 477 1348 0 0 0 1 4 this 3 1471  
512 0 0 6 478 1348 0 0 0 1 4 this 3 1471  
513 0 0 6 479 1348 0 0 0 1 4 this 3 1471  
514 0 0 6 480 1348 0 0 0 1 4 this 3 1471  
515 0 0 7 481 1356 0 0 0 0 
516 0 0 7 483 1473 1142 0 0 0 
517 0 0 7 483 1473 1142 0 0 1 4 copy 1 1474  
518 0 0 6 484 1473 0 0 0 2 4 this 3 1473  4 copy 1 1474  
519 0 0 4 486 1341 0 0 0 2 4 this 3 1473  5 joint 1 1368  
520 0 0 6 487 1342 0 0 0 2 4 this 3 1473  5 joint 1 1368  
521 0 0 4 488 1341 0 0 0 2 4 this 3 1473  5 other 1 1474  
522 0 0 4 489 1341 0 0 0 2 4 this 3 1473  5 other 1 1474  
523 0 0 4 490 1341 0 0 0 1 4 this 3 1473  
524 0 0 6 491 1342 0 0 0 2 4 this 3 1474  5 joint 1 1368  
525 0 0 4 492 1341 0 0 0 1 4 this 3 1473  
526 0 0 6 493 1342 0 0 0 1 4 this 3 1474  
527 0 0 6 494 1350 0 0 0 1 4 this 3 1474  
528 0 0 7 495 1370 0 0 0 2 4 this 3 1474  5 index 1 1350  
529 0 0 7 497 1370 0 0 0 2 4 this 3 1474  5 index 1 1350  
530 0 0 6 498 1350 0 0 106 /**
 * Returns the number of joints in the collection.  This is the same thing as
 * get_num_joints().
 */ 1 4 this 3 1474  
531 0 0 6 499 1473 0 0 0 2 4 this 3 1473  5 other 1 1474  
532 0 0 7 500 1473 1142 0 0 2 4 this 3 1474  5 other 1 1474  
533 0 0 7 502 1390 0 0 0 1 6 param0 0 1476  
534 0 0 7 502 1390 0 0 0 1 5 world 1 1338  
535 0 0 7 502 1390 0 0 0 2 5 world 1 1338  11 joint_group 1 1357  
536 0 0 4 503 1341 0 0 0 2 4 this 3 1390  3 num 1 1350  
537 0 0 4 504 1341 0 0 0 4 4 this 3 1390  4 anum 1 1350  3 rel 1 1350  4 axis 1 1345  
538 0 0 4 504 1341 0 0 0 6 4 this 3 1390  4 anum 1 1350  3 rel 1 1350  1 x 1 1348  1 y 1 1348  1 z 1 1348  
539 0 0 4 505 1341 0 0 0 3 4 this 3 1390  9 parameter 1 1350  5 value 1 1348  
540 0 0 6 506 1350 0 0 0 1 4 this 3 1476  
541 0 0 7 507 1351 0 0 0 2 4 this 3 1476  4 anum 1 1350  
542 0 0 6 509 1348 0 0 0 2 4 this 3 1476  9 parameter 1 1350  
543 0 0 7 510 1356 0 0 0 0 
544 0 0 7 512 1388 0 0 0 1 6 param0 0 1478  
545 0 0 7 512 1388 0 0 0 1 5 world 1 1338  
546 0 0 7 512 1388 0 0 0 2 5 world 1 1338  11 joint_group 1 1357  
547 0 0 7 513 1356 0 0 0 0 
548 0 0 7 515 1391 0 0 0 1 6 param0 0 1480  
549 0 0 7 515 1391 0 0 0 1 5 world 1 1338  
550 0 0 7 515 1391 0 0 0 2 5 world 1 1338  11 joint_group 1 1357  
551 0 0 4 516 1341 0 0 0 3 4 this 3 1391  9 parameter 1 1350  5 value 1 1348  
552 0 0 4 517 1341 0 0 0 3 4 this 3 1391  9 parameter 1 1350  5 value 1 1348  
553 0 0 4 518 1341 0 0 0 3 4 this 3 1391  9 parameter 1 1350  5 value 1 1348  
554 0 0 7 519 1356 0 0 0 0 
555 0 0 7 521 1433 0 0 0 1 6 params 1 1482  
556 0 0 7 521 1433 0 0 0 1 6 param0 0 1484  
557 0 0 7 521 1433 0 0 0 2 5 space 1 1414  6 params 1 1482  
558 0 0 7 521 1433 0 0 0 5 5 space 1 1414  1 a 1 1348  1 b 1 1348  1 c 1 1348  1 d 1 1348  
559 0 0 7 521 1433 0 0 0 4 1 a 1 1348  1 b 1 1348  1 c 1 1348  1 d 1 1348  
560 0 0 4 522 1341 0 0 0 2 4 this 3 1433  6 params 1 1482  
561 0 0 4 522 1341 0 0 0 5 4 this 3 1433  1 a 1 1348  1 b 1 1348  1 c 1 1348  1 d 1 1348  
562 0 0 7 523 1411 0 0 0 1 4 this 3 1484  
563 0 0 6 524 1348 0 0 0 2 4 this 3 1484  1 p 1 1439  
564 0 0 6 524 1348 0 0 0 4 4 this 3 1484  1 x 1 1348  1 y 1 1348  1 z 1 1348  
565 0 0 7 525 1356 0 0 0 0 
566 0 0 7 527 1425 0 0 0 3 6 center 1 1439  7 extents 1 1345  5 depth 1 1486  
567 0 0 7 527 1425 0 0 0 1 6 param0 0 1487  
568 0 0 7 527 1425 0 0 0 4 5 space 1 1414  6 center 1 1439  7 extents 1 1345  5 depth 1 1486  
569 0 0 7 528 1356 0 0 0 0 
570 0 0 7 530 1434 0 0 0 1 6 param0 0 1489  
571 0 0 7 530 1434 0 0 0 2 5 space 1 1414  6 length 1 1348  
572 0 0 7 530 1434 0 0 0 1 6 length 1 1348  
573 0 0 4 531 1341 0 0 0 2 4 this 3 1434  6 length 1 1348  
574 0 0 6 532 1348 0 0 0 1 4 this 3 1434  
575 0 0 4 533 1341 0 0 0 3 4 this 3 1434  5 start 1 1345  3 dir 1 1345  
576 0 0 4 533 1341 0 0 0 7 4 this 3 1434  2 px 1 1348  2 py 1 1348  2 pz 1 1348  2 dx 1 1348  2 dy 1 1348  2 dz 1 1348  
577 0 0 4 534 1341 0 0 0 3 4 this 3 1489  5 start 1 1351  3 dir 1 1351  
578 0 0 7 535 1351 0 0 0 1 4 this 3 1489  
579 0 0 7 536 1351 0 0 0 1 4 this 3 1489  
580 0 0 4 537 1341 0 0 0 3 4 this 3 1434  13 first_contact 1 1350  13 backface_cull 1 1350  
581 0 0 6 539 1350 0 0 0 1 4 this 3 1489  
582 0 0 6 540 1350 0 0 0 1 4 this 3 1489  
583 0 0 4 541 1341 0 0 0 2 4 this 3 1434  11 closest_hit 1 1350  
584 0 0 6 542 1350 0 0 0 1 4 this 3 1434  
585 0 0 7 543 1356 0 0 0 0 
586 0 0 7 545 1423 0 0 0 0 
587 0 0 7 545 1423 0 0 0 1 6 param0 0 1491  
588 0 0 7 545 1423 0 0 0 1 5 space 1 1414  
589 0 0 7 546 1356 0 0 0 0 
590 0 0 7 548 1383 0 0 0 1 6 param0 0 1493  
591 0 0 7 548 1383 0 0 0 1 5 world 1 1338  
592 0 0 7 548 1383 0 0 0 2 5 world 1 1338  11 joint_group 1 1357  
593 0 0 4 549 1341 0 0 0 2 4 this 3 1383  4 axis 1 1345  
594 0 0 4 549 1341 0 0 0 4 4 this 3 1383  1 x 1 1348  1 y 1 1348  1 z 1 1348  
595 0 0 4 550 1341 0 0 0 3 4 this 3 1383  4 axis 1 1345  3 vec 1 1345  
596 0 0 4 550 1341 0 0 0 7 4 this 3 1383  1 x 1 1348  1 y 1 1348  1 z 1 1348  2 ax 1 1348  2 ay 1 1348  2 az 1 1348  
597 0 0 4 551 1341 0 0 0 2 4 this 3 1383  5 force 1 1348  
598 0 0 6 552 1348 0 0 0 1 4 this 3 1493  
599 0 0 6 553 1348 0 0 0 1 4 this 3 1493  
600 0 0 7 554 1351 0 0 0 1 4 this 3 1493  
601 0 0 4 555 1341 0 0 0 2 4 this 3 1383  3 val 1 1348  
602 0 0 4 556 1341 0 0 0 2 4 this 3 1383  3 val 1 1348  
603 0 0 4 557 1341 0 0 0 2 4 this 3 1383  3 val 1 1348  
604 0 0 4 558 1341 0 0 0 2 4 this 3 1383  3 val 1 1348  
605 0 0 4 559 1341 0 0 0 2 4 this 3 1383  3 val 1 1348  
606 0 0 4 560 1341 0 0 0 2 4 this 3 1383  3 val 1 1348  
607 0 0 4 561 1341 0 0 0 2 4 this 3 1383  3 val 1 1348  
608 0 0 4 562 1341 0 0 0 2 4 this 3 1383  3 val 1 1348  
609 0 0 4 563 1341 0 0 0 2 4 this 3 1383  3 val 1 1348  
610 0 0 6 564 1348 0 0 0 1 4 this 3 1493  
611 0 0 6 565 1348 0 0 0 1 4 this 3 1493  
612 0 0 6 566 1348 0 0 0 1 4 this 3 1493  
613 0 0 6 567 1348 0 0 0 1 4 this 3 1493  
614 0 0 6 568 1348 0 0 0 1 4 this 3 1493  
615 0 0 6 569 1348 0 0 0 1 4 this 3 1493  
616 0 0 6 570 1348 0 0 0 1 4 this 3 1493  
617 0 0 6 571 1348 0 0 0 1 4 this 3 1493  
618 0 0 6 572 1348 0 0 0 1 4 this 3 1493  
619 0 0 7 573 1356 0 0 0 0 
620 0 0 7 575 1435 0 0 0 1 4 geom 1 1422  
621 0 0 7 575 1435 0 0 0 2 5 space 1 1414  6 radius 1 1348  
622 0 0 7 575 1435 0 0 0 1 6 param0 0 1495  
623 0 0 7 575 1435 0 0 0 1 6 radius 1 1348  
624 0 0 4 576 1341 0 0 0 2 4 this 3 1435  6 radius 1 1348  
625 0 0 6 577 1348 0 0 0 1 4 this 3 1495  
626 0 0 6 578 1348 0 0 0 2 4 this 3 1495  1 p 1 1439  
627 0 0 6 578 1348 0 0 0 4 4 this 3 1495  1 x 1 1348  1 y 1 1348  1 z 1 1348  
628 0 0 7 579 1356 0 0 0 0 
629 0 0 7 582 1500 0 0 0 2 5 model 1 1497  11 use_normals 1 1342  
630 0 0 4 583 1341 0 0 0 1 4 this 3 1500  
631 0 0 4 584 1341 0 0 0 3 4 this 3 1501  3 out 1 1375  6 indent 1 1377  
632 0 0 4 585 1341 0 0 0 2 4 this 3 1501  3 out 1 1375  
633 0 0 7 586 1356 0 0 0 0 
634 0 0 7 588 1436 0 0 0 2 5 space 1 1414  4 data 1 1500  
635 0 0 7 588 1436 0 0 162 /* ODE_API dGeomID dCreateTriMesh(dSpaceID space, dTriMeshDataID Data, dTriCallback* Callback, dTriArrayCallback* ArrayCallback, dTriRayCallback* RayCallback); */ 1 4 data 1 1500  
636 0 0 7 588 1436 0 0 0 1 4 copy 1 1503  
637 0 0 4 589 1341 0 0 0 1 4 this 3 1436  
638 0 0 4 590 1341 0 0 0 2 4 this 3 1436  4 data 1 1500  
639 0 0 7 591 1500 0 0 0 1 4 this 3 1503  
640 0 0 4 592 1341 0 0 0 2 4 this 3 1436  4 data 1 1500  
641 0 0 7 593 1500 0 0 0 1 4 this 3 1503  
642 0 0 4 594 1341 0 0 0 3 4 this 3 1436  10 geom_class 1 1350  6 enable 1 1350  
643 0 0 6 595 1350 0 0 0 2 4 this 3 1503  10 geom_class 1 1350  
644 0 0 4 596 1341 0 0 0 2 4 this 3 1436  4 geom 1 1415  
645 0 0 4 597 1341 0 0 0 5 4 this 3 1503  10 face_index 1 1350  2 v0 1 1403  2 v1 1 1403  2 v2 1 1403  
646 0 0 7 598 1403 0 0 0 4 4 this 3 1503  10 face_index 1 1350  1 u 1 1348  1 v 1 1348  
647 0 0 6 599 1350 0 0 0 1 4 this 3 1503  
648 0 0 7 600 1356 0 0 0 0 
649 0 0 7 602 1385 0 0 0 1 6 param0 0 1505  
650 0 0 7 602 1385 0 0 0 1 5 world 1 1338  
651 0 0 7 602 1385 0 0 0 2 5 world 1 1338  11 joint_group 1 1357  
652 0 0 4 603 1341 0 0 0 2 4 this 3 1385  6 anchor 1 1345  
653 0 0 4 603 1341 0 0 0 4 4 this 3 1385  1 x 1 1348  1 y 1 1348  1 z 1 1348  
654 0 0 4 604 1341 0 0 0 2 4 this 3 1385  4 axis 1 1345  
655 0 0 4 604 1341 0 0 0 4 4 this 3 1385  1 x 1 1348  1 y 1 1348  1 z 1 1348  
656 0 0 4 605 1341 0 0 0 2 4 this 3 1385  4 axis 1 1345  
657 0 0 4 605 1341 0 0 0 4 4 this 3 1385  1 x 1 1348  1 y 1 1348  1 z 1 1348  
658 0 0 4 606 1341 0 0 0 3 4 this 3 1385  7 torque1 1 1348  7 torque2 1 1348  
659 0 0 7 607 1351 0 0 0 1 4 this 3 1505  
660 0 0 7 608 1351 0 0 0 1 4 this 3 1505  
661 0 0 7 609 1351 0 0 0 1 4 this 3 1505  
662 0 0 7 610 1351 0 0 0 1 4 this 3 1505  
663 0 0 6 611 1348 0 0 0 1 4 this 3 1505  
664 0 0 6 612 1348 0 0 0 1 4 this 3 1505  
665 0 0 6 613 1348 0 0 0 1 4 this 3 1505  
666 0 0 6 614 1348 0 0 0 1 4 this 3 1505  
667 0 0 4 615 1341 0 0 0 3 4 this 3 1385  4 axis 1 1350  3 val 1 1348  
668 0 0 4 616 1341 0 0 0 3 4 this 3 1385  4 axis 1 1350  3 val 1 1348  
669 0 0 4 617 1341 0 0 0 3 4 this 3 1385  4 axis 1 1350  3 val 1 1348  
670 0 0 4 618 1341 0 0 0 3 4 this 3 1385  4 axis 1 1350  3 val 1 1348  
671 0 0 4 619 1341 0 0 0 3 4 this 3 1385  4 axis 1 1350  3 val 1 1348  
672 0 0 4 620 1341 0 0 0 3 4 this 3 1385  4 axis 1 1350  3 val 1 1348  
673 0 0 4 621 1341 0 0 0 3 4 this 3 1385  4 axis 1 1350  3 val 1 1348  
674 0 0 4 622 1341 0 0 0 3 4 this 3 1385  4 axis 1 1350  3 val 1 1348  
675 0 0 4 623 1341 0 0 0 3 4 this 3 1385  4 axis 1 1350  3 val 1 1348  
676 0 0 6 624 1348 0 0 0 2 4 this 3 1505  4 axis 1 1350  
677 0 0 6 625 1348 0 0 0 2 4 this 3 1505  4 axis 1 1350  
678 0 0 6 626 1348 0 0 0 2 4 this 3 1505  4 axis 1 1350  
679 0 0 6 627 1348 0 0 0 2 4 this 3 1505  4 axis 1 1350  
680 0 0 6 628 1348 0 0 0 2 4 this 3 1505  4 axis 1 1350  
681 0 0 6 629 1348 0 0 0 2 4 this 3 1505  4 axis 1 1350  
682 0 0 6 630 1348 0 0 0 2 4 this 3 1505  4 axis 1 1350  
683 0 0 6 631 1348 0 0 0 2 4 this 3 1505  4 axis 1 1350  
684 0 0 6 632 1348 0 0 0 2 4 this 3 1505  4 axis 1 1350  
685 0 0 7 633 1356 0 0 0 0 
686 0 0 7 645 1507 1287 0 0 0 
687 0 0 7 645 1507 1287 0 0 1 6 param0 0 1508  
688 0 0 7 635 1370 0 0 60 /**
 * Returns the joint that connects the given bodies.
 */ 2 5 body1 1 1373  5 body2 1 1373  
689 0 0 7 636 1473 1142 0 74 /**
 * Returns a collection of joints connecting the specified bodies.
 */ 2 5 body1 1 1373  5 body2 1 1373  
690 0 0 6 637 1350 0 0 90 /**
 * Returns 1 if the given bodies are connected by a joint, returns 0
 * otherwise.
 */ 2 5 body1 1 1373  5 body2 1 1373  
691 0 0 6 638 1350 0 0 404 /**
 * Returns 1 if the given bodies are connected by a joint that does not match
 * the given joint_type, returns 0 otherwise.  This is useful for deciding
 * whether to add contact joints between two bodies: if they are already
 * connected by non-contact joints then it may not be appropriate to add
 * contacts, however it is okay to add more contact between bodies that
 * already have contacts.
 */ 3 5 body1 1 1373  5 body2 1 1373  10 joint_type 1 1486  
692 0 0 7 639 1449 0 0 152 /**
 * Given two geometry objects that potentially touch (geom1 and geom2),
 * generate contact information for them.  Returns an OdeCollisionEntry.
 */ 3 5 geom1 1 1415  5 geom2 1 1415  12 max_contacts 1 1510  
693 0 0 6 640 1350 0 0 0 4 5 geom1 1 1415  5 geom2 1 1415  3 arg 1 1378  8 callback 1 1378  
694 0 0 7 641 1422 0 0 0 1 5 space 1 1412  
695 0 0 6 642 1348 0 0 73 // RAU we can't access OC_infinity as constants are not exposed in python 0 
696 0 0 6 643 1350 0 0 0 0 
697 0 0 4 644 1341 0 0 0 1 1 s 1 1350  
224
1288 6 dxBody 0 1025 6 dxBody 6 dxBody 0 0 0 0 0 0 0 0 0 0 0 0 0

1289 6 dxGeom 0 1025 6 dxGeom 6 dxGeom 0 0 0 0 0 0 0 0 0 0 0 0 0

1290 7 dxJoint 0 1025 7 dxJoint 7 dxJoint 0 0 0 0 0 0 0 0 0 0 0 0 0

1291 12 dxJointGroup 0 1025 12 dxJointGroup 12 dxJointGroup 0 0 0 0 0 0 0 0 0 0 0 0 0

1292 7 dxSpace 0 1025 7 dxSpace 7 dxSpace 0 0 0 0 0 0 0 0 0 0 0 0 0

1293 13 dxTriMeshData 0 1025 13 dxTriMeshData 13 dxTriMeshData 0 0 0 0 0 0 0 0 0 0 0 0 0

1294 7 dxWorld 0 1025 7 dxWorld 7 dxWorld 0 0 0 0 0 0 0 0 0 0 0 0 0

1295 8 OdeWorld 0 75777 8 OdeWorld 8 OdeWorld 0 0 0 1 698 0 0 36 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 735 0 1 734 1 0 1296 0 0 0 0 10
/**
 *
 */

1296 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2348
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file): @code public: static TypeHandle
 * get_class_type() { return _type_handle; } static void init_type() {
 * <<<BaseClassOne>>>::init_type(); <<<BaseClassTwo>>>::init_type();
 * <<<BaseClassN>>>::init_type(); register_type(_type_handle,
 * "<<<ThisClassStringName>>>", <<<BaseClassOne>>>::get_class_type(),
 * <<<BaseClassTwo>>>::get_class_type(), <<<BaseClassN>>>::get_class_type());
 * } virtual TypeHandle get_type() const { return get_class_type(); } virtual
 * TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private: static TypeHandle _type_handle; @endcode
 *
 * @par In the class .cxx file: @code TypeHandle
 * <<<ThisClassStringName>>>::_type_handle; @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file: @code
 * ConfigureFn(config_<<<PackageName>>>) { <<<ClassOne>>>::init_type();
 * <<<ClassTwo>>>::init_type(); <<<ClassN>>>::init_type(); } @endcode
 */

1297 13 OdeJointGroup 0 75777 13 OdeJointGroup 13 OdeJointGroup 0 0 0 1 736 0 0 5 737 738 739 740 741 0 0 1 0 1296 0 0 0 0 10
/**
 *
 */

1298 16 OdeJointFeedback 0 141313 16 OdeJointFeedback 16 OdeJointFeedback 0 0 0 1 746 747 0 4 742 743 744 745 0 0 1 0 1299 0 0 0 0 0

1299 14 dJointFeedback 0 1025 14 dJointFeedback 14 dJointFeedback 0 0 0 0 0 0 0 0 0 0 0 0 0

1300 8 OdeJoint 0 75777 8 OdeJoint 8 OdeJoint 0 0 0 1 776 0 0 27 748 749 750 751 752 753 754 755 756 757 758 759 760 761 763 764 765 766 767 768 769 770 771 772 773 774 775 0 1 762 1 0 1296 0 0 0 1 1301 10
/**
 *
 */

1301 9 JointType 0 794624 19 OdeJoint::JointType 19 OdeJoint::JointType 1300 0 0 0 0 0 0 0 0 0 12 7 JT_none 17 OdeJoint::JT_none 18
/* or "unknown" */
0 7 JT_ball 17 OdeJoint::JT_ball 0
1 8 JT_hinge 18 OdeJoint::JT_hinge 0
2 9 JT_slider 19 OdeJoint::JT_slider 0
3 10 JT_contact 20 OdeJoint::JT_contact 0
4 12 JT_universal 22 OdeJoint::JT_universal 0
5 9 JT_hinge2 19 OdeJoint::JT_hinge2 0
6 8 JT_fixed 18 OdeJoint::JT_fixed 0
7 7 JT_null 17 OdeJoint::JT_null 0
8 10 JT_a_motor 20 OdeJoint::JT_a_motor 0
9 10 JT_l_motor 20 OdeJoint::JT_l_motor 0
10 10 JT_plane2d 20 OdeJoint::JT_plane2d 0
11 0 18
/* or "unknown" */

1302 14 OdeAMotorJoint 0 75777 14 OdeAMotorJoint 14 OdeAMotorJoint 0 0 0 1 777 0 0 30 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 1 1512 0 1 0 1300 0 0 0 0 10
/**
 *
 */

1303 12 OdeBallJoint 0 75777 12 OdeBallJoint 12 OdeBallJoint 0 0 0 1 808 0 0 5 809 810 811 812 813 0 0 1 0 1300 0 0 0 0 10
/**
 *
 */

1304 7 OdeMass 0 75777 7 OdeMass 7 OdeMass 0 0 0 1 814 0 0 20 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 0 0 1 0 1305 0 0 0 0 10
/**
 *
 */

1305 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1306 7 OdeBody 0 75777 7 OdeBody 7 OdeBody 0 0 0 1 835 0 0 59 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 894 895 1 1513 1 893 1 0 1296 0 0 0 0 10
/**
 *
 */

1307 8 OdeSpace 0 75777 8 OdeSpace 8 OdeSpace 0 0 0 1 937 0 0 40 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 0 1 921 1 0 1296 0 0 0 0 10
/**
 *
 */

1308 7 OdeGeom 0 75777 7 OdeGeom 7 OdeGeom 0 0 0 1 989 0 0 50 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 976 977 978 979 980 981 982 983 984 985 986 987 988 0 1 975 1 0 1296 0 0 0 1 1309 10
/**
 *
 */

1309 9 GeomClass 0 794624 18 OdeGeom::GeomClass 18 OdeGeom::GeomClass 1308 0 0 0 0 0 0 0 0 0 10 9 GC_sphere 18 OdeGeom::GC_sphere 0
0 6 GC_box 15 OdeGeom::GC_box 0
1 18 GC_capped_cylinder 27 OdeGeom::GC_capped_cylinder 0
2 11 GC_cylinder 20 OdeGeom::GC_cylinder 0
3 8 GC_plane 17 OdeGeom::GC_plane 0
4 6 GC_ray 15 OdeGeom::GC_ray 0
5 11 GC_tri_mesh 20 OdeGeom::GC_tri_mesh 32
// GC_convex, GC_geom_transform,
8 15 GC_simple_space 24 OdeGeom::GC_simple_space 0
10 13 GC_hash_space 22 OdeGeom::GC_hash_space 0
11 18 GC_quad_tree_space 27 OdeGeom::GC_quad_tree_space 0
12 0 0

1310 10 OdeBoxGeom 0 75777 10 OdeBoxGeom 10 OdeBoxGeom 0 0 0 1 990 0 0 4 991 992 993 994 0 0 1 0 1308 0 0 0 0 10
/**
 *
 */

1311 21 OdeCappedCylinderGeom 0 75777 21 OdeCappedCylinderGeom 21 OdeCappedCylinderGeom 0 0 0 1 995 0 0 6 996 997 998 999 1000 1001 0 0 1 0 1308 0 0 0 0 10
/**
 *
 */

1312 14 OdeContactGeom 0 75777 14 OdeContactGeom 14 OdeContactGeom 0 0 0 1 1002 0 0 13 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 0 0 1 0 1305 0 0 0 0 10
/**
 *
 */

1313 17 OdeCollisionEntry 0 75777 17 OdeCollisionEntry 17 OdeCollisionEntry 0 0 0 1 1027 0 0 10 1016 1017 1018 1019 1020 1021 1022 1023 1025 1026 2 1514 1515 1 1024 1 0 1305 0 0 0 0 80
/**
 * A class used to hold information about a collision that has occurred.
 */

1314 20 OdeSurfaceParameters 0 75777 20 OdeSurfaceParameters 20 OdeSurfaceParameters 0 0 0 1 1028 0 0 23 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 0 0 1 0 1296 0 0 0 1 1315 10
/**
 *
 */

1315 9 ModeFlags 0 794624 31 OdeSurfaceParameters::ModeFlags 31 OdeSurfaceParameters::ModeFlags 1314 0 0 0 0 0 0 0 0 0 13 14 MF_contact_mu2 36 OdeSurfaceParameters::MF_contact_mu2 0
1 15 MF_contactFDir1 37 OdeSurfaceParameters::MF_contactFDir1 0
2 16 MF_contactBounce 38 OdeSurfaceParameters::MF_contactBounce 0
4 17 MF_contactSoftERP 39 OdeSurfaceParameters::MF_contactSoftERP 0
8 17 MF_contactSoftCFM 39 OdeSurfaceParameters::MF_contactSoftCFM 0
16 17 MF_contactMotion1 39 OdeSurfaceParameters::MF_contactMotion1 0
32 17 MF_contactMotion2 39 OdeSurfaceParameters::MF_contactMotion2 0
64 15 MF_contactSlip1 37 OdeSurfaceParameters::MF_contactSlip1 0
128 15 MF_contactSlip2 37 OdeSurfaceParameters::MF_contactSlip2 0
256 17 MF_contactApprox0 39 OdeSurfaceParameters::MF_contactApprox0 0
0 19 MF_contactApprox1_1 41 OdeSurfaceParameters::MF_contactApprox1_1 0
4096 19 MF_contactApprox1_2 41 OdeSurfaceParameters::MF_contactApprox1_2 0
8192 17 MF_contactApprox1 39 OdeSurfaceParameters::MF_contactApprox1 0
12288 0 0

1316 10 OdeContact 0 75777 10 OdeContact 10 OdeContact 0 0 0 1 1052 0 0 7 1053 1054 1055 1056 1057 1058 1059 0 0 1 0 1305 0 0 0 0 10
/**
 *
 */

1317 15 OdeContactJoint 0 75777 15 OdeContactJoint 15 OdeContactJoint 0 0 0 1 1060 0 0 1 1061 0 0 1 0 1300 0 0 0 0 10
/**
 *
 */

1318 15 OdeCylinderGeom 0 75777 15 OdeCylinderGeom 15 OdeCylinderGeom 0 0 0 1 1062 0 0 5 1063 1064 1065 1066 1067 0 0 1 0 1308 0 0 0 0 10
/**
 *
 */

1319 13 OdeFixedJoint 0 75777 13 OdeFixedJoint 13 OdeFixedJoint 0 0 0 1 1068 0 0 2 1069 1070 0 0 1 0 1300 0 0 0 0 10
/**
 *
 */

1320 12 OdeHashSpace 0 75777 12 OdeHashSpace 12 OdeHashSpace 0 0 0 1 1071 0 0 4 1072 1073 1074 1075 0 0 1 0 1307 0 0 0 0 10
/**
 *
 */

1321 14 OdeHinge2Joint 0 75777 14 OdeHinge2Joint 14 OdeHinge2Joint 0 0 0 1 1076 0 0 34 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 0 0 1 0 1300 0 0 0 0 10
/**
 *
 */

1322 13 OdeHingeJoint 0 75777 13 OdeHingeJoint 13 OdeHingeJoint 0 0 0 1 1111 0 0 28 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 0 0 1 0 1300 0 0 0 0 10
/**
 *
 */

1323 18 OdeJointCollection 0 26625 18 OdeJointCollection 18 OdeJointCollection 0 0 0 1 1140 1142 0 15 1141 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1 1516 0 0 0 0 10
/**
 *
 */

1324 14 OdeLMotorJoint 0 75777 14 OdeLMotorJoint 14 OdeLMotorJoint 0 0 0 1 1157 0 0 7 1158 1159 1160 1161 1162 1163 1164 1 1517 0 1 0 1300 0 0 0 0 10
/**
 *
 */

1325 12 OdeNullJoint 0 75777 12 OdeNullJoint 12 OdeNullJoint 0 0 0 1 1165 0 0 1 1166 0 0 1 0 1300 0 0 0 0 10
/**
 *
 */

1326 15 OdePlane2dJoint 0 75777 15 OdePlane2dJoint 15 OdePlane2dJoint 0 0 0 1 1167 0 0 4 1168 1169 1170 1171 0 0 1 0 1300 0 0 0 0 10
/**
 *
 */

1327 12 OdePlaneGeom 0 75777 12 OdePlaneGeom 12 OdePlaneGeom 0 0 0 1 1172 0 0 4 1173 1174 1175 1176 0 0 1 0 1308 0 0 0 0 10
/**
 *
 */

1328 16 OdeQuadTreeSpace 0 75777 16 OdeQuadTreeSpace 16 OdeQuadTreeSpace 0 0 0 1 1177 0 0 1 1178 0 0 1 0 1307 0 0 0 0 10
/**
 *
 */

1329 10 OdeRayGeom 0 75777 10 OdeRayGeom 10 OdeRayGeom 0 0 0 1 1179 0 0 13 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 0 0 1 0 1308 0 0 0 0 10
/**
 *
 */

1330 14 OdeSimpleSpace 0 75777 14 OdeSimpleSpace 14 OdeSimpleSpace 0 0 0 1 1193 0 0 1 1194 0 0 1 0 1307 0 0 0 0 10
/**
 *
 */

1331 14 OdeSliderJoint 0 75777 14 OdeSliderJoint 14 OdeSliderJoint 0 0 0 1 1195 0 0 25 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 0 0 1 0 1300 0 0 0 0 10
/**
 *
 */

1332 13 OdeSphereGeom 0 75777 13 OdeSphereGeom 13 OdeSphereGeom 0 0 0 1 1221 0 0 4 1222 1223 1224 1225 0 0 1 0 1308 0 0 0 0 10
/**
 *
 */

1333 14 OdeTriMeshData 0 75777 14 OdeTriMeshData 14 OdeTriMeshData 0 0 0 1 1226 0 0 4 1227 1228 1229 1230 0 0 1 0 1305 0 0 0 1 1334 10
/**
 *
 */

1334 8 DataType 0 794624 24 OdeTriMeshData::DataType 24 OdeTriMeshData::DataType 1333 0 0 0 0 0 0 0 0 0 2 15 DT_face_normals 31 OdeTriMeshData::DT_face_normals 0
0 22 DT_last_transformation 38 OdeTriMeshData::DT_last_transformation 0
1 0 0

1335 14 OdeTriMeshGeom 0 75777 14 OdeTriMeshGeom 14 OdeTriMeshGeom 0 0 0 1 1231 0 0 12 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 0 0 1 0 1308 0 0 0 0 10
/**
 *
 */

1336 17 OdeUniversalJoint 0 75777 17 OdeUniversalJoint 17 OdeUniversalJoint 0 0 0 1 1244 0 0 31 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 0 0 1 0 1300 0 0 0 0 10
/**
 *
 */

1337 7 OdeUtil 0 141313 7 OdeUtil 7 OdeUtil 0 0 0 1 1286 1287 0 10 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 0 0 0 0 0 10
/**
 *
 */

1338 10 OdeWorld * 0 8576 10 OdeWorld * 10 OdeWorld * 0 0 1295 0 0 0 0 0 0 0 0 0 0

1339 16 OdeWorld const * 0 8576 16 OdeWorld const * 16 OdeWorld const * 0 0 1340 0 0 0 0 0 0 0 0 0 0

1340 14 OdeWorld const 0 8832 14 OdeWorld const 14 OdeWorld const 0 0 1295 0 0 0 0 0 0 0 0 0 0

1341 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1342 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1343 8 dWorldID 0 2105344 8 dWorldID 8 dWorldID 0 0 1344 0 0 0 0 0 0 0 0 0 0

1344 9 dxWorld * 0 8576 9 dxWorld * 9 dxWorld * 0 0 1294 0 0 0 0 0 0 0 0 0 0

1345 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1346 0 0 0 0 0 0 0 0 0 0

1346 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1347 0 0 0 0 0 0 0 0 0 0

1347 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1348 5 dReal 0 2105344 5 dReal 5 dReal 0 0 1349 0 0 0 0 0 0 0 0 0 0

1349 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1350 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1351 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 1347 0 0 0 0 0 0 0 0 0 0

1352 7 uint8_t 0 2105344 7 uint8_t 7 uint8_t 0 0 1353 0 0 0 0 0 0 0 0 0 0

1353 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

1354 9 OdeBody * 0 8576 9 OdeBody * 9 OdeBody * 0 0 1306 0 0 0 0 0 0 0 0 0 0

1355 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1356 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1355 0 0 0 0 0 0 0 0 0 0

1357 15 OdeJointGroup * 0 8576 15 OdeJointGroup * 15 OdeJointGroup * 0 0 1297 0 0 0 0 0 0 0 0 0 0

1358 21 OdeJointGroup const * 0 8576 21 OdeJointGroup const * 21 OdeJointGroup const * 0 0 1359 0 0 0 0 0 0 0 0 0 0

1359 19 OdeJointGroup const 0 8832 19 OdeJointGroup const 19 OdeJointGroup const 0 0 1297 0 0 0 0 0 0 0 0 0 0

1360 13 dJointGroupID 0 2105344 13 dJointGroupID 13 dJointGroupID 0 0 1361 0 0 0 0 0 0 0 0 0 0

1361 14 dxJointGroup * 0 8576 14 dxJointGroup * 14 dxJointGroup * 0 0 1291 0 0 0 0 0 0 0 0 0 0

1362 18 OdeJointFeedback * 0 8576 18 OdeJointFeedback * 18 OdeJointFeedback * 0 0 1298 0 0 0 0 0 0 0 0 0 0

1363 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1364 0 0 0 0 0 0 0 0 0 0

1364 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1365 24 OdeJointFeedback const * 0 8576 24 OdeJointFeedback const * 24 OdeJointFeedback const * 0 0 1366 0 0 0 0 0 0 0 0 0 0

1366 22 OdeJointFeedback const 0 8832 22 OdeJointFeedback const 22 OdeJointFeedback const 0 0 1298 0 0 0 0 0 0 0 0 0 0

1367 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1363 0 0 0 0 0 0 0 0 0 0

1368 16 OdeJoint const * 0 8576 16 OdeJoint const * 16 OdeJoint const * 0 0 1369 0 0 0 0 0 0 0 0 0 0

1369 14 OdeJoint const 0 8832 14 OdeJoint const 14 OdeJoint const 0 0 1300 0 0 0 0 0 0 0 0 0 0

1370 10 OdeJoint * 0 8576 10 OdeJoint * 10 OdeJoint * 0 0 1300 0 0 0 0 0 0 0 0 0 0

1371 8 dJointID 0 2105344 8 dJointID 8 dJointID 0 0 1372 0 0 0 0 0 0 0 0 0 0

1372 9 dxJoint * 0 8576 9 dxJoint * 9 dxJoint * 0 0 1290 0 0 0 0 0 0 0 0 0 0

1373 15 OdeBody const * 0 8576 15 OdeBody const * 15 OdeBody const * 0 0 1374 0 0 0 0 0 0 0 0 0 0

1374 13 OdeBody const 0 8832 13 OdeBody const 13 OdeBody const 0 0 1306 0 0 0 0 0 0 0 0 0 0

1375 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1376 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1377 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1378 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1379 0 0 0 0 0 0 0 0 0 0

1379 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1380 0 0 0 0 0 0 0 0 0 0

1380 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1381 14 OdeBallJoint * 0 8576 14 OdeBallJoint * 14 OdeBallJoint * 0 0 1303 0 0 0 0 0 0 0 0 0 0

1382 15 OdeHingeJoint * 0 8576 15 OdeHingeJoint * 15 OdeHingeJoint * 0 0 1322 0 0 0 0 0 0 0 0 0 0

1383 16 OdeSliderJoint * 0 8576 16 OdeSliderJoint * 16 OdeSliderJoint * 0 0 1331 0 0 0 0 0 0 0 0 0 0

1384 17 OdeContactJoint * 0 8576 17 OdeContactJoint * 17 OdeContactJoint * 0 0 1317 0 0 0 0 0 0 0 0 0 0

1385 19 OdeUniversalJoint * 0 8576 19 OdeUniversalJoint * 19 OdeUniversalJoint * 0 0 1336 0 0 0 0 0 0 0 0 0 0

1386 16 OdeHinge2Joint * 0 8576 16 OdeHinge2Joint * 16 OdeHinge2Joint * 0 0 1321 0 0 0 0 0 0 0 0 0 0

1387 15 OdeFixedJoint * 0 8576 15 OdeFixedJoint * 15 OdeFixedJoint * 0 0 1319 0 0 0 0 0 0 0 0 0 0

1388 14 OdeNullJoint * 0 8576 14 OdeNullJoint * 14 OdeNullJoint * 0 0 1325 0 0 0 0 0 0 0 0 0 0

1389 16 OdeAMotorJoint * 0 8576 16 OdeAMotorJoint * 16 OdeAMotorJoint * 0 0 1302 0 0 0 0 0 0 0 0 0 0

1390 16 OdeLMotorJoint * 0 8576 16 OdeLMotorJoint * 16 OdeLMotorJoint * 0 0 1324 0 0 0 0 0 0 0 0 0 0

1391 17 OdePlane2dJoint * 0 8576 17 OdePlane2dJoint * 17 OdePlane2dJoint * 0 0 1326 0 0 0 0 0 0 0 0 0 0

1392 22 OdeAMotorJoint const * 0 8576 22 OdeAMotorJoint const * 22 OdeAMotorJoint const * 0 0 1393 0 0 0 0 0 0 0 0 0 0

1393 20 OdeAMotorJoint const 0 8832 20 OdeAMotorJoint const 20 OdeAMotorJoint const 0 0 1302 0 0 0 0 0 0 0 0 0 0

1394 20 OdeBallJoint const * 0 8576 20 OdeBallJoint const * 20 OdeBallJoint const * 0 0 1395 0 0 0 0 0 0 0 0 0 0

1395 18 OdeBallJoint const 0 8832 18 OdeBallJoint const 18 OdeBallJoint const 0 0 1303 0 0 0 0 0 0 0 0 0 0

1396 9 OdeMass * 0 8576 9 OdeMass * 9 OdeMass * 0 0 1304 0 0 0 0 0 0 0 0 0 0

1397 15 OdeMass const * 0 8576 15 OdeMass const * 15 OdeMass const * 0 0 1398 0 0 0 0 0 0 0 0 0 0

1398 13 OdeMass const 0 8832 13 OdeMass const 13 OdeMass const 0 0 1304 0 0 0 0 0 0 0 0 0 0

1399 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1400 0 0 0 0 0 0 0 0 0 0

1400 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1401 0 0 0 0 0 0 0 0 0 0

1401 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1402 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1403 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1402 0 0 0 0 0 0 0 0 0 0

1404 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1401 0 0 0 0 0 0 0 0 0 0

1405 7 dBodyID 0 2105344 7 dBodyID 7 dBodyID 0 0 1406 0 0 0 0 0 0 0 0 0 0

1406 8 dxBody * 0 8576 8 dxBody * 8 dxBody * 0 0 1288 0 0 0 0 0 0 0 0 0 0

1407 20 LQuaternionf const * 0 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 1408 0 0 0 0 0 0 0 0 0 0

1408 18 LQuaternionf const 0 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 1409 0 0 0 0 0 0 0 0 0 0

1409 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1410 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1411 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 1410 0 0 0 0 0 0 0 0 0 0

1412 16 OdeSpace const * 0 8576 16 OdeSpace const * 16 OdeSpace const * 0 0 1413 0 0 0 0 0 0 0 0 0 0

1413 14 OdeSpace const 0 8832 14 OdeSpace const 14 OdeSpace const 0 0 1307 0 0 0 0 0 0 0 0 0 0

1414 10 OdeSpace * 0 8576 10 OdeSpace * 10 OdeSpace * 0 0 1307 0 0 0 0 0 0 0 0 0 0

1415 15 OdeGeom const * 0 8576 15 OdeGeom const * 15 OdeGeom const * 0 0 1416 0 0 0 0 0 0 0 0 0 0

1416 13 OdeGeom const 0 8832 13 OdeGeom const 13 OdeGeom const 0 0 1308 0 0 0 0 0 0 0 0 0 0

1417 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 1418 0 0 0 0 0 0 0 0 0 0

1418 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 1419 0 0 0 0 0 0 0 0 0 0

1419 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 1420 0 0 0 0 0 0 0 0 0 0

1420 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1421 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 1419 0 0 0 0 0 0 0 0 0 0

1422 9 OdeGeom * 0 8576 9 OdeGeom * 9 OdeGeom * 0 0 1308 0 0 0 0 0 0 0 0 0 0

1423 16 OdeSimpleSpace * 0 8576 16 OdeSimpleSpace * 16 OdeSimpleSpace * 0 0 1330 0 0 0 0 0 0 0 0 0 0

1424 14 OdeHashSpace * 0 8576 14 OdeHashSpace * 14 OdeHashSpace * 0 0 1320 0 0 0 0 0 0 0 0 0 0

1425 18 OdeQuadTreeSpace * 0 8576 18 OdeQuadTreeSpace * 18 OdeQuadTreeSpace * 0 0 1328 0 0 0 0 0 0 0 0 0 0

1426 7 dGeomID 0 2105344 7 dGeomID 7 dGeomID 0 0 1427 0 0 0 0 0 0 0 0 0 0

1427 8 dxGeom * 0 8576 8 dxGeom * 8 dxGeom * 0 0 1289 0 0 0 0 0 0 0 0 0 0

1428 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1429 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1409 0 0 0 0 0 0 0 0 0 0

1430 12 OdeBoxGeom * 0 8576 12 OdeBoxGeom * 12 OdeBoxGeom * 0 0 1310 0 0 0 0 0 0 0 0 0 0

1431 23 OdeCappedCylinderGeom * 0 8576 23 OdeCappedCylinderGeom * 23 OdeCappedCylinderGeom * 0 0 1311 0 0 0 0 0 0 0 0 0 0

1432 17 OdeCylinderGeom * 0 8576 17 OdeCylinderGeom * 17 OdeCylinderGeom * 0 0 1318 0 0 0 0 0 0 0 0 0 0

1433 14 OdePlaneGeom * 0 8576 14 OdePlaneGeom * 14 OdePlaneGeom * 0 0 1327 0 0 0 0 0 0 0 0 0 0

1434 12 OdeRayGeom * 0 8576 12 OdeRayGeom * 12 OdeRayGeom * 0 0 1329 0 0 0 0 0 0 0 0 0 0

1435 15 OdeSphereGeom * 0 8576 15 OdeSphereGeom * 15 OdeSphereGeom * 0 0 1332 0 0 0 0 0 0 0 0 0 0

1436 16 OdeTriMeshGeom * 0 8576 16 OdeTriMeshGeom * 16 OdeTriMeshGeom * 0 0 1335 0 0 0 0 0 0 0 0 0 0

1437 18 OdeBoxGeom const * 0 8576 18 OdeBoxGeom const * 18 OdeBoxGeom const * 0 0 1438 0 0 0 0 0 0 0 0 0 0

1438 16 OdeBoxGeom const 0 8832 16 OdeBoxGeom const 16 OdeBoxGeom const 0 0 1310 0 0 0 0 0 0 0 0 0 0

1439 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1440 0 0 0 0 0 0 0 0 0 0

1440 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1402 0 0 0 0 0 0 0 0 0 0

1441 29 OdeCappedCylinderGeom const * 0 8576 29 OdeCappedCylinderGeom const * 29 OdeCappedCylinderGeom const * 0 0 1442 0 0 0 0 0 0 0 0 0 0

1442 27 OdeCappedCylinderGeom const 0 8832 27 OdeCappedCylinderGeom const 27 OdeCappedCylinderGeom const 0 0 1311 0 0 0 0 0 0 0 0 0 0

1443 16 OdeContactGeom * 0 8576 16 OdeContactGeom * 16 OdeContactGeom * 0 0 1312 0 0 0 0 0 0 0 0 0 0

1444 22 OdeContactGeom const * 0 8576 22 OdeContactGeom const * 22 OdeContactGeom const * 0 0 1445 0 0 0 0 0 0 0 0 0 0

1445 20 OdeContactGeom const 0 8832 20 OdeContactGeom const 20 OdeContactGeom const 0 0 1312 0 0 0 0 0 0 0 0 0 0

1446 11 dReal const 0 8832 11 dReal const 11 dReal const 0 0 1348 0 0 0 0 0 0 0 0 0 0

1447 25 OdeCollisionEntry const * 0 8576 25 OdeCollisionEntry const * 25 OdeCollisionEntry const * 0 0 1448 0 0 0 0 0 0 0 0 0 0

1448 23 OdeCollisionEntry const 0 8832 23 OdeCollisionEntry const 23 OdeCollisionEntry const 0 0 1313 0 0 0 0 0 0 0 0 0 0

1449 19 OdeCollisionEntry * 0 8576 19 OdeCollisionEntry * 19 OdeCollisionEntry * 0 0 1313 0 0 0 0 0 0 0 0 0 0

1450 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1451 0 0 0 0 0 0 0 0 0 0

1451 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1452 22 OdeSurfaceParameters * 0 8576 22 OdeSurfaceParameters * 22 OdeSurfaceParameters * 0 0 1314 0 0 0 0 0 0 0 0 0 0

1453 28 OdeSurfaceParameters const * 0 8576 28 OdeSurfaceParameters const * 28 OdeSurfaceParameters const * 0 0 1454 0 0 0 0 0 0 0 0 0 0

1454 26 OdeSurfaceParameters const 0 8832 26 OdeSurfaceParameters const 26 OdeSurfaceParameters const 0 0 1314 0 0 0 0 0 0 0 0 0 0

1455 12 OdeContact * 0 8576 12 OdeContact * 12 OdeContact * 0 0 1316 0 0 0 0 0 0 0 0 0 0

1456 16 dContact const * 0 8576 16 dContact const * 16 dContact const * 0 0 1457 0 0 0 0 0 0 0 0 0 0

1457 14 dContact const 0 8832 14 dContact const 14 dContact const 0 0 1458 0 0 0 0 0 0 0 0 0 0

1458 8 dContact 0 1024 8 dContact 8 dContact 0 0 0 0 0 0 0 0 0 0 0 0 0

1459 18 OdeContact const * 0 8576 18 OdeContact const * 18 OdeContact const * 0 0 1460 0 0 0 0 0 0 0 0 0 0

1460 16 OdeContact const 0 8832 16 OdeContact const 16 OdeContact const 0 0 1316 0 0 0 0 0 0 0 0 0 0

1461 23 OdeContactJoint const * 0 8576 23 OdeContactJoint const * 23 OdeContactJoint const * 0 0 1462 0 0 0 0 0 0 0 0 0 0

1462 21 OdeContactJoint const 0 8832 21 OdeContactJoint const 21 OdeContactJoint const 0 0 1317 0 0 0 0 0 0 0 0 0 0

1463 23 OdeCylinderGeom const * 0 8576 23 OdeCylinderGeom const * 23 OdeCylinderGeom const * 0 0 1464 0 0 0 0 0 0 0 0 0 0

1464 21 OdeCylinderGeom const 0 8832 21 OdeCylinderGeom const 21 OdeCylinderGeom const 0 0 1318 0 0 0 0 0 0 0 0 0 0

1465 21 OdeFixedJoint const * 0 8576 21 OdeFixedJoint const * 21 OdeFixedJoint const * 0 0 1466 0 0 0 0 0 0 0 0 0 0

1466 19 OdeFixedJoint const 0 8832 19 OdeFixedJoint const 19 OdeFixedJoint const 0 0 1319 0 0 0 0 0 0 0 0 0 0

1467 20 OdeHashSpace const * 0 8576 20 OdeHashSpace const * 20 OdeHashSpace const * 0 0 1468 0 0 0 0 0 0 0 0 0 0

1468 18 OdeHashSpace const 0 8832 18 OdeHashSpace const 18 OdeHashSpace const 0 0 1320 0 0 0 0 0 0 0 0 0 0

1469 22 OdeHinge2Joint const * 0 8576 22 OdeHinge2Joint const * 22 OdeHinge2Joint const * 0 0 1470 0 0 0 0 0 0 0 0 0 0

1470 20 OdeHinge2Joint const 0 8832 20 OdeHinge2Joint const 20 OdeHinge2Joint const 0 0 1321 0 0 0 0 0 0 0 0 0 0

1471 21 OdeHingeJoint const * 0 8576 21 OdeHingeJoint const * 21 OdeHingeJoint const * 0 0 1472 0 0 0 0 0 0 0 0 0 0

1472 19 OdeHingeJoint const 0 8832 19 OdeHingeJoint const 19 OdeHingeJoint const 0 0 1322 0 0 0 0 0 0 0 0 0 0

1473 20 OdeJointCollection * 0 8576 20 OdeJointCollection * 20 OdeJointCollection * 0 0 1323 0 0 0 0 0 0 0 0 0 0

1474 26 OdeJointCollection const * 0 8576 26 OdeJointCollection const * 26 OdeJointCollection const * 0 0 1475 0 0 0 0 0 0 0 0 0 0

1475 24 OdeJointCollection const 0 8832 24 OdeJointCollection const 24 OdeJointCollection const 0 0 1323 0 0 0 0 0 0 0 0 0 0

1476 22 OdeLMotorJoint const * 0 8576 22 OdeLMotorJoint const * 22 OdeLMotorJoint const * 0 0 1477 0 0 0 0 0 0 0 0 0 0

1477 20 OdeLMotorJoint const 0 8832 20 OdeLMotorJoint const 20 OdeLMotorJoint const 0 0 1324 0 0 0 0 0 0 0 0 0 0

1478 20 OdeNullJoint const * 0 8576 20 OdeNullJoint const * 20 OdeNullJoint const * 0 0 1479 0 0 0 0 0 0 0 0 0 0

1479 18 OdeNullJoint const 0 8832 18 OdeNullJoint const 18 OdeNullJoint const 0 0 1325 0 0 0 0 0 0 0 0 0 0

1480 23 OdePlane2dJoint const * 0 8576 23 OdePlane2dJoint const * 23 OdePlane2dJoint const * 0 0 1481 0 0 0 0 0 0 0 0 0 0

1481 21 OdePlane2dJoint const 0 8832 21 OdePlane2dJoint const 21 OdePlane2dJoint const 0 0 1326 0 0 0 0 0 0 0 0 0 0

1482 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1483 0 0 0 0 0 0 0 0 0 0

1483 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1410 0 0 0 0 0 0 0 0 0 0

1484 20 OdePlaneGeom const * 0 8576 20 OdePlaneGeom const * 20 OdePlaneGeom const * 0 0 1485 0 0 0 0 0 0 0 0 0 0

1485 18 OdePlaneGeom const 0 8832 18 OdePlaneGeom const 18 OdePlaneGeom const 0 0 1327 0 0 0 0 0 0 0 0 0 0

1486 9 int const 0 8832 9 int const 9 int const 0 0 1350 0 0 0 0 0 0 0 0 0 0

1487 24 OdeQuadTreeSpace const * 0 8576 24 OdeQuadTreeSpace const * 24 OdeQuadTreeSpace const * 0 0 1488 0 0 0 0 0 0 0 0 0 0

1488 22 OdeQuadTreeSpace const 0 8832 22 OdeQuadTreeSpace const 22 OdeQuadTreeSpace const 0 0 1328 0 0 0 0 0 0 0 0 0 0

1489 18 OdeRayGeom const * 0 8576 18 OdeRayGeom const * 18 OdeRayGeom const * 0 0 1490 0 0 0 0 0 0 0 0 0 0

1490 16 OdeRayGeom const 0 8832 16 OdeRayGeom const 16 OdeRayGeom const 0 0 1329 0 0 0 0 0 0 0 0 0 0

1491 22 OdeSimpleSpace const * 0 8576 22 OdeSimpleSpace const * 22 OdeSimpleSpace const * 0 0 1492 0 0 0 0 0 0 0 0 0 0

1492 20 OdeSimpleSpace const 0 8832 20 OdeSimpleSpace const 20 OdeSimpleSpace const 0 0 1330 0 0 0 0 0 0 0 0 0 0

1493 22 OdeSliderJoint const * 0 8576 22 OdeSliderJoint const * 22 OdeSliderJoint const * 0 0 1494 0 0 0 0 0 0 0 0 0 0

1494 20 OdeSliderJoint const 0 8832 20 OdeSliderJoint const 20 OdeSliderJoint const 0 0 1331 0 0 0 0 0 0 0 0 0 0

1495 21 OdeSphereGeom const * 0 8576 21 OdeSphereGeom const * 21 OdeSphereGeom const * 0 0 1496 0 0 0 0 0 0 0 0 0 0

1496 19 OdeSphereGeom const 0 8832 19 OdeSphereGeom const 19 OdeSphereGeom const 0 0 1332 0 0 0 0 0 0 0 0 0 0

1497 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 1498 0 0 0 0 0 0 0 0 0 0

1498 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 1499 0 0 0 0 0 0 0 0 0 0

1499 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

1500 16 OdeTriMeshData * 0 8576 16 OdeTriMeshData * 16 OdeTriMeshData * 0 0 1333 0 0 0 0 0 0 0 0 0 0

1501 22 OdeTriMeshData const * 0 8576 22 OdeTriMeshData const * 22 OdeTriMeshData const * 0 0 1502 0 0 0 0 0 0 0 0 0 0

1502 20 OdeTriMeshData const 0 8832 20 OdeTriMeshData const 20 OdeTriMeshData const 0 0 1333 0 0 0 0 0 0 0 0 0 0

1503 22 OdeTriMeshGeom const * 0 8576 22 OdeTriMeshGeom const * 22 OdeTriMeshGeom const * 0 0 1504 0 0 0 0 0 0 0 0 0 0

1504 20 OdeTriMeshGeom const 0 8832 20 OdeTriMeshGeom const 20 OdeTriMeshGeom const 0 0 1335 0 0 0 0 0 0 0 0 0 0

1505 25 OdeUniversalJoint const * 0 8576 25 OdeUniversalJoint const * 25 OdeUniversalJoint const * 0 0 1506 0 0 0 0 0 0 0 0 0 0

1506 23 OdeUniversalJoint const 0 8832 23 OdeUniversalJoint const 23 OdeUniversalJoint const 0 0 1336 0 0 0 0 0 0 0 0 0 0

1507 9 OdeUtil * 0 8576 9 OdeUtil * 9 OdeUtil * 0 0 1337 0 0 0 0 0 0 0 0 0 0

1508 15 OdeUtil const * 0 8576 15 OdeUtil const * 15 OdeUtil const * 0 0 1509 0 0 0 0 0 0 0 0 0 0

1509 13 OdeUtil const 0 8832 13 OdeUtil const 13 OdeUtil const 0 0 1337 0 0 0 0 0 0 0 0 0 0

1510 15 short int const 0 8832 15 short int const 15 short int const 0 0 1511 0 0 0 0 0 0 0 0 0 0

1511 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

0
0
6
1512 8 get_axes 0 783 784 24 OdeAMotorJoint::get_axes 0

1513 10 get_joints 0 884 885 19 OdeBody::get_joints 0

1514 18 get_contact_points 0 1020 1021 37 OdeCollisionEntry::get_contact_points 0

1515 17 get_contact_geoms 0 1020 1022 36 OdeCollisionEntry::get_contact_geoms 0

1516 10 get_joints 0 1151 1152 30 OdeJointCollection::get_joints 0

1517 8 get_axes 0 1161 1162 24 OdeLMotorJoint::get_axes 0

