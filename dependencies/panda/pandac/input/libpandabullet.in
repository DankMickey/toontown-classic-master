1478214269
3 2
14 libpandabullet 4 fCJ_ 14 panda3d.bullet 
743
758 19 get_default_up_axis 0 1 0 19 get_default_up_axis 0 1 756 10
/**
 *
 */
39
BulletUpAxis get_default_up_axis(void);

759 18 get_bullet_version 0 1 0 18 get_bullet_version 0 1 757 60
/**
 * Returns the version of the linked Bullet library.
 */
29
int get_bullet_version(void);

760 5 empty 0 4 1502 19 BulletRayHit::empty 0 1 1 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
53
static inline BulletRayHit BulletRayHit::empty(void);

761 8 get_node 0 4 1502 22 BulletRayHit::get_node 0 1 2 10
/**
 *
 */
46
PandaNode *BulletRayHit::get_node(void) const;

762 11 get_hit_pos 0 4 1502 25 BulletRayHit::get_hit_pos 0 1 3 10
/**
 *
 */
46
LPoint3 BulletRayHit::get_hit_pos(void) const;

763 14 get_hit_normal 0 4 1502 28 BulletRayHit::get_hit_normal 0 1 4 10
/**
 *
 */
50
LVector3 BulletRayHit::get_hit_normal(void) const;

764 16 get_hit_fraction 0 4 1502 30 BulletRayHit::get_hit_fraction 0 1 5 10
/**
 *
 */
55
PN_stdfloat BulletRayHit::get_hit_fraction(void) const;

765 14 get_shape_part 0 4 1502 28 BulletRayHit::get_shape_part 0 1 6 10
/**
 *
 */
45
int BulletRayHit::get_shape_part(void) const;

766 18 get_triangle_index 0 4 1502 32 BulletRayHit::get_triangle_index 0 1 7 10
/**
 *
 */
49
int BulletRayHit::get_triangle_index(void) const;

767 13 ~BulletRayHit 0 4 1502 27 BulletRayHit::~BulletRayHit 0 0 0
34
BulletRayHit::~BulletRayHit(void);

768 34 upcast_to_AllHitsRayResultCallback 0 12 1503 58 BulletAllHitsRayResult::upcast_to_AllHitsRayResultCallback 0 1 15 62
upcast from BulletAllHitsRayResult to AllHitsRayResultCallback
109
btCollisionWorld::AllHitsRayResultCallback *BulletAllHitsRayResult::upcast_to_AllHitsRayResultCallback(void);

769 59 downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult 0 8 0 59 downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult 0 1 16 64
downcast from AllHitsRayResultCallback to BulletAllHitsRayResult
134
BulletAllHitsRayResult *downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult(btCollisionWorld::AllHitsRayResultCallback *this);

770 5 empty 0 4 1503 29 BulletAllHitsRayResult::empty 0 1 8 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
73
static inline BulletAllHitsRayResult BulletAllHitsRayResult::empty(void);

771 12 get_from_pos 0 4 1503 36 BulletAllHitsRayResult::get_from_pos 0 1 9 10
/**
 *
 */
57
LPoint3 BulletAllHitsRayResult::get_from_pos(void) const;

772 10 get_to_pos 0 4 1503 34 BulletAllHitsRayResult::get_to_pos 0 1 10 10
/**
 *
 */
55
LPoint3 BulletAllHitsRayResult::get_to_pos(void) const;

773 8 has_hits 0 4 1503 32 BulletAllHitsRayResult::has_hits 0 1 11 10
/**
 *
 */
50
bool BulletAllHitsRayResult::has_hits(void) const;

774 24 get_closest_hit_fraction 0 4 1503 48 BulletAllHitsRayResult::get_closest_hit_fraction 0 1 12 10
/**
 *
 */
73
PN_stdfloat BulletAllHitsRayResult::get_closest_hit_fraction(void) const;

775 12 get_num_hits 0 4 1503 36 BulletAllHitsRayResult::get_num_hits 0 1 13 10
/**
 *
 */
53
int BulletAllHitsRayResult::get_num_hits(void) const;

776 7 get_hit 0 4 1503 31 BulletAllHitsRayResult::get_hit 0 1 14 10
/**
 *
 */
66
BulletRayHit const BulletAllHitsRayResult::get_hit(int idx) const;

777 23 ~BulletAllHitsRayResult 0 4 1503 47 BulletAllHitsRayResult::~BulletAllHitsRayResult 0 0 0
54
BulletAllHitsRayResult::~BulletAllHitsRayResult(void);

778 13 is_polyhedral 0 4 1506 26 BulletShape::is_polyhedral 0 1 17 10
/**
 *
 */
51
inline bool BulletShape::is_polyhedral(void) const;

779 9 is_convex 0 4 1506 22 BulletShape::is_convex 0 1 18 10
/**
 *
 */
47
inline bool BulletShape::is_convex(void) const;

780 12 is_convex_2d 0 4 1506 25 BulletShape::is_convex_2d 0 1 19 10
/**
 *
 */
50
inline bool BulletShape::is_convex_2d(void) const;

781 10 is_concave 0 4 1506 23 BulletShape::is_concave 0 1 20 10
/**
 *
 */
48
inline bool BulletShape::is_concave(void) const;

782 11 is_infinite 0 4 1506 24 BulletShape::is_infinite 0 1 21 10
/**
 *
 */
49
inline bool BulletShape::is_infinite(void) const;

783 13 is_non_moving 0 4 1506 26 BulletShape::is_non_moving 0 1 22 10
/**
 *
 */
51
inline bool BulletShape::is_non_moving(void) const;

784 12 is_soft_body 0 4 1506 25 BulletShape::is_soft_body 0 1 23 10
/**
 *
 */
50
inline bool BulletShape::is_soft_body(void) const;

785 10 set_margin 0 4 1506 23 BulletShape::set_margin 0 1 24 10
/**
 *
 */
49
void BulletShape::set_margin(PN_stdfloat margin);

786 8 get_name 0 4 1506 21 BulletShape::get_name 0 1 25 10
/**
 *
 */
46
char const *BulletShape::get_name(void) const;

787 10 get_margin 0 4 1506 23 BulletShape::get_margin 0 1 26 10
/**
 *
 */
48
PN_stdfloat BulletShape::get_margin(void) const;

788 16 get_shape_bounds 0 4 1506 29 BulletShape::get_shape_bounds 0 1 27 62
/**
 * Returns the current bounds of this collision shape.
 */
57
BoundingSphere BulletShape::get_shape_bounds(void) const;

789 14 get_class_type 0 4 1506 27 BulletShape::get_class_type 0 1 28 0
52
static TypeHandle BulletShape::get_class_type(void);

790 14 get_class_type 0 4 1508 49 BulletBaseCharacterControllerNode::get_class_type 0 1 29 0
74
static TypeHandle BulletBaseCharacterControllerNode::get_class_type(void);

791 34 ~BulletBaseCharacterControllerNode 0 4 1508 69 BulletBaseCharacterControllerNode::~BulletBaseCharacterControllerNode 0 0 0
76
BulletBaseCharacterControllerNode::~BulletBaseCharacterControllerNode(void);

792 9 add_shape 0 4 1510 25 BulletBodyNode::add_shape 0 1 30 21
// Shapes

/**
 *
 */
114
void BulletBodyNode::add_shape(BulletShape *shape, TransformState const *xform = TransformState::make_identity());

793 12 remove_shape 0 4 1510 28 BulletBodyNode::remove_shape 0 1 31 10
/**
 *
 */
54
void BulletBodyNode::remove_shape(BulletShape *shape);

794 14 get_num_shapes 0 4 1510 30 BulletBodyNode::get_num_shapes 0 1 32 10
/**
 *
 */
54
inline int BulletBodyNode::get_num_shapes(void) const;

795 9 get_shape 0 4 1510 25 BulletBodyNode::get_shape 0 1 33 10
/**
 *
 */
61
inline BulletShape *BulletBodyNode::get_shape(int idx) const;

796 13 get_shape_pos 0 4 1510 29 BulletBodyNode::get_shape_pos 0 1 34 10
/**
 *
 */
53
LPoint3 BulletBodyNode::get_shape_pos(int idx) const;

797 13 get_shape_mat 0 4 1510 29 BulletBodyNode::get_shape_mat 0 1 35 10
/**
 *
 */
54
LMatrix4 BulletBodyNode::get_shape_mat(int idx) const;

798 19 get_shape_transform 0 4 1510 35 BulletBodyNode::get_shape_transform 0 1 36 10
/**
 *
 */
84
ConstPointerTo< TransformState > BulletBodyNode::get_shape_transform(int idx) const;

799 16 get_shape_bounds 0 4 1510 32 BulletBodyNode::get_shape_bounds 0 1 37 81
/**
 * Returns the current bounds of all collision shapes owned by this body.
 */
60
BoundingSphere BulletBodyNode::get_shape_bounds(void) const;

800 32 add_shapes_from_collision_solids 0 4 1510 48 BulletBodyNode::add_shapes_from_collision_solids 0 1 38 10
/**
 *
 */
76
void BulletBodyNode::add_shapes_from_collision_solids(CollisionNode *cnode);

801 9 is_static 0 4 1510 25 BulletBodyNode::is_static 0 1 39 35
// Static and kinematic

/**
 *
 */
50
inline bool BulletBodyNode::is_static(void) const;

802 12 is_kinematic 0 4 1510 28 BulletBodyNode::is_kinematic 0 1 40 10
/**
 *
 */
53
inline bool BulletBodyNode::is_kinematic(void) const;

803 10 set_static 0 4 1510 26 BulletBodyNode::set_static 0 1 41 10
/**
 *
 */
51
inline void BulletBodyNode::set_static(bool value);

804 13 set_kinematic 0 4 1510 29 BulletBodyNode::set_kinematic 0 1 42 10
/**
 *
 */
54
inline void BulletBodyNode::set_kinematic(bool value);

805 21 set_into_collide_mask 0 4 1510 37 BulletBodyNode::set_into_collide_mask 0 1 43 23
// Contacts

/**
 *
 */
68
inline void BulletBodyNode::set_into_collide_mask(CollideMask mask);

806 17 notify_collisions 0 4 1510 33 BulletBodyNode::notify_collisions 0 1 44 10
/**
 *
 */
58
inline void BulletBodyNode::notify_collisions(bool value);

807 19 notifies_collisions 0 4 1510 35 BulletBodyNode::notifies_collisions 0 1 45 10
/**
 *
 */
60
inline bool BulletBodyNode::notifies_collisions(void) const;

808 22 set_collision_response 0 4 1510 38 BulletBodyNode::set_collision_response 0 1 46 10
/**
 *
 */
63
inline void BulletBodyNode::set_collision_response(bool value);

809 22 get_collision_response 0 4 1510 38 BulletBodyNode::get_collision_response 0 1 47 10
/**
 *
 */
63
inline bool BulletBodyNode::get_collision_response(void) const;

810 20 check_collision_with 0 4 1510 36 BulletBodyNode::check_collision_with 0 1 48 10
/**
 *
 */
59
bool BulletBodyNode::check_collision_with(PandaNode *node);

811 20 has_contact_response 0 4 1510 36 BulletBodyNode::has_contact_response 0 1 49 10
/**
 *
 */
54
bool BulletBodyNode::has_contact_response(void) const;

812 32 get_contact_processing_threshold 0 4 1510 48 BulletBodyNode::get_contact_processing_threshold 0 1 50 10
/**
 *
 */
73
PN_stdfloat BulletBodyNode::get_contact_processing_threshold(void) const;

813 32 set_contact_processing_threshold 0 4 1510 48 BulletBodyNode::set_contact_processing_threshold 0 1 51 106
/**
 * The constraint solver can discard solving contacts, if the distance is
 * above this threshold.
 */
77
void BulletBodyNode::set_contact_processing_threshold(PN_stdfloat threshold);

814 9 is_active 0 4 1510 25 BulletBodyNode::is_active 0 1 52 27
// Deactivation

/**
 *
 */
43
bool BulletBodyNode::is_active(void) const;

815 10 set_active 0 4 1510 26 BulletBodyNode::set_active 0 1 53 10
/**
 *
 */
65
void BulletBodyNode::set_active(bool active, bool force = false);

816 21 set_deactivation_time 0 4 1510 37 BulletBodyNode::set_deactivation_time 0 1 54 10
/**
 *
 */
59
void BulletBodyNode::set_deactivation_time(PN_stdfloat dt);

817 21 get_deactivation_time 0 4 1510 37 BulletBodyNode::get_deactivation_time 0 1 55 10
/**
 *
 */
62
PN_stdfloat BulletBodyNode::get_deactivation_time(void) const;

818 24 set_deactivation_enabled 0 4 1510 40 BulletBodyNode::set_deactivation_enabled 0 1 56 163
/**
 * If true, this object will be deactivated after a certain amount of time has
 * passed without movement.  If false, the object will always remain active.
 */
60
void BulletBodyNode::set_deactivation_enabled(bool enabled);

819 23 is_deactivation_enabled 0 4 1510 39 BulletBodyNode::is_deactivation_enabled 0 1 57 10
/**
 *
 */
57
bool BulletBodyNode::is_deactivation_enabled(void) const;

820 17 set_debug_enabled 0 4 1510 33 BulletBodyNode::set_debug_enabled 0 1 58 155
// Debug Visualistion

/**
 * Enables or disables the debug visualisation for this collision object.  By
 * default the debug visualisation is enabled.
 */
66
inline void BulletBodyNode::set_debug_enabled(bool const enabled);

821 16 is_debug_enabled 0 4 1510 32 BulletBodyNode::is_debug_enabled 0 1 59 141
/**
 * Returns TRUE if the debug visualisation is enabled for this collision
 * object, and FALSE if the debug visualisation is disabled.
 */
57
inline bool BulletBodyNode::is_debug_enabled(void) const;

822 15 get_restitution 0 4 1510 31 BulletBodyNode::get_restitution 0 1 60 39
// Friction and Restitution

/**
 *
 */
63
inline PN_stdfloat BulletBodyNode::get_restitution(void) const;

823 15 set_restitution 0 4 1510 31 BulletBodyNode::set_restitution 0 1 61 10
/**
 *
 */
69
inline void BulletBodyNode::set_restitution(PN_stdfloat restitution);

824 12 get_friction 0 4 1510 28 BulletBodyNode::get_friction 0 1 62 10
/**
 *
 */
60
inline PN_stdfloat BulletBodyNode::get_friction(void) const;

825 12 set_friction 0 4 1510 28 BulletBodyNode::set_friction 0 1 63 10
/**
 *
 */
63
inline void BulletBodyNode::set_friction(PN_stdfloat friction);

826 24 has_anisotropic_friction 0 4 1510 40 BulletBodyNode::has_anisotropic_friction 0 1 64 10
/**
 *
 */
65
inline bool BulletBodyNode::has_anisotropic_friction(void) const;

827 24 set_anisotropic_friction 0 4 1510 40 BulletBodyNode::set_anisotropic_friction 0 1 65 10
/**
 *
 */
73
void BulletBodyNode::set_anisotropic_friction(LVecBase3 const &friction);

828 24 get_anisotropic_friction 0 4 1510 40 BulletBodyNode::get_anisotropic_friction 0 1 66 10
/**
 *
 */
63
LVecBase3 BulletBodyNode::get_anisotropic_friction(void) const;

829 27 get_ccd_swept_sphere_radius 0 4 1510 43 BulletBodyNode::get_ccd_swept_sphere_radius 0 1 67 18
// CCD

/**
 *
 */
68
PN_stdfloat BulletBodyNode::get_ccd_swept_sphere_radius(void) const;

830 24 get_ccd_motion_threshold 0 4 1510 40 BulletBodyNode::get_ccd_motion_threshold 0 1 68 10
/**
 *
 */
65
PN_stdfloat BulletBodyNode::get_ccd_motion_threshold(void) const;

831 27 set_ccd_swept_sphere_radius 0 4 1510 43 BulletBodyNode::set_ccd_swept_sphere_radius 0 1 69 10
/**
 *
 */
69
void BulletBodyNode::set_ccd_swept_sphere_radius(PN_stdfloat radius);

832 24 set_ccd_motion_threshold 0 4 1510 40 BulletBodyNode::set_ccd_motion_threshold 0 1 70 10
/**
 *
 */
69
void BulletBodyNode::set_ccd_motion_threshold(PN_stdfloat threshold);

833 19 set_transform_dirty 0 4 1510 35 BulletBodyNode::set_transform_dirty 0 1 71 228
// Special

/**
 * This method enforces an update of the Bullet transform, that is copies the
 * scene graph transform to the Bullet transform.  This is achieved by alling
 * the protected PandaNode hook 'transform_changed'.
 */
47
void BulletBodyNode::set_transform_dirty(void);

834 14 get_class_type 0 4 1510 30 BulletBodyNode::get_class_type 0 1 72 0
55
static TypeHandle BulletBodyNode::get_class_type(void);

835 14 BulletBoxShape 0 4 1511 30 BulletBoxShape::BulletBoxShape 0 2 73 74 22
/**
 *
 */

/**
 *
 */
128
BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents);
inline BulletBoxShape::BulletBoxShape(BulletBoxShape const &copy);

836 10 operator = 0 4 1511 26 BulletBoxShape::operator = 0 1 75 0
67
inline void BulletBoxShape::operator =(BulletBoxShape const &copy);

837 31 get_half_extents_without_margin 0 4 1511 47 BulletBoxShape::get_half_extents_without_margin 0 1 76 10
/**
 *
 */
70
LVecBase3 BulletBoxShape::get_half_extents_without_margin(void) const;

838 28 get_half_extents_with_margin 0 4 1511 44 BulletBoxShape::get_half_extents_with_margin 0 1 77 10
/**
 *
 */
67
LVecBase3 BulletBoxShape::get_half_extents_with_margin(void) const;

839 15 make_from_solid 0 4 1511 31 BulletBoxShape::make_from_solid 0 1 78 10
/**
 *
 */
82
static BulletBoxShape *BulletBoxShape::make_from_solid(CollisionBox const *solid);

840 14 get_class_type 0 4 1511 30 BulletBoxShape::get_class_type 0 1 79 0
55
static TypeHandle BulletBoxShape::get_class_type(void);

841 18 BulletCapsuleShape 0 4 1512 38 BulletCapsuleShape::BulletCapsuleShape 0 2 80 81 22
/**
 *
 */

/**
 *
 */
184
BulletCapsuleShape::BulletCapsuleShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
inline BulletCapsuleShape::BulletCapsuleShape(BulletCapsuleShape const &copy);

842 10 operator = 0 4 1512 30 BulletCapsuleShape::operator = 0 1 82 0
75
inline void BulletCapsuleShape::operator =(BulletCapsuleShape const &copy);

843 10 get_radius 0 4 1512 30 BulletCapsuleShape::get_radius 0 1 83 10
/**
 *
 */
62
inline PN_stdfloat BulletCapsuleShape::get_radius(void) const;

844 15 get_half_height 0 4 1512 35 BulletCapsuleShape::get_half_height 0 1 84 10
/**
 *
 */
67
inline PN_stdfloat BulletCapsuleShape::get_half_height(void) const;

845 14 get_class_type 0 4 1512 34 BulletCapsuleShape::get_class_type 0 1 85 0
59
static TypeHandle BulletCapsuleShape::get_class_type(void);

846 29 BulletCharacterControllerNode 0 4 1513 60 BulletCharacterControllerNode::BulletCharacterControllerNode 0 1 86 10
/**
 *
 */
138
BulletCharacterControllerNode::BulletCharacterControllerNode(BulletShape *shape, PN_stdfloat step_height, char const *name = "character");

847 19 set_linear_movement 0 4 1513 50 BulletCharacterControllerNode::set_linear_movement 0 1 87 10
/**
 *
 */
97
void BulletCharacterControllerNode::set_linear_movement(LVector3 const &velocity, bool is_local);

848 20 set_angular_movement 0 4 1513 51 BulletCharacterControllerNode::set_angular_movement 0 1 88 10
/**
 *
 */
76
void BulletCharacterControllerNode::set_angular_movement(PN_stdfloat omega);

849 9 get_shape 0 4 1513 40 BulletCharacterControllerNode::get_shape 0 1 89 10
/**
 *
 */
66
BulletShape *BulletCharacterControllerNode::get_shape(void) const;

850 11 get_gravity 0 4 1513 42 BulletCharacterControllerNode::get_gravity 0 1 90 10
/**
 *
 */
67
PN_stdfloat BulletCharacterControllerNode::get_gravity(void) const;

851 13 get_max_slope 0 4 1513 44 BulletCharacterControllerNode::get_max_slope 0 1 91 10
/**
 *
 */
69
PN_stdfloat BulletCharacterControllerNode::get_max_slope(void) const;

852 14 set_fall_speed 0 4 1513 45 BulletCharacterControllerNode::set_fall_speed 0 1 92 10
/**
 *
 */
75
void BulletCharacterControllerNode::set_fall_speed(PN_stdfloat fall_speed);

853 14 set_jump_speed 0 4 1513 45 BulletCharacterControllerNode::set_jump_speed 0 1 93 10
/**
 *
 */
75
void BulletCharacterControllerNode::set_jump_speed(PN_stdfloat jump_speed);

854 19 set_max_jump_height 0 4 1513 50 BulletCharacterControllerNode::set_max_jump_height 0 1 94 10
/**
 *
 */
85
void BulletCharacterControllerNode::set_max_jump_height(PN_stdfloat max_jump_height);

855 13 set_max_slope 0 4 1513 44 BulletCharacterControllerNode::set_max_slope 0 1 95 10
/**
 *
 */
73
void BulletCharacterControllerNode::set_max_slope(PN_stdfloat max_slope);

856 11 set_gravity 0 4 1513 42 BulletCharacterControllerNode::set_gravity 0 1 96 10
/**
 *
 */
69
void BulletCharacterControllerNode::set_gravity(PN_stdfloat gravity);

857 24 set_use_ghost_sweep_test 0 4 1513 55 BulletCharacterControllerNode::set_use_ghost_sweep_test 0 1 97 10
/**
 *
 */
73
void BulletCharacterControllerNode::set_use_ghost_sweep_test(bool value);

858 12 is_on_ground 0 4 1513 43 BulletCharacterControllerNode::is_on_ground 0 1 98 10
/**
 *
 */
61
bool BulletCharacterControllerNode::is_on_ground(void) const;

859 8 can_jump 0 4 1513 39 BulletCharacterControllerNode::can_jump 0 1 99 10
/**
 *
 */
57
bool BulletCharacterControllerNode::can_jump(void) const;

860 7 do_jump 0 4 1513 38 BulletCharacterControllerNode::do_jump 0 1 100 10
/**
 *
 */
50
void BulletCharacterControllerNode::do_jump(void);

861 14 get_class_type 0 4 1513 45 BulletCharacterControllerNode::get_class_type 0 1 101 0
70
static TypeHandle BulletCharacterControllerNode::get_class_type(void);

862 34 upcast_to_ClosestRayResultCallback 0 12 1514 61 BulletClosestHitRayResult::upcast_to_ClosestRayResultCallback 0 1 113 65
upcast from BulletClosestHitRayResult to ClosestRayResultCallback
112
btCollisionWorld::ClosestRayResultCallback *BulletClosestHitRayResult::upcast_to_ClosestRayResultCallback(void);

863 62 downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult 0 8 0 62 downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult 0 1 114 67
downcast from ClosestRayResultCallback to BulletClosestHitRayResult
140
BulletClosestHitRayResult *downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult(btCollisionWorld::ClosestRayResultCallback *this);

864 5 empty 0 4 1514 32 BulletClosestHitRayResult::empty 0 1 103 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
79
static inline BulletClosestHitRayResult BulletClosestHitRayResult::empty(void);

865 12 get_from_pos 0 4 1514 39 BulletClosestHitRayResult::get_from_pos 0 1 104 10
/**
 *
 */
60
LPoint3 BulletClosestHitRayResult::get_from_pos(void) const;

866 10 get_to_pos 0 4 1514 37 BulletClosestHitRayResult::get_to_pos 0 1 105 10
/**
 *
 */
58
LPoint3 BulletClosestHitRayResult::get_to_pos(void) const;

867 7 has_hit 0 4 1514 34 BulletClosestHitRayResult::has_hit 0 1 106 10
/**
 *
 */
52
bool BulletClosestHitRayResult::has_hit(void) const;

868 8 get_node 0 4 1514 35 BulletClosestHitRayResult::get_node 0 1 107 10
/**
 *
 */
59
PandaNode *BulletClosestHitRayResult::get_node(void) const;

869 11 get_hit_pos 0 4 1514 38 BulletClosestHitRayResult::get_hit_pos 0 1 108 10
/**
 *
 */
59
LPoint3 BulletClosestHitRayResult::get_hit_pos(void) const;

870 14 get_hit_normal 0 4 1514 41 BulletClosestHitRayResult::get_hit_normal 0 1 109 10
/**
 *
 */
63
LVector3 BulletClosestHitRayResult::get_hit_normal(void) const;

871 16 get_hit_fraction 0 4 1514 43 BulletClosestHitRayResult::get_hit_fraction 0 1 110 10
/**
 *
 */
68
PN_stdfloat BulletClosestHitRayResult::get_hit_fraction(void) const;

872 14 get_shape_part 0 4 1514 41 BulletClosestHitRayResult::get_shape_part 0 1 111 10
/**
 *
 */
58
int BulletClosestHitRayResult::get_shape_part(void) const;

873 18 get_triangle_index 0 4 1514 45 BulletClosestHitRayResult::get_triangle_index 0 1 112 10
/**
 *
 */
62
int BulletClosestHitRayResult::get_triangle_index(void) const;

874 25 BulletClosestHitRayResult 0 4 1514 52 BulletClosestHitRayResult::BulletClosestHitRayResult 0 1 102 10
/**
 *
 */
105
inline BulletClosestHitRayResult::BulletClosestHitRayResult(BulletClosestHitRayResult const &) = default;

875 26 ~BulletClosestHitRayResult 0 4 1514 53 BulletClosestHitRayResult::~BulletClosestHitRayResult 0 0 0
60
BulletClosestHitRayResult::~BulletClosestHitRayResult(void);

876 37 upcast_to_ClosestConvexResultCallback 0 12 1516 66 BulletClosestHitSweepResult::upcast_to_ClosestConvexResultCallback 0 1 124 70
upcast from BulletClosestHitSweepResult to ClosestConvexResultCallback
120
btCollisionWorld::ClosestConvexResultCallback *BulletClosestHitSweepResult::upcast_to_ClosestConvexResultCallback(void);

877 67 downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult 0 8 0 67 downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult 0 1 125 72
downcast from ClosestConvexResultCallback to BulletClosestHitSweepResult
150
BulletClosestHitSweepResult *downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult(btCollisionWorld::ClosestConvexResultCallback *this);

878 5 empty 0 4 1516 34 BulletClosestHitSweepResult::empty 0 1 116 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
83
static inline BulletClosestHitSweepResult BulletClosestHitSweepResult::empty(void);

879 12 get_from_pos 0 4 1516 41 BulletClosestHitSweepResult::get_from_pos 0 1 117 10
/**
 *
 */
62
LPoint3 BulletClosestHitSweepResult::get_from_pos(void) const;

880 10 get_to_pos 0 4 1516 39 BulletClosestHitSweepResult::get_to_pos 0 1 118 10
/**
 *
 */
60
LPoint3 BulletClosestHitSweepResult::get_to_pos(void) const;

881 7 has_hit 0 4 1516 36 BulletClosestHitSweepResult::has_hit 0 1 119 10
/**
 *
 */
54
bool BulletClosestHitSweepResult::has_hit(void) const;

882 8 get_node 0 4 1516 37 BulletClosestHitSweepResult::get_node 0 1 120 10
/**
 *
 */
61
PandaNode *BulletClosestHitSweepResult::get_node(void) const;

883 11 get_hit_pos 0 4 1516 40 BulletClosestHitSweepResult::get_hit_pos 0 1 121 10
/**
 *
 */
61
LPoint3 BulletClosestHitSweepResult::get_hit_pos(void) const;

884 14 get_hit_normal 0 4 1516 43 BulletClosestHitSweepResult::get_hit_normal 0 1 122 10
/**
 *
 */
65
LVector3 BulletClosestHitSweepResult::get_hit_normal(void) const;

885 16 get_hit_fraction 0 4 1516 45 BulletClosestHitSweepResult::get_hit_fraction 0 1 123 10
/**
 *
 */
70
PN_stdfloat BulletClosestHitSweepResult::get_hit_fraction(void) const;

886 27 BulletClosestHitSweepResult 0 4 1516 56 BulletClosestHitSweepResult::BulletClosestHitSweepResult 0 1 115 10
/**
 *
 */
111
inline BulletClosestHitSweepResult::BulletClosestHitSweepResult(BulletClosestHitSweepResult const &) = default;

887 28 ~BulletClosestHitSweepResult 0 4 1516 57 BulletClosestHitSweepResult::~BulletClosestHitSweepResult 0 0 0
64
BulletClosestHitSweepResult::~BulletClosestHitSweepResult(void);

888 15 BulletConeShape 0 4 1518 32 BulletConeShape::BulletConeShape 0 2 126 127 22
/**
 *
 */

/**
 *
 */
169
BulletConeShape::BulletConeShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
inline BulletConeShape::BulletConeShape(BulletConeShape const &copy);

889 10 operator = 0 4 1518 27 BulletConeShape::operator = 0 1 128 0
69
inline void BulletConeShape::operator =(BulletConeShape const &copy);

890 10 get_radius 0 4 1518 27 BulletConeShape::get_radius 0 1 129 10
/**
 *
 */
59
inline PN_stdfloat BulletConeShape::get_radius(void) const;

891 10 get_height 0 4 1518 27 BulletConeShape::get_height 0 1 130 10
/**
 *
 */
59
inline PN_stdfloat BulletConeShape::get_height(void) const;

892 14 get_class_type 0 4 1518 31 BulletConeShape::get_class_type 0 1 131 0
56
static TypeHandle BulletConeShape::get_class_type(void);

893 16 get_rigid_body_a 0 4 1519 34 BulletConstraint::get_rigid_body_a 0 1 132 10
/**
 *
 */
62
BulletRigidBodyNode *BulletConstraint::get_rigid_body_a(void);

894 16 get_rigid_body_b 0 4 1519 34 BulletConstraint::get_rigid_body_b 0 1 133 10
/**
 *
 */
62
BulletRigidBodyNode *BulletConstraint::get_rigid_body_b(void);

895 15 enable_feedback 0 4 1519 33 BulletConstraint::enable_feedback 0 1 134 10
/**
 *
 */
51
void BulletConstraint::enable_feedback(bool value);

896 19 set_debug_draw_size 0 4 1519 37 BulletConstraint::set_debug_draw_size 0 1 135 10
/**
 *
 */
61
void BulletConstraint::set_debug_draw_size(PN_stdfloat size);

897 19 get_applied_impulse 0 4 1519 37 BulletConstraint::get_applied_impulse 0 1 136 10
/**
 *
 */
62
PN_stdfloat BulletConstraint::get_applied_impulse(void) const;

898 19 get_debug_draw_size 0 4 1519 37 BulletConstraint::get_debug_draw_size 0 1 137 10
/**
 *
 */
56
PN_stdfloat BulletConstraint::get_debug_draw_size(void);

899 22 set_breaking_threshold 0 4 1519 40 BulletConstraint::set_breaking_threshold 0 2 138 139 287
/**
 * Sets the applied impulse limit for breaking the constraint.  If the limit
 * is exceeded the constraint will be disabled.  Disabled constraints are not
 * removed from the world, and can be re-enabled.
 */

/**
 * Returns the applied impluse limit for breaking the constraint.
 */
149
inline void BulletConstraint::set_breaking_threshold(PN_stdfloat threshold);
inline PN_stdfloat BulletConstraint::set_breaking_threshold(void) const;

900 11 set_enabled 0 4 1519 29 BulletConstraint::set_enabled 0 1 140 10
/**
 *
 */
56
inline void BulletConstraint::set_enabled(bool enabled);

901 10 is_enabled 0 4 1519 28 BulletConstraint::is_enabled 0 1 141 53
/**
 * Returns TRUE if the constraint is enabled.
 */
53
inline bool BulletConstraint::is_enabled(void) const;

902 9 set_param 0 4 1519 27 BulletConstraint::set_param 0 1 142 10
/**
 *
 */
106
void BulletConstraint::set_param(BulletConstraint::ConstraintParam num, PN_stdfloat value, int axis = -1);

903 9 get_param 0 4 1519 27 BulletConstraint::get_param 0 1 143 10
/**
 *
 */
94
PN_stdfloat BulletConstraint::get_param(BulletConstraint::ConstraintParam num, int axis = -1);

904 14 get_class_type 0 4 1519 32 BulletConstraint::get_class_type 0 1 144 0
57
static TypeHandle BulletConstraint::get_class_type(void);

905 25 BulletConeTwistConstraint 0 4 1522 52 BulletConeTwistConstraint::BulletConeTwistConstraint 0 2 145 146 22
/**
 *
 */

/**
 *
 */
305
BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a);
BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b);

906 9 set_limit 0 4 1522 36 BulletConeTwistConstraint::set_limit 0 2 147 148 22
/**
 *
 */

/**
 *
 */
272
void BulletConeTwistConstraint::set_limit(int index, PN_stdfloat value);
void BulletConeTwistConstraint::set_limit(PN_stdfloat swing1, PN_stdfloat swing2, PN_stdfloat twist, PN_stdfloat softness = 1.0, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0);

907 11 set_damping 0 4 1522 38 BulletConeTwistConstraint::set_damping 0 1 149 10
/**
 *
 */
65
void BulletConeTwistConstraint::set_damping(PN_stdfloat damping);

908 17 get_fix_threshold 0 4 1522 44 BulletConeTwistConstraint::get_fix_threshold 0 1 150 10
/**
 *
 */
69
PN_stdfloat BulletConeTwistConstraint::get_fix_threshold(void) const;

909 17 set_fix_threshold 0 4 1522 44 BulletConeTwistConstraint::set_fix_threshold 0 1 151 10
/**
 *
 */
73
void BulletConeTwistConstraint::set_fix_threshold(PN_stdfloat threshold);

910 12 enable_motor 0 4 1522 39 BulletConeTwistConstraint::enable_motor 0 1 152 10
/**
 *
 */
58
void BulletConeTwistConstraint::enable_motor(bool enable);

911 21 set_max_motor_impulse 0 4 1522 48 BulletConeTwistConstraint::set_max_motor_impulse 0 1 153 10
/**
 *
 */
79
void BulletConeTwistConstraint::set_max_motor_impulse(PN_stdfloat max_impulse);

912 32 set_max_motor_impulse_normalized 0 4 1522 59 BulletConeTwistConstraint::set_max_motor_impulse_normalized 0 1 154 10
/**
 *
 */
90
void BulletConeTwistConstraint::set_max_motor_impulse_normalized(PN_stdfloat max_impulse);

913 16 set_motor_target 0 4 1522 43 BulletConeTwistConstraint::set_motor_target 0 1 155 10
/**
 *
 */
74
void BulletConeTwistConstraint::set_motor_target(LQuaternion const &quat);

914 36 set_motor_target_in_constraint_space 0 4 1522 63 BulletConeTwistConstraint::set_motor_target_in_constraint_space 0 1 156 10
/**
 *
 */
94
void BulletConeTwistConstraint::set_motor_target_in_constraint_space(LQuaternion const &quat);

915 10 set_frames 0 4 1522 37 BulletConeTwistConstraint::set_frames 0 1 157 10
/**
 *
 */
99
void BulletConeTwistConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

916 11 get_frame_a 0 4 1522 38 BulletConeTwistConstraint::get_frame_a 0 1 158 10
/**
 *
 */
91
inline ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_a(void) const;

917 11 get_frame_b 0 4 1522 38 BulletConeTwistConstraint::get_frame_b 0 1 159 10
/**
 *
 */
91
inline ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_b(void) const;

918 14 get_class_type 0 4 1522 41 BulletConeTwistConstraint::get_class_type 0 1 160 0
66
static TypeHandle BulletConeTwistConstraint::get_class_type(void);

919 20 ~BulletManifoldPoint 0 4 1523 41 BulletManifoldPoint::~BulletManifoldPoint 0 0 10
/**
 *
 */
55
inline BulletManifoldPoint::~BulletManifoldPoint(void);

920 13 get_life_time 0 4 1523 34 BulletManifoldPoint::get_life_time 0 1 161 10
/**
 *
 */
51
int BulletManifoldPoint::get_life_time(void) const;

921 12 get_distance 0 4 1523 33 BulletManifoldPoint::get_distance 0 1 162 10
/**
 *
 */
58
PN_stdfloat BulletManifoldPoint::get_distance(void) const;

922 19 get_applied_impulse 0 4 1523 40 BulletManifoldPoint::get_applied_impulse 0 1 163 10
/**
 *
 */
65
PN_stdfloat BulletManifoldPoint::get_applied_impulse(void) const;

923 23 get_position_world_on_a 0 4 1523 44 BulletManifoldPoint::get_position_world_on_a 0 1 164 10
/**
 *
 */
65
LPoint3 BulletManifoldPoint::get_position_world_on_a(void) const;

924 23 get_position_world_on_b 0 4 1523 44 BulletManifoldPoint::get_position_world_on_b 0 1 165 10
/**
 *
 */
65
LPoint3 BulletManifoldPoint::get_position_world_on_b(void) const;

925 21 get_normal_world_on_b 0 4 1523 42 BulletManifoldPoint::get_normal_world_on_b 0 1 166 10
/**
 *
 */
64
LVector3 BulletManifoldPoint::get_normal_world_on_b(void) const;

926 17 get_local_point_a 0 4 1523 38 BulletManifoldPoint::get_local_point_a 0 1 167 10
/**
 *
 */
59
LPoint3 BulletManifoldPoint::get_local_point_a(void) const;

927 17 get_local_point_b 0 4 1523 38 BulletManifoldPoint::get_local_point_b 0 1 168 10
/**
 *
 */
59
LPoint3 BulletManifoldPoint::get_local_point_b(void) const;

928 12 get_part_id0 0 4 1523 33 BulletManifoldPoint::get_part_id0 0 1 169 10
/**
 *
 */
50
int BulletManifoldPoint::get_part_id0(void) const;

929 12 get_part_id1 0 4 1523 33 BulletManifoldPoint::get_part_id1 0 1 170 10
/**
 *
 */
50
int BulletManifoldPoint::get_part_id1(void) const;

930 10 get_index0 0 4 1523 31 BulletManifoldPoint::get_index0 0 1 171 10
/**
 *
 */
48
int BulletManifoldPoint::get_index0(void) const;

931 10 get_index1 0 4 1523 31 BulletManifoldPoint::get_index1 0 1 172 10
/**
 *
 */
48
int BulletManifoldPoint::get_index1(void) const;

932 32 set_lateral_friction_initialized 0 4 1523 53 BulletManifoldPoint::set_lateral_friction_initialized 0 1 173 10
/**
 *
 */
78
inline void BulletManifoldPoint::set_lateral_friction_initialized(bool value);

933 25 set_lateral_friction_dir1 0 4 1523 46 BulletManifoldPoint::set_lateral_friction_dir1 0 1 174 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_lateral_friction_dir1(LVecBase3 const &dir);

934 25 set_lateral_friction_dir2 0 4 1523 46 BulletManifoldPoint::set_lateral_friction_dir2 0 1 175 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_lateral_friction_dir2(LVecBase3 const &dir);

935 19 set_contact_motion1 0 4 1523 40 BulletManifoldPoint::set_contact_motion1 0 1 176 10
/**
 *
 */
72
inline void BulletManifoldPoint::set_contact_motion1(PN_stdfloat value);

936 19 set_contact_motion2 0 4 1523 40 BulletManifoldPoint::set_contact_motion2 0 1 177 10
/**
 *
 */
72
inline void BulletManifoldPoint::set_contact_motion2(PN_stdfloat value);

937 21 set_combined_friction 0 4 1523 42 BulletManifoldPoint::set_combined_friction 0 1 178 10
/**
 *
 */
74
inline void BulletManifoldPoint::set_combined_friction(PN_stdfloat value);

938 24 set_combined_restitution 0 4 1523 45 BulletManifoldPoint::set_combined_restitution 0 1 179 10
/**
 *
 */
77
inline void BulletManifoldPoint::set_combined_restitution(PN_stdfloat value);

939 19 set_applied_impulse 0 4 1523 40 BulletManifoldPoint::set_applied_impulse 0 1 180 10
/**
 *
 */
72
inline void BulletManifoldPoint::set_applied_impulse(PN_stdfloat value);

940 28 set_applied_impulse_lateral1 0 4 1523 49 BulletManifoldPoint::set_applied_impulse_lateral1 0 1 181 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_applied_impulse_lateral1(PN_stdfloat value);

941 28 set_applied_impulse_lateral2 0 4 1523 49 BulletManifoldPoint::set_applied_impulse_lateral2 0 1 182 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_applied_impulse_lateral2(PN_stdfloat value);

942 16 set_contact_cfm1 0 4 1523 37 BulletManifoldPoint::set_contact_cfm1 0 1 183 10
/**
 *
 */
69
inline void BulletManifoldPoint::set_contact_cfm1(PN_stdfloat value);

943 16 set_contact_cfm2 0 4 1523 37 BulletManifoldPoint::set_contact_cfm2 0 1 184 10
/**
 *
 */
69
inline void BulletManifoldPoint::set_contact_cfm2(PN_stdfloat value);

944 32 get_lateral_friction_initialized 0 4 1523 53 BulletManifoldPoint::get_lateral_friction_initialized 0 1 185 10
/**
 *
 */
78
inline bool BulletManifoldPoint::get_lateral_friction_initialized(void) const;

945 25 get_lateral_friction_dir1 0 4 1523 46 BulletManifoldPoint::get_lateral_friction_dir1 0 1 186 10
/**
 *
 */
75
inline LVector3 BulletManifoldPoint::get_lateral_friction_dir1(void) const;

946 25 get_lateral_friction_dir2 0 4 1523 46 BulletManifoldPoint::get_lateral_friction_dir2 0 1 187 10
/**
 *
 */
75
inline LVector3 BulletManifoldPoint::get_lateral_friction_dir2(void) const;

947 19 get_contact_motion1 0 4 1523 40 BulletManifoldPoint::get_contact_motion1 0 1 188 10
/**
 *
 */
72
inline PN_stdfloat BulletManifoldPoint::get_contact_motion1(void) const;

948 19 get_contact_motion2 0 4 1523 40 BulletManifoldPoint::get_contact_motion2 0 1 189 10
/**
 *
 */
72
inline PN_stdfloat BulletManifoldPoint::get_contact_motion2(void) const;

949 21 get_combined_friction 0 4 1523 42 BulletManifoldPoint::get_combined_friction 0 1 190 10
/**
 *
 */
74
inline PN_stdfloat BulletManifoldPoint::get_combined_friction(void) const;

950 24 get_combined_restitution 0 4 1523 45 BulletManifoldPoint::get_combined_restitution 0 1 191 10
/**
 *
 */
77
inline PN_stdfloat BulletManifoldPoint::get_combined_restitution(void) const;

951 28 get_applied_impulse_lateral1 0 4 1523 49 BulletManifoldPoint::get_applied_impulse_lateral1 0 1 192 10
/**
 *
 */
81
inline PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral1(void) const;

952 28 get_applied_impulse_lateral2 0 4 1523 49 BulletManifoldPoint::get_applied_impulse_lateral2 0 1 193 10
/**
 *
 */
81
inline PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral2(void) const;

953 16 get_contact_cfm1 0 4 1523 37 BulletManifoldPoint::get_contact_cfm1 0 1 194 10
/**
 *
 */
69
inline PN_stdfloat BulletManifoldPoint::get_contact_cfm1(void) const;

954 16 get_contact_cfm2 0 4 1523 37 BulletManifoldPoint::get_contact_cfm2 0 1 195 10
/**
 *
 */
69
inline PN_stdfloat BulletManifoldPoint::get_contact_cfm2(void) const;

955 25 BulletContactCallbackData 0 4 1524 52 BulletContactCallbackData::BulletContactCallbackData 0 2 196 197 10
/**
 *
 */
269
inline BulletContactCallbackData::BulletContactCallbackData(BulletManifoldPoint &mp, PandaNode *node0, PandaNode *node1, int id0, int id1, int index0, int index1);
inline BulletContactCallbackData::BulletContactCallbackData(BulletContactCallbackData const &) = default;

956 12 get_manifold 0 4 1524 39 BulletContactCallbackData::get_manifold 0 1 198 10
/**
 *
 */
80
inline BulletManifoldPoint &BulletContactCallbackData::get_manifold(void) const;

957 9 get_node0 0 4 1524 36 BulletContactCallbackData::get_node0 0 1 199 10
/**
 *
 */
67
inline PandaNode *BulletContactCallbackData::get_node0(void) const;

958 9 get_node1 0 4 1524 36 BulletContactCallbackData::get_node1 0 1 200 10
/**
 *
 */
67
inline PandaNode *BulletContactCallbackData::get_node1(void) const;

959 12 get_part_id0 0 4 1524 39 BulletContactCallbackData::get_part_id0 0 1 201 10
/**
 *
 */
63
inline int BulletContactCallbackData::get_part_id0(void) const;

960 12 get_part_id1 0 4 1524 39 BulletContactCallbackData::get_part_id1 0 1 202 10
/**
 *
 */
63
inline int BulletContactCallbackData::get_part_id1(void) const;

961 10 get_index0 0 4 1524 37 BulletContactCallbackData::get_index0 0 1 203 10
/**
 *
 */
61
inline int BulletContactCallbackData::get_index0(void) const;

962 10 get_index1 0 4 1524 37 BulletContactCallbackData::get_index1 0 1 204 10
/**
 *
 */
61
inline int BulletContactCallbackData::get_index1(void) const;

963 14 get_class_type 0 4 1524 41 BulletContactCallbackData::get_class_type 0 1 205 0
66
static TypeHandle BulletContactCallbackData::get_class_type(void);

964 26 ~BulletContactCallbackData 0 4 1524 53 BulletContactCallbackData::~BulletContactCallbackData 0 0 0
60
BulletContactCallbackData::~BulletContactCallbackData(void);

965 18 get_manifold_point 0 4 1526 33 BulletContact::get_manifold_point 0 1 206 10
/**
 *
 */
68
inline BulletManifoldPoint &BulletContact::get_manifold_point(void);

966 9 get_node0 0 4 1526 24 BulletContact::get_node0 0 1 207 10
/**
 *
 */
55
inline PandaNode *BulletContact::get_node0(void) const;

967 9 get_node1 0 4 1526 24 BulletContact::get_node1 0 1 208 10
/**
 *
 */
55
inline PandaNode *BulletContact::get_node1(void) const;

968 8 get_idx0 0 4 1526 23 BulletContact::get_idx0 0 1 209 10
/**
 *
 */
47
inline int BulletContact::get_idx0(void) const;

969 8 get_idx1 0 4 1526 23 BulletContact::get_idx1 0 1 210 10
/**
 *
 */
47
inline int BulletContact::get_idx1(void) const;

970 12 get_part_id0 0 4 1526 27 BulletContact::get_part_id0 0 1 211 10
/**
 *
 */
51
inline int BulletContact::get_part_id0(void) const;

971 12 get_part_id1 0 4 1526 27 BulletContact::get_part_id1 0 1 212 10
/**
 *
 */
51
inline int BulletContact::get_part_id1(void) const;

972 14 ~BulletContact 0 4 1526 29 BulletContact::~BulletContact 0 0 0
36
BulletContact::~BulletContact(void);

973 31 upcast_to_ContactResultCallback 0 12 1527 52 BulletContactResult::upcast_to_ContactResultCallback 0 1 215 56
upcast from BulletContactResult to ContactResultCallback
100
btCollisionWorld::ContactResultCallback *BulletContactResult::upcast_to_ContactResultCallback(void);

974 53 downcast_ContactResultCallback_to_BulletContactResult 0 8 0 53 downcast_ContactResultCallback_to_BulletContactResult 0 1 216 58
downcast from ContactResultCallback to BulletContactResult
122
BulletContactResult *downcast_ContactResultCallback_to_BulletContactResult(btCollisionWorld::ContactResultCallback *this);

975 16 get_num_contacts 0 4 1527 37 BulletContactResult::get_num_contacts 0 1 213 10
/**
 *
 */
61
inline int BulletContactResult::get_num_contacts(void) const;

976 11 get_contact 0 4 1527 32 BulletContactResult::get_contact 0 1 214 10
/**
 *
 */
63
inline BulletContact BulletContactResult::get_contact(int idx);

977 20 ~BulletContactResult 0 4 1527 41 BulletContactResult::~BulletContactResult 0 0 0
48
BulletContactResult::~BulletContactResult(void);

978 15 BulletDebugNode 0 4 1529 32 BulletDebugNode::BulletDebugNode 0 2 217 218 10
/**
 *
 */
137
BulletDebugNode::BulletDebugNode(char const *name = "debug");
inline BulletDebugNode::BulletDebugNode(BulletDebugNode const &) = default;

979 17 draw_mask_changed 0 6 1529 34 BulletDebugNode::draw_mask_changed 0 1 219 10
/**
 *
 */
54
virtual void BulletDebugNode::draw_mask_changed(void);

980 14 show_wireframe 0 4 1529 31 BulletDebugNode::show_wireframe 0 1 220 10
/**
 *
 */
55
inline void BulletDebugNode::show_wireframe(bool show);

981 16 show_constraints 0 4 1529 33 BulletDebugNode::show_constraints 0 1 221 10
/**
 *
 */
57
inline void BulletDebugNode::show_constraints(bool show);

982 19 show_bounding_boxes 0 4 1529 36 BulletDebugNode::show_bounding_boxes 0 1 222 10
/**
 *
 */
60
inline void BulletDebugNode::show_bounding_boxes(bool show);

983 12 show_normals 0 4 1529 29 BulletDebugNode::show_normals 0 1 223 10
/**
 *
 */
53
inline void BulletDebugNode::show_normals(bool show);

984 14 get_class_type 0 4 1529 31 BulletDebugNode::get_class_type 0 1 224 0
56
static TypeHandle BulletDebugNode::get_class_type(void);

985 15 BulletGhostNode 0 4 1531 32 BulletGhostNode::BulletGhostNode 0 1 225 10
/**
 *
 */
61
BulletGhostNode::BulletGhostNode(char const *name = "ghost");

986 25 get_num_overlapping_nodes 0 4 1531 42 BulletGhostNode::get_num_overlapping_nodes 0 1 226 42
// Overlapping

// Overlapping

/**
 *
 */
66
inline int BulletGhostNode::get_num_overlapping_nodes(void) const;

987 20 get_overlapping_node 0 4 1531 37 BulletGhostNode::get_overlapping_node 0 1 227 10
/**
 *
 */
71
inline PandaNode *BulletGhostNode::get_overlapping_node(int idx) const;

988 14 get_class_type 0 4 1531 31 BulletGhostNode::get_class_type 0 1 228 0
56
static TypeHandle BulletGhostNode::get_class_type(void);

989 19 BulletRigidBodyNode 0 4 1532 40 BulletRigidBodyNode::BulletRigidBodyNode 0 1 229 10
/**
 *
 */
78
explicit BulletRigidBodyNode::BulletRigidBodyNode(char const *name = "rigid");

990 8 set_mass 0 4 1532 29 BulletRigidBodyNode::set_mass 0 1 230 276
// Mass & inertia

/**
 * Sets the mass of a rigid body.  This also modifies the inertia, which is
 * automatically computed from the shape of the body.  Setting a value of zero
 * for mass will make the body static.  A value of zero can be considered an
 * infinite mass.
 */
53
void BulletRigidBodyNode::set_mass(PN_stdfloat mass);

991 8 get_mass 0 4 1532 29 BulletRigidBodyNode::get_mass 0 1 231 128
/**
 * Returns the total mass of a rigid body.  A value of zero means that the
 * body is staic, i.e.  has an infinite mass.
 */
54
PN_stdfloat BulletRigidBodyNode::get_mass(void) const;

992 12 get_inv_mass 0 4 1532 33 BulletRigidBodyNode::get_inv_mass 0 1 232 52
/**
 * Returns the inverse mass of a rigid body.
 */
58
PN_stdfloat BulletRigidBodyNode::get_inv_mass(void) const;

993 11 set_inertia 0 4 1532 32 BulletRigidBodyNode::set_inertia 0 1 233 591
/**
 * Sets the inertia of a rigid body.  Inertia is given as a three-component
 * vector.  A component value of zero means infinite inertia along this
 * direction.  Setting the intertia will override the value which is
 * automatically calculated from the rigid bodies shape.  However, it is
 * possible that automatic calculation of intertia is trigger after calling
 * this method, and thus overwriting the explicitly set value again.  This
 * happens when: (a) the mass is set after the inertia.  (b) a shape is added
 * or removed from the body.  (c) the scale of the body changed.
 */
64
void BulletRigidBodyNode::set_inertia(LVecBase3 const &inertia);

994 11 get_inertia 0 4 1532 32 BulletRigidBodyNode::get_inertia 0 1 234 174
/**
 * Returns the inertia of the rigid body.  Inertia is given as a three
 * component vector.  A component value of zero means infinite inertia along
 * this direction.
 */
54
LVector3 BulletRigidBodyNode::get_inertia(void) const;

995 26 get_inv_inertia_diag_local 0 4 1532 47 BulletRigidBodyNode::get_inv_inertia_diag_local 0 1 235 10
/**
 *
 */
69
LVector3 BulletRigidBodyNode::get_inv_inertia_diag_local(void) const;

996 28 get_inv_inertia_tensor_world 0 4 1532 49 BulletRigidBodyNode::get_inv_inertia_tensor_world 0 1 236 10
/**
 *
 */
71
LMatrix3 BulletRigidBodyNode::get_inv_inertia_tensor_world(void) const;

997 19 get_linear_velocity 0 4 1532 40 BulletRigidBodyNode::get_linear_velocity 0 1 237 23
// Velocity

/**
 *
 */
62
LVector3 BulletRigidBodyNode::get_linear_velocity(void) const;

998 20 get_angular_velocity 0 4 1532 41 BulletRigidBodyNode::get_angular_velocity 0 1 238 10
/**
 *
 */
63
LVector3 BulletRigidBodyNode::get_angular_velocity(void) const;

999 19 set_linear_velocity 0 4 1532 40 BulletRigidBodyNode::set_linear_velocity 0 1 239 10
/**
 *
 */
72
void BulletRigidBodyNode::set_linear_velocity(LVector3 const &velocity);

1000 20 set_angular_velocity 0 4 1532 41 BulletRigidBodyNode::set_angular_velocity 0 1 240 10
/**
 *
 */
73
void BulletRigidBodyNode::set_angular_velocity(LVector3 const &velocity);

1001 18 get_linear_damping 0 4 1532 39 BulletRigidBodyNode::get_linear_damping 0 1 241 22
// Damping

/**
 *
 */
71
inline PN_stdfloat BulletRigidBodyNode::get_linear_damping(void) const;

1002 19 get_angular_damping 0 4 1532 40 BulletRigidBodyNode::get_angular_damping 0 1 242 10
/**
 *
 */
72
inline PN_stdfloat BulletRigidBodyNode::get_angular_damping(void) const;

1003 18 set_linear_damping 0 4 1532 39 BulletRigidBodyNode::set_linear_damping 0 1 243 10
/**
 *
 */
71
inline void BulletRigidBodyNode::set_linear_damping(PN_stdfloat value);

1004 19 set_angular_damping 0 4 1532 40 BulletRigidBodyNode::set_angular_damping 0 1 244 10
/**
 *
 */
72
inline void BulletRigidBodyNode::set_angular_damping(PN_stdfloat value);

1005 12 clear_forces 0 4 1532 33 BulletRigidBodyNode::clear_forces 0 1 245 21
// Forces

/**
 *
 */
45
void BulletRigidBodyNode::clear_forces(void);

1006 11 apply_force 0 4 1532 32 BulletRigidBodyNode::apply_force 0 1 246 10
/**
 *
 */
81
void BulletRigidBodyNode::apply_force(LVector3 const &force, LPoint3 const &pos);

1007 19 apply_central_force 0 4 1532 40 BulletRigidBodyNode::apply_central_force 0 1 247 10
/**
 *
 */
69
void BulletRigidBodyNode::apply_central_force(LVector3 const &force);

1008 13 apply_impulse 0 4 1532 34 BulletRigidBodyNode::apply_impulse 0 1 248 10
/**
 *
 */
85
void BulletRigidBodyNode::apply_impulse(LVector3 const &impulse, LPoint3 const &pos);

1009 21 apply_central_impulse 0 4 1532 42 BulletRigidBodyNode::apply_central_impulse 0 1 249 10
/**
 *
 */
73
void BulletRigidBodyNode::apply_central_impulse(LVector3 const &impulse);

1010 12 apply_torque 0 4 1532 33 BulletRigidBodyNode::apply_torque 0 1 250 10
/**
 *
 */
63
void BulletRigidBodyNode::apply_torque(LVector3 const &torque);

1011 20 apply_torque_impulse 0 4 1532 41 BulletRigidBodyNode::apply_torque_impulse 0 1 251 10
/**
 *
 */
71
void BulletRigidBodyNode::apply_torque_impulse(LVector3 const &torque);

1012 15 get_total_force 0 4 1532 36 BulletRigidBodyNode::get_total_force 0 1 252 10
/**
 *
 */
58
LVector3 BulletRigidBodyNode::get_total_force(void) const;

1013 16 get_total_torque 0 4 1532 37 BulletRigidBodyNode::get_total_torque 0 1 253 10
/**
 *
 */
59
LVector3 BulletRigidBodyNode::get_total_torque(void) const;

1014 26 get_linear_sleep_threshold 0 4 1532 47 BulletRigidBodyNode::get_linear_sleep_threshold 0 1 254 38
// Deactivation thresholds

/**
 *
 */
72
PN_stdfloat BulletRigidBodyNode::get_linear_sleep_threshold(void) const;

1015 27 get_angular_sleep_threshold 0 4 1532 48 BulletRigidBodyNode::get_angular_sleep_threshold 0 1 255 10
/**
 *
 */
73
PN_stdfloat BulletRigidBodyNode::get_angular_sleep_threshold(void) const;

1016 26 set_linear_sleep_threshold 0 4 1532 47 BulletRigidBodyNode::set_linear_sleep_threshold 0 1 256 10
/**
 *
 */
76
void BulletRigidBodyNode::set_linear_sleep_threshold(PN_stdfloat threshold);

1017 27 set_angular_sleep_threshold 0 4 1532 48 BulletRigidBodyNode::set_angular_sleep_threshold 0 1 257 10
/**
 *
 */
77
void BulletRigidBodyNode::set_angular_sleep_threshold(PN_stdfloat threshold);

1018 11 set_gravity 0 4 1532 32 BulletRigidBodyNode::set_gravity 0 1 258 22
// Gravity

/**
 *
 */
63
void BulletRigidBodyNode::set_gravity(LVector3 const &gravity);

1019 11 get_gravity 0 4 1532 32 BulletRigidBodyNode::get_gravity 0 1 259 10
/**
 *
 */
54
LVector3 BulletRigidBodyNode::get_gravity(void) const;

1020 17 get_linear_factor 0 4 1532 38 BulletRigidBodyNode::get_linear_factor 0 1 260 32
// Restrict movement

/**
 *
 */
60
LVector3 BulletRigidBodyNode::get_linear_factor(void) const;

1021 18 get_angular_factor 0 4 1532 39 BulletRigidBodyNode::get_angular_factor 0 1 261 10
/**
 *
 */
61
LVector3 BulletRigidBodyNode::get_angular_factor(void) const;

1022 17 set_linear_factor 0 4 1532 38 BulletRigidBodyNode::set_linear_factor 0 1 262 10
/**
 *
 */
68
void BulletRigidBodyNode::set_linear_factor(LVector3 const &factor);

1023 18 set_angular_factor 0 4 1532 39 BulletRigidBodyNode::set_angular_factor 0 1 263 10
/**
 *
 */
69
void BulletRigidBodyNode::set_angular_factor(LVector3 const &factor);

1024 15 pick_dirty_flag 0 4 1532 36 BulletRigidBodyNode::pick_dirty_flag 0 1 264 135
// Special

/**
 * Returns TRUE if the transform of the rigid body has changed at least once
 * since the last call to this method.
 */
48
bool BulletRigidBodyNode::pick_dirty_flag(void);

1025 14 get_class_type 0 4 1532 35 BulletRigidBodyNode::get_class_type 0 1 265 0
60
static TypeHandle BulletRigidBodyNode::get_class_type(void);

1026 26 ~BulletSoftBodyNodeElement 0 4 1533 53 BulletSoftBodyNodeElement::~BulletSoftBodyNodeElement 0 0 10
/**
 *
 */
67
inline BulletSoftBodyNodeElement::~BulletSoftBodyNodeElement(void);

1027 5 empty 0 4 1533 32 BulletSoftBodyNodeElement::empty 0 1 267 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
79
static inline BulletSoftBodyNodeElement BulletSoftBodyNodeElement::empty(void);

1028 7 get_pos 0 4 1533 34 BulletSoftBodyNodeElement::get_pos 0 1 268 10
/**
 *
 */
62
inline LPoint3 BulletSoftBodyNodeElement::get_pos(void) const;

1029 12 get_velocity 0 4 1533 39 BulletSoftBodyNodeElement::get_velocity 0 1 269 10
/**
 *
 */
68
inline LVector3 BulletSoftBodyNodeElement::get_velocity(void) const;

1030 10 get_normal 0 4 1533 37 BulletSoftBodyNodeElement::get_normal 0 1 270 10
/**
 *
 */
66
inline LVector3 BulletSoftBodyNodeElement::get_normal(void) const;

1031 12 get_inv_mass 0 4 1533 39 BulletSoftBodyNodeElement::get_inv_mass 0 1 271 10
/**
 *
 */
71
inline PN_stdfloat BulletSoftBodyNodeElement::get_inv_mass(void) const;

1032 8 get_area 0 4 1533 35 BulletSoftBodyNodeElement::get_area 0 1 272 10
/**
 *
 */
67
inline PN_stdfloat BulletSoftBodyNodeElement::get_area(void) const;

1033 11 is_attached 0 4 1533 38 BulletSoftBodyNodeElement::is_attached 0 1 273 10
/**
 *
 */
62
inline int BulletSoftBodyNodeElement::is_attached(void) const;

1034 25 BulletSoftBodyNodeElement 0 4 1533 52 BulletSoftBodyNodeElement::BulletSoftBodyNodeElement 0 1 266 10
/**
 *
 */
105
inline BulletSoftBodyNodeElement::BulletSoftBodyNodeElement(BulletSoftBodyNodeElement const &) = default;

1035 7 get_cfg 0 4 1534 27 BulletSoftBodyNode::get_cfg 0 1 274 10
/**
 *
 */
55
BulletSoftBodyConfig BulletSoftBodyNode::get_cfg(void);

1036 14 get_world_info 0 4 1534 34 BulletSoftBodyNode::get_world_info 0 1 275 10
/**
 *
 */
65
BulletSoftBodyWorldInfo BulletSoftBodyNode::get_world_info(void);

1037 28 generate_bending_constraints 0 4 1534 48 BulletSoftBodyNode::generate_bending_constraints 0 1 276 10
/**
 *
 */
106
void BulletSoftBodyNode::generate_bending_constraints(int distance, BulletSoftBodyMaterial *material = 0);

1038 21 randomize_constraints 0 4 1534 41 BulletSoftBodyNode::randomize_constraints 0 1 277 10
/**
 *
 */
53
void BulletSoftBodyNode::randomize_constraints(void);

1039 15 set_volume_mass 0 4 1534 35 BulletSoftBodyNode::set_volume_mass 0 1 278 36
// Mass, volume, density

/**
 *
 */
59
void BulletSoftBodyNode::set_volume_mass(PN_stdfloat mass);

1040 18 set_volume_density 0 4 1534 38 BulletSoftBodyNode::set_volume_density 0 1 279 10
/**
 *
 */
65
void BulletSoftBodyNode::set_volume_density(PN_stdfloat density);

1041 14 set_total_mass 0 4 1534 34 BulletSoftBodyNode::set_total_mass 0 1 280 10
/**
 *
 */
82
void BulletSoftBodyNode::set_total_mass(PN_stdfloat mass, bool fromfaces = false);

1042 17 set_total_density 0 4 1534 37 BulletSoftBodyNode::set_total_density 0 1 281 10
/**
 *
 */
64
void BulletSoftBodyNode::set_total_density(PN_stdfloat density);

1043 8 set_mass 0 4 1534 28 BulletSoftBodyNode::set_mass 0 1 282 10
/**
 *
 */
62
void BulletSoftBodyNode::set_mass(int node, PN_stdfloat mass);

1044 8 get_mass 0 4 1534 28 BulletSoftBodyNode::get_mass 0 1 283 10
/**
 *
 */
57
PN_stdfloat BulletSoftBodyNode::get_mass(int node) const;

1045 14 get_total_mass 0 4 1534 34 BulletSoftBodyNode::get_total_mass 0 1 284 10
/**
 *
 */
59
PN_stdfloat BulletSoftBodyNode::get_total_mass(void) const;

1046 10 get_volume 0 4 1534 30 BulletSoftBodyNode::get_volume 0 1 285 10
/**
 *
 */
55
PN_stdfloat BulletSoftBodyNode::get_volume(void) const;

1047 9 add_force 0 4 1534 29 BulletSoftBodyNode::add_force 0 2 286 287 32
// Force

/**
 *
 */

/**
 *
 */
127
void BulletSoftBodyNode::add_force(LVector3 const &force);
void BulletSoftBodyNode::add_force(LVector3 const &force, int node);

1048 12 set_velocity 0 4 1534 32 BulletSoftBodyNode::set_velocity 0 1 288 10
/**
 *
 */
64
void BulletSoftBodyNode::set_velocity(LVector3 const &velocity);

1049 12 add_velocity 0 4 1534 32 BulletSoftBodyNode::add_velocity 0 2 289 290 22
/**
 *
 */

/**
 *
 */
139
void BulletSoftBodyNode::add_velocity(LVector3 const &velocity);
void BulletSoftBodyNode::add_velocity(LVector3 const &velocity, int node);

1050 17 set_wind_velocity 0 4 1534 37 BulletSoftBodyNode::set_wind_velocity 0 1 291 10
/**
 *
 */
69
void BulletSoftBodyNode::set_wind_velocity(LVector3 const &velocity);

1051 17 get_wind_velocity 0 4 1534 37 BulletSoftBodyNode::get_wind_velocity 0 1 292 10
/**
 *
 */
59
LVector3 BulletSoftBodyNode::get_wind_velocity(void) const;

1052 8 set_pose 0 4 1534 28 BulletSoftBodyNode::set_pose 0 1 293 10
/**
 *
 */
61
void BulletSoftBodyNode::set_pose(bool bvolume, bool bframe);

1053 8 get_aabb 0 4 1534 28 BulletSoftBodyNode::get_aabb 0 1 294 10
/**
 *
 */
53
BoundingBox BulletSoftBodyNode::get_aabb(void) const;

1054 17 generate_clusters 0 4 1534 37 BulletSoftBodyNode::generate_clusters 0 1 295 22
// Cluster

/**
 *
 */
76
void BulletSoftBodyNode::generate_clusters(int k, int maxiterations = 8192);

1055 15 release_cluster 0 4 1534 35 BulletSoftBodyNode::release_cluster 0 1 296 10
/**
 *
 */
52
void BulletSoftBodyNode::release_cluster(int index);

1056 16 release_clusters 0 4 1534 36 BulletSoftBodyNode::release_clusters 0 1 297 10
/**
 *
 */
48
void BulletSoftBodyNode::release_clusters(void);

1057 16 get_num_clusters 0 4 1534 36 BulletSoftBodyNode::get_num_clusters 0 1 298 10
/**
 *
 */
53
int BulletSoftBodyNode::get_num_clusters(void) const;

1058 11 cluster_com 0 4 1534 31 BulletSoftBodyNode::cluster_com 0 1 299 10
/**
 *
 */
61
LVecBase3 BulletSoftBodyNode::cluster_com(int cluster) const;

1059 9 link_geom 0 4 1534 29 BulletSoftBodyNode::link_geom 0 1 300 24
// Rendering

/**
 *
 */
47
void BulletSoftBodyNode::link_geom(Geom *geom);

1060 11 unlink_geom 0 4 1534 31 BulletSoftBodyNode::unlink_geom 0 1 301 10
/**
 *
 */
43
void BulletSoftBodyNode::unlink_geom(void);

1061 10 link_curve 0 4 1534 30 BulletSoftBodyNode::link_curve 0 1 302 10
/**
 *
 */
64
void BulletSoftBodyNode::link_curve(NurbsCurveEvaluator *curve);

1062 12 unlink_curve 0 4 1534 32 BulletSoftBodyNode::unlink_curve 0 1 303 10
/**
 *
 */
44
void BulletSoftBodyNode::unlink_curve(void);

1063 12 link_surface 0 4 1534 32 BulletSoftBodyNode::link_surface 0 1 304 10
/**
 *
 */
70
void BulletSoftBodyNode::link_surface(NurbsSurfaceEvaluator *surface);

1064 14 unlink_surface 0 4 1534 34 BulletSoftBodyNode::unlink_surface 0 1 305 10
/**
 *
 */
46
void BulletSoftBodyNode::unlink_surface(void);

1065 13 append_anchor 0 4 1534 33 BulletSoftBodyNode::append_anchor 0 2 306 307 34
// Anchors

/**
 *
 */

/**
 *
 */
220
void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable = false);
void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, LVector3 const &pivot, bool disable = false);

1066 19 append_linear_joint 0 4 1534 39 BulletSoftBodyNode::append_linear_joint 0 2 308 309 32
// Links

/**
 *
 */

/**
 *
 */
310
void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, int cluster, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0);
void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, LPoint3 const &pos, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0);

1067 20 append_angular_joint 0 4 1534 40 BulletSoftBodyNode::append_angular_joint 0 1 310 10
/**
 *
 */
197
void BulletSoftBodyNode::append_angular_joint(BulletBodyNode *body, LVector3 const &axis, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0, BulletSoftBodyControl *control = 0);

1068 17 get_num_materials 0 4 1534 37 BulletSoftBodyNode::get_num_materials 0 1 311 38
// Materials

// Materials

/**
 *
 */
54
int BulletSoftBodyNode::get_num_materials(void) const;

1069 12 get_material 0 4 1534 32 BulletSoftBodyNode::get_material 0 1 312 10
/**
 *
 */
71
BulletSoftBodyMaterial BulletSoftBodyNode::get_material(int idx) const;

1070 15 append_material 0 4 1534 35 BulletSoftBodyNode::append_material 0 1 313 10
/**
 *
 */
65
BulletSoftBodyMaterial BulletSoftBodyNode::append_material(void);

1071 13 get_num_nodes 0 4 1534 33 BulletSoftBodyNode::get_num_nodes 0 1 314 30
// Nodes

// Nodes

/**
 *
 */
50
int BulletSoftBodyNode::get_num_nodes(void) const;

1072 8 get_node 0 4 1534 28 BulletSoftBodyNode::get_node 0 1 315 10
/**
 *
 */
70
BulletSoftBodyNodeElement BulletSoftBodyNode::get_node(int idx) const;

1073 22 get_closest_node_index 0 4 1534 42 BulletSoftBodyNode::get_closest_node_index 0 1 316 212
/**
 * Returns the index of the node which is closest to the given point.  The
 * distance between each node and the given point is computed in world space
 * if local=false, and in local space if local=true.
 */
76
int BulletSoftBodyNode::get_closest_node_index(LVecBase3 point, bool local);

1074 9 make_rope 0 4 1534 29 BulletSoftBodyNode::make_rope 0 1 317 22
// Factory

/**
 *
 */
161
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_rope(BulletSoftBodyWorldInfo &info, LPoint3 const &from, LPoint3 const &to, int res, int fixeds);

1075 10 make_patch 0 4 1534 30 BulletSoftBodyNode::make_patch 0 1 318 10
/**
 *
 */
248
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_patch(BulletSoftBodyWorldInfo &info, LPoint3 const &corner00, LPoint3 const &corner10, LPoint3 const &corner01, LPoint3 const &corner11, int resx, int resy, int fixeds, bool gendiags);

1076 14 make_ellipsoid 0 4 1534 34 BulletSoftBodyNode::make_ellipsoid 0 1 319 10
/**
 *
 */
162
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_ellipsoid(BulletSoftBodyWorldInfo &info, LPoint3 const &center, LVecBase3 const &radius, int res);

1077 13 make_tri_mesh 0 4 1534 33 BulletSoftBodyNode::make_tri_mesh 0 2 320 321 22
/**
 *
 */

/**
 *
 */
334
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints = true);
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool randomizeConstraints = true);

1078 13 make_tet_mesh 0 4 1534 33 BulletSoftBodyNode::make_tet_mesh 0 2 322 323 22
/**
 *
 */

/**
 *
 */
325
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks = true);
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, char const *ele, char const *face, char const *node);

1079 14 get_class_type 0 4 1534 34 BulletSoftBodyNode::get_class_type 0 1 324 0
59
static TypeHandle BulletSoftBodyNode::get_class_type(void);

1080 24 set_suspension_stiffness 0 4 1535 45 BulletVehicleTuning::set_suspension_stiffness 0 1 325 10
/**
 *
 */
77
inline void BulletVehicleTuning::set_suspension_stiffness(PN_stdfloat value);

1081 26 set_suspension_compression 0 4 1535 47 BulletVehicleTuning::set_suspension_compression 0 1 326 10
/**
 *
 */
79
inline void BulletVehicleTuning::set_suspension_compression(PN_stdfloat value);

1082 22 set_suspension_damping 0 4 1535 43 BulletVehicleTuning::set_suspension_damping 0 1 327 10
/**
 *
 */
75
inline void BulletVehicleTuning::set_suspension_damping(PN_stdfloat value);

1083 28 set_max_suspension_travel_cm 0 4 1535 49 BulletVehicleTuning::set_max_suspension_travel_cm 0 1 328 10
/**
 *
 */
81
inline void BulletVehicleTuning::set_max_suspension_travel_cm(PN_stdfloat value);

1084 17 set_friction_slip 0 4 1535 38 BulletVehicleTuning::set_friction_slip 0 1 329 10
/**
 *
 */
70
inline void BulletVehicleTuning::set_friction_slip(PN_stdfloat value);

1085 24 set_max_suspension_force 0 4 1535 45 BulletVehicleTuning::set_max_suspension_force 0 1 330 10
/**
 *
 */
77
inline void BulletVehicleTuning::set_max_suspension_force(PN_stdfloat value);

1086 24 get_suspension_stiffness 0 4 1535 45 BulletVehicleTuning::get_suspension_stiffness 0 1 331 10
/**
 *
 */
77
inline PN_stdfloat BulletVehicleTuning::get_suspension_stiffness(void) const;

1087 26 get_suspension_compression 0 4 1535 47 BulletVehicleTuning::get_suspension_compression 0 1 332 10
/**
 *
 */
79
inline PN_stdfloat BulletVehicleTuning::get_suspension_compression(void) const;

1088 22 get_suspension_damping 0 4 1535 43 BulletVehicleTuning::get_suspension_damping 0 1 333 10
/**
 *
 */
75
inline PN_stdfloat BulletVehicleTuning::get_suspension_damping(void) const;

1089 28 get_max_suspension_travel_cm 0 4 1535 49 BulletVehicleTuning::get_max_suspension_travel_cm 0 1 334 10
/**
 *
 */
81
inline PN_stdfloat BulletVehicleTuning::get_max_suspension_travel_cm(void) const;

1090 17 get_friction_slip 0 4 1535 38 BulletVehicleTuning::get_friction_slip 0 1 335 10
/**
 *
 */
70
inline PN_stdfloat BulletVehicleTuning::get_friction_slip(void) const;

1091 24 get_max_suspension_force 0 4 1535 45 BulletVehicleTuning::get_max_suspension_force 0 1 336 10
/**
 *
 */
77
inline PN_stdfloat BulletVehicleTuning::get_max_suspension_force(void) const;

1092 20 ~BulletVehicleTuning 0 4 1535 41 BulletVehicleTuning::~BulletVehicleTuning 0 0 0
48
BulletVehicleTuning::~BulletVehicleTuning(void);

1093 13 BulletVehicle 0 4 1536 28 BulletVehicle::BulletVehicle 0 1 337 94
/**
 * Creates a new BulletVehicle instance in the given world and with a chassis
 * node.
 */
79
BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis);

1094 21 set_coordinate_system 0 4 1536 36 BulletVehicle::set_coordinate_system 0 1 338 100
/**
 * Specifies which axis is "up". Nessecary for the vehicle's suspension to
 * work properly!
 */
59
void BulletVehicle::set_coordinate_system(BulletUpAxis up);

1095 18 set_steering_value 0 4 1536 33 BulletVehicle::set_steering_value 0 1 339 76
/**
 * Sets the steering value (in degrees) of the wheel with index idx.
 */
70
void BulletVehicle::set_steering_value(PN_stdfloat steering, int idx);

1096 9 set_brake 0 4 1536 24 BulletVehicle::set_brake 0 1 340 61
/**
 * Applies braking force to the wheel with index idx.
 */
58
void BulletVehicle::set_brake(PN_stdfloat brake, int idx);

1097 17 set_pitch_control 0 4 1536 32 BulletVehicle::set_pitch_control 0 1 341 10
/**
 *
 */
57
void BulletVehicle::set_pitch_control(PN_stdfloat pitch);

1098 11 get_chassis 0 4 1536 26 BulletVehicle::get_chassis 0 1 342 82
/**
 * Returns the chassis of this vehicle.  The chassis is a rigid body node.
 */
54
BulletRigidBodyNode *BulletVehicle::get_chassis(void);

1099 25 get_current_speed_km_hour 0 4 1536 40 BulletVehicle::get_current_speed_km_hour 0 1 343 106
/**
 * Returns the current speed in kilometers per hour.  Convert to miles using:
 * km/h * 0.62 = mph
 */
65
PN_stdfloat BulletVehicle::get_current_speed_km_hour(void) const;

1100 18 get_steering_value 0 4 1536 33 BulletVehicle::get_steering_value 0 1 344 77
/**
 * Returns the steering angle of the wheel with index idx in degrees.
 */
61
PN_stdfloat BulletVehicle::get_steering_value(int idx) const;

1101 18 get_forward_vector 0 4 1536 33 BulletVehicle::get_forward_vector 0 1 345 145
/**
 * Returns the forward vector representing the car's actual direction of
 * movement.  The forward vetcor is given in global coordinates.
 */
55
LVector3 BulletVehicle::get_forward_vector(void) const;

1102 16 reset_suspension 0 4 1536 31 BulletVehicle::reset_suspension 0 1 346 43
/**
 * Resets the vehicle's suspension.
 */
43
void BulletVehicle::reset_suspension(void);

1103 18 apply_engine_force 0 4 1536 33 BulletVehicle::apply_engine_force 0 1 347 70
/**
 * Applies force at the wheel with index idx for acceleration.
 */
67
void BulletVehicle::apply_engine_force(PN_stdfloat force, int idx);

1104 12 create_wheel 0 4 1536 27 BulletVehicle::create_wheel 0 1 348 83
// Wheels

/**
 * Factory method for creating wheels for this vehicle instance.
 */
46
BulletWheel BulletVehicle::create_wheel(void);

1105 14 get_num_wheels 0 4 1536 29 BulletVehicle::get_num_wheels 0 1 349 57
/**
 * Returns the number of wheels this vehicle has.
 */
53
inline int BulletVehicle::get_num_wheels(void) const;

1106 9 get_wheel 0 4 1536 24 BulletVehicle::get_wheel 0 1 350 132
/**
 * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is
 * equal or larger than the number of wheels.
 */
52
BulletWheel BulletVehicle::get_wheel(int idx) const;

1107 10 get_tuning 0 4 1536 25 BulletVehicle::get_tuning 0 1 351 200
// Tuning

/**
 * Returns a reference to the BulletVehicleTuning object of this vehicle which
 * offers various vehicle-global tuning options.  Make sure to configure this
 * before adding wheels!
 */
60
inline BulletVehicleTuning &BulletVehicle::get_tuning(void);

1108 14 get_class_type 0 4 1536 29 BulletVehicle::get_class_type 0 1 352 0
54
static TypeHandle BulletVehicle::get_class_type(void);

1109 11 BulletWorld 0 4 1537 24 BulletWorld::BulletWorld 0 1 353 10
/**
 *
 */
31
BulletWorld::BulletWorld(void);

1110 11 set_gravity 0 4 1537 24 BulletWorld::set_gravity 0 2 354 355 22
/**
 *
 */

/**
 *
 */
134
void BulletWorld::set_gravity(LVector3 const &gravity);
void BulletWorld::set_gravity(PN_stdfloat gx, PN_stdfloat gy, PN_stdfloat gz);

1111 11 get_gravity 0 4 1537 24 BulletWorld::get_gravity 0 1 356 10
/**
 *
 */
52
LVector3 const BulletWorld::get_gravity(void) const;

1112 10 do_physics 0 4 1537 23 BulletWorld::do_physics 0 1 357 10
/**
 *
 */
103
int BulletWorld::do_physics(PN_stdfloat dt, int max_substeps = 1, PN_stdfloat stepsize = (1.0 / 60.0));

1113 14 get_world_info 0 4 1537 27 BulletWorld::get_world_info 0 1 358 10
/**
 *
 */
58
BulletSoftBodyWorldInfo BulletWorld::get_world_info(void);

1114 14 set_debug_node 0 4 1537 27 BulletWorld::set_debug_node 0 1 359 20
// Debug

/**
 *
 */
63
inline void BulletWorld::set_debug_node(BulletDebugNode *node);

1115 16 clear_debug_node 0 4 1537 29 BulletWorld::clear_debug_node 0 1 360 10
/**
 *
 */
48
inline void BulletWorld::clear_debug_node(void);

1116 14 get_debug_node 0 4 1537 27 BulletWorld::get_debug_node 0 1 361 10
/**
 *
 */
64
inline BulletDebugNode *BulletWorld::get_debug_node(void) const;

1117 6 attach 0 4 1537 19 BulletWorld::attach 0 1 362 27
// AttachRemove

/**
 *
 */
46
void BulletWorld::attach(TypedObject *object);

1118 17 attach_constraint 0 4 1537 30 BulletWorld::attach_constraint 0 1 363 156
/**
 * Attaches a single constraint to a world.  Collision checks between the
 * linked objects will be disabled if the second parameter is set to TRUE.
 */
97
void BulletWorld::attach_constraint(BulletConstraint *constraint, bool linked_collision = false);

1119 6 remove 0 4 1537 19 BulletWorld::remove 0 1 364 10
/**
 *
 */
46
void BulletWorld::remove(TypedObject *object);

1120 14 get_num_ghosts 0 4 1537 27 BulletWorld::get_num_ghosts 0 1 365 44
// Ghost object

// Ghost object

/**
 *
 */
51
inline int BulletWorld::get_num_ghosts(void) const;

1121 9 get_ghost 0 4 1537 22 BulletWorld::get_ghost 0 1 366 10
/**
 *
 */
62
inline BulletGhostNode *BulletWorld::get_ghost(int idx) const;

1122 20 get_num_rigid_bodies 0 4 1537 33 BulletWorld::get_num_rigid_bodies 0 1 367 40
// Rigid body

// Rigid body

/**
 *
 */
57
inline int BulletWorld::get_num_rigid_bodies(void) const;

1123 14 get_rigid_body 0 4 1537 27 BulletWorld::get_rigid_body 0 1 368 10
/**
 *
 */
71
inline BulletRigidBodyNode *BulletWorld::get_rigid_body(int idx) const;

1124 19 get_num_soft_bodies 0 4 1537 32 BulletWorld::get_num_soft_bodies 0 1 369 38
// Soft body

// Soft body

/**
 *
 */
56
inline int BulletWorld::get_num_soft_bodies(void) const;

1125 13 get_soft_body 0 4 1537 26 BulletWorld::get_soft_body 0 1 370 10
/**
 *
 */
69
inline BulletSoftBodyNode *BulletWorld::get_soft_body(int idx) const;

1126 18 get_num_characters 0 4 1537 31 BulletWorld::get_num_characters 0 1 371 60
// Character controller

// Character controller

/**
 *
 */
55
inline int BulletWorld::get_num_characters(void) const;

1127 13 get_character 0 4 1537 26 BulletWorld::get_character 0 1 372 10
/**
 *
 */
84
inline BulletBaseCharacterControllerNode *BulletWorld::get_character(int idx) const;

1128 14 attach_vehicle 0 4 1537 27 BulletWorld::attach_vehicle 0 1 373 66
// Vehicle

/**
 * Deprecated!  Please use BulletWorld::attach
 */
57
void BulletWorld::attach_vehicle(BulletVehicle *vehicle);

1129 14 remove_vehicle 0 4 1537 27 BulletWorld::remove_vehicle 0 1 374 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
57
void BulletWorld::remove_vehicle(BulletVehicle *vehicle);

1130 16 get_num_vehicles 0 4 1537 29 BulletWorld::get_num_vehicles 0 1 375 10
/**
 *
 */
53
inline int BulletWorld::get_num_vehicles(void) const;

1131 11 get_vehicle 0 4 1537 24 BulletWorld::get_vehicle 0 1 376 10
/**
 *
 */
62
inline BulletVehicle *BulletWorld::get_vehicle(int idx) const;

1132 19 get_num_constraints 0 4 1537 32 BulletWorld::get_num_constraints 0 1 377 40
// Constraint

// Constraint

/**
 *
 */
56
inline int BulletWorld::get_num_constraints(void) const;

1133 14 get_constraint 0 4 1537 27 BulletWorld::get_constraint 0 1 378 10
/**
 *
 */
68
inline BulletConstraint *BulletWorld::get_constraint(int idx) const;

1134 16 ray_test_closest 0 4 1537 29 BulletWorld::ray_test_closest 0 1 379 40
// Raycast and other queries

/**
 *
 */
159
BulletClosestHitRayResult BulletWorld::ray_test_closest(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const;

1135 12 ray_test_all 0 4 1537 25 BulletWorld::ray_test_all 0 1 380 10
/**
 *
 */
152
BulletAllHitsRayResult BulletWorld::ray_test_all(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const;

1136 18 sweep_test_closest 0 4 1537 31 BulletWorld::sweep_test_closest 0 1 381 10
/**
 *
 */
226
BulletClosestHitSweepResult BulletWorld::sweep_test_closest(BulletShape *shape, TransformState const &from_ts, TransformState const &to_ts, CollideMask const &mask = CollideMask::all_on(), PN_stdfloat penetration = 0.0) const;

1137 12 contact_test 0 4 1537 25 BulletWorld::contact_test 0 1 382 386
/**
 * Performas a test for all bodies which are currently in contact with the
 * given body.  The test returns a BulletContactResult object which may
 * contain zero, one or more contacts.
 *
 * If the optional parameter use_filter is set to TRUE this test will consider
 * filter settings.  Otherwise all objects in contact are reported, no matter
 * if they would collide or not.
 */
94
BulletContactResult BulletWorld::contact_test(PandaNode *node, bool use_filter = false) const;

1138 17 contact_test_pair 0 4 1537 30 BulletWorld::contact_test_pair 0 1 383 181
/**
 * Performas a test if the two bodies given as parameters are in contact or
 * not.  The test returns a BulletContactResult object which may contain zero
 * or one contacts.
 */
93
BulletContactResult BulletWorld::contact_test_pair(PandaNode *node0, PandaNode *node1) const;

1139 11 filter_test 0 4 1537 24 BulletWorld::filter_test 0 1 384 105
/**
 * Performs a test if two bodies should collide or not, based on the collision
 * filter setting.
 */
72
bool BulletWorld::filter_test(PandaNode *node0, PandaNode *node1) const;

1140 17 get_num_manifolds 0 4 1537 30 BulletWorld::get_num_manifolds 0 1 385 38
// Manifolds

// Manifolds

/**
 *
 */
54
inline int BulletWorld::get_num_manifolds(void) const;

1141 12 get_manifold 0 4 1537 25 BulletWorld::get_manifold 0 1 386 10
/**
 *
 */
67
BulletPersistentManifold *BulletWorld::get_manifold(int idx) const;

1142 24 set_group_collision_flag 0 4 1537 37 BulletWorld::set_group_collision_flag 0 1 387 34
// Collision filtering

/**
 *
 */
98
void BulletWorld::set_group_collision_flag(unsigned int group1, unsigned int group2, bool enable);

1143 24 get_group_collision_flag 0 4 1537 37 BulletWorld::get_group_collision_flag 0 1 388 10
/**
 *
 */
91
bool BulletWorld::get_group_collision_flag(unsigned int group1, unsigned int group2) const;

1144 26 set_contact_added_callback 0 4 1537 39 BulletWorld::set_contact_added_callback 0 1 389 24
// Callbacks

/**
 *
 */
66
void BulletWorld::set_contact_added_callback(CallbackObject *obj);

1145 28 clear_contact_added_callback 0 4 1537 41 BulletWorld::clear_contact_added_callback 0 1 390 10
/**
 *
 */
53
void BulletWorld::clear_contact_added_callback(void);

1146 17 set_tick_callback 0 4 1537 30 BulletWorld::set_tick_callback 0 1 391 10
/**
 *
 */
82
void BulletWorld::set_tick_callback(CallbackObject *obj, bool is_pretick = false);

1147 19 clear_tick_callback 0 4 1537 32 BulletWorld::clear_tick_callback 0 1 392 10
/**
 *
 */
44
void BulletWorld::clear_tick_callback(void);

1148 19 set_filter_callback 0 4 1537 32 BulletWorld::set_filter_callback 0 1 393 10
/**
 *
 */
59
void BulletWorld::set_filter_callback(CallbackObject *obj);

1149 21 clear_filter_callback 0 4 1537 34 BulletWorld::clear_filter_callback 0 1 394 10
/**
 *
 */
46
void BulletWorld::clear_filter_callback(void);

1150 12 attach_ghost 0 4 1537 25 BulletWorld::attach_ghost 0 1 395 103
// Deprecated methods, will become private soon

/**
 * Deprecated!  Please use BulletWorld::attach
 */
54
void BulletWorld::attach_ghost(BulletGhostNode *node);

1151 12 remove_ghost 0 4 1537 25 BulletWorld::remove_ghost 0 1 396 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
54
void BulletWorld::remove_ghost(BulletGhostNode *node);

1152 17 attach_rigid_body 0 4 1537 30 BulletWorld::attach_rigid_body 0 1 397 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
63
void BulletWorld::attach_rigid_body(BulletRigidBodyNode *node);

1153 17 remove_rigid_body 0 4 1537 30 BulletWorld::remove_rigid_body 0 1 398 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
63
void BulletWorld::remove_rigid_body(BulletRigidBodyNode *node);

1154 16 attach_soft_body 0 4 1537 29 BulletWorld::attach_soft_body 0 1 399 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
61
void BulletWorld::attach_soft_body(BulletSoftBodyNode *node);

1155 16 remove_soft_body 0 4 1537 29 BulletWorld::remove_soft_body 0 1 400 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
61
void BulletWorld::remove_soft_body(BulletSoftBodyNode *node);

1156 16 attach_character 0 4 1537 29 BulletWorld::attach_character 0 1 401 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
76
void BulletWorld::attach_character(BulletBaseCharacterControllerNode *node);

1157 16 remove_character 0 4 1537 29 BulletWorld::remove_character 0 1 402 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
76
void BulletWorld::remove_character(BulletBaseCharacterControllerNode *node);

1158 17 remove_constraint 0 4 1537 30 BulletWorld::remove_constraint 0 1 403 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
66
void BulletWorld::remove_constraint(BulletConstraint *constraint);

1159 14 get_class_type 0 4 1537 27 BulletWorld::get_class_type 0 1 404 0
52
static TypeHandle BulletWorld::get_class_type(void);

1160 21 BulletConvexHullShape 0 4 1540 44 BulletConvexHullShape::BulletConvexHullShape 0 2 405 406 22
/**
 *
 */

/**
 *
 */
139
BulletConvexHullShape::BulletConvexHullShape(void);
inline BulletConvexHullShape::BulletConvexHullShape(BulletConvexHullShape const &copy);

1161 10 operator = 0 4 1540 33 BulletConvexHullShape::operator = 0 1 407 0
81
inline void BulletConvexHullShape::operator =(BulletConvexHullShape const &copy);

1162 9 add_point 0 4 1540 32 BulletConvexHullShape::add_point 0 1 408 10
/**
 *
 */
56
void BulletConvexHullShape::add_point(LPoint3 const &p);

1163 9 add_array 0 4 1540 32 BulletConvexHullShape::add_array 0 1 409 10
/**
 *
 */
67
void BulletConvexHullShape::add_array(PTA_LVecBase3 const &points);

1164 8 add_geom 0 4 1540 31 BulletConvexHullShape::add_geom 0 1 410 10
/**
 *
 */
115
void BulletConvexHullShape::add_geom(Geom const *geom, TransformState const *ts = TransformState::make_identity());

1165 14 get_class_type 0 4 1540 37 BulletConvexHullShape::get_class_type 0 1 411 0
62
static TypeHandle BulletConvexHullShape::get_class_type(void);

1166 27 BulletConvexPointCloudShape 0 4 1541 56 BulletConvexPointCloudShape::BulletConvexPointCloudShape 0 3 412 413 414 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
336
BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale = LVecBase3(1.0));
BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale = LVecBase3(1.0));
inline BulletConvexPointCloudShape::BulletConvexPointCloudShape(BulletConvexPointCloudShape const &copy);

1167 10 operator = 0 4 1541 39 BulletConvexPointCloudShape::operator = 0 1 415 0
93
inline void BulletConvexPointCloudShape::operator =(BulletConvexPointCloudShape const &copy);

1168 14 get_num_points 0 4 1541 43 BulletConvexPointCloudShape::get_num_points 0 1 416 10
/**
 *
 */
67
inline int BulletConvexPointCloudShape::get_num_points(void) const;

1169 14 get_class_type 0 4 1541 43 BulletConvexPointCloudShape::get_class_type 0 1 417 0
68
static TypeHandle BulletConvexPointCloudShape::get_class_type(void);

1170 19 BulletCylinderShape 0 4 1542 40 BulletCylinderShape::BulletCylinderShape 0 3 418 419 420 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
287
BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up = ::Z_up);
inline BulletCylinderShape::BulletCylinderShape(BulletCylinderShape const &copy);

1171 10 operator = 0 4 1542 31 BulletCylinderShape::operator = 0 1 421 0
77
inline void BulletCylinderShape::operator =(BulletCylinderShape const &copy);

1172 10 get_radius 0 4 1542 31 BulletCylinderShape::get_radius 0 1 422 10
/**
 *
 */
63
inline PN_stdfloat BulletCylinderShape::get_radius(void) const;

1173 31 get_half_extents_without_margin 0 4 1542 52 BulletCylinderShape::get_half_extents_without_margin 0 1 423 10
/**
 *
 */
82
inline LVecBase3 BulletCylinderShape::get_half_extents_without_margin(void) const;

1174 28 get_half_extents_with_margin 0 4 1542 49 BulletCylinderShape::get_half_extents_with_margin 0 1 424 10
/**
 *
 */
79
inline LVecBase3 BulletCylinderShape::get_half_extents_with_margin(void) const;

1175 14 get_class_type 0 4 1542 35 BulletCylinderShape::get_class_type 0 1 425 0
60
static TypeHandle BulletCylinderShape::get_class_type(void);

1176 24 BulletFilterCallbackData 0 4 1543 50 BulletFilterCallbackData::BulletFilterCallbackData 0 2 426 427 10
/**
 *
 */
197
inline BulletFilterCallbackData::BulletFilterCallbackData(PandaNode *node0, PandaNode *node1);
inline BulletFilterCallbackData::BulletFilterCallbackData(BulletFilterCallbackData const &) = default;

1177 10 get_node_0 0 4 1543 36 BulletFilterCallbackData::get_node_0 0 1 428 10
/**
 *
 */
67
inline PandaNode *BulletFilterCallbackData::get_node_0(void) const;

1178 10 get_node_1 0 4 1543 36 BulletFilterCallbackData::get_node_1 0 1 429 10
/**
 *
 */
67
inline PandaNode *BulletFilterCallbackData::get_node_1(void) const;

1179 11 set_collide 0 4 1543 37 BulletFilterCallbackData::set_collide 0 1 430 10
/**
 *
 */
64
inline void BulletFilterCallbackData::set_collide(bool collide);

1180 11 get_collide 0 4 1543 37 BulletFilterCallbackData::get_collide 0 1 431 10
/**
 *
 */
62
inline bool BulletFilterCallbackData::get_collide(void) const;

1181 14 get_class_type 0 4 1543 40 BulletFilterCallbackData::get_class_type 0 1 432 0
65
static TypeHandle BulletFilterCallbackData::get_class_type(void);

1182 25 ~BulletFilterCallbackData 0 4 1543 51 BulletFilterCallbackData::~BulletFilterCallbackData 0 0 0
58
BulletFilterCallbackData::~BulletFilterCallbackData(void);

1183 26 BulletRotationalLimitMotor 0 4 1544 54 BulletRotationalLimitMotor::BulletRotationalLimitMotor 0 1 433 22
/**
 *
 */

/**
 *
 */
95
BulletRotationalLimitMotor::BulletRotationalLimitMotor(BulletRotationalLimitMotor const &copy);

1184 27 ~BulletRotationalLimitMotor 0 4 1544 55 BulletRotationalLimitMotor::~BulletRotationalLimitMotor 0 0 10
/**
 *
 */
62
BulletRotationalLimitMotor::~BulletRotationalLimitMotor(void);

1185 17 set_motor_enabled 0 4 1544 45 BulletRotationalLimitMotor::set_motor_enabled 0 1 434 10
/**
 *
 */
71
inline void BulletRotationalLimitMotor::set_motor_enabled(bool enable);

1186 13 set_low_limit 0 4 1544 41 BulletRotationalLimitMotor::set_low_limit 0 1 435 10
/**
 *
 */
73
inline void BulletRotationalLimitMotor::set_low_limit(PN_stdfloat limit);

1187 14 set_high_limit 0 4 1544 42 BulletRotationalLimitMotor::set_high_limit 0 1 436 10
/**
 *
 */
74
inline void BulletRotationalLimitMotor::set_high_limit(PN_stdfloat limit);

1188 19 set_target_velocity 0 4 1544 47 BulletRotationalLimitMotor::set_target_velocity 0 1 437 10
/**
 *
 */
82
inline void BulletRotationalLimitMotor::set_target_velocity(PN_stdfloat velocity);

1189 19 set_max_motor_force 0 4 1544 47 BulletRotationalLimitMotor::set_max_motor_force 0 1 438 10
/**
 *
 */
79
inline void BulletRotationalLimitMotor::set_max_motor_force(PN_stdfloat force);

1190 19 set_max_limit_force 0 4 1544 47 BulletRotationalLimitMotor::set_max_limit_force 0 1 439 10
/**
 *
 */
79
inline void BulletRotationalLimitMotor::set_max_limit_force(PN_stdfloat force);

1191 11 set_damping 0 4 1544 39 BulletRotationalLimitMotor::set_damping 0 1 440 10
/**
 *
 */
73
inline void BulletRotationalLimitMotor::set_damping(PN_stdfloat damping);

1192 12 set_softness 0 4 1544 40 BulletRotationalLimitMotor::set_softness 0 1 441 10
/**
 *
 */
75
inline void BulletRotationalLimitMotor::set_softness(PN_stdfloat softness);

1193 10 set_bounce 0 4 1544 38 BulletRotationalLimitMotor::set_bounce 0 1 442 10
/**
 *
 */
71
inline void BulletRotationalLimitMotor::set_bounce(PN_stdfloat bounce);

1194 14 set_normal_cfm 0 4 1544 42 BulletRotationalLimitMotor::set_normal_cfm 0 1 443 10
/**
 *
 */
72
inline void BulletRotationalLimitMotor::set_normal_cfm(PN_stdfloat cfm);

1195 12 set_stop_cfm 0 4 1544 40 BulletRotationalLimitMotor::set_stop_cfm 0 1 444 10
/**
 *
 */
70
inline void BulletRotationalLimitMotor::set_stop_cfm(PN_stdfloat cfm);

1196 12 set_stop_erp 0 4 1544 40 BulletRotationalLimitMotor::set_stop_erp 0 1 445 10
/**
 *
 */
70
inline void BulletRotationalLimitMotor::set_stop_erp(PN_stdfloat erp);

1197 10 is_limited 0 4 1544 38 BulletRotationalLimitMotor::is_limited 0 1 446 10
/**
 *
 */
63
inline bool BulletRotationalLimitMotor::is_limited(void) const;

1198 17 get_motor_enabled 0 4 1544 45 BulletRotationalLimitMotor::get_motor_enabled 0 1 447 10
/**
 *
 */
70
inline bool BulletRotationalLimitMotor::get_motor_enabled(void) const;

1199 17 get_current_limit 0 4 1544 45 BulletRotationalLimitMotor::get_current_limit 0 1 448 98
/**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */
69
inline int BulletRotationalLimitMotor::get_current_limit(void) const;

1200 17 get_current_error 0 4 1544 45 BulletRotationalLimitMotor::get_current_error 0 1 449 10
/**
 *
 */
77
inline PN_stdfloat BulletRotationalLimitMotor::get_current_error(void) const;

1201 20 get_current_position 0 4 1544 48 BulletRotationalLimitMotor::get_current_position 0 1 450 10
/**
 *
 */
80
inline PN_stdfloat BulletRotationalLimitMotor::get_current_position(void) const;

1202 23 get_accumulated_impulse 0 4 1544 51 BulletRotationalLimitMotor::get_accumulated_impulse 0 1 451 10
/**
 *
 */
83
inline PN_stdfloat BulletRotationalLimitMotor::get_accumulated_impulse(void) const;

1203 29 BulletTranslationalLimitMotor 0 4 1545 60 BulletTranslationalLimitMotor::BulletTranslationalLimitMotor 0 1 452 22
/**
 *
 */

/**
 *
 */
104
BulletTranslationalLimitMotor::BulletTranslationalLimitMotor(BulletTranslationalLimitMotor const &copy);

1204 30 ~BulletTranslationalLimitMotor 0 4 1545 61 BulletTranslationalLimitMotor::~BulletTranslationalLimitMotor 0 0 10
/**
 *
 */
68
BulletTranslationalLimitMotor::~BulletTranslationalLimitMotor(void);

1205 17 set_motor_enabled 0 4 1545 48 BulletTranslationalLimitMotor::set_motor_enabled 0 1 453 10
/**
 *
 */
84
inline void BulletTranslationalLimitMotor::set_motor_enabled(int axis, bool enable);

1206 13 set_low_limit 0 4 1545 44 BulletTranslationalLimitMotor::set_low_limit 0 1 454 10
/**
 *
 */
81
inline void BulletTranslationalLimitMotor::set_low_limit(LVecBase3 const &limit);

1207 14 set_high_limit 0 4 1545 45 BulletTranslationalLimitMotor::set_high_limit 0 1 455 10
/**
 *
 */
82
inline void BulletTranslationalLimitMotor::set_high_limit(LVecBase3 const &limit);

1208 19 set_target_velocity 0 4 1545 50 BulletTranslationalLimitMotor::set_target_velocity 0 1 456 10
/**
 *
 */
90
inline void BulletTranslationalLimitMotor::set_target_velocity(LVecBase3 const &velocity);

1209 19 set_max_motor_force 0 4 1545 50 BulletTranslationalLimitMotor::set_max_motor_force 0 1 457 10
/**
 *
 */
87
inline void BulletTranslationalLimitMotor::set_max_motor_force(LVecBase3 const &force);

1210 11 set_damping 0 4 1545 42 BulletTranslationalLimitMotor::set_damping 0 1 458 10
/**
 *
 */
76
inline void BulletTranslationalLimitMotor::set_damping(PN_stdfloat damping);

1211 12 set_softness 0 4 1545 43 BulletTranslationalLimitMotor::set_softness 0 1 459 10
/**
 *
 */
78
inline void BulletTranslationalLimitMotor::set_softness(PN_stdfloat softness);

1212 15 set_restitution 0 4 1545 46 BulletTranslationalLimitMotor::set_restitution 0 1 460 10
/**
 *
 */
84
inline void BulletTranslationalLimitMotor::set_restitution(PN_stdfloat restitution);

1213 14 set_normal_cfm 0 4 1545 45 BulletTranslationalLimitMotor::set_normal_cfm 0 1 461 10
/**
 *
 */
80
inline void BulletTranslationalLimitMotor::set_normal_cfm(LVecBase3 const &cfm);

1214 12 set_stop_erp 0 4 1545 43 BulletTranslationalLimitMotor::set_stop_erp 0 1 462 10
/**
 *
 */
78
inline void BulletTranslationalLimitMotor::set_stop_erp(LVecBase3 const &erp);

1215 12 set_stop_cfm 0 4 1545 43 BulletTranslationalLimitMotor::set_stop_cfm 0 1 463 10
/**
 *
 */
78
inline void BulletTranslationalLimitMotor::set_stop_cfm(LVecBase3 const &cfm);

1216 10 is_limited 0 4 1545 41 BulletTranslationalLimitMotor::is_limited 0 1 464 10
/**
 *
 */
70
inline bool BulletTranslationalLimitMotor::is_limited(int axis) const;

1217 17 get_motor_enabled 0 4 1545 48 BulletTranslationalLimitMotor::get_motor_enabled 0 1 465 10
/**
 *
 */
77
inline bool BulletTranslationalLimitMotor::get_motor_enabled(int axis) const;

1218 17 get_current_limit 0 4 1545 48 BulletTranslationalLimitMotor::get_current_limit 0 1 466 98
/**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */
76
inline int BulletTranslationalLimitMotor::get_current_limit(int axis) const;

1219 17 get_current_error 0 4 1545 48 BulletTranslationalLimitMotor::get_current_error 0 1 467 10
/**
 *
 */
77
inline LVector3 BulletTranslationalLimitMotor::get_current_error(void) const;

1220 16 get_current_diff 0 4 1545 47 BulletTranslationalLimitMotor::get_current_diff 0 1 468 10
/**
 *
 */
75
inline LPoint3 BulletTranslationalLimitMotor::get_current_diff(void) const;

1221 23 get_accumulated_impulse 0 4 1545 54 BulletTranslationalLimitMotor::get_accumulated_impulse 0 1 469 10
/**
 *
 */
83
inline LVector3 BulletTranslationalLimitMotor::get_accumulated_impulse(void) const;

1222 23 BulletGenericConstraint 0 4 1546 48 BulletGenericConstraint::BulletGenericConstraint 0 2 470 471 22
/**
 *
 */

/**
 *
 */
333
BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool use_frame_a);
BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a);

1223 8 get_axis 0 4 1546 33 BulletGenericConstraint::get_axis 0 1 472 23
// Geometry

/**
 *
 */
59
LVector3 BulletGenericConstraint::get_axis(int axis) const;

1224 9 get_pivot 0 4 1546 34 BulletGenericConstraint::get_pivot 0 1 473 10
/**
 *
 */
63
PN_stdfloat BulletGenericConstraint::get_pivot(int axis) const;

1225 9 get_angle 0 4 1546 34 BulletGenericConstraint::get_angle 0 1 474 10
/**
 *
 */
63
PN_stdfloat BulletGenericConstraint::get_angle(int axis) const;

1226 16 set_linear_limit 0 4 1546 41 BulletGenericConstraint::set_linear_limit 0 1 475 20
// Limit

/**
 *
 */
92
void BulletGenericConstraint::set_linear_limit(int axis, PN_stdfloat low, PN_stdfloat high);

1227 17 set_angular_limit 0 4 1546 42 BulletGenericConstraint::set_angular_limit 0 1 476 10
/**
 *
 */
93
void BulletGenericConstraint::set_angular_limit(int axis, PN_stdfloat low, PN_stdfloat high);

1228 26 get_rotational_limit_motor 0 4 1546 51 BulletGenericConstraint::get_rotational_limit_motor 0 1 477 21
// Motors

/**
 *
 */
89
BulletRotationalLimitMotor BulletGenericConstraint::get_rotational_limit_motor(int axis);

1229 29 get_translational_limit_motor 0 4 1546 54 BulletGenericConstraint::get_translational_limit_motor 0 1 478 10
/**
 *
 */
91
BulletTranslationalLimitMotor BulletGenericConstraint::get_translational_limit_motor(void);

1230 10 set_frames 0 4 1546 35 BulletGenericConstraint::set_frames 0 1 479 21
// Frames

/**
 *
 */
97
void BulletGenericConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1231 11 get_frame_a 0 4 1546 36 BulletGenericConstraint::get_frame_a 0 1 480 10
/**
 *
 */
89
inline ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_a(void) const;

1232 11 get_frame_b 0 4 1546 36 BulletGenericConstraint::get_frame_b 0 1 481 10
/**
 *
 */
89
inline ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_b(void) const;

1233 14 get_class_type 0 4 1546 39 BulletGenericConstraint::get_class_type 0 1 482 0
64
static TypeHandle BulletGenericConstraint::get_class_type(void);

1234 22 BulletHeightfieldShape 0 4 1547 46 BulletHeightfieldShape::BulletHeightfieldShape 0 3 483 484 485 540
/**
 *
 */

/**
 * @brief Creates a collision shape suited for terrains from a rectangular image.
 * @details Stores the image's brightness values in a vector Bullet can use, 
 *   while rotating it 90 degrees to the right.
 */

/**
 * @brief Creates a collision shape suited for terrains from a rectangular texture.
 * @details Alternative constructor intended for use with ShaderTerrainMesh. This will
 *   do bilinear sampling at the corners of all texels. Also works with textures 
 *   that are non-power-of-two and/or rectangular.
 */
323
BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up);
BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up);
inline BulletHeightfieldShape::BulletHeightfieldShape(BulletHeightfieldShape const &copy);

1235 10 operator = 0 4 1547 34 BulletHeightfieldShape::operator = 0 1 486 0
83
inline void BulletHeightfieldShape::operator =(BulletHeightfieldShape const &copy);

1236 27 set_use_diamond_subdivision 0 4 1547 51 BulletHeightfieldShape::set_use_diamond_subdivision 0 1 487 10
/**
 *
 */
75
void BulletHeightfieldShape::set_use_diamond_subdivision(bool flag = true);

1237 14 get_class_type 0 4 1547 38 BulletHeightfieldShape::get_class_type 0 1 488 0
63
static TypeHandle BulletHeightfieldShape::get_class_type(void);

1238 21 from_collision_solids 0 4 1548 35 BulletHelper::from_collision_solids 0 1 491 31
// Collision shapes

/**
 *
 */
96
static NodePathCollection BulletHelper::from_collision_solids(NodePath &np, bool clear = false);

1239 12 get_sb_index 0 4 1548 26 BulletHelper::get_sb_index 0 1 492 29
// Internal names

/**
 *
 */
73
static inline PointerTo< InternalName > BulletHelper::get_sb_index(void);

1240 11 get_sb_flip 0 4 1548 25 BulletHelper::get_sb_flip 0 1 493 10
/**
 *
 */
72
static inline PointerTo< InternalName > BulletHelper::get_sb_flip(void);

1241 19 add_sb_index_column 0 4 1548 33 BulletHelper::add_sb_index_column 0 1 494 31
// Geom vertex data

/**
 *
 */
108
static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_index_column(GeomVertexFormat const *format);

1242 18 add_sb_flip_column 0 4 1548 32 BulletHelper::add_sb_flip_column 0 1 495 10
/**
 *
 */
107
static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_flip_column(GeomVertexFormat const *format);

1243 20 make_geom_from_faces 0 4 1548 34 BulletHelper::make_geom_from_faces 0 1 496 25
// Geom utils

/**
 *
 */
146
static PointerTo< Geom > BulletHelper::make_geom_from_faces(BulletSoftBodyNode *node, GeomVertexFormat const *format = 0, bool two_sided = false);

1244 20 make_geom_from_links 0 4 1548 34 BulletHelper::make_geom_from_links 0 1 497 10
/**
 *
 */
122
static PointerTo< Geom > BulletHelper::make_geom_from_links(BulletSoftBodyNode *node, GeomVertexFormat const *format = 0);

1245 24 make_texcoords_for_patch 0 4 1548 38 BulletHelper::make_texcoords_for_patch 0 1 498 10
/**
 *
 */
83
static void BulletHelper::make_texcoords_for_patch(Geom *geom, int resx, int resy);

1246 12 BulletHelper 0 4 1548 26 BulletHelper::BulletHelper 0 2 489 490 0
117
inline BulletHelper::BulletHelper(void) = default;
inline BulletHelper::BulletHelper(BulletHelper const &) = default;

1247 13 ~BulletHelper 0 4 1548 27 BulletHelper::~BulletHelper 0 0 0
34
BulletHelper::~BulletHelper(void);

1248 21 BulletHingeConstraint 0 4 1549 44 BulletHingeConstraint::BulletHingeConstraint 0 4 499 500 501 502 709
/**
 * Creates a hinge constraint which connects one rigid body with some fixe
 * dpoint in the world.
 */

/**
 * Constructs a hinge constraint which connects two rigid bodies.
 */

/**
 * Creates a hinge constraint in the same way as the other constructor, but
 * uses the world as second body so that node_a is fixed to some point in mid-
 * air for example.
 */

/**
 * Creates a hinge connecting node_a to node_b.  The pivot point is the point
 * at which the body is fixed to the constraint.  In other words: It specifies
 * where on each body the rotation axis should be.  This axis is specified
 * using axis_a and axis_b.  Remember, everything is specified in the bodies
 * own coordinate system!
 */
725
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a = false);
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b, LVector3 const &axis_a, LVector3 const &axis_b, bool use_frame_a = false);
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a = false);
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a = false);

1249 15 get_hinge_angle 0 4 1549 38 BulletHingeConstraint::get_hinge_angle 0 1 503 66
/**
 * Returns the angle between node_a and node_b in degrees.
 */
57
PN_stdfloat BulletHingeConstraint::get_hinge_angle(void);

1250 15 get_lower_limit 0 4 1549 38 BulletHingeConstraint::get_lower_limit 0 1 504 54
/**
 * Returns the lower angular limit in degrees.
 */
63
PN_stdfloat BulletHingeConstraint::get_lower_limit(void) const;

1251 15 get_upper_limit 0 4 1549 38 BulletHingeConstraint::get_upper_limit 0 1 505 54
/**
 * Returns the upper angular limit in degrees.
 */
63
PN_stdfloat BulletHingeConstraint::get_upper_limit(void) const;

1252 16 get_angular_only 0 4 1549 39 BulletHingeConstraint::get_angular_only 0 1 506 10
/**
 *
 */
57
bool BulletHingeConstraint::get_angular_only(void) const;

1253 16 set_angular_only 0 4 1549 39 BulletHingeConstraint::set_angular_only 0 1 507 10
/**
 *
 */
57
void BulletHingeConstraint::set_angular_only(bool value);

1254 9 set_limit 0 4 1549 32 BulletHingeConstraint::set_limit 0 1 508 65
/**
 * Sets the lower and upper rotational limits in degrees.
 */
171
void BulletHingeConstraint::set_limit(PN_stdfloat low, PN_stdfloat high, PN_stdfloat softness = 0.9, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0);

1255 8 set_axis 0 4 1549 31 BulletHingeConstraint::set_axis 0 1 509 63
/**
 * Sets the hinge's rotation axis in world coordinates.
 */
59
void BulletHingeConstraint::set_axis(LVector3 const &axis);

1256 20 enable_angular_motor 0 4 1549 43 BulletHingeConstraint::enable_angular_motor 0 1 510 261
/**
 * Applies an impulse to the constraint so that the angle changes at
 * target_velocity where max_impulse is the maximum impulse that is used for
 * achieving the specified velocity.
 *
 * Note that the target_velocity is in radians/second, not degrees.
 */
116
void BulletHingeConstraint::enable_angular_motor(bool enable, PN_stdfloat target_velocity, PN_stdfloat max_impulse);

1257 12 enable_motor 0 4 1549 35 BulletHingeConstraint::enable_motor 0 1 511 10
/**
 *
 */
54
void BulletHingeConstraint::enable_motor(bool enable);

1258 21 set_max_motor_impulse 0 4 1549 44 BulletHingeConstraint::set_max_motor_impulse 0 1 512 96
/**
 * Sets the maximum impulse used to achieve the velocity set in
 * enable_angular_motor.
 */
75
void BulletHingeConstraint::set_max_motor_impulse(PN_stdfloat max_impulse);

1259 16 set_motor_target 0 4 1549 39 BulletHingeConstraint::set_motor_target 0 2 513 514 22
/**
 *
 */

/**
 *
 */
174
void BulletHingeConstraint::set_motor_target(LQuaternion const &quat, PN_stdfloat dt);
void BulletHingeConstraint::set_motor_target(PN_stdfloat target_angle, PN_stdfloat dt);

1260 10 set_frames 0 4 1549 33 BulletHingeConstraint::set_frames 0 1 515 10
/**
 *
 */
95
void BulletHingeConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1261 11 get_frame_a 0 4 1549 34 BulletHingeConstraint::get_frame_a 0 1 516 10
/**
 *
 */
87
inline ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_a(void) const;

1262 11 get_frame_b 0 4 1549 34 BulletHingeConstraint::get_frame_b 0 1 517 10
/**
 *
 */
87
inline ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_b(void) const;

1263 14 get_class_type 0 4 1549 37 BulletHingeConstraint::get_class_type 0 1 518 0
62
static TypeHandle BulletHingeConstraint::get_class_type(void);

1264 23 BulletMinkowskiSumShape 0 4 1550 48 BulletMinkowskiSumShape::BulletMinkowskiSumShape 0 2 519 520 22
/**
 *
 */

/**
 *
 */
199
BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletShape const *shape_a, BulletShape const *shape_b);
inline BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletMinkowskiSumShape const &copy);

1265 10 operator = 0 4 1550 35 BulletMinkowskiSumShape::operator = 0 1 521 0
85
inline void BulletMinkowskiSumShape::operator =(BulletMinkowskiSumShape const &copy);

1266 15 set_transform_a 0 4 1550 40 BulletMinkowskiSumShape::set_transform_a 0 1 522 10
/**
 *
 */
79
inline void BulletMinkowskiSumShape::set_transform_a(TransformState const *ts);

1267 15 set_transform_b 0 4 1550 40 BulletMinkowskiSumShape::set_transform_b 0 1 523 10
/**
 *
 */
79
inline void BulletMinkowskiSumShape::set_transform_b(TransformState const *ts);

1268 15 get_transform_a 0 4 1550 40 BulletMinkowskiSumShape::get_transform_a 0 1 524 10
/**
 *
 */
93
inline ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_a(void) const;

1269 15 get_transform_b 0 4 1550 40 BulletMinkowskiSumShape::get_transform_b 0 1 525 10
/**
 *
 */
93
inline ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_b(void) const;

1270 11 get_shape_a 0 4 1550 36 BulletMinkowskiSumShape::get_shape_a 0 1 526 10
/**
 *
 */
75
inline BulletShape const *BulletMinkowskiSumShape::get_shape_a(void) const;

1271 11 get_shape_b 0 4 1550 36 BulletMinkowskiSumShape::get_shape_b 0 1 527 10
/**
 *
 */
75
inline BulletShape const *BulletMinkowskiSumShape::get_shape_b(void) const;

1272 10 get_margin 0 4 1550 35 BulletMinkowskiSumShape::get_margin 0 1 528 10
/**
 *
 */
67
inline PN_stdfloat BulletMinkowskiSumShape::get_margin(void) const;

1273 14 get_class_type 0 4 1550 39 BulletMinkowskiSumShape::get_class_type 0 1 529 0
64
static TypeHandle BulletMinkowskiSumShape::get_class_type(void);

1274 22 BulletMultiSphereShape 0 4 1551 46 BulletMultiSphereShape::BulletMultiSphereShape 0 2 530 531 22
/**
 *
 */

/**
 *
 */
194
BulletMultiSphereShape::BulletMultiSphereShape(PTA_LVecBase3 const &points, PTA_stdfloat const &radii);
inline BulletMultiSphereShape::BulletMultiSphereShape(BulletMultiSphereShape const &copy);

1275 10 operator = 0 4 1551 34 BulletMultiSphereShape::operator = 0 1 532 0
83
inline void BulletMultiSphereShape::operator =(BulletMultiSphereShape const &copy);

1276 16 get_sphere_count 0 4 1551 40 BulletMultiSphereShape::get_sphere_count 0 1 533 10
/**
 *
 */
64
inline int BulletMultiSphereShape::get_sphere_count(void) const;

1277 14 get_sphere_pos 0 4 1551 38 BulletMultiSphereShape::get_sphere_pos 0 1 534 10
/**
 *
 */
71
inline LPoint3 BulletMultiSphereShape::get_sphere_pos(int index) const;

1278 17 get_sphere_radius 0 4 1551 41 BulletMultiSphereShape::get_sphere_radius 0 1 535 10
/**
 *
 */
78
inline PN_stdfloat BulletMultiSphereShape::get_sphere_radius(int index) const;

1279 14 get_class_type 0 4 1551 38 BulletMultiSphereShape::get_class_type 0 1 536 0
63
static TypeHandle BulletMultiSphereShape::get_class_type(void);

1280 25 ~BulletPersistentManifold 0 4 1552 51 BulletPersistentManifold::~BulletPersistentManifold 0 0 10
/**
 *
 */
65
inline BulletPersistentManifold::~BulletPersistentManifold(void);

1281 9 get_node0 0 4 1552 35 BulletPersistentManifold::get_node0 0 1 538 10
/**
 *
 */
53
PandaNode *BulletPersistentManifold::get_node0(void);

1282 9 get_node1 0 4 1552 35 BulletPersistentManifold::get_node1 0 1 539 10
/**
 *
 */
53
PandaNode *BulletPersistentManifold::get_node1(void);

1283 23 get_num_manifold_points 0 4 1552 49 BulletPersistentManifold::get_num_manifold_points 0 1 540 10
/**
 *
 */
66
int BulletPersistentManifold::get_num_manifold_points(void) const;

1284 18 get_manifold_point 0 4 1552 44 BulletPersistentManifold::get_manifold_point 0 1 541 10
/**
 *
 */
81
BulletManifoldPoint *BulletPersistentManifold::get_manifold_point(int idx) const;

1285 30 get_contact_breaking_threshold 0 4 1552 56 BulletPersistentManifold::get_contact_breaking_threshold 0 1 542 10
/**
 *
 */
81
PN_stdfloat BulletPersistentManifold::get_contact_breaking_threshold(void) const;

1286 32 get_contact_processing_threshold 0 4 1552 58 BulletPersistentManifold::get_contact_processing_threshold 0 1 543 10
/**
 *
 */
83
PN_stdfloat BulletPersistentManifold::get_contact_processing_threshold(void) const;

1287 14 clear_manifold 0 4 1552 40 BulletPersistentManifold::clear_manifold 0 1 544 10
/**
 *
 */
52
void BulletPersistentManifold::clear_manifold(void);

1288 24 BulletPersistentManifold 0 4 1552 50 BulletPersistentManifold::BulletPersistentManifold 0 1 537 10
/**
 *
 */
102
inline BulletPersistentManifold::BulletPersistentManifold(BulletPersistentManifold const &) = default;

1289 16 BulletPlaneShape 0 4 1553 34 BulletPlaneShape::BulletPlaneShape 0 2 545 546 22
/**
 *
 */

/**
 *
 */
154
BulletPlaneShape::BulletPlaneShape(LVector3 const &normal, PN_stdfloat constant);
inline BulletPlaneShape::BulletPlaneShape(BulletPlaneShape const &copy);

1290 10 operator = 0 4 1553 28 BulletPlaneShape::operator = 0 1 547 0
71
inline void BulletPlaneShape::operator =(BulletPlaneShape const &copy);

1291 16 get_plane_normal 0 4 1553 34 BulletPlaneShape::get_plane_normal 0 1 548 10
/**
 *
 */
63
inline LVector3 BulletPlaneShape::get_plane_normal(void) const;

1292 18 get_plane_constant 0 4 1553 36 BulletPlaneShape::get_plane_constant 0 1 549 10
/**
 *
 */
68
inline PN_stdfloat BulletPlaneShape::get_plane_constant(void) const;

1293 15 make_from_solid 0 4 1553 33 BulletPlaneShape::make_from_solid 0 1 550 10
/**
 *
 */
88
static BulletPlaneShape *BulletPlaneShape::make_from_solid(CollisionPlane const *solid);

1294 14 get_class_type 0 4 1553 32 BulletPlaneShape::get_class_type 0 1 551 0
57
static TypeHandle BulletPlaneShape::get_class_type(void);

1295 22 BulletSliderConstraint 0 4 1554 46 BulletSliderConstraint::BulletSliderConstraint 0 2 552 553 22
/**
 *
 */

/**
 *
 */
328
BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool useFrame_a);
BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a);

1296 14 get_linear_pos 0 4 1554 38 BulletSliderConstraint::get_linear_pos 0 1 554 10
/**
 *
 */
63
PN_stdfloat BulletSliderConstraint::get_linear_pos(void) const;

1297 15 get_angular_pos 0 4 1554 39 BulletSliderConstraint::get_angular_pos 0 1 555 10
/**
 *
 */
64
PN_stdfloat BulletSliderConstraint::get_angular_pos(void) const;

1298 22 get_lower_linear_limit 0 4 1554 46 BulletSliderConstraint::get_lower_linear_limit 0 1 556 21
// Limits

/**
 *
 */
71
PN_stdfloat BulletSliderConstraint::get_lower_linear_limit(void) const;

1299 22 get_upper_linear_limit 0 4 1554 46 BulletSliderConstraint::get_upper_linear_limit 0 1 557 10
/**
 *
 */
71
PN_stdfloat BulletSliderConstraint::get_upper_linear_limit(void) const;

1300 23 get_lower_angular_limit 0 4 1554 47 BulletSliderConstraint::get_lower_angular_limit 0 1 558 10
/**
 *
 */
72
PN_stdfloat BulletSliderConstraint::get_lower_angular_limit(void) const;

1301 23 get_upper_angular_limit 0 4 1554 47 BulletSliderConstraint::get_upper_angular_limit 0 1 559 10
/**
 *
 */
72
PN_stdfloat BulletSliderConstraint::get_upper_angular_limit(void) const;

1302 22 set_lower_linear_limit 0 4 1554 46 BulletSliderConstraint::set_lower_linear_limit 0 1 560 10
/**
 *
 */
71
void BulletSliderConstraint::set_lower_linear_limit(PN_stdfloat value);

1303 22 set_upper_linear_limit 0 4 1554 46 BulletSliderConstraint::set_upper_linear_limit 0 1 561 10
/**
 *
 */
71
void BulletSliderConstraint::set_upper_linear_limit(PN_stdfloat value);

1304 23 set_lower_angular_limit 0 4 1554 47 BulletSliderConstraint::set_lower_angular_limit 0 1 562 10
/**
 *
 */
72
void BulletSliderConstraint::set_lower_angular_limit(PN_stdfloat value);

1305 23 set_upper_angular_limit 0 4 1554 47 BulletSliderConstraint::set_upper_angular_limit 0 1 563 10
/**
 *
 */
72
void BulletSliderConstraint::set_upper_angular_limit(PN_stdfloat value);

1306 24 set_powered_linear_motor 0 4 1554 48 BulletSliderConstraint::set_powered_linear_motor 0 1 564 27
// Linear motor

/**
 *
 */
63
void BulletSliderConstraint::set_powered_linear_motor(bool on);

1307 32 set_target_linear_motor_velocity 0 4 1554 56 BulletSliderConstraint::set_target_linear_motor_velocity 0 1 565 10
/**
 *
 */
91
void BulletSliderConstraint::set_target_linear_motor_velocity(PN_stdfloat target_velocity);

1308 26 set_max_linear_motor_force 0 4 1554 50 BulletSliderConstraint::set_max_linear_motor_force 0 1 566 10
/**
 *
 */
79
void BulletSliderConstraint::set_max_linear_motor_force(PN_stdfloat max_force);

1309 24 get_powered_linear_motor 0 4 1554 48 BulletSliderConstraint::get_powered_linear_motor 0 1 567 10
/**
 *
 */
66
bool BulletSliderConstraint::get_powered_linear_motor(void) const;

1310 32 get_target_linear_motor_velocity 0 4 1554 56 BulletSliderConstraint::get_target_linear_motor_velocity 0 1 568 10
/**
 *
 */
81
PN_stdfloat BulletSliderConstraint::get_target_linear_motor_velocity(void) const;

1311 26 get_max_linear_motor_force 0 4 1554 50 BulletSliderConstraint::get_max_linear_motor_force 0 1 569 10
/**
 *
 */
75
PN_stdfloat BulletSliderConstraint::get_max_linear_motor_force(void) const;

1312 25 set_powered_angular_motor 0 4 1554 49 BulletSliderConstraint::set_powered_angular_motor 0 1 570 28
// Angular motor

/**
 *
 */
64
void BulletSliderConstraint::set_powered_angular_motor(bool on);

1313 33 set_target_angular_motor_velocity 0 4 1554 57 BulletSliderConstraint::set_target_angular_motor_velocity 0 1 571 10
/**
 *
 */
92
void BulletSliderConstraint::set_target_angular_motor_velocity(PN_stdfloat target_velocity);

1314 27 set_max_angular_motor_force 0 4 1554 51 BulletSliderConstraint::set_max_angular_motor_force 0 1 572 10
/**
 *
 */
80
void BulletSliderConstraint::set_max_angular_motor_force(PN_stdfloat max_force);

1315 25 get_powered_angular_motor 0 4 1554 49 BulletSliderConstraint::get_powered_angular_motor 0 1 573 10
/**
 *
 */
67
bool BulletSliderConstraint::get_powered_angular_motor(void) const;

1316 33 get_target_angular_motor_velocity 0 4 1554 57 BulletSliderConstraint::get_target_angular_motor_velocity 0 1 574 10
/**
 *
 */
82
PN_stdfloat BulletSliderConstraint::get_target_angular_motor_velocity(void) const;

1317 27 get_max_angular_motor_force 0 4 1554 51 BulletSliderConstraint::get_max_angular_motor_force 0 1 575 10
/**
 *
 */
76
PN_stdfloat BulletSliderConstraint::get_max_angular_motor_force(void) const;

1318 10 set_frames 0 4 1554 34 BulletSliderConstraint::set_frames 0 1 576 21
// Frames

/**
 *
 */
96
void BulletSliderConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1319 11 get_frame_a 0 4 1554 35 BulletSliderConstraint::get_frame_a 0 1 577 10
/**
 *
 */
88
inline ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_a(void) const;

1320 11 get_frame_b 0 4 1554 35 BulletSliderConstraint::get_frame_b 0 1 578 10
/**
 *
 */
88
inline ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_b(void) const;

1321 14 get_class_type 0 4 1554 38 BulletSliderConstraint::get_class_type 0 1 579 0
63
static TypeHandle BulletSliderConstraint::get_class_type(void);

1322 21 ~BulletSoftBodyConfig 0 4 1555 43 BulletSoftBodyConfig::~BulletSoftBodyConfig 0 0 10
/**
 *
 */
57
inline BulletSoftBodyConfig::~BulletSoftBodyConfig(void);

1323 25 clear_all_collision_flags 0 4 1555 47 BulletSoftBodyConfig::clear_all_collision_flags 0 1 581 10
/**
 *
 */
59
void BulletSoftBodyConfig::clear_all_collision_flags(void);

1324 18 set_collision_flag 0 4 1555 40 BulletSoftBodyConfig::set_collision_flag 0 1 582 10
/**
 *
 */
100
void BulletSoftBodyConfig::set_collision_flag(BulletSoftBodyConfig::CollisionFlag flag, bool value);

1325 18 get_collision_flag 0 4 1555 40 BulletSoftBodyConfig::get_collision_flag 0 1 583 10
/**
 *
 */
94
bool BulletSoftBodyConfig::get_collision_flag(BulletSoftBodyConfig::CollisionFlag flag) const;

1326 14 set_aero_model 0 4 1555 36 BulletSoftBodyConfig::set_aero_model 0 1 584 10
/**
 *
 */
81
void BulletSoftBodyConfig::set_aero_model(BulletSoftBodyConfig::AeroModel value);

1327 14 get_aero_model 0 4 1555 36 BulletSoftBodyConfig::get_aero_model 0 1 585 10
/**
 *
 */
81
BulletSoftBodyConfig::AeroModel BulletSoftBodyConfig::get_aero_model(void) const;

1328 32 set_velocities_correction_factor 0 4 1555 54 BulletSoftBodyConfig::set_velocities_correction_factor 0 1 586 36
/**
 * Setter for property kVCF.
 */
86
inline void BulletSoftBodyConfig::set_velocities_correction_factor(PN_stdfloat value);

1329 23 set_damping_coefficient 0 4 1555 45 BulletSoftBodyConfig::set_damping_coefficient 0 1 587 35
/**
 * Setter for property kDP.
 */
77
inline void BulletSoftBodyConfig::set_damping_coefficient(PN_stdfloat value);

1330 20 set_drag_coefficient 0 4 1555 42 BulletSoftBodyConfig::set_drag_coefficient 0 1 588 35
/**
 * Setter for property kDG.
 */
74
inline void BulletSoftBodyConfig::set_drag_coefficient(PN_stdfloat value);

1331 20 set_lift_coefficient 0 4 1555 42 BulletSoftBodyConfig::set_lift_coefficient 0 1 589 35
/**
 * Setter for property kLF.
 */
74
inline void BulletSoftBodyConfig::set_lift_coefficient(PN_stdfloat value);

1332 24 set_pressure_coefficient 0 4 1555 46 BulletSoftBodyConfig::set_pressure_coefficient 0 1 590 35
/**
 * Setter for property kPR.
 */
78
inline void BulletSoftBodyConfig::set_pressure_coefficient(PN_stdfloat value);

1333 35 set_volume_conversation_coefficient 0 4 1555 57 BulletSoftBodyConfig::set_volume_conversation_coefficient 0 1 591 35
/**
 * Setter for property kVC.
 */
89
inline void BulletSoftBodyConfig::set_volume_conversation_coefficient(PN_stdfloat value);

1334 32 set_dynamic_friction_coefficient 0 4 1555 54 BulletSoftBodyConfig::set_dynamic_friction_coefficient 0 1 592 35
/**
 * Setter for property kDF.
 */
86
inline void BulletSoftBodyConfig::set_dynamic_friction_coefficient(PN_stdfloat value);

1335 29 set_pose_matching_coefficient 0 4 1555 51 BulletSoftBodyConfig::set_pose_matching_coefficient 0 1 593 35
/**
 * Setter for property kMT.
 */
83
inline void BulletSoftBodyConfig::set_pose_matching_coefficient(PN_stdfloat value);

1336 27 set_rigid_contacts_hardness 0 4 1555 49 BulletSoftBodyConfig::set_rigid_contacts_hardness 0 1 594 36
/**
 * Setter for property kCHR.
 */
81
inline void BulletSoftBodyConfig::set_rigid_contacts_hardness(PN_stdfloat value);

1337 29 set_kinetic_contacts_hardness 0 4 1555 51 BulletSoftBodyConfig::set_kinetic_contacts_hardness 0 1 595 36
/**
 * Setter for property kKHR.
 */
83
inline void BulletSoftBodyConfig::set_kinetic_contacts_hardness(PN_stdfloat value);

1338 26 set_soft_contacts_hardness 0 4 1555 48 BulletSoftBodyConfig::set_soft_contacts_hardness 0 1 596 36
/**
 * Setter for property kSHR.
 */
80
inline void BulletSoftBodyConfig::set_soft_contacts_hardness(PN_stdfloat value);

1339 20 set_anchors_hardness 0 4 1555 42 BulletSoftBodyConfig::set_anchors_hardness 0 1 597 36
/**
 * Setter for property kAHR.
 */
74
inline void BulletSoftBodyConfig::set_anchors_hardness(PN_stdfloat value);

1340 26 set_soft_vs_rigid_hardness 0 4 1555 48 BulletSoftBodyConfig::set_soft_vs_rigid_hardness 0 1 598 40
/**
 * Setter for property kSRHR_CL.
 */
80
inline void BulletSoftBodyConfig::set_soft_vs_rigid_hardness(PN_stdfloat value);

1341 28 set_soft_vs_kinetic_hardness 0 4 1555 50 BulletSoftBodyConfig::set_soft_vs_kinetic_hardness 0 1 599 40
/**
 * Setter for property kSKHR_CL.
 */
82
inline void BulletSoftBodyConfig::set_soft_vs_kinetic_hardness(PN_stdfloat value);

1342 25 set_soft_vs_soft_hardness 0 4 1555 47 BulletSoftBodyConfig::set_soft_vs_soft_hardness 0 1 600 40
/**
 * Setter for property kSSHR_CL.
 */
79
inline void BulletSoftBodyConfig::set_soft_vs_soft_hardness(PN_stdfloat value);

1343 31 set_soft_vs_rigid_impulse_split 0 4 1555 53 BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split 0 1 601 43
/**
 * Setter for property kSR_SPLT_CL.
 */
85
inline void BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split(PN_stdfloat value);

1344 33 set_soft_vs_kinetic_impulse_split 0 4 1555 55 BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split 0 1 602 43
/**
 * Setter for property kSK_SPLT_CL.
 */
87
inline void BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split(PN_stdfloat value);

1345 30 set_soft_vs_soft_impulse_split 0 4 1555 52 BulletSoftBodyConfig::set_soft_vs_soft_impulse_split 0 1 603 43
/**
 * Setter for property kSS_SPLT_CL.
 */
84
inline void BulletSoftBodyConfig::set_soft_vs_soft_impulse_split(PN_stdfloat value);

1346 13 set_maxvolume 0 4 1555 35 BulletSoftBodyConfig::set_maxvolume 0 1 604 41
/**
 * Setter for property maxvolume.
 */
67
inline void BulletSoftBodyConfig::set_maxvolume(PN_stdfloat value);

1347 13 set_timescale 0 4 1555 35 BulletSoftBodyConfig::set_timescale 0 1 605 41
/**
 * Setter for property timescale.
 */
67
inline void BulletSoftBodyConfig::set_timescale(PN_stdfloat value);

1348 31 set_positions_solver_iterations 0 4 1555 53 BulletSoftBodyConfig::set_positions_solver_iterations 0 1 606 43
/**
 * Setter for property piterations.
 */
77
inline void BulletSoftBodyConfig::set_positions_solver_iterations(int value);

1349 32 set_velocities_solver_iterations 0 4 1555 54 BulletSoftBodyConfig::set_velocities_solver_iterations 0 1 607 43
/**
 * Setter for property viterations.
 */
78
inline void BulletSoftBodyConfig::set_velocities_solver_iterations(int value);

1350 27 set_drift_solver_iterations 0 4 1555 49 BulletSoftBodyConfig::set_drift_solver_iterations 0 1 608 43
/**
 * Setter for property diterations.
 */
73
inline void BulletSoftBodyConfig::set_drift_solver_iterations(int value);

1351 29 set_cluster_solver_iterations 0 4 1555 51 BulletSoftBodyConfig::set_cluster_solver_iterations 0 1 609 43
/**
 * Setter for property citerations.
 */
75
inline void BulletSoftBodyConfig::set_cluster_solver_iterations(int value);

1352 32 get_velocities_correction_factor 0 4 1555 54 BulletSoftBodyConfig::get_velocities_correction_factor 0 1 610 36
/**
 * Getter for property kVCF.
 */
86
inline PN_stdfloat BulletSoftBodyConfig::get_velocities_correction_factor(void) const;

1353 23 get_damping_coefficient 0 4 1555 45 BulletSoftBodyConfig::get_damping_coefficient 0 1 611 35
/**
 * Getter for property kDP.
 */
77
inline PN_stdfloat BulletSoftBodyConfig::get_damping_coefficient(void) const;

1354 20 get_drag_coefficient 0 4 1555 42 BulletSoftBodyConfig::get_drag_coefficient 0 1 612 35
/**
 * Getter for property kDG.
 */
74
inline PN_stdfloat BulletSoftBodyConfig::get_drag_coefficient(void) const;

1355 20 get_lift_coefficient 0 4 1555 42 BulletSoftBodyConfig::get_lift_coefficient 0 1 613 35
/**
 * Getter for property kLF.
 */
74
inline PN_stdfloat BulletSoftBodyConfig::get_lift_coefficient(void) const;

1356 24 get_pressure_coefficient 0 4 1555 46 BulletSoftBodyConfig::get_pressure_coefficient 0 1 614 35
/**
 * Getter for property kPR.
 */
78
inline PN_stdfloat BulletSoftBodyConfig::get_pressure_coefficient(void) const;

1357 35 get_volume_conversation_coefficient 0 4 1555 57 BulletSoftBodyConfig::get_volume_conversation_coefficient 0 1 615 35
/**
 * Getter for property kVC.
 */
89
inline PN_stdfloat BulletSoftBodyConfig::get_volume_conversation_coefficient(void) const;

1358 32 get_dynamic_friction_coefficient 0 4 1555 54 BulletSoftBodyConfig::get_dynamic_friction_coefficient 0 1 616 35
/**
 * Getter for property kDF.
 */
86
inline PN_stdfloat BulletSoftBodyConfig::get_dynamic_friction_coefficient(void) const;

1359 29 get_pose_matching_coefficient 0 4 1555 51 BulletSoftBodyConfig::get_pose_matching_coefficient 0 1 617 35
/**
 * Getter for property kMT.
 */
83
inline PN_stdfloat BulletSoftBodyConfig::get_pose_matching_coefficient(void) const;

1360 27 get_rigid_contacts_hardness 0 4 1555 49 BulletSoftBodyConfig::get_rigid_contacts_hardness 0 1 618 36
/**
 * Getter for property kCHR.
 */
81
inline PN_stdfloat BulletSoftBodyConfig::get_rigid_contacts_hardness(void) const;

1361 29 get_kinetic_contacts_hardness 0 4 1555 51 BulletSoftBodyConfig::get_kinetic_contacts_hardness 0 1 619 36
/**
 * Getter for property kKHR.
 */
83
inline PN_stdfloat BulletSoftBodyConfig::get_kinetic_contacts_hardness(void) const;

1362 26 get_soft_contacts_hardness 0 4 1555 48 BulletSoftBodyConfig::get_soft_contacts_hardness 0 1 620 36
/**
 * Getter for property kSHR.
 */
80
inline PN_stdfloat BulletSoftBodyConfig::get_soft_contacts_hardness(void) const;

1363 20 get_anchors_hardness 0 4 1555 42 BulletSoftBodyConfig::get_anchors_hardness 0 1 621 36
/**
 * Getter for property kAHR.
 */
74
inline PN_stdfloat BulletSoftBodyConfig::get_anchors_hardness(void) const;

1364 26 get_soft_vs_rigid_hardness 0 4 1555 48 BulletSoftBodyConfig::get_soft_vs_rigid_hardness 0 1 622 40
/**
 * Getter for property kSRHR_CL.
 */
80
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_hardness(void) const;

1365 28 get_soft_vs_kinetic_hardness 0 4 1555 50 BulletSoftBodyConfig::get_soft_vs_kinetic_hardness 0 1 623 40
/**
 * Getter for property kSKHR_CL.
 */
82
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_hardness(void) const;

1366 25 get_soft_vs_soft_hardness 0 4 1555 47 BulletSoftBodyConfig::get_soft_vs_soft_hardness 0 1 624 40
/**
 * Getter for property kSSHR_CL.
 */
79
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_hardness(void) const;

1367 31 get_soft_vs_rigid_impulse_split 0 4 1555 53 BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split 0 1 625 43
/**
 * Getter for property kSR_SPLT_CL.
 */
85
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split(void) const;

1368 33 get_soft_vs_kinetic_impulse_split 0 4 1555 55 BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split 0 1 626 43
/**
 * Getter for property kSK_SPLT_CL.
 */
87
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split(void) const;

1369 30 get_soft_vs_soft_impulse_split 0 4 1555 52 BulletSoftBodyConfig::get_soft_vs_soft_impulse_split 0 1 627 43
/**
 * Getter for property kSS_SPLT_CL.
 */
84
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_impulse_split(void) const;

1370 13 get_maxvolume 0 4 1555 35 BulletSoftBodyConfig::get_maxvolume 0 1 628 41
/**
 * Getter for property maxvolume.
 */
67
inline PN_stdfloat BulletSoftBodyConfig::get_maxvolume(void) const;

1371 13 get_timescale 0 4 1555 35 BulletSoftBodyConfig::get_timescale 0 1 629 41
/**
 * Getter for property timescale.
 */
67
inline PN_stdfloat BulletSoftBodyConfig::get_timescale(void) const;

1372 31 get_positions_solver_iterations 0 4 1555 53 BulletSoftBodyConfig::get_positions_solver_iterations 0 1 630 43
/**
 * Getter for property piterations.
 */
77
inline int BulletSoftBodyConfig::get_positions_solver_iterations(void) const;

1373 32 get_velocities_solver_iterations 0 4 1555 54 BulletSoftBodyConfig::get_velocities_solver_iterations 0 1 631 43
/**
 * Getter for property viterations.
 */
78
inline int BulletSoftBodyConfig::get_velocities_solver_iterations(void) const;

1374 27 get_drift_solver_iterations 0 4 1555 49 BulletSoftBodyConfig::get_drift_solver_iterations 0 1 632 43
/**
 * Getter for property diterations.
 */
73
inline int BulletSoftBodyConfig::get_drift_solver_iterations(void) const;

1375 29 get_cluster_solver_iterations 0 4 1555 51 BulletSoftBodyConfig::get_cluster_solver_iterations 0 1 633 43
/**
 * Getter for property citerations.
 */
75
inline int BulletSoftBodyConfig::get_cluster_solver_iterations(void) const;

1376 20 BulletSoftBodyConfig 0 4 1555 42 BulletSoftBodyConfig::BulletSoftBodyConfig 0 1 580 10
/**
 *
 */
90
inline BulletSoftBodyConfig::BulletSoftBodyConfig(BulletSoftBodyConfig const &) = default;

1377 18 upcast_to_IControl 0 12 1558 41 BulletSoftBodyControl::upcast_to_IControl 0 1 639 45
upcast from BulletSoftBodyControl to IControl
78
btSoftBody::AJoint::IControl *BulletSoftBodyControl::upcast_to_IControl(void);

1378 42 downcast_IControl_to_BulletSoftBodyControl 0 8 0 42 downcast_IControl_to_BulletSoftBodyControl 0 1 640 47
downcast from IControl to BulletSoftBodyControl
102
BulletSoftBodyControl *downcast_IControl_to_BulletSoftBodyControl(btSoftBody::AJoint::IControl *this);

1379 21 BulletSoftBodyControl 0 4 1558 44 BulletSoftBodyControl::BulletSoftBodyControl 0 1 634 10
/**
 *
 */
51
BulletSoftBodyControl::BulletSoftBodyControl(void);

1380 22 ~BulletSoftBodyControl 0 6 1558 45 BulletSoftBodyControl::~BulletSoftBodyControl 0 0 10
/**
 *
 */
60
virtual BulletSoftBodyControl::~BulletSoftBodyControl(void);

1381 8 set_goal 0 4 1558 31 BulletSoftBodyControl::set_goal 0 1 635 20
// Motor

/**
 *
 */
62
inline void BulletSoftBodyControl::set_goal(PN_stdfloat goal);

1382 14 set_max_torque 0 4 1558 37 BulletSoftBodyControl::set_max_torque 0 1 636 10
/**
 *
 */
73
inline void BulletSoftBodyControl::set_max_torque(PN_stdfloat maxtorque);

1383 9 set_angle 0 4 1558 32 BulletSoftBodyControl::set_angle 0 1 637 20
// Steer

/**
 *
 */
64
inline void BulletSoftBodyControl::set_angle(PN_stdfloat angle);

1384 8 set_sign 0 4 1558 31 BulletSoftBodyControl::set_sign 0 1 638 10
/**
 *
 */
62
inline void BulletSoftBodyControl::set_sign(PN_stdfloat sign);

1385 23 ~BulletSoftBodyMaterial 0 4 1562 47 BulletSoftBodyMaterial::~BulletSoftBodyMaterial 0 0 10
/**
 *
 */
61
inline BulletSoftBodyMaterial::~BulletSoftBodyMaterial(void);

1386 5 empty 0 4 1562 29 BulletSoftBodyMaterial::empty 0 1 642 102
/**
 * Named constructor intended to be used for asserts which have to return a
 * concrete value.
 */
73
static inline BulletSoftBodyMaterial BulletSoftBodyMaterial::empty(void);

1387 20 set_linear_stiffness 0 4 1562 44 BulletSoftBodyMaterial::set_linear_stiffness 0 1 643 42
/**
 * Setter for the property m_kLST.
 */
76
inline void BulletSoftBodyMaterial::set_linear_stiffness(PN_stdfloat value);

1388 20 get_linear_stiffness 0 4 1562 44 BulletSoftBodyMaterial::get_linear_stiffness 0 1 644 42
/**
 * Getter for the property m_kLST.
 */
76
inline PN_stdfloat BulletSoftBodyMaterial::get_linear_stiffness(void) const;

1389 21 set_angular_stiffness 0 4 1562 45 BulletSoftBodyMaterial::set_angular_stiffness 0 1 645 42
/**
 * Setter for the property m_kAST.
 */
77
inline void BulletSoftBodyMaterial::set_angular_stiffness(PN_stdfloat value);

1390 21 get_angular_stiffness 0 4 1562 45 BulletSoftBodyMaterial::get_angular_stiffness 0 1 646 42
/**
 * Getter for the property m_kAST.
 */
77
inline PN_stdfloat BulletSoftBodyMaterial::get_angular_stiffness(void) const;

1391 23 set_volume_preservation 0 4 1562 47 BulletSoftBodyMaterial::set_volume_preservation 0 1 647 42
/**
 * Setter for the property m_kVST.
 */
79
inline void BulletSoftBodyMaterial::set_volume_preservation(PN_stdfloat value);

1392 23 get_volume_preservation 0 4 1562 47 BulletSoftBodyMaterial::get_volume_preservation 0 1 648 42
/**
 * Getter for the property m_kVST.
 */
79
inline PN_stdfloat BulletSoftBodyMaterial::get_volume_preservation(void) const;

1393 22 BulletSoftBodyMaterial 0 4 1562 46 BulletSoftBodyMaterial::BulletSoftBodyMaterial 0 1 641 10
/**
 *
 */
96
inline BulletSoftBodyMaterial::BulletSoftBodyMaterial(BulletSoftBodyMaterial const &) = default;

1394 8 get_body 0 4 1565 29 BulletSoftBodyShape::get_body 0 1 649 10
/**
 *
 */
62
BulletSoftBodyNode *BulletSoftBodyShape::get_body(void) const;

1395 14 get_class_type 0 4 1565 35 BulletSoftBodyShape::get_class_type 0 1 650 0
60
static TypeHandle BulletSoftBodyShape::get_class_type(void);

1396 24 ~BulletSoftBodyWorldInfo 0 4 1566 49 BulletSoftBodyWorldInfo::~BulletSoftBodyWorldInfo 0 0 10
/**
 *
 */
63
inline BulletSoftBodyWorldInfo::~BulletSoftBodyWorldInfo(void);

1397 15 set_air_density 0 4 1566 40 BulletSoftBodyWorldInfo::set_air_density 0 1 652 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_air_density(PN_stdfloat density);

1398 17 set_water_density 0 4 1566 42 BulletSoftBodyWorldInfo::set_water_density 0 1 653 10
/**
 *
 */
69
void BulletSoftBodyWorldInfo::set_water_density(PN_stdfloat density);

1399 16 set_water_offset 0 4 1566 41 BulletSoftBodyWorldInfo::set_water_offset 0 1 654 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_water_offset(PN_stdfloat offset);

1400 16 set_water_normal 0 4 1566 41 BulletSoftBodyWorldInfo::set_water_normal 0 1 655 10
/**
 *
 */
71
void BulletSoftBodyWorldInfo::set_water_normal(LVector3 const &normal);

1401 11 set_gravity 0 4 1566 36 BulletSoftBodyWorldInfo::set_gravity 0 1 656 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_gravity(LVector3 const &gravity);

1402 15 get_air_density 0 4 1566 40 BulletSoftBodyWorldInfo::get_air_density 0 1 657 10
/**
 *
 */
65
PN_stdfloat BulletSoftBodyWorldInfo::get_air_density(void) const;

1403 17 get_water_density 0 4 1566 42 BulletSoftBodyWorldInfo::get_water_density 0 1 658 10
/**
 *
 */
67
PN_stdfloat BulletSoftBodyWorldInfo::get_water_density(void) const;

1404 16 get_water_offset 0 4 1566 41 BulletSoftBodyWorldInfo::get_water_offset 0 1 659 10
/**
 *
 */
66
PN_stdfloat BulletSoftBodyWorldInfo::get_water_offset(void) const;

1405 16 get_water_normal 0 4 1566 41 BulletSoftBodyWorldInfo::get_water_normal 0 1 660 10
/**
 *
 */
63
LVector3 BulletSoftBodyWorldInfo::get_water_normal(void) const;

1406 11 get_gravity 0 4 1566 36 BulletSoftBodyWorldInfo::get_gravity 0 1 661 10
/**
 *
 */
58
LVector3 BulletSoftBodyWorldInfo::get_gravity(void) const;

1407 15 garbage_collect 0 4 1566 40 BulletSoftBodyWorldInfo::garbage_collect 0 1 662 10
/**
 *
 */
66
void BulletSoftBodyWorldInfo::garbage_collect(int lifetime = 256);

1408 23 BulletSoftBodyWorldInfo 0 4 1566 48 BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo 0 1 651 10
/**
 *
 */
99
inline BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo(BulletSoftBodyWorldInfo const &) = default;

1409 17 BulletSphereShape 0 4 1567 36 BulletSphereShape::BulletSphereShape 0 2 663 664 22
/**
 *
 */

/**
 *
 */
133
BulletSphereShape::BulletSphereShape(PN_stdfloat radius);
inline BulletSphereShape::BulletSphereShape(BulletSphereShape const &copy);

1410 10 operator = 0 4 1567 29 BulletSphereShape::operator = 0 1 665 0
73
inline void BulletSphereShape::operator =(BulletSphereShape const &copy);

1411 10 get_radius 0 4 1567 29 BulletSphereShape::get_radius 0 1 666 10
/**
 *
 */
61
inline PN_stdfloat BulletSphereShape::get_radius(void) const;

1412 15 make_from_solid 0 4 1567 34 BulletSphereShape::make_from_solid 0 1 667 10
/**
 *
 */
91
static BulletSphereShape *BulletSphereShape::make_from_solid(CollisionSphere const *solid);

1413 14 get_class_type 0 4 1567 33 BulletSphereShape::get_class_type 0 1 668 0
58
static TypeHandle BulletSphereShape::get_class_type(void);

1414 25 BulletSphericalConstraint 0 4 1568 52 BulletSphericalConstraint::BulletSphericalConstraint 0 2 669 670 22
/**
 *
 */

/**
 *
 */
284
BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a);
BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b);

1415 11 set_pivot_a 0 4 1568 38 BulletSphericalConstraint::set_pivot_a 0 1 671 21
// Pivots

/**
 *
 */
68
void BulletSphericalConstraint::set_pivot_a(LPoint3 const &pivot_a);

1416 11 set_pivot_b 0 4 1568 38 BulletSphericalConstraint::set_pivot_b 0 1 672 10
/**
 *
 */
68
void BulletSphericalConstraint::set_pivot_b(LPoint3 const &pivot_b);

1417 14 get_pivot_in_a 0 4 1568 41 BulletSphericalConstraint::get_pivot_in_a 0 1 673 10
/**
 *
 */
62
LPoint3 BulletSphericalConstraint::get_pivot_in_a(void) const;

1418 14 get_pivot_in_b 0 4 1568 41 BulletSphericalConstraint::get_pivot_in_b 0 1 674 10
/**
 *
 */
62
LPoint3 BulletSphericalConstraint::get_pivot_in_b(void) const;

1419 14 get_class_type 0 4 1568 41 BulletSphericalConstraint::get_class_type 0 1 675 0
66
static TypeHandle BulletSphericalConstraint::get_class_type(void);

1420 22 BulletTickCallbackData 0 4 1569 46 BulletTickCallbackData::BulletTickCallbackData 0 1 676 10
/**
 *
 */
73
inline BulletTickCallbackData::BulletTickCallbackData(btScalar timestep);

1421 12 get_timestep 0 4 1569 36 BulletTickCallbackData::get_timestep 0 1 677 10
/**
 *
 */
68
inline PN_stdfloat BulletTickCallbackData::get_timestep(void) const;

1422 14 get_class_type 0 4 1569 38 BulletTickCallbackData::get_class_type 0 1 678 0
63
static TypeHandle BulletTickCallbackData::get_class_type(void);

1423 23 ~BulletTickCallbackData 0 4 1569 47 BulletTickCallbackData::~BulletTickCallbackData 0 0 0
54
BulletTickCallbackData::~BulletTickCallbackData(void);

1424 18 BulletTriangleMesh 0 4 1570 38 BulletTriangleMesh::BulletTriangleMesh 0 2 679 680 10
/**
 *
 */
130
BulletTriangleMesh::BulletTriangleMesh(void);
inline BulletTriangleMesh::BulletTriangleMesh(BulletTriangleMesh const &) = default;

1425 12 add_triangle 0 4 1570 32 BulletTriangleMesh::add_triangle 0 1 681 10
/**
 *
 */
135
void BulletTriangleMesh::add_triangle(LPoint3 const &p0, LPoint3 const &p1, LPoint3 const &p2, bool remove_duplicate_vertices = false);

1426 9 add_array 0 4 1570 29 BulletTriangleMesh::add_array 0 1 682 10
/**
 *
 */
128
void BulletTriangleMesh::add_array(PTA_LVecBase3 const &points, PTA_int const &indices, bool remove_duplicate_vertices = false);

1427 8 add_geom 0 4 1570 28 BulletTriangleMesh::add_geom 0 1 683 10
/**
 *
 */
152
void BulletTriangleMesh::add_geom(Geom const *geom, bool remove_duplicate_vertices = false, TransformState const *ts = TransformState::make_identity());

1428 20 set_welding_distance 0 4 1570 40 BulletTriangleMesh::set_welding_distance 0 1 684 10
/**
 *
 */
68
void BulletTriangleMesh::set_welding_distance(PN_stdfloat distance);

1429 11 preallocate 0 4 1570 31 BulletTriangleMesh::preallocate 0 1 685 10
/**
 *
 */
69
void BulletTriangleMesh::preallocate(int num_verts, int num_indices);

1430 17 get_num_triangles 0 4 1570 37 BulletTriangleMesh::get_num_triangles 0 1 686 10
/**
 *
 */
54
int BulletTriangleMesh::get_num_triangles(void) const;

1431 20 get_welding_distance 0 4 1570 40 BulletTriangleMesh::get_welding_distance 0 1 687 10
/**
 *
 */
65
PN_stdfloat BulletTriangleMesh::get_welding_distance(void) const;

1432 6 output 0 6 1570 26 BulletTriangleMesh::output 0 1 688 10
/**
 *
 */
60
virtual void BulletTriangleMesh::output(ostream &out) const;

1433 5 write 0 6 1570 25 BulletTriangleMesh::write 0 1 689 10
/**
 *
 */
77
virtual void BulletTriangleMesh::write(ostream &out, int indent_level) const;

1434 14 get_class_type 0 4 1570 34 BulletTriangleMesh::get_class_type 0 1 690 0
59
static TypeHandle BulletTriangleMesh::get_class_type(void);

1435 23 BulletTriangleMeshShape 0 4 1571 48 BulletTriangleMeshShape::BulletTriangleMeshShape 0 2 691 692 145
/**
 *
 */

/**
 * Only used by make_from_bam.
 */

/**
 * The parameters 'compress' and 'bvh' are only used if 'dynamic' is set to
 * FALSE.
 */
222
BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMesh *mesh, bool dynamic, bool compress = true, bool bvh = true);
inline BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMeshShape const &copy);

1436 10 operator = 0 4 1571 35 BulletTriangleMeshShape::operator = 0 1 693 0
85
inline void BulletTriangleMeshShape::operator =(BulletTriangleMeshShape const &copy);

1437 10 refit_tree 0 4 1571 35 BulletTriangleMeshShape::refit_tree 0 1 694 10
/**
 *
 */
91
void BulletTriangleMeshShape::refit_tree(LPoint3 const &aabb_min, LPoint3 const &aabb_max);

1438 9 is_static 0 4 1571 34 BulletTriangleMeshShape::is_static 0 1 695 10
/**
 *
 */
59
inline bool BulletTriangleMeshShape::is_static(void) const;

1439 10 is_dynamic 0 4 1571 35 BulletTriangleMeshShape::is_dynamic 0 1 696 10
/**
 *
 */
60
inline bool BulletTriangleMeshShape::is_dynamic(void) const;

1440 14 get_class_type 0 4 1571 39 BulletTriangleMeshShape::get_class_type 0 1 697 0
64
static TypeHandle BulletTriangleMeshShape::get_class_type(void);

1441 23 ~BulletWheelRaycastInfo 0 4 1572 47 BulletWheelRaycastInfo::~BulletWheelRaycastInfo 0 0 10
/**
 *
 */
61
inline BulletWheelRaycastInfo::~BulletWheelRaycastInfo(void);

1442 13 is_in_contact 0 4 1572 37 BulletWheelRaycastInfo::is_in_contact 0 1 699 10
/**
 *
 */
62
inline bool BulletWheelRaycastInfo::is_in_contact(void) const;

1443 21 get_suspension_length 0 4 1572 45 BulletWheelRaycastInfo::get_suspension_length 0 1 700 10
/**
 *
 */
77
inline PN_stdfloat BulletWheelRaycastInfo::get_suspension_length(void) const;

1444 21 get_contact_normal_ws 0 4 1572 45 BulletWheelRaycastInfo::get_contact_normal_ws 0 1 701 10
/**
 *
 */
74
inline LVector3 BulletWheelRaycastInfo::get_contact_normal_ws(void) const;

1445 22 get_wheel_direction_ws 0 4 1572 46 BulletWheelRaycastInfo::get_wheel_direction_ws 0 1 702 10
/**
 *
 */
75
inline LVector3 BulletWheelRaycastInfo::get_wheel_direction_ws(void) const;

1446 17 get_wheel_axle_ws 0 4 1572 41 BulletWheelRaycastInfo::get_wheel_axle_ws 0 1 703 10
/**
 *
 */
70
inline LVector3 BulletWheelRaycastInfo::get_wheel_axle_ws(void) const;

1447 20 get_contact_point_ws 0 4 1572 44 BulletWheelRaycastInfo::get_contact_point_ws 0 1 704 10
/**
 *
 */
72
inline LPoint3 BulletWheelRaycastInfo::get_contact_point_ws(void) const;

1448 17 get_hard_point_ws 0 4 1572 41 BulletWheelRaycastInfo::get_hard_point_ws 0 1 705 10
/**
 *
 */
69
inline LPoint3 BulletWheelRaycastInfo::get_hard_point_ws(void) const;

1449 17 get_ground_object 0 4 1572 41 BulletWheelRaycastInfo::get_ground_object 0 1 706 10
/**
 *
 */
72
inline PandaNode *BulletWheelRaycastInfo::get_ground_object(void) const;

1450 22 BulletWheelRaycastInfo 0 4 1572 46 BulletWheelRaycastInfo::BulletWheelRaycastInfo 0 1 698 10
/**
 *
 */
96
inline BulletWheelRaycastInfo::BulletWheelRaycastInfo(BulletWheelRaycastInfo const &) = default;

1451 12 ~BulletWheel 0 4 1573 25 BulletWheel::~BulletWheel 0 0 10
/**
 *
 */
39
inline BulletWheel::~BulletWheel(void);

1452 24 set_suspension_stiffness 0 4 1573 37 BulletWheel::set_suspension_stiffness 0 1 708 50
/**
 * Sets how stiff the suspension shall be.
 */
62
void BulletWheel::set_suspension_stiffness(PN_stdfloat value);

1453 28 set_max_suspension_travel_cm 0 4 1573 41 BulletWheel::set_max_suspension_travel_cm 0 1 709 109
/**
 * Sets the maximum distance the suspension can travel out of the resting
 * position in centimeters.
 */
66
void BulletWheel::set_max_suspension_travel_cm(PN_stdfloat value);

1454 17 set_friction_slip 0 4 1573 30 BulletWheel::set_friction_slip 0 1 710 45
/**
 * Sets the slipperyness of the tyre.
 */
55
void BulletWheel::set_friction_slip(PN_stdfloat value);

1455 24 set_max_suspension_force 0 4 1573 37 BulletWheel::set_max_suspension_force 0 1 711 66
/**
 * Sets the maximum suspension force the wheel can handle.
 */
62
void BulletWheel::set_max_suspension_force(PN_stdfloat value);

1456 30 set_wheels_damping_compression 0 4 1573 43 BulletWheel::set_wheels_damping_compression 0 1 712 79
/**
 * Sets the damping forces applied when the suspension gets compressed.
 */
68
void BulletWheel::set_wheels_damping_compression(PN_stdfloat value);

1457 29 set_wheels_damping_relaxation 0 4 1573 42 BulletWheel::set_wheels_damping_relaxation 0 1 713 71
/**
 * Sets the damping forces applied when the suspension relaxes.
 */
67
void BulletWheel::set_wheels_damping_relaxation(PN_stdfloat value);

1458 18 set_roll_influence 0 4 1573 31 BulletWheel::set_roll_influence 0 1 714 249
/**
 * Defines a scaling factor for roll forces that affect the chassis.  0.0
 * means no roll - the chassis won't ever flip over - while 1.0 means original
 * physical behaviour.  Basically, this allows moving the center of mass up
 * and down.
 */
56
void BulletWheel::set_roll_influence(PN_stdfloat value);

1459 16 set_wheel_radius 0 4 1573 29 BulletWheel::set_wheel_radius 0 1 715 33
/**
 * Sets the wheel radius.
 */
54
void BulletWheel::set_wheel_radius(PN_stdfloat value);

1460 12 set_steering 0 4 1573 25 BulletWheel::set_steering 0 1 716 35
/**
 * Sets the steering angle.
 */
50
void BulletWheel::set_steering(PN_stdfloat value);

1461 12 set_rotation 0 4 1573 25 BulletWheel::set_rotation 0 1 717 10
/**
 *
 */
50
void BulletWheel::set_rotation(PN_stdfloat value);

1462 18 set_delta_rotation 0 4 1573 31 BulletWheel::set_delta_rotation 0 1 718 10
/**
 *
 */
56
void BulletWheel::set_delta_rotation(PN_stdfloat value);

1463 16 set_engine_force 0 4 1573 29 BulletWheel::set_engine_force 0 1 719 69
/**
 * Defines how much force should be used to rotate the wheel.
 */
54
void BulletWheel::set_engine_force(PN_stdfloat value);

1464 9 set_brake 0 4 1573 22 BulletWheel::set_brake 0 1 720 10
/**
 *
 */
47
void BulletWheel::set_brake(PN_stdfloat value);

1465 13 set_skid_info 0 4 1573 26 BulletWheel::set_skid_info 0 1 721 10
/**
 *
 */
51
void BulletWheel::set_skid_info(PN_stdfloat value);

1466 27 set_wheels_suspension_force 0 4 1573 40 BulletWheel::set_wheels_suspension_force 0 1 722 10
/**
 *
 */
65
void BulletWheel::set_wheels_suspension_force(PN_stdfloat value);

1467 32 set_suspension_relative_velocity 0 4 1573 45 BulletWheel::set_suspension_relative_velocity 0 1 723 10
/**
 *
 */
70
void BulletWheel::set_suspension_relative_velocity(PN_stdfloat value);

1468 35 set_clipped_inv_connection_point_cs 0 4 1573 48 BulletWheel::set_clipped_inv_connection_point_cs 0 1 724 10
/**
 *
 */
73
void BulletWheel::set_clipped_inv_connection_point_cs(PN_stdfloat value);

1469 31 set_chassis_connection_point_cs 0 4 1573 44 BulletWheel::set_chassis_connection_point_cs 0 1 725 70
/**
 * Sets the point where the wheel is connected to the chassis.
 */
70
void BulletWheel::set_chassis_connection_point_cs(LPoint3 const &pos);

1470 22 set_wheel_direction_cs 0 4 1573 35 BulletWheel::set_wheel_direction_cs 0 1 726 92
/**
 * Sets the wheel's forward vector.  (Most likely orthogonal to the axle
 * vector.)
 */
62
void BulletWheel::set_wheel_direction_cs(LVector3 const &dir);

1471 17 set_wheel_axle_cs 0 4 1573 30 BulletWheel::set_wheel_axle_cs 0 1 727 51
/**
 * Determines the wheel axle normal vector.
 */
58
void BulletWheel::set_wheel_axle_cs(LVector3 const &axle);

1472 19 set_world_transform 0 4 1573 32 BulletWheel::set_world_transform 0 1 728 10
/**
 *
 */
59
void BulletWheel::set_world_transform(LMatrix4 const &mat);

1473 15 set_front_wheel 0 4 1573 28 BulletWheel::set_front_wheel 0 1 729 42
/**
 * Sets if the wheel is steerable.
 */
46
void BulletWheel::set_front_wheel(bool value);

1474 8 set_node 0 4 1573 21 BulletWheel::set_node 0 1 730 86
/**
 * Sets the PandaNode which representates the visual appearance of this wheel.
 */
44
void BulletWheel::set_node(PandaNode *node);

1475 26 get_suspension_rest_length 0 4 1573 39 BulletWheel::get_suspension_rest_length 0 1 731 83
/**
 * Returns the length of the suspension when the vehicle is standing still.
 */
64
PN_stdfloat BulletWheel::get_suspension_rest_length(void) const;

1476 24 get_suspension_stiffness 0 4 1573 37 BulletWheel::get_suspension_stiffness 0 1 732 51
/**
 * Returns the stiffness of the suspension.
 */
62
PN_stdfloat BulletWheel::get_suspension_stiffness(void) const;

1477 28 get_max_suspension_travel_cm 0 4 1573 41 BulletWheel::get_max_suspension_travel_cm 0 1 733 10
/**
 *
 */
66
PN_stdfloat BulletWheel::get_max_suspension_travel_cm(void) const;

1478 17 get_friction_slip 0 4 1573 30 BulletWheel::get_friction_slip 0 1 734 46
/**
 * Returns how slippery the tyres are.
 */
55
PN_stdfloat BulletWheel::get_friction_slip(void) const;

1479 24 get_max_suspension_force 0 4 1573 37 BulletWheel::get_max_suspension_force 0 1 735 72
/**
 * Returns the maximum force (weight) the suspension can handle.
 */
62
PN_stdfloat BulletWheel::get_max_suspension_force(void) const;

1480 30 get_wheels_damping_compression 0 4 1573 43 BulletWheel::get_wheels_damping_compression 0 1 736 70
/**
 * Returns the  damping applied to the compressing suspension.
 */
68
PN_stdfloat BulletWheel::get_wheels_damping_compression(void) const;

1481 29 get_wheels_damping_relaxation 0 4 1573 42 BulletWheel::get_wheels_damping_relaxation 0 1 737 66
/**
 * Returns the damping applied to the relaxing suspension.
 */
67
PN_stdfloat BulletWheel::get_wheels_damping_relaxation(void) const;

1482 18 get_roll_influence 0 4 1573 31 BulletWheel::get_roll_influence 0 1 738 90
/**
 * Returns the factor by which roll forces are scaled.  See
 * set_roll_influence.
 */
56
PN_stdfloat BulletWheel::get_roll_influence(void) const;

1483 16 get_wheel_radius 0 4 1573 29 BulletWheel::get_wheel_radius 0 1 739 36
/**
 * Returns the wheel radius.
 */
54
PN_stdfloat BulletWheel::get_wheel_radius(void) const;

1484 12 get_steering 0 4 1573 25 BulletWheel::get_steering 0 1 740 49
/**
 * Returns the steering angle in degrees.
 */
50
PN_stdfloat BulletWheel::get_steering(void) const;

1485 12 get_rotation 0 4 1573 25 BulletWheel::get_rotation 0 1 741 10
/**
 *
 */
50
PN_stdfloat BulletWheel::get_rotation(void) const;

1486 18 get_delta_rotation 0 4 1573 31 BulletWheel::get_delta_rotation 0 1 742 10
/**
 *
 */
56
PN_stdfloat BulletWheel::get_delta_rotation(void) const;

1487 16 get_engine_force 0 4 1573 29 BulletWheel::get_engine_force 0 1 743 71
/**
 * Returns the amount of accelleration force currently applied.
 */
54
PN_stdfloat BulletWheel::get_engine_force(void) const;

1488 9 get_brake 0 4 1573 22 BulletWheel::get_brake 0 1 744 65
/**
 * Returns the amount of braking force currently applied.
 */
47
PN_stdfloat BulletWheel::get_brake(void) const;

1489 13 get_skid_info 0 4 1573 26 BulletWheel::get_skid_info 0 1 745 10
/**
 *
 */
51
PN_stdfloat BulletWheel::get_skid_info(void) const;

1490 27 get_wheels_suspension_force 0 4 1573 40 BulletWheel::get_wheels_suspension_force 0 1 746 10
/**
 *
 */
65
PN_stdfloat BulletWheel::get_wheels_suspension_force(void) const;

1491 32 get_suspension_relative_velocity 0 4 1573 45 BulletWheel::get_suspension_relative_velocity 0 1 747 10
/**
 *
 */
70
PN_stdfloat BulletWheel::get_suspension_relative_velocity(void) const;

1492 35 get_clipped_inv_connection_point_cs 0 4 1573 48 BulletWheel::get_clipped_inv_connection_point_cs 0 1 748 10
/**
 *
 */
73
PN_stdfloat BulletWheel::get_clipped_inv_connection_point_cs(void) const;

1493 31 get_chassis_connection_point_cs 0 4 1573 44 BulletWheel::get_chassis_connection_point_cs 0 1 749 73
/**
 * Returns the point where the wheel is connected to the chassis.
 */
65
LPoint3 BulletWheel::get_chassis_connection_point_cs(void) const;

1494 22 get_wheel_direction_cs 0 4 1573 35 BulletWheel::get_wheel_direction_cs 0 1 750 70
/**
 * Returns the wheel's forward vector relative to the chassis.
 */
57
LVector3 BulletWheel::get_wheel_direction_cs(void) const;

1495 17 get_wheel_axle_cs 0 4 1573 30 BulletWheel::get_wheel_axle_cs 0 1 751 55
/**
 * Returns the normal vector of the wheel axle.
 */
52
LVector3 BulletWheel::get_wheel_axle_cs(void) const;

1496 19 get_world_transform 0 4 1573 32 BulletWheel::get_world_transform 0 1 752 10
/**
 *
 */
54
LMatrix4 BulletWheel::get_world_transform(void) const;

1497 14 is_front_wheel 0 4 1573 27 BulletWheel::is_front_wheel 0 1 753 46
/**
 * Determines if a wheel is steerable.
 */
45
bool BulletWheel::is_front_wheel(void) const;

1498 8 get_node 0 4 1573 21 BulletWheel::get_node 0 1 754 142
/**
 * Returns the PandaNode which representates the visual appearance of this
 * wheel, if such a representation has been set previously.
 */
45
PandaNode *BulletWheel::get_node(void) const;

1499 16 get_raycast_info 0 4 1573 29 BulletWheel::get_raycast_info 0 1 755 10
/**
 *
 */
65
BulletWheelRaycastInfo BulletWheel::get_raycast_info(void) const;

1500 11 BulletWheel 0 4 1573 24 BulletWheel::BulletWheel 0 1 707 10
/**
 *
 */
63
inline BulletWheel::BulletWheel(BulletWheel const &) = default;

757
1 0 0 7 5 1574 767 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
2 0 0 7 6 1577 0 0 10 /**
 *
 */ 1 4 this 3 1575  
3 0 0 7 7 1580 0 0 10 /**
 *
 */ 1 4 this 3 1575  
4 0 0 7 8 1583 0 0 10 /**
 *
 */ 1 4 this 3 1575  
5 0 0 6 9 1563 0 0 10 /**
 *
 */ 1 4 this 3 1575  
6 0 0 6 10 1584 0 0 10 /**
 *
 */ 1 4 this 3 1575  
7 0 0 6 11 1584 0 0 10 /**
 *
 */ 1 4 this 3 1575  
8 0 0 7 18 1585 777 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
9 0 0 7 19 1580 0 0 10 /**
 *
 */ 1 4 this 3 1586  
10 0 0 7 20 1580 0 0 10 /**
 *
 */ 1 4 this 3 1586  
11 0 0 6 21 1588 0 0 10 /**
 *
 */ 1 4 this 3 1586  
12 0 0 6 22 1563 0 0 10 /**
 *
 */ 1 4 this 3 1586  
13 0 0 6 23 1584 0 0 10 /**
 *
 */ 1 4 this 3 1586  
14 0 0 7 24 1575 0 0 10 /**
 *
 */ 2 4 this 3 1586  3 idx 1 1584  
15 0 0 6 16 1589 0 0 0 1 4 this 3 1585  
16 0 0 6 17 1585 0 0 0 2 4 this 3 1589  4 this 1 1589  
17 0 0 6 29 1588 0 0 10 /**
 *
 */ 1 4 this 3 1590  
18 0 0 6 30 1588 0 0 10 /**
 *
 */ 1 4 this 3 1590  
19 0 0 6 31 1588 0 0 10 /**
 *
 */ 1 4 this 3 1590  
20 0 0 6 32 1588 0 0 10 /**
 *
 */ 1 4 this 3 1590  
21 0 0 6 33 1588 0 0 10 /**
 *
 */ 1 4 this 3 1590  
22 0 0 6 34 1588 0 0 10 /**
 *
 */ 1 4 this 3 1590  
23 0 0 6 35 1588 0 0 10 /**
 *
 */ 1 4 this 3 1590  
24 0 0 4 36 1593 0 0 10 /**
 *
 */ 2 4 this 3 1592  6 margin 1 1563  
25 0 0 6 37 1594 0 0 10 /**
 *
 */ 1 4 this 3 1590  
26 0 0 6 38 1563 0 0 10 /**
 *
 */ 1 4 this 3 1590  
27 0 0 7 39 1596 0 0 62 /**
 * Returns the current bounds of this collision shape.
 */ 1 4 this 3 1590  
28 0 0 7 40 1598 0 0 0 0 
29 0 0 7 43 1598 0 0 0 0 
30 0 0 4 46 1593 0 0 9 // Shapes 3 4 this 3 1599  5 shape 1 1592  5 xform 1 1600  
31 0 0 4 47 1593 0 0 10 /**
 *
 */ 2 4 this 3 1599  5 shape 1 1592  
32 0 0 6 48 1584 0 0 10 /**
 *
 */ 1 4 this 3 1603  
33 0 0 7 49 1592 0 0 10 /**
 *
 */ 2 4 this 3 1603  3 idx 1 1584  
34 0 0 7 51 1580 0 0 10 /**
 *
 */ 2 4 this 3 1603  3 idx 1 1584  
35 0 0 7 52 1607 0 0 10 /**
 *
 */ 2 4 this 3 1603  3 idx 1 1584  
36 0 0 7 53 1600 0 0 10 /**
 *
 */ 2 4 this 3 1603  3 idx 1 1584  
37 0 0 7 54 1596 0 0 81 /**
 * Returns the current bounds of all collision shapes owned by this body.
 */ 1 4 this 3 1603  
38 0 0 4 55 1593 0 0 10 /**
 *
 */ 2 4 this 3 1599  5 cnode 1 1608  
39 0 0 6 56 1588 0 0 23 // Static and kinematic 1 4 this 3 1603  
40 0 0 6 57 1588 0 0 10 /**
 *
 */ 1 4 this 3 1603  
41 0 0 4 58 1593 0 0 10 /**
 *
 */ 2 4 this 3 1599  5 value 1 1588  
42 0 0 4 59 1593 0 0 10 /**
 *
 */ 2 4 this 3 1599  5 value 1 1588  
43 0 0 4 60 1593 0 0 11 // Contacts 2 4 this 3 1599  4 mask 1 1610  
44 0 0 4 61 1593 0 0 10 /**
 *
 */ 2 4 this 3 1599  5 value 1 1588  
45 0 0 6 62 1588 0 0 10 /**
 *
 */ 1 4 this 3 1603  
46 0 0 4 63 1593 0 0 10 /**
 *
 */ 2 4 this 3 1599  5 value 1 1588  
47 0 0 6 64 1588 0 0 10 /**
 *
 */ 1 4 this 3 1603  
48 0 0 6 65 1588 0 0 10 /**
 *
 */ 2 4 this 3 1599  4 node 1 1577  
49 0 0 6 66 1588 0 0 10 /**
 *
 */ 1 4 this 3 1603  
50 0 0 6 67 1563 0 0 10 /**
 *
 */ 1 4 this 3 1603  
51 0 0 4 68 1593 0 0 106 /**
 * The constraint solver can discard solving contacts, if the distance is
 * above this threshold.
 */ 2 4 this 3 1599  9 threshold 1 1563  
52 0 0 6 69 1588 0 0 15 // Deactivation 1 4 this 3 1603  
53 0 0 4 70 1593 0 0 10 /**
 *
 */ 3 4 this 3 1599  6 active 1 1588  5 force 1 1588  
54 0 0 4 71 1593 0 0 10 /**
 *
 */ 2 4 this 3 1599  2 dt 1 1563  
55 0 0 6 72 1563 0 0 10 /**
 *
 */ 1 4 this 3 1603  
56 0 0 4 73 1593 0 0 163 /**
 * If true, this object will be deactivated after a certain amount of time has
 * passed without movement.  If false, the object will always remain active.
 */ 2 4 this 3 1599  7 enabled 1 1588  
57 0 0 6 74 1588 0 0 10 /**
 *
 */ 1 4 this 3 1603  
58 0 0 4 75 1593 0 0 132 /**
 * Enables or disables the debug visualisation for this collision object.  By
 * default the debug visualisation is enabled.
 */ 2 4 this 3 1599  7 enabled 1 1614  
59 0 0 6 76 1588 0 0 141 /**
 * Returns TRUE if the debug visualisation is enabled for this collision
 * object, and FALSE if the debug visualisation is disabled.
 */ 1 4 this 3 1603  
60 0 0 6 77 1563 0 0 27 // Friction and Restitution 1 4 this 3 1603  
61 0 0 4 78 1593 0 0 10 /**
 *
 */ 2 4 this 3 1599  11 restitution 1 1563  
62 0 0 6 79 1563 0 0 10 /**
 *
 */ 1 4 this 3 1603  
63 0 0 4 80 1593 0 0 10 /**
 *
 */ 2 4 this 3 1599  8 friction 1 1563  
64 0 0 6 81 1588 0 0 10 /**
 *
 */ 1 4 this 3 1603  
65 0 0 4 82 1593 0 0 10 /**
 *
 */ 2 4 this 3 1599  8 friction 1 1615  
66 0 0 7 83 1619 0 0 10 /**
 *
 */ 1 4 this 3 1603  
67 0 0 6 84 1563 0 0 10 /**
 *
 */ 1 4 this 3 1603  
68 0 0 6 85 1563 0 0 10 /**
 *
 */ 1 4 this 3 1603  
69 0 0 4 86 1593 0 0 10 /**
 *
 */ 2 4 this 3 1599  6 radius 1 1563  
70 0 0 4 87 1593 0 0 10 /**
 *
 */ 2 4 this 3 1599  9 threshold 1 1563  
71 0 0 4 88 1593 0 0 216 /**
 * This method enforces an update of the Bullet transform, that is copies the
 * scene graph transform to the Bullet transform.  This is achieved by alling
 * the protected PandaNode hook 'transform_changed'.
 */ 1 4 this 3 1599  
72 0 0 7 89 1598 0 0 0 0 
73 0 0 7 91 1622 0 0 10 /**
 *
 */ 1 4 copy 1 1620  
74 0 0 7 91 1622 0 0 10 /**
 *
 */ 1 11 halfExtents 1 1615  
75 0 0 7 92 1622 0 0 0 2 4 this 3 1622  4 copy 1 1620  
76 0 0 7 93 1619 0 0 10 /**
 *
 */ 1 4 this 3 1620  
77 0 0 7 94 1619 0 0 10 /**
 *
 */ 1 4 this 3 1620  
78 0 0 7 95 1622 0 0 10 /**
 *
 */ 1 5 solid 1 1623  
79 0 0 7 96 1598 0 0 0 0 
80 0 0 7 98 1628 0 0 10 /**
 *
 */ 1 4 copy 1 1626  
81 0 0 7 98 1628 0 0 10 /**
 *
 */ 3 6 radius 1 1563  6 height 1 1563  2 up 1 1501  
82 0 0 7 99 1628 0 0 0 2 4 this 3 1628  4 copy 1 1626  
83 0 0 6 100 1563 0 0 10 /**
 *
 */ 1 4 this 3 1626  
84 0 0 6 101 1563 0 0 10 /**
 *
 */ 1 4 this 3 1626  
85 0 0 7 102 1598 0 0 0 0 
86 0 0 7 104 1629 791 0 10 /**
 *
 */ 3 5 shape 1 1592  11 step_height 1 1563  4 name 1 1594  
87 0 0 4 105 1593 0 0 10 /**
 *
 */ 3 4 this 3 1629  8 velocity 1 1630  8 is_local 1 1588  
88 0 0 4 106 1593 0 0 10 /**
 *
 */ 2 4 this 3 1629  5 omega 1 1563  
89 0 0 7 107 1592 0 0 10 /**
 *
 */ 1 4 this 3 1632  
90 0 0 6 108 1563 0 0 10 /**
 *
 */ 1 4 this 3 1632  
91 0 0 6 109 1563 0 0 10 /**
 *
 */ 1 4 this 3 1632  
92 0 0 4 110 1593 0 0 10 /**
 *
 */ 2 4 this 3 1629  10 fall_speed 1 1563  
93 0 0 4 111 1593 0 0 10 /**
 *
 */ 2 4 this 3 1629  10 jump_speed 1 1563  
94 0 0 4 112 1593 0 0 10 /**
 *
 */ 2 4 this 3 1629  15 max_jump_height 1 1563  
95 0 0 4 113 1593 0 0 10 /**
 *
 */ 2 4 this 3 1629  9 max_slope 1 1563  
96 0 0 4 114 1593 0 0 10 /**
 *
 */ 2 4 this 3 1629  7 gravity 1 1563  
97 0 0 4 115 1593 0 0 10 /**
 *
 */ 2 4 this 3 1629  5 value 1 1588  
98 0 0 6 116 1588 0 0 10 /**
 *
 */ 1 4 this 3 1632  
99 0 0 6 117 1588 0 0 10 /**
 *
 */ 1 4 this 3 1632  
100 0 0 4 118 1593 0 0 10 /**
 *
 */ 1 4 this 3 1629  
101 0 0 7 119 1598 0 0 0 0 
102 0 0 7 134 1636 875 0 0 1 6 param0 0 1634  
103 0 0 7 124 1636 875 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
104 0 0 7 125 1580 0 0 10 /**
 *
 */ 1 4 this 3 1634  
105 0 0 7 126 1580 0 0 10 /**
 *
 */ 1 4 this 3 1634  
106 0 0 6 127 1588 0 0 10 /**
 *
 */ 1 4 this 3 1634  
107 0 0 7 128 1577 0 0 10 /**
 *
 */ 1 4 this 3 1634  
108 0 0 7 129 1580 0 0 10 /**
 *
 */ 1 4 this 3 1634  
109 0 0 7 130 1583 0 0 10 /**
 *
 */ 1 4 this 3 1634  
110 0 0 6 131 1563 0 0 10 /**
 *
 */ 1 4 this 3 1634  
111 0 0 6 132 1584 0 0 10 /**
 *
 */ 1 4 this 3 1634  
112 0 0 6 133 1584 0 0 10 /**
 *
 */ 1 4 this 3 1634  
113 0 0 6 122 1637 0 0 0 1 4 this 3 1636  
114 0 0 6 123 1636 0 0 0 2 4 this 3 1637  4 this 1 1637  
115 0 0 7 148 1640 887 0 0 1 6 param0 0 1638  
116 0 0 7 140 1640 887 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
117 0 0 7 141 1580 0 0 10 /**
 *
 */ 1 4 this 3 1638  
118 0 0 7 142 1580 0 0 10 /**
 *
 */ 1 4 this 3 1638  
119 0 0 6 143 1588 0 0 10 /**
 *
 */ 1 4 this 3 1638  
120 0 0 7 144 1577 0 0 10 /**
 *
 */ 1 4 this 3 1638  
121 0 0 7 145 1580 0 0 10 /**
 *
 */ 1 4 this 3 1638  
122 0 0 7 146 1583 0 0 10 /**
 *
 */ 1 4 this 3 1638  
123 0 0 6 147 1563 0 0 10 /**
 *
 */ 1 4 this 3 1638  
124 0 0 6 138 1641 0 0 0 1 4 this 3 1640  
125 0 0 6 139 1640 0 0 0 2 4 this 3 1641  4 this 1 1641  
126 0 0 7 151 1644 0 0 10 /**
 *
 */ 1 4 copy 1 1642  
127 0 0 7 151 1644 0 0 10 /**
 *
 */ 3 6 radius 1 1563  6 height 1 1563  2 up 1 1501  
128 0 0 7 152 1644 0 0 0 2 4 this 3 1644  4 copy 1 1642  
129 0 0 6 153 1563 0 0 10 /**
 *
 */ 1 4 this 3 1642  
130 0 0 6 154 1563 0 0 10 /**
 *
 */ 1 4 this 3 1642  
131 0 0 7 155 1598 0 0 0 0 
132 0 0 7 158 1646 0 0 10 /**
 *
 */ 1 4 this 3 1645  
133 0 0 7 159 1646 0 0 10 /**
 *
 */ 1 4 this 3 1645  
134 0 0 4 160 1593 0 0 10 /**
 *
 */ 2 4 this 3 1645  5 value 1 1588  
135 0 0 4 161 1593 0 0 10 /**
 *
 */ 2 4 this 3 1645  4 size 1 1563  
136 0 0 6 162 1563 0 0 10 /**
 *
 */ 1 4 this 3 1647  
137 0 0 6 163 1563 0 0 10 /**
 *
 */ 1 4 this 3 1645  
138 0 0 6 164 1563 0 0 73 /**
 * Returns the applied impluse limit for breaking the constraint.
 */ 1 4 this 3 1647  
139 0 0 4 164 1593 0 0 212 /**
 * Sets the applied impulse limit for breaking the constraint.  If the limit
 * is exceeded the constraint will be disabled.  Disabled constraints are not
 * removed from the world, and can be re-enabled.
 */ 2 4 this 3 1645  9 threshold 1 1563  
140 0 0 4 165 1593 0 0 10 /**
 *
 */ 2 4 this 3 1645  7 enabled 1 1588  
141 0 0 6 166 1588 0 0 53 /**
 * Returns TRUE if the constraint is enabled.
 */ 1 4 this 3 1647  
142 0 0 4 168 1593 0 0 10 /**
 *
 */ 4 4 this 3 1645  3 num 1 1521  5 value 1 1563  4 axis 1 1584  
143 0 0 6 169 1563 0 0 10 /**
 *
 */ 3 4 this 3 1645  3 num 1 1521  4 axis 1 1584  
144 0 0 7 170 1598 0 0 0 0 
145 0 0 7 172 1651 0 0 10 /**
 *
 */ 4 6 node_a 1 1649  6 node_b 1 1649  7 frame_a 1 1600  7 frame_b 1 1600  
146 0 0 7 172 1651 0 0 10 /**
 *
 */ 2 6 node_a 1 1649  7 frame_a 1 1600  
147 0 0 4 173 1593 0 0 10 /**
 *
 */ 7 4 this 3 1651  6 swing1 1 1563  6 swing2 1 1563  5 twist 1 1563  8 softness 1 1563  4 bias 1 1563  10 relaxation 1 1563  
148 0 0 4 173 1593 0 0 10 /**
 *
 */ 3 4 this 3 1651  5 index 1 1584  5 value 1 1563  
149 0 0 4 174 1593 0 0 10 /**
 *
 */ 2 4 this 3 1651  7 damping 1 1563  
150 0 0 6 175 1563 0 0 10 /**
 *
 */ 1 4 this 3 1652  
151 0 0 4 176 1593 0 0 10 /**
 *
 */ 2 4 this 3 1651  9 threshold 1 1563  
152 0 0 4 177 1593 0 0 10 /**
 *
 */ 2 4 this 3 1651  6 enable 1 1588  
153 0 0 4 178 1593 0 0 10 /**
 *
 */ 2 4 this 3 1651  11 max_impulse 1 1563  
154 0 0 4 179 1593 0 0 10 /**
 *
 */ 2 4 this 3 1651  11 max_impulse 1 1563  
155 0 0 4 180 1593 0 0 10 /**
 *
 */ 2 4 this 3 1651  4 quat 1 1654  
156 0 0 4 181 1593 0 0 10 /**
 *
 */ 2 4 this 3 1651  4 quat 1 1654  
157 0 0 4 182 1593 0 0 10 /**
 *
 */ 3 4 this 3 1651  4 ts_a 1 1600  4 ts_b 1 1600  
158 0 0 7 183 1600 0 0 10 /**
 *
 */ 1 4 this 3 1652  
159 0 0 7 184 1600 0 0 10 /**
 *
 */ 1 4 this 3 1652  
160 0 0 7 185 1598 0 0 0 0 
161 0 0 6 188 1584 0 0 10 /**
 *
 */ 1 4 this 3 1658  
162 0 0 6 189 1563 0 0 10 /**
 *
 */ 1 4 this 3 1658  
163 0 0 6 190 1563 0 0 10 /**
 *
 */ 1 4 this 3 1658  
164 0 0 7 191 1580 0 0 10 /**
 *
 */ 1 4 this 3 1658  
165 0 0 7 192 1580 0 0 10 /**
 *
 */ 1 4 this 3 1658  
166 0 0 7 193 1583 0 0 10 /**
 *
 */ 1 4 this 3 1658  
167 0 0 7 194 1580 0 0 10 /**
 *
 */ 1 4 this 3 1658  
168 0 0 7 195 1580 0 0 10 /**
 *
 */ 1 4 this 3 1658  
169 0 0 6 196 1584 0 0 10 /**
 *
 */ 1 4 this 3 1658  
170 0 0 6 197 1584 0 0 10 /**
 *
 */ 1 4 this 3 1658  
171 0 0 6 198 1584 0 0 10 /**
 *
 */ 1 4 this 3 1658  
172 0 0 6 199 1584 0 0 10 /**
 *
 */ 1 4 this 3 1658  
173 0 0 4 200 1593 0 0 10 /**
 *
 */ 2 4 this 3 1660  5 value 1 1588  
174 0 0 4 201 1593 0 0 10 /**
 *
 */ 2 4 this 3 1660  3 dir 1 1615  
175 0 0 4 202 1593 0 0 10 /**
 *
 */ 2 4 this 3 1660  3 dir 1 1615  
176 0 0 4 203 1593 0 0 10 /**
 *
 */ 2 4 this 3 1660  5 value 1 1563  
177 0 0 4 204 1593 0 0 10 /**
 *
 */ 2 4 this 3 1660  5 value 1 1563  
178 0 0 4 205 1593 0 0 10 /**
 *
 */ 2 4 this 3 1660  5 value 1 1563  
179 0 0 4 206 1593 0 0 10 /**
 *
 */ 2 4 this 3 1660  5 value 1 1563  
180 0 0 4 207 1593 0 0 10 /**
 *
 */ 2 4 this 3 1660  5 value 1 1563  
181 0 0 4 208 1593 0 0 10 /**
 *
 */ 2 4 this 3 1660  5 value 1 1563  
182 0 0 4 209 1593 0 0 10 /**
 *
 */ 2 4 this 3 1660  5 value 1 1563  
183 0 0 4 210 1593 0 0 10 /**
 *
 */ 2 4 this 3 1660  5 value 1 1563  
184 0 0 4 211 1593 0 0 10 /**
 *
 */ 2 4 this 3 1660  5 value 1 1563  
185 0 0 6 212 1588 0 0 10 /**
 *
 */ 1 4 this 3 1658  
186 0 0 7 213 1583 0 0 10 /**
 *
 */ 1 4 this 3 1658  
187 0 0 7 214 1583 0 0 10 /**
 *
 */ 1 4 this 3 1658  
188 0 0 6 215 1563 0 0 10 /**
 *
 */ 1 4 this 3 1658  
189 0 0 6 216 1563 0 0 10 /**
 *
 */ 1 4 this 3 1658  
190 0 0 6 217 1563 0 0 10 /**
 *
 */ 1 4 this 3 1658  
191 0 0 6 218 1563 0 0 10 /**
 *
 */ 1 4 this 3 1658  
192 0 0 6 219 1563 0 0 10 /**
 *
 */ 1 4 this 3 1658  
193 0 0 6 220 1563 0 0 10 /**
 *
 */ 1 4 this 3 1658  
194 0 0 6 221 1563 0 0 10 /**
 *
 */ 1 4 this 3 1658  
195 0 0 6 222 1563 0 0 10 /**
 *
 */ 1 4 this 3 1658  
196 0 0 7 225 1663 964 0 0 1 6 param0 0 1661  
197 0 0 7 225 1663 964 0 10 /**
 *
 */ 7 2 mp 1 1660  5 node0 1 1577  5 node1 1 1577  3 id0 1 1584  3 id1 1 1584  6 index0 1 1584  6 index1 1 1584  
198 0 0 6 226 1660 0 0 10 /**
 *
 */ 1 4 this 3 1661  
199 0 0 7 227 1577 0 0 10 /**
 *
 */ 1 4 this 3 1661  
200 0 0 7 228 1577 0 0 10 /**
 *
 */ 1 4 this 3 1661  
201 0 0 6 229 1584 0 0 10 /**
 *
 */ 1 4 this 3 1661  
202 0 0 6 230 1584 0 0 10 /**
 *
 */ 1 4 this 3 1661  
203 0 0 6 231 1584 0 0 10 /**
 *
 */ 1 4 this 3 1661  
204 0 0 6 232 1584 0 0 10 /**
 *
 */ 1 4 this 3 1661  
205 0 0 7 233 1598 0 0 0 0 
206 0 0 6 236 1660 0 0 10 /**
 *
 */ 1 4 this 3 1664  
207 0 0 7 237 1577 0 0 10 /**
 *
 */ 1 4 this 3 1665  
208 0 0 7 238 1577 0 0 10 /**
 *
 */ 1 4 this 3 1665  
209 0 0 6 239 1584 0 0 10 /**
 *
 */ 1 4 this 3 1665  
210 0 0 6 240 1584 0 0 10 /**
 *
 */ 1 4 this 3 1665  
211 0 0 6 241 1584 0 0 10 /**
 *
 */ 1 4 this 3 1665  
212 0 0 6 242 1584 0 0 10 /**
 *
 */ 1 4 this 3 1665  
213 0 0 6 248 1584 0 0 10 /**
 *
 */ 1 4 this 3 1667  
214 0 0 7 249 1664 972 0 10 /**
 *
 */ 2 4 this 3 1669  3 idx 1 1584  
215 0 0 6 246 1670 0 0 0 1 4 this 3 1669  
216 0 0 6 247 1669 0 0 0 2 4 this 3 1670  4 this 1 1670  
217 0 0 7 254 1673 0 0 0 1 6 param0 0 1671  
218 0 0 7 254 1673 0 0 10 /**
 *
 */ 1 4 name 1 1594  
219 0 0 4 255 1593 0 0 10 /**
 *
 */ 1 4 this 3 1673  
220 0 0 4 256 1593 0 0 10 /**
 *
 */ 2 4 this 3 1673  4 show 1 1588  
221 0 0 4 257 1593 0 0 10 /**
 *
 */ 2 4 this 3 1673  4 show 1 1588  
222 0 0 4 258 1593 0 0 10 /**
 *
 */ 2 4 this 3 1673  4 show 1 1588  
223 0 0 4 259 1593 0 0 10 /**
 *
 */ 2 4 this 3 1673  4 show 1 1588  
224 0 0 7 260 1598 0 0 0 0 
225 0 0 7 262 1674 0 0 10 /**
 *
 */ 1 4 name 1 1594  
226 0 0 6 263 1584 0 0 14 // Overlapping 1 4 this 3 1675  
227 0 0 7 264 1577 0 0 10 /**
 *
 */ 2 4 this 3 1675  3 idx 1 1584  
228 0 0 7 266 1598 0 0 0 0 
229 0 0 7 268 1646 0 0 10 /**
 *
 */ 1 4 name 1 1594  
230 0 0 4 269 1593 0 0 257 /**
 * Sets the mass of a rigid body.  This also modifies the inertia, which is
 * automatically computed from the shape of the body.  Setting a value of zero
 * for mass will make the body static.  A value of zero can be considered an
 * infinite mass.
 */ 2 4 this 3 1646  4 mass 1 1563  
231 0 0 6 270 1563 0 0 128 /**
 * Returns the total mass of a rigid body.  A value of zero means that the
 * body is staic, i.e.  has an infinite mass.
 */ 1 4 this 3 1649  
232 0 0 6 271 1563 0 0 52 /**
 * Returns the inverse mass of a rigid body.
 */ 1 4 this 3 1649  
233 0 0 4 272 1593 0 0 591 /**
 * Sets the inertia of a rigid body.  Inertia is given as a three-component
 * vector.  A component value of zero means infinite inertia along this
 * direction.  Setting the intertia will override the value which is
 * automatically calculated from the rigid bodies shape.  However, it is
 * possible that automatic calculation of intertia is trigger after calling
 * this method, and thus overwriting the explicitly set value again.  This
 * happens when: (a) the mass is set after the inertia.  (b) a shape is added
 * or removed from the body.  (c) the scale of the body changed.
 */ 2 4 this 3 1646  7 inertia 1 1615  
234 0 0 7 273 1583 0 0 174 /**
 * Returns the inertia of the rigid body.  Inertia is given as a three
 * component vector.  A component value of zero means infinite inertia along
 * this direction.
 */ 1 4 this 3 1649  
235 0 0 7 274 1583 0 0 10 /**
 *
 */ 1 4 this 3 1649  
236 0 0 7 275 1679 0 0 10 /**
 *
 */ 1 4 this 3 1649  
237 0 0 7 276 1583 0 0 11 // Velocity 1 4 this 3 1649  
238 0 0 7 277 1583 0 0 10 /**
 *
 */ 1 4 this 3 1649  
239 0 0 4 278 1593 0 0 10 /**
 *
 */ 2 4 this 3 1646  8 velocity 1 1630  
240 0 0 4 279 1593 0 0 10 /**
 *
 */ 2 4 this 3 1646  8 velocity 1 1630  
241 0 0 6 280 1563 0 0 10 // Damping 1 4 this 3 1649  
242 0 0 6 281 1563 0 0 10 /**
 *
 */ 1 4 this 3 1649  
243 0 0 4 282 1593 0 0 10 /**
 *
 */ 2 4 this 3 1646  5 value 1 1563  
244 0 0 4 283 1593 0 0 10 /**
 *
 */ 2 4 this 3 1646  5 value 1 1563  
245 0 0 4 284 1593 0 0 9 // Forces 1 4 this 3 1646  
246 0 0 4 285 1593 0 0 10 /**
 *
 */ 3 4 this 3 1646  5 force 1 1630  3 pos 1 1680  
247 0 0 4 286 1593 0 0 10 /**
 *
 */ 2 4 this 3 1646  5 force 1 1630  
248 0 0 4 287 1593 0 0 10 /**
 *
 */ 3 4 this 3 1646  7 impulse 1 1630  3 pos 1 1680  
249 0 0 4 288 1593 0 0 10 /**
 *
 */ 2 4 this 3 1646  7 impulse 1 1630  
250 0 0 4 289 1593 0 0 10 /**
 *
 */ 2 4 this 3 1646  6 torque 1 1630  
251 0 0 4 290 1593 0 0 10 /**
 *
 */ 2 4 this 3 1646  6 torque 1 1630  
252 0 0 7 291 1583 0 0 10 /**
 *
 */ 1 4 this 3 1649  
253 0 0 7 292 1583 0 0 10 /**
 *
 */ 1 4 this 3 1649  
254 0 0 6 293 1563 0 0 26 // Deactivation thresholds 1 4 this 3 1649  
255 0 0 6 294 1563 0 0 10 /**
 *
 */ 1 4 this 3 1649  
256 0 0 4 295 1593 0 0 10 /**
 *
 */ 2 4 this 3 1646  9 threshold 1 1563  
257 0 0 4 296 1593 0 0 10 /**
 *
 */ 2 4 this 3 1646  9 threshold 1 1563  
258 0 0 4 297 1593 0 0 10 // Gravity 2 4 this 3 1646  7 gravity 1 1630  
259 0 0 7 298 1583 0 0 10 /**
 *
 */ 1 4 this 3 1649  
260 0 0 7 299 1583 0 0 20 // Restrict movement 1 4 this 3 1649  
261 0 0 7 300 1583 0 0 10 /**
 *
 */ 1 4 this 3 1649  
262 0 0 4 301 1593 0 0 10 /**
 *
 */ 2 4 this 3 1646  6 factor 1 1630  
263 0 0 4 302 1593 0 0 10 /**
 *
 */ 2 4 this 3 1646  6 factor 1 1630  
264 0 0 6 303 1588 0 0 123 /**
 * Returns TRUE if the transform of the rigid body has changed at least once
 * since the last call to this method.
 */ 1 4 this 3 1646  
265 0 0 7 304 1598 0 0 0 0 
266 0 0 7 314 1684 1026 0 0 1 6 param0 0 1682  
267 0 0 7 307 1684 1026 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
268 0 0 7 308 1580 0 0 10 /**
 *
 */ 1 4 this 3 1682  
269 0 0 7 309 1583 0 0 10 /**
 *
 */ 1 4 this 3 1682  
270 0 0 7 310 1583 0 0 10 /**
 *
 */ 1 4 this 3 1682  
271 0 0 6 311 1563 0 0 10 /**
 *
 */ 1 4 this 3 1682  
272 0 0 6 312 1563 0 0 10 /**
 *
 */ 1 4 this 3 1682  
273 0 0 6 313 1584 0 0 10 /**
 *
 */ 1 4 this 3 1682  
274 0 0 7 316 1686 1322 0 10 /**
 *
 */ 1 4 this 3 1685  
275 0 0 7 317 1687 1396 0 10 /**
 *
 */ 1 4 this 3 1685  
276 0 0 4 318 1593 0 0 10 /**
 *
 */ 3 4 this 3 1685  8 distance 1 1584  8 material 1 1688  
277 0 0 4 319 1593 0 0 10 /**
 *
 */ 1 4 this 3 1685  
278 0 0 4 320 1593 0 0 24 // Mass, volume, density 2 4 this 3 1685  4 mass 1 1563  
279 0 0 4 321 1593 0 0 10 /**
 *
 */ 2 4 this 3 1685  7 density 1 1563  
280 0 0 4 322 1593 0 0 10 /**
 *
 */ 3 4 this 3 1685  4 mass 1 1563  9 fromfaces 1 1588  
281 0 0 4 323 1593 0 0 10 /**
 *
 */ 2 4 this 3 1685  7 density 1 1563  
282 0 0 4 324 1593 0 0 10 /**
 *
 */ 3 4 this 3 1685  4 node 1 1584  4 mass 1 1563  
283 0 0 6 325 1563 0 0 10 /**
 *
 */ 2 4 this 3 1689  4 node 1 1584  
284 0 0 6 326 1563 0 0 10 /**
 *
 */ 1 4 this 3 1689  
285 0 0 6 327 1563 0 0 10 /**
 *
 */ 1 4 this 3 1689  
286 0 0 4 328 1593 0 0 10 /**
 *
 */ 2 4 this 3 1685  5 force 1 1630  
287 0 0 4 328 1593 0 0 10 /**
 *
 */ 3 4 this 3 1685  5 force 1 1630  4 node 1 1584  
288 0 0 4 329 1593 0 0 10 /**
 *
 */ 2 4 this 3 1685  8 velocity 1 1630  
289 0 0 4 330 1593 0 0 10 /**
 *
 */ 2 4 this 3 1685  8 velocity 1 1630  
290 0 0 4 330 1593 0 0 10 /**
 *
 */ 3 4 this 3 1685  8 velocity 1 1630  4 node 1 1584  
291 0 0 4 331 1593 0 0 10 /**
 *
 */ 2 4 this 3 1685  8 velocity 1 1630  
292 0 0 7 332 1583 0 0 10 /**
 *
 */ 1 4 this 3 1689  
293 0 0 4 333 1593 0 0 10 /**
 *
 */ 3 4 this 3 1685  7 bvolume 1 1588  6 bframe 1 1588  
294 0 0 7 334 1692 0 0 10 /**
 *
 */ 1 4 this 3 1689  
295 0 0 4 335 1593 0 0 10 // Cluster 3 4 this 3 1685  1 k 1 1584  13 maxiterations 1 1584  
296 0 0 4 336 1593 0 0 10 /**
 *
 */ 2 4 this 3 1685  5 index 1 1584  
297 0 0 4 337 1593 0 0 10 /**
 *
 */ 1 4 this 3 1685  
298 0 0 6 338 1584 0 0 10 /**
 *
 */ 1 4 this 3 1689  
299 0 0 7 339 1619 0 0 10 /**
 *
 */ 2 4 this 3 1689  7 cluster 1 1584  
300 0 0 4 340 1593 0 0 12 // Rendering 2 4 this 3 1685  4 geom 1 1693  
301 0 0 4 341 1593 0 0 10 /**
 *
 */ 1 4 this 3 1685  
302 0 0 4 342 1593 0 0 10 /**
 *
 */ 2 4 this 3 1685  5 curve 1 1695  
303 0 0 4 343 1593 0 0 10 /**
 *
 */ 1 4 this 3 1685  
304 0 0 4 344 1593 0 0 10 /**
 *
 */ 2 4 this 3 1685  7 surface 1 1697  
305 0 0 4 345 1593 0 0 10 /**
 *
 */ 1 4 this 3 1685  
306 0 0 4 346 1593 0 0 10 /**
 *
 */ 5 4 this 3 1685  4 node 1 1584  4 body 1 1646  5 pivot 1 1630  7 disable 1 1588  
307 0 0 4 346 1593 0 0 10 // Anchors 4 4 this 3 1685  4 node 1 1584  4 body 1 1646  7 disable 1 1588  
308 0 0 4 347 1593 0 0 10 /**
 *
 */ 6 4 this 3 1685  4 body 1 1599  3 pos 1 1680  3 erp 1 1563  3 cfm 1 1563  5 split 1 1563  
309 0 0 4 347 1593 0 0 10 /**
 *
 */ 6 4 this 3 1685  4 body 1 1599  7 cluster 1 1584  3 erp 1 1563  3 cfm 1 1563  5 split 1 1563  
310 0 0 4 348 1593 0 0 10 /**
 *
 */ 7 4 this 3 1685  4 body 1 1599  4 axis 1 1630  3 erp 1 1563  3 cfm 1 1563  5 split 1 1563  7 control 1 1699  
311 0 0 6 349 1584 0 0 12 // Materials 1 4 this 3 1689  
312 0 0 7 350 1688 1385 0 10 /**
 *
 */ 2 4 this 3 1689  3 idx 1 1584  
313 0 0 7 352 1688 1385 0 10 /**
 *
 */ 1 4 this 3 1685  
314 0 0 6 353 1584 0 0 10 /**
 *
 */ 1 4 this 3 1689  
315 0 0 7 354 1684 1026 0 10 /**
 *
 */ 2 4 this 3 1689  3 idx 1 1584  
316 0 0 6 356 1584 0 0 212 /**
 * Returns the index of the node which is closest to the given point.  The
 * distance between each node and the given point is computed in world space
 * if local=false, and in local space if local=true.
 */ 3 4 this 3 1685  5 point 1 1619  5 local 1 1588  
317 0 0 7 357 1685 0 0 10 // Factory 5 4 info 1 1687  4 from 1 1680  2 to 1 1680  3 res 1 1584  6 fixeds 1 1584  
318 0 0 7 358 1685 0 0 10 /**
 *
 */ 9 4 info 1 1687  8 corner00 1 1680  8 corner10 1 1680  8 corner01 1 1680  8 corner11 1 1680  4 resx 1 1584  4 resy 1 1584  6 fixeds 1 1584  8 gendiags 1 1588  
319 0 0 7 359 1685 0 0 10 /**
 *
 */ 4 4 info 1 1687  6 center 1 1680  6 radius 1 1615  3 res 1 1584  
320 0 0 7 360 1685 0 0 10 /**
 *
 */ 3 4 info 1 1687  4 geom 1 1700  20 randomizeConstraints 1 1588  
321 0 0 7 360 1685 0 0 10 /**
 *
 */ 4 4 info 1 1687  6 points 1 1702  7 indices 1 1706  20 randomizeConstraints 1 1588  
322 0 0 7 361 1685 0 0 10 /**
 *
 */ 4 4 info 1 1687  6 points 1 1702  7 indices 1 1706  10 tetralinks 1 1588  
323 0 0 7 361 1685 0 0 10 /**
 *
 */ 4 4 info 1 1687  3 ele 1 1594  4 face 1 1594  4 node 1 1594  
324 0 0 7 362 1598 0 0 0 0 
325 0 0 4 364 1593 0 0 10 /**
 *
 */ 2 4 this 3 1709  5 value 1 1563  
326 0 0 4 365 1593 0 0 10 /**
 *
 */ 2 4 this 3 1709  5 value 1 1563  
327 0 0 4 366 1593 0 0 10 /**
 *
 */ 2 4 this 3 1709  5 value 1 1563  
328 0 0 4 367 1593 0 0 10 /**
 *
 */ 2 4 this 3 1709  5 value 1 1563  
329 0 0 4 368 1593 0 0 10 /**
 *
 */ 2 4 this 3 1709  5 value 1 1563  
330 0 0 4 369 1593 0 0 10 /**
 *
 */ 2 4 this 3 1709  5 value 1 1563  
331 0 0 6 370 1563 0 0 10 /**
 *
 */ 1 4 this 3 1710  
332 0 0 6 371 1563 0 0 10 /**
 *
 */ 1 4 this 3 1710  
333 0 0 6 372 1563 0 0 10 /**
 *
 */ 1 4 this 3 1710  
334 0 0 6 373 1563 0 0 10 /**
 *
 */ 1 4 this 3 1710  
335 0 0 6 374 1563 0 0 10 /**
 *
 */ 1 4 this 3 1710  
336 0 0 6 375 1563 0 0 10 /**
 *
 */ 1 4 this 3 1710  
337 0 0 7 378 1713 0 0 94 /**
 * Creates a new BulletVehicle instance in the given world and with a chassis
 * node.
 */ 2 5 world 1 1712  7 chassis 1 1646  
338 0 0 4 379 1593 0 0 100 /**
 * Specifies which axis is "up". Nessecary for the vehicle's suspension to
 * work properly!
 */ 2 4 this 3 1713  2 up 1 1501  
339 0 0 4 380 1593 0 0 76 /**
 * Sets the steering value (in degrees) of the wheel with index idx.
 */ 3 4 this 3 1713  8 steering 1 1563  3 idx 1 1584  
340 0 0 4 381 1593 0 0 61 /**
 * Applies braking force to the wheel with index idx.
 */ 3 4 this 3 1713  5 brake 1 1563  3 idx 1 1584  
341 0 0 4 382 1593 0 0 10 /**
 *
 */ 2 4 this 3 1713  5 pitch 1 1563  
342 0 0 7 383 1646 0 0 82 /**
 * Returns the chassis of this vehicle.  The chassis is a rigid body node.
 */ 1 4 this 3 1713  
343 0 0 6 384 1563 0 0 106 /**
 * Returns the current speed in kilometers per hour.  Convert to miles using:
 * km/h * 0.62 = mph
 */ 1 4 this 3 1714  
344 0 0 6 385 1563 0 0 77 /**
 * Returns the steering angle of the wheel with index idx in degrees.
 */ 2 4 this 3 1714  3 idx 1 1584  
345 0 0 7 386 1583 0 0 145 /**
 * Returns the forward vector representing the car's actual direction of
 * movement.  The forward vetcor is given in global coordinates.
 */ 1 4 this 3 1714  
346 0 0 4 387 1593 0 0 43 /**
 * Resets the vehicle's suspension.
 */ 1 4 this 3 1713  
347 0 0 4 388 1593 0 0 70 /**
 * Applies force at the wheel with index idx for acceleration.
 */ 3 4 this 3 1713  5 force 1 1563  3 idx 1 1584  
348 0 0 7 389 1716 1451 0 72 /**
 * Factory method for creating wheels for this vehicle instance.
 */ 1 4 this 3 1713  
349 0 0 6 390 1584 0 0 57 /**
 * Returns the number of wheels this vehicle has.
 */ 1 4 this 3 1714  
350 0 0 7 391 1716 1451 0 132 /**
 * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is
 * equal or larger than the number of wheels.
 */ 2 4 this 3 1714  3 idx 1 1584  
351 0 0 6 393 1709 0 0 189 /**
 * Returns a reference to the BulletVehicleTuning object of this vehicle which
 * offers various vehicle-global tuning options.  Make sure to configure this
 * before adding wheels!
 */ 1 4 this 3 1713  
352 0 0 7 394 1598 0 0 0 0 
353 0 0 7 396 1712 0 0 10 /**
 *
 */ 0 
354 0 0 4 397 1593 0 0 10 /**
 *
 */ 2 4 this 3 1712  7 gravity 1 1630  
355 0 0 4 397 1593 0 0 10 /**
 *
 */ 4 4 this 3 1712  2 gx 1 1563  2 gy 1 1563  2 gz 1 1563  
356 0 0 7 398 1630 0 0 10 /**
 *
 */ 1 4 this 3 1717  
357 0 0 6 399 1584 0 0 10 /**
 *
 */ 4 4 this 3 1712  2 dt 1 1563  12 max_substeps 1 1584  8 stepsize 1 1563  
358 0 0 7 400 1687 1396 0 10 /**
 *
 */ 1 4 this 3 1712  
359 0 0 4 401 1593 0 0 10 /**
 *
 */ 2 4 this 3 1712  4 node 1 1673  
360 0 0 4 402 1593 0 0 10 /**
 *
 */ 1 4 this 3 1712  
361 0 0 7 403 1673 0 0 10 /**
 *
 */ 1 4 this 3 1717  
362 0 0 4 404 1593 0 0 15 // AttachRemove 2 4 this 3 1712  6 object 1 1719  
363 0 0 4 405 1593 0 0 156 /**
 * Attaches a single constraint to a world.  Collision checks between the
 * linked objects will be disabled if the second parameter is set to TRUE.
 */ 3 4 this 3 1712  10 constraint 1 1645  16 linked_collision 1 1588  
364 0 0 4 406 1593 0 0 10 /**
 *
 */ 2 4 this 3 1712  6 object 1 1719  
365 0 0 6 407 1584 0 0 15 // Ghost object 1 4 this 3 1717  
366 0 0 7 408 1674 0 0 10 /**
 *
 */ 2 4 this 3 1717  3 idx 1 1584  
367 0 0 6 410 1584 0 0 13 // Rigid body 1 4 this 3 1717  
368 0 0 7 411 1646 0 0 10 /**
 *
 */ 2 4 this 3 1717  3 idx 1 1584  
369 0 0 6 413 1584 0 0 12 // Soft body 1 4 this 3 1717  
370 0 0 7 414 1685 0 0 10 /**
 *
 */ 2 4 this 3 1717  3 idx 1 1584  
371 0 0 6 416 1584 0 0 23 // Character controller 1 4 this 3 1717  
372 0 0 7 417 1721 791 0 10 /**
 *
 */ 2 4 this 3 1717  3 idx 1 1584  
373 0 0 4 419 1593 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1712  7 vehicle 1 1713  
374 0 0 4 420 1593 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1712  7 vehicle 1 1713  
375 0 0 6 421 1584 0 0 10 /**
 *
 */ 1 4 this 3 1717  
376 0 0 7 422 1713 0 0 10 /**
 *
 */ 2 4 this 3 1717  3 idx 1 1584  
377 0 0 6 424 1584 0 0 13 // Constraint 1 4 this 3 1717  
378 0 0 7 425 1645 0 0 10 /**
 *
 */ 2 4 this 3 1717  3 idx 1 1584  
379 0 0 7 427 1636 875 0 28 // Raycast and other queries 4 4 this 3 1717  8 from_pos 1 1680  6 to_pos 1 1680  4 mask 1 1722  
380 0 0 7 428 1585 777 0 10 /**
 *
 */ 4 4 this 3 1717  8 from_pos 1 1680  6 to_pos 1 1680  4 mask 1 1722  
381 0 0 7 429 1640 887 0 10 /**
 *
 */ 6 4 this 3 1717  5 shape 1 1592  7 from_ts 1 1600  5 to_ts 1 1600  4 mask 1 1722  11 penetration 1 1563  
382 0 0 7 430 1669 977 0 386 /**
 * Performas a test for all bodies which are currently in contact with the
 * given body.  The test returns a BulletContactResult object which may
 * contain zero, one or more contacts.
 *
 * If the optional parameter use_filter is set to TRUE this test will consider
 * filter settings.  Otherwise all objects in contact are reported, no matter
 * if they would collide or not.
 */ 3 4 this 3 1717  4 node 1 1577  10 use_filter 1 1588  
383 0 0 7 431 1669 977 0 181 /**
 * Performas a test if the two bodies given as parameters are in contact or
 * not.  The test returns a BulletContactResult object which may contain zero
 * or one contacts.
 */ 3 4 this 3 1717  5 node0 1 1577  5 node1 1 1577  
384 0 0 6 432 1588 0 0 105 /**
 * Performs a test if two bodies should collide or not, based on the collision
 * filter setting.
 */ 3 4 this 3 1717  5 node0 1 1577  5 node1 1 1577  
385 0 0 6 433 1584 0 0 12 // Manifolds 1 4 this 3 1717  
386 0 0 6 434 1724 0 0 10 /**
 *
 */ 2 4 this 3 1717  3 idx 1 1584  
387 0 0 4 436 1593 0 0 22 // Collision filtering 4 4 this 3 1712  6 group1 1 1725  6 group2 1 1725  6 enable 1 1588  
388 0 0 6 437 1588 0 0 10 /**
 *
 */ 3 4 this 3 1717  6 group1 1 1725  6 group2 1 1725  
389 0 0 4 438 1593 0 0 12 // Callbacks 2 4 this 3 1712  3 obj 1 1726  
390 0 0 4 439 1593 0 0 10 /**
 *
 */ 1 4 this 3 1712  
391 0 0 4 440 1593 0 0 10 /**
 *
 */ 3 4 this 3 1712  3 obj 1 1726  10 is_pretick 1 1588  
392 0 0 4 441 1593 0 0 10 /**
 *
 */ 1 4 this 3 1712  
393 0 0 4 442 1593 0 0 10 /**
 *
 */ 2 4 this 3 1712  3 obj 1 1726  
394 0 0 4 443 1593 0 0 10 /**
 *
 */ 1 4 this 3 1712  
395 0 0 4 446 1593 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1712  4 node 1 1674  
396 0 0 4 447 1593 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1712  4 node 1 1674  
397 0 0 4 448 1593 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1712  4 node 1 1646  
398 0 0 4 449 1593 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1712  4 node 1 1646  
399 0 0 4 450 1593 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1712  4 node 1 1685  
400 0 0 4 451 1593 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1712  4 node 1 1685  
401 0 0 4 452 1593 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1712  4 node 1 1721  
402 0 0 4 453 1593 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1712  4 node 1 1721  
403 0 0 4 454 1593 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1712  10 constraint 1 1645  
404 0 0 7 455 1598 0 0 0 0 
405 0 0 7 457 1728 0 0 10 /**
 *
 */ 0 
406 0 0 7 457 1728 0 0 10 /**
 *
 */ 1 4 copy 1 1729  
407 0 0 7 458 1728 0 0 0 2 4 this 3 1728  4 copy 1 1729  
408 0 0 4 459 1593 0 0 10 /**
 *
 */ 2 4 this 3 1728  1 p 1 1680  
409 0 0 4 460 1593 0 0 10 /**
 *
 */ 2 4 this 3 1728  6 points 1 1731  
410 0 0 4 461 1593 0 0 10 /**
 *
 */ 3 4 this 3 1728  4 geom 1 1700  2 ts 1 1600  
411 0 0 7 462 1598 0 0 0 0 
412 0 0 7 464 1735 0 0 10 /**
 *
 */ 1 4 copy 1 1733  
413 0 0 7 464 1735 0 0 10 /**
 *
 */ 2 4 geom 1 1700  5 scale 1 1619  
414 0 0 7 464 1735 0 0 10 /**
 *
 */ 2 6 points 1 1731  5 scale 1 1619  
415 0 0 7 465 1735 0 0 0 2 4 this 3 1735  4 copy 1 1733  
416 0 0 6 466 1584 0 0 10 /**
 *
 */ 1 4 this 3 1733  
417 0 0 7 467 1598 0 0 0 0 
418 0 0 7 469 1738 0 0 10 /**
 *
 */ 1 4 copy 1 1736  
419 0 0 7 469 1738 0 0 10 /**
 *
 */ 2 12 half_extents 1 1630  2 up 1 1501  
420 0 0 7 469 1738 0 0 10 /**
 *
 */ 3 6 radius 1 1563  6 height 1 1563  2 up 1 1501  
421 0 0 7 470 1738 0 0 0 2 4 this 3 1738  4 copy 1 1736  
422 0 0 6 471 1563 0 0 10 /**
 *
 */ 1 4 this 3 1736  
423 0 0 7 472 1619 0 0 10 /**
 *
 */ 1 4 this 3 1736  
424 0 0 7 473 1619 0 0 10 /**
 *
 */ 1 4 this 3 1736  
425 0 0 7 474 1598 0 0 0 0 
426 0 0 7 476 1741 1182 0 0 1 6 param0 0 1739  
427 0 0 7 476 1741 1182 0 10 /**
 *
 */ 2 5 node0 1 1577  5 node1 1 1577  
428 0 0 7 477 1577 0 0 10 /**
 *
 */ 1 4 this 3 1739  
429 0 0 7 478 1577 0 0 10 /**
 *
 */ 1 4 this 3 1739  
430 0 0 4 479 1593 0 0 10 /**
 *
 */ 2 4 this 3 1741  7 collide 1 1588  
431 0 0 6 480 1588 0 0 10 /**
 *
 */ 1 4 this 3 1739  
432 0 0 7 481 1598 0 0 0 0 
433 0 0 7 484 1744 1184 0 10 /**
 *
 */ 1 4 copy 1 1742  
434 0 0 4 486 1593 0 0 10 /**
 *
 */ 2 4 this 3 1744  6 enable 1 1588  
435 0 0 4 487 1593 0 0 10 /**
 *
 */ 2 4 this 3 1744  5 limit 1 1563  
436 0 0 4 488 1593 0 0 10 /**
 *
 */ 2 4 this 3 1744  5 limit 1 1563  
437 0 0 4 489 1593 0 0 10 /**
 *
 */ 2 4 this 3 1744  8 velocity 1 1563  
438 0 0 4 490 1593 0 0 10 /**
 *
 */ 2 4 this 3 1744  5 force 1 1563  
439 0 0 4 491 1593 0 0 10 /**
 *
 */ 2 4 this 3 1744  5 force 1 1563  
440 0 0 4 492 1593 0 0 10 /**
 *
 */ 2 4 this 3 1744  7 damping 1 1563  
441 0 0 4 493 1593 0 0 10 /**
 *
 */ 2 4 this 3 1744  8 softness 1 1563  
442 0 0 4 494 1593 0 0 10 /**
 *
 */ 2 4 this 3 1744  6 bounce 1 1563  
443 0 0 4 495 1593 0 0 10 /**
 *
 */ 2 4 this 3 1744  3 cfm 1 1563  
444 0 0 4 496 1593 0 0 10 /**
 *
 */ 2 4 this 3 1744  3 cfm 1 1563  
445 0 0 4 497 1593 0 0 10 /**
 *
 */ 2 4 this 3 1744  3 erp 1 1563  
446 0 0 6 498 1588 0 0 10 /**
 *
 */ 1 4 this 3 1742  
447 0 0 6 499 1588 0 0 10 /**
 *
 */ 1 4 this 3 1742  
448 0 0 6 500 1584 0 0 98 /**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */ 1 4 this 3 1742  
449 0 0 6 501 1563 0 0 10 /**
 *
 */ 1 4 this 3 1742  
450 0 0 6 502 1563 0 0 10 /**
 *
 */ 1 4 this 3 1742  
451 0 0 6 503 1563 0 0 10 /**
 *
 */ 1 4 this 3 1742  
452 0 0 7 505 1747 1204 0 10 /**
 *
 */ 1 4 copy 1 1745  
453 0 0 4 507 1593 0 0 10 /**
 *
 */ 3 4 this 3 1747  4 axis 1 1584  6 enable 1 1588  
454 0 0 4 508 1593 0 0 10 /**
 *
 */ 2 4 this 3 1747  5 limit 1 1615  
455 0 0 4 509 1593 0 0 10 /**
 *
 */ 2 4 this 3 1747  5 limit 1 1615  
456 0 0 4 510 1593 0 0 10 /**
 *
 */ 2 4 this 3 1747  8 velocity 1 1615  
457 0 0 4 511 1593 0 0 10 /**
 *
 */ 2 4 this 3 1747  5 force 1 1615  
458 0 0 4 512 1593 0 0 10 /**
 *
 */ 2 4 this 3 1747  7 damping 1 1563  
459 0 0 4 513 1593 0 0 10 /**
 *
 */ 2 4 this 3 1747  8 softness 1 1563  
460 0 0 4 514 1593 0 0 10 /**
 *
 */ 2 4 this 3 1747  11 restitution 1 1563  
461 0 0 4 515 1593 0 0 10 /**
 *
 */ 2 4 this 3 1747  3 cfm 1 1615  
462 0 0 4 516 1593 0 0 10 /**
 *
 */ 2 4 this 3 1747  3 erp 1 1615  
463 0 0 4 517 1593 0 0 10 /**
 *
 */ 2 4 this 3 1747  3 cfm 1 1615  
464 0 0 6 518 1588 0 0 10 /**
 *
 */ 2 4 this 3 1745  4 axis 1 1584  
465 0 0 6 519 1588 0 0 10 /**
 *
 */ 2 4 this 3 1745  4 axis 1 1584  
466 0 0 6 520 1584 0 0 98 /**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */ 2 4 this 3 1745  4 axis 1 1584  
467 0 0 7 521 1583 0 0 10 /**
 *
 */ 1 4 this 3 1745  
468 0 0 7 522 1580 0 0 10 /**
 *
 */ 1 4 this 3 1745  
469 0 0 7 523 1583 0 0 10 /**
 *
 */ 1 4 this 3 1745  
470 0 0 7 525 1748 0 0 10 /**
 *
 */ 5 6 node_a 1 1649  6 node_b 1 1649  7 frame_a 1 1600  7 frame_b 1 1600  11 use_frame_a 1 1588  
471 0 0 7 525 1748 0 0 10 /**
 *
 */ 3 6 node_a 1 1649  7 frame_a 1 1600  11 use_frame_a 1 1588  
472 0 0 7 526 1583 0 0 11 // Geometry 2 4 this 3 1749  4 axis 1 1584  
473 0 0 6 527 1563 0 0 10 /**
 *
 */ 2 4 this 3 1749  4 axis 1 1584  
474 0 0 6 528 1563 0 0 10 /**
 *
 */ 2 4 this 3 1749  4 axis 1 1584  
475 0 0 4 529 1593 0 0 10 /**
 *
 */ 4 4 this 3 1748  4 axis 1 1584  3 low 1 1563  4 high 1 1563  
476 0 0 4 530 1593 0 0 10 /**
 *
 */ 4 4 this 3 1748  4 axis 1 1584  3 low 1 1563  4 high 1 1563  
477 0 0 7 531 1744 1184 0 9 // Motors 2 4 this 3 1748  4 axis 1 1584  
478 0 0 7 532 1747 1204 0 10 /**
 *
 */ 1 4 this 3 1748  
479 0 0 4 533 1593 0 0 9 // Frames 3 4 this 3 1748  4 ts_a 1 1600  4 ts_b 1 1600  
480 0 0 7 534 1600 0 0 10 /**
 *
 */ 1 4 this 3 1749  
481 0 0 7 535 1600 0 0 10 /**
 *
 */ 1 4 this 3 1749  
482 0 0 7 536 1598 0 0 0 0 
483 0 0 7 538 1753 0 0 10 /**
 *
 */ 1 4 copy 1 1751  
484 0 0 7 538 1753 0 0 215 /**
 * @brief Creates a collision shape suited for terrains from a rectangular image.
 * @details Stores the image's brightness values in a vector Bullet can use, 
 *   while rotating it 90 degrees to the right.
 */ 3 5 image 1 1754  10 max_height 1 1563  2 up 1 1501  
485 0 0 7 538 1753 0 0 311 /**
 * @brief Creates a collision shape suited for terrains from a rectangular texture.
 * @details Alternative constructor intended for use with ShaderTerrainMesh. This will
 *   do bilinear sampling at the corners of all texels. Also works with textures 
 *   that are non-power-of-two and/or rectangular.
 */ 3 3 tex 1 1757  10 max_height 1 1563  2 up 1 1501  
486 0 0 7 539 1753 0 0 0 2 4 this 3 1753  4 copy 1 1751  
487 0 0 4 540 1593 0 0 10 /**
 *
 */ 2 4 this 3 1753  4 flag 1 1588  
488 0 0 7 541 1598 0 0 0 0 
489 0 0 7 551 1759 1247 0 0 0 
490 0 0 7 551 1759 1247 0 0 1 6 param0 0 1760  
491 0 0 7 543 1765 0 0 19 // Collision shapes 2 2 np 1 1763  5 clear 1 1588  
492 0 0 7 544 1767 0 0 17 // Internal names 0 
493 0 0 7 545 1767 0 0 10 /**
 *
 */ 0 
494 0 0 7 546 1770 0 0 19 // Geom vertex data 1 6 format 1 1770  
495 0 0 7 547 1770 0 0 10 /**
 *
 */ 1 6 format 1 1770  
496 0 0 7 548 1693 0 0 13 // Geom utils 3 4 node 1 1685  6 format 1 1770  9 two_sided 1 1588  
497 0 0 7 549 1693 0 0 10 /**
 *
 */ 2 4 node 1 1685  6 format 1 1770  
498 0 0 4 550 1593 0 0 10 /**
 *
 */ 3 4 geom 1 1693  4 resx 1 1584  4 resy 1 1584  
499 0 0 7 554 1771 0 0 342 /**
 * Creates a hinge connecting node_a to node_b.  The pivot point is the point
 * at which the body is fixed to the constraint.  In other words: It specifies
 * where on each body the rotation axis should be.  This axis is specified
 * using axis_a and axis_b.  Remember, everything is specified in the bodies
 * own coordinate system!
 */ 7 6 node_a 1 1649  6 node_b 1 1649  7 pivot_a 1 1680  7 pivot_b 1 1680  6 axis_a 1 1630  6 axis_b 1 1630  11 use_frame_a 1 1588  
500 0 0 7 554 1771 0 0 73 /**
 * Constructs a hinge constraint which connects two rigid bodies.
 */ 5 6 node_a 1 1649  6 node_b 1 1649  4 ts_a 1 1600  4 ts_b 1 1600  11 use_frame_a 1 1588  
501 0 0 7 554 1771 0 0 182 /**
 * Creates a hinge constraint in the same way as the other constructor, but
 * uses the world as second body so that node_a is fixed to some point in mid-
 * air for example.
 */ 4 6 node_a 1 1649  7 pivot_a 1 1680  6 axis_a 1 1630  11 use_frame_a 1 1588  
502 0 0 7 554 1771 0 0 106 /**
 * Creates a hinge constraint which connects one rigid body with some fixe
 * dpoint in the world.
 */ 3 6 node_a 1 1649  4 ts_a 1 1600  11 use_frame_a 1 1588  
503 0 0 6 555 1563 0 0 66 /**
 * Returns the angle between node_a and node_b in degrees.
 */ 1 4 this 3 1771  
504 0 0 6 556 1563 0 0 54 /**
 * Returns the lower angular limit in degrees.
 */ 1 4 this 3 1772  
505 0 0 6 557 1563 0 0 54 /**
 * Returns the upper angular limit in degrees.
 */ 1 4 this 3 1772  
506 0 0 6 558 1588 0 0 10 /**
 *
 */ 1 4 this 3 1772  
507 0 0 4 559 1593 0 0 10 /**
 *
 */ 2 4 this 3 1771  5 value 1 1588  
508 0 0 4 560 1593 0 0 65 /**
 * Sets the lower and upper rotational limits in degrees.
 */ 6 4 this 3 1771  3 low 1 1563  4 high 1 1563  8 softness 1 1563  4 bias 1 1563  10 relaxation 1 1563  
509 0 0 4 561 1593 0 0 63 /**
 * Sets the hinge's rotation axis in world coordinates.
 */ 2 4 this 3 1771  4 axis 1 1630  
510 0 0 4 562 1593 0 0 261 /**
 * Applies an impulse to the constraint so that the angle changes at
 * target_velocity where max_impulse is the maximum impulse that is used for
 * achieving the specified velocity.
 *
 * Note that the target_velocity is in radians/second, not degrees.
 */ 4 4 this 3 1771  6 enable 1 1588  15 target_velocity 1 1563  11 max_impulse 1 1563  
511 0 0 4 563 1593 0 0 10 /**
 *
 */ 2 4 this 3 1771  6 enable 1 1588  
512 0 0 4 564 1593 0 0 96 /**
 * Sets the maximum impulse used to achieve the velocity set in
 * enable_angular_motor.
 */ 2 4 this 3 1771  11 max_impulse 1 1563  
513 0 0 4 565 1593 0 0 10 /**
 *
 */ 3 4 this 3 1771  4 quat 1 1654  2 dt 1 1563  
514 0 0 4 565 1593 0 0 10 /**
 *
 */ 3 4 this 3 1771  12 target_angle 1 1563  2 dt 1 1563  
515 0 0 4 566 1593 0 0 10 /**
 *
 */ 3 4 this 3 1771  4 ts_a 1 1600  4 ts_b 1 1600  
516 0 0 7 567 1600 0 0 10 /**
 *
 */ 1 4 this 3 1772  
517 0 0 7 568 1600 0 0 10 /**
 *
 */ 1 4 this 3 1772  
518 0 0 7 569 1598 0 0 0 0 
519 0 0 7 571 1776 0 0 10 /**
 *
 */ 1 4 copy 1 1774  
520 0 0 7 571 1776 0 0 10 /**
 *
 */ 2 7 shape_a 1 1590  7 shape_b 1 1590  
521 0 0 7 572 1776 0 0 0 2 4 this 3 1776  4 copy 1 1774  
522 0 0 4 573 1593 0 0 10 /**
 *
 */ 2 4 this 3 1776  2 ts 1 1600  
523 0 0 4 574 1593 0 0 10 /**
 *
 */ 2 4 this 3 1776  2 ts 1 1600  
524 0 0 7 575 1600 0 0 10 /**
 *
 */ 1 4 this 3 1774  
525 0 0 7 576 1600 0 0 10 /**
 *
 */ 1 4 this 3 1774  
526 0 0 7 577 1590 0 0 10 /**
 *
 */ 1 4 this 3 1774  
527 0 0 7 578 1590 0 0 10 /**
 *
 */ 1 4 this 3 1774  
528 0 0 6 579 1563 0 0 10 /**
 *
 */ 1 4 this 3 1774  
529 0 0 7 580 1598 0 0 0 0 
530 0 0 7 582 1779 0 0 10 /**
 *
 */ 1 4 copy 1 1777  
531 0 0 7 582 1779 0 0 10 /**
 *
 */ 2 6 points 1 1731  5 radii 1 1780  
532 0 0 7 583 1779 0 0 0 2 4 this 3 1779  4 copy 1 1777  
533 0 0 6 584 1584 0 0 10 /**
 *
 */ 1 4 this 3 1777  
534 0 0 7 585 1580 0 0 10 /**
 *
 */ 2 4 this 3 1777  5 index 1 1584  
535 0 0 6 586 1563 0 0 10 /**
 *
 */ 2 4 this 3 1777  5 index 1 1584  
536 0 0 7 587 1598 0 0 0 0 
537 0 0 7 598 1724 1280 0 0 1 6 param0 0 1785  
538 0 0 7 590 1577 0 0 10 /**
 *
 */ 1 4 this 3 1724  
539 0 0 7 591 1577 0 0 10 /**
 *
 */ 1 4 this 3 1724  
540 0 0 6 592 1584 0 0 10 /**
 *
 */ 1 4 this 3 1785  
541 0 0 6 593 1660 0 0 10 /**
 *
 */ 2 4 this 3 1785  3 idx 1 1584  
542 0 0 6 595 1563 0 0 10 /**
 *
 */ 1 4 this 3 1785  
543 0 0 6 596 1563 0 0 10 /**
 *
 */ 1 4 this 3 1785  
544 0 0 4 597 1593 0 0 10 /**
 *
 */ 1 4 this 3 1724  
545 0 0 7 600 1789 0 0 10 /**
 *
 */ 1 4 copy 1 1787  
546 0 0 7 600 1789 0 0 10 /**
 *
 */ 2 6 normal 1 1630  8 constant 1 1563  
547 0 0 7 601 1789 0 0 0 2 4 this 3 1789  4 copy 1 1787  
548 0 0 7 602 1583 0 0 10 /**
 *
 */ 1 4 this 3 1787  
549 0 0 6 603 1563 0 0 10 /**
 *
 */ 1 4 this 3 1787  
550 0 0 7 604 1789 0 0 10 /**
 *
 */ 1 5 solid 1 1790  
551 0 0 7 605 1598 0 0 0 0 
552 0 0 7 607 1793 0 0 10 /**
 *
 */ 5 6 node_a 1 1649  6 node_b 1 1649  7 frame_a 1 1600  7 frame_b 1 1600  11 use_frame_a 1 1588  
553 0 0 7 607 1793 0 0 10 /**
 *
 */ 3 6 node_a 1 1649  7 frame_a 1 1600  10 useFrame_a 1 1588  
554 0 0 6 608 1563 0 0 10 /**
 *
 */ 1 4 this 3 1794  
555 0 0 6 609 1563 0 0 10 /**
 *
 */ 1 4 this 3 1794  
556 0 0 6 610 1563 0 0 9 // Limits 1 4 this 3 1794  
557 0 0 6 611 1563 0 0 10 /**
 *
 */ 1 4 this 3 1794  
558 0 0 6 612 1563 0 0 10 /**
 *
 */ 1 4 this 3 1794  
559 0 0 6 613 1563 0 0 10 /**
 *
 */ 1 4 this 3 1794  
560 0 0 4 614 1593 0 0 10 /**
 *
 */ 2 4 this 3 1793  5 value 1 1563  
561 0 0 4 615 1593 0 0 10 /**
 *
 */ 2 4 this 3 1793  5 value 1 1563  
562 0 0 4 616 1593 0 0 10 /**
 *
 */ 2 4 this 3 1793  5 value 1 1563  
563 0 0 4 617 1593 0 0 10 /**
 *
 */ 2 4 this 3 1793  5 value 1 1563  
564 0 0 4 618 1593 0 0 15 // Linear motor 2 4 this 3 1793  2 on 1 1588  
565 0 0 4 619 1593 0 0 10 /**
 *
 */ 2 4 this 3 1793  15 target_velocity 1 1563  
566 0 0 4 620 1593 0 0 10 /**
 *
 */ 2 4 this 3 1793  9 max_force 1 1563  
567 0 0 6 621 1588 0 0 10 /**
 *
 */ 1 4 this 3 1794  
568 0 0 6 622 1563 0 0 10 /**
 *
 */ 1 4 this 3 1794  
569 0 0 6 623 1563 0 0 10 /**
 *
 */ 1 4 this 3 1794  
570 0 0 4 624 1593 0 0 16 // Angular motor 2 4 this 3 1793  2 on 1 1588  
571 0 0 4 625 1593 0 0 10 /**
 *
 */ 2 4 this 3 1793  15 target_velocity 1 1563  
572 0 0 4 626 1593 0 0 10 /**
 *
 */ 2 4 this 3 1793  9 max_force 1 1563  
573 0 0 6 627 1588 0 0 10 /**
 *
 */ 1 4 this 3 1794  
574 0 0 6 628 1563 0 0 10 /**
 *
 */ 1 4 this 3 1794  
575 0 0 6 629 1563 0 0 10 /**
 *
 */ 1 4 this 3 1794  
576 0 0 4 630 1593 0 0 9 // Frames 3 4 this 3 1793  4 ts_a 1 1600  4 ts_b 1 1600  
577 0 0 7 631 1600 0 0 10 /**
 *
 */ 1 4 this 3 1794  
578 0 0 7 632 1600 0 0 10 /**
 *
 */ 1 4 this 3 1794  
579 0 0 7 633 1598 0 0 0 0 
580 0 0 7 691 1686 1322 0 0 1 6 param0 0 1796  
581 0 0 4 638 1593 0 0 10 /**
 *
 */ 1 4 this 3 1686  
582 0 0 4 639 1593 0 0 10 /**
 *
 */ 3 4 this 3 1686  4 flag 1 1556  5 value 1 1588  
583 0 0 6 640 1588 0 0 10 /**
 *
 */ 2 4 this 3 1796  4 flag 1 1556  
584 0 0 4 641 1593 0 0 10 /**
 *
 */ 2 4 this 3 1686  5 value 1 1557  
585 0 0 6 642 1557 0 0 10 /**
 *
 */ 1 4 this 3 1796  
586 0 0 4 643 1593 0 0 36 /**
 * Setter for property kVCF.
 */ 2 4 this 3 1686  5 value 1 1563  
587 0 0 4 644 1593 0 0 35 /**
 * Setter for property kDP.
 */ 2 4 this 3 1686  5 value 1 1563  
588 0 0 4 645 1593 0 0 35 /**
 * Setter for property kDG.
 */ 2 4 this 3 1686  5 value 1 1563  
589 0 0 4 646 1593 0 0 35 /**
 * Setter for property kLF.
 */ 2 4 this 3 1686  5 value 1 1563  
590 0 0 4 647 1593 0 0 35 /**
 * Setter for property kPR.
 */ 2 4 this 3 1686  5 value 1 1563  
591 0 0 4 648 1593 0 0 35 /**
 * Setter for property kVC.
 */ 2 4 this 3 1686  5 value 1 1563  
592 0 0 4 649 1593 0 0 35 /**
 * Setter for property kDF.
 */ 2 4 this 3 1686  5 value 1 1563  
593 0 0 4 650 1593 0 0 35 /**
 * Setter for property kMT.
 */ 2 4 this 3 1686  5 value 1 1563  
594 0 0 4 651 1593 0 0 36 /**
 * Setter for property kCHR.
 */ 2 4 this 3 1686  5 value 1 1563  
595 0 0 4 652 1593 0 0 36 /**
 * Setter for property kKHR.
 */ 2 4 this 3 1686  5 value 1 1563  
596 0 0 4 653 1593 0 0 36 /**
 * Setter for property kSHR.
 */ 2 4 this 3 1686  5 value 1 1563  
597 0 0 4 654 1593 0 0 36 /**
 * Setter for property kAHR.
 */ 2 4 this 3 1686  5 value 1 1563  
598 0 0 4 655 1593 0 0 40 /**
 * Setter for property kSRHR_CL.
 */ 2 4 this 3 1686  5 value 1 1563  
599 0 0 4 656 1593 0 0 40 /**
 * Setter for property kSKHR_CL.
 */ 2 4 this 3 1686  5 value 1 1563  
600 0 0 4 657 1593 0 0 40 /**
 * Setter for property kSSHR_CL.
 */ 2 4 this 3 1686  5 value 1 1563  
601 0 0 4 658 1593 0 0 43 /**
 * Setter for property kSR_SPLT_CL.
 */ 2 4 this 3 1686  5 value 1 1563  
602 0 0 4 659 1593 0 0 43 /**
 * Setter for property kSK_SPLT_CL.
 */ 2 4 this 3 1686  5 value 1 1563  
603 0 0 4 660 1593 0 0 43 /**
 * Setter for property kSS_SPLT_CL.
 */ 2 4 this 3 1686  5 value 1 1563  
604 0 0 4 661 1593 0 0 41 /**
 * Setter for property maxvolume.
 */ 2 4 this 3 1686  5 value 1 1563  
605 0 0 4 662 1593 0 0 41 /**
 * Setter for property timescale.
 */ 2 4 this 3 1686  5 value 1 1563  
606 0 0 4 663 1593 0 0 43 /**
 * Setter for property piterations.
 */ 2 4 this 3 1686  5 value 1 1584  
607 0 0 4 664 1593 0 0 43 /**
 * Setter for property viterations.
 */ 2 4 this 3 1686  5 value 1 1584  
608 0 0 4 665 1593 0 0 43 /**
 * Setter for property diterations.
 */ 2 4 this 3 1686  5 value 1 1584  
609 0 0 4 666 1593 0 0 43 /**
 * Setter for property citerations.
 */ 2 4 this 3 1686  5 value 1 1584  
610 0 0 6 667 1563 0 0 36 /**
 * Getter for property kVCF.
 */ 1 4 this 3 1796  
611 0 0 6 668 1563 0 0 35 /**
 * Getter for property kDP.
 */ 1 4 this 3 1796  
612 0 0 6 669 1563 0 0 35 /**
 * Getter for property kDG.
 */ 1 4 this 3 1796  
613 0 0 6 670 1563 0 0 35 /**
 * Getter for property kLF.
 */ 1 4 this 3 1796  
614 0 0 6 671 1563 0 0 35 /**
 * Getter for property kPR.
 */ 1 4 this 3 1796  
615 0 0 6 672 1563 0 0 35 /**
 * Getter for property kVC.
 */ 1 4 this 3 1796  
616 0 0 6 673 1563 0 0 35 /**
 * Getter for property kDF.
 */ 1 4 this 3 1796  
617 0 0 6 674 1563 0 0 35 /**
 * Getter for property kMT.
 */ 1 4 this 3 1796  
618 0 0 6 675 1563 0 0 36 /**
 * Getter for property kCHR.
 */ 1 4 this 3 1796  
619 0 0 6 676 1563 0 0 36 /**
 * Getter for property kKHR.
 */ 1 4 this 3 1796  
620 0 0 6 677 1563 0 0 36 /**
 * Getter for property kSHR.
 */ 1 4 this 3 1796  
621 0 0 6 678 1563 0 0 36 /**
 * Getter for property kAHR.
 */ 1 4 this 3 1796  
622 0 0 6 679 1563 0 0 40 /**
 * Getter for property kSRHR_CL.
 */ 1 4 this 3 1796  
623 0 0 6 680 1563 0 0 40 /**
 * Getter for property kSKHR_CL.
 */ 1 4 this 3 1796  
624 0 0 6 681 1563 0 0 40 /**
 * Getter for property kSSHR_CL.
 */ 1 4 this 3 1796  
625 0 0 6 682 1563 0 0 43 /**
 * Getter for property kSR_SPLT_CL.
 */ 1 4 this 3 1796  
626 0 0 6 683 1563 0 0 43 /**
 * Getter for property kSK_SPLT_CL.
 */ 1 4 this 3 1796  
627 0 0 6 684 1563 0 0 43 /**
 * Getter for property kSS_SPLT_CL.
 */ 1 4 this 3 1796  
628 0 0 6 685 1563 0 0 41 /**
 * Getter for property maxvolume.
 */ 1 4 this 3 1796  
629 0 0 6 686 1563 0 0 41 /**
 * Getter for property timescale.
 */ 1 4 this 3 1796  
630 0 0 6 687 1584 0 0 43 /**
 * Getter for property piterations.
 */ 1 4 this 3 1796  
631 0 0 6 688 1584 0 0 43 /**
 * Getter for property viterations.
 */ 1 4 this 3 1796  
632 0 0 6 689 1584 0 0 43 /**
 * Getter for property diterations.
 */ 1 4 this 3 1796  
633 0 0 6 690 1584 0 0 43 /**
 * Getter for property citerations.
 */ 1 4 this 3 1796  
634 0 0 7 698 1699 1380 0 10 /**
 *
 */ 0 
635 0 0 4 700 1593 0 0 10 /**
 *
 */ 2 4 this 3 1699  4 goal 1 1563  
636 0 0 4 701 1593 0 0 10 /**
 *
 */ 2 4 this 3 1699  9 maxtorque 1 1563  
637 0 0 4 702 1593 0 0 10 /**
 *
 */ 2 4 this 3 1699  5 angle 1 1563  
638 0 0 4 703 1593 0 0 10 /**
 *
 */ 2 4 this 3 1699  4 sign 1 1563  
639 0 0 6 696 1798 0 0 0 1 4 this 3 1699  
640 0 0 6 697 1699 0 0 0 2 4 this 3 1798  4 this 1 1798  
641 0 0 7 718 1688 1385 0 0 1 6 param0 0 1799  
642 0 0 7 706 1688 1385 0 102 /**
 * Named constructor intended to be used for asserts which have to return a
 * concrete value.
 */ 0 
643 0 0 4 707 1593 0 0 42 /**
 * Setter for the property m_kLST.
 */ 2 4 this 3 1688  5 value 1 1563  
644 0 0 6 708 1563 0 0 42 /**
 * Getter for the property m_kLST.
 */ 1 4 this 3 1799  
645 0 0 4 712 1593 0 0 42 /**
 * Setter for the property m_kAST.
 */ 2 4 this 3 1688  5 value 1 1563  
646 0 0 6 713 1563 0 0 42 /**
 * Getter for the property m_kAST.
 */ 1 4 this 3 1799  
647 0 0 4 715 1593 0 0 42 /**
 * Setter for the property m_kVST.
 */ 2 4 this 3 1688  5 value 1 1563  
648 0 0 6 716 1563 0 0 42 /**
 * Getter for the property m_kVST.
 */ 1 4 this 3 1799  
649 0 0 7 720 1685 0 0 10 /**
 *
 */ 1 4 this 3 1801  
650 0 0 7 721 1598 0 0 0 0 
651 0 0 7 735 1687 1396 0 0 1 6 param0 0 1803  
652 0 0 4 724 1593 0 0 10 /**
 *
 */ 2 4 this 3 1687  7 density 1 1563  
653 0 0 4 725 1593 0 0 10 /**
 *
 */ 2 4 this 3 1687  7 density 1 1563  
654 0 0 4 726 1593 0 0 10 /**
 *
 */ 2 4 this 3 1687  6 offset 1 1563  
655 0 0 4 727 1593 0 0 10 /**
 *
 */ 2 4 this 3 1687  6 normal 1 1630  
656 0 0 4 728 1593 0 0 10 /**
 *
 */ 2 4 this 3 1687  7 gravity 1 1630  
657 0 0 6 729 1563 0 0 10 /**
 *
 */ 1 4 this 3 1803  
658 0 0 6 730 1563 0 0 10 /**
 *
 */ 1 4 this 3 1803  
659 0 0 6 731 1563 0 0 10 /**
 *
 */ 1 4 this 3 1803  
660 0 0 7 732 1583 0 0 10 /**
 *
 */ 1 4 this 3 1803  
661 0 0 7 733 1583 0 0 10 /**
 *
 */ 1 4 this 3 1803  
662 0 0 4 734 1593 0 0 10 /**
 *
 */ 2 4 this 3 1687  8 lifetime 1 1584  
663 0 0 7 737 1807 0 0 10 /**
 *
 */ 1 4 copy 1 1805  
664 0 0 7 737 1807 0 0 10 /**
 *
 */ 1 6 radius 1 1563  
665 0 0 7 738 1807 0 0 0 2 4 this 3 1807  4 copy 1 1805  
666 0 0 6 739 1563 0 0 10 /**
 *
 */ 1 4 this 3 1805  
667 0 0 7 740 1807 0 0 10 /**
 *
 */ 1 5 solid 1 1808  
668 0 0 7 741 1598 0 0 0 0 
669 0 0 7 743 1811 0 0 10 /**
 *
 */ 4 6 node_a 1 1649  6 node_b 1 1649  7 pivot_a 1 1680  7 pivot_b 1 1680  
670 0 0 7 743 1811 0 0 10 /**
 *
 */ 2 6 node_a 1 1649  7 pivot_a 1 1680  
671 0 0 4 744 1593 0 0 9 // Pivots 2 4 this 3 1811  7 pivot_a 1 1680  
672 0 0 4 745 1593 0 0 10 /**
 *
 */ 2 4 this 3 1811  7 pivot_b 1 1680  
673 0 0 7 746 1580 0 0 10 /**
 *
 */ 1 4 this 3 1812  
674 0 0 7 747 1580 0 0 10 /**
 *
 */ 1 4 this 3 1812  
675 0 0 7 748 1598 0 0 0 0 
676 0 0 7 750 1816 1423 0 10 /**
 *
 */ 1 8 timestep 1 1814  
677 0 0 6 751 1563 0 0 10 /**
 *
 */ 1 4 this 3 1817  
678 0 0 7 752 1598 0 0 0 0 
679 0 0 7 755 1819 0 0 10 /**
 *
 */ 0 
680 0 0 7 755 1819 0 0 0 1 6 param0 0 1820  
681 0 0 4 756 1593 0 0 10 /**
 *
 */ 5 4 this 3 1819  2 p0 1 1680  2 p1 1 1680  2 p2 1 1680  25 remove_duplicate_vertices 1 1588  
682 0 0 4 757 1593 0 0 10 /**
 *
 */ 4 4 this 3 1819  6 points 1 1731  7 indices 1 1822  25 remove_duplicate_vertices 1 1588  
683 0 0 4 758 1593 0 0 10 /**
 *
 */ 4 4 this 3 1819  4 geom 1 1700  25 remove_duplicate_vertices 1 1588  2 ts 1 1600  
684 0 0 4 759 1593 0 0 10 /**
 *
 */ 2 4 this 3 1819  8 distance 1 1563  
685 0 0 4 760 1593 0 0 10 /**
 *
 */ 3 4 this 3 1819  9 num_verts 1 1584  11 num_indices 1 1584  
686 0 0 6 761 1584 0 0 10 /**
 *
 */ 1 4 this 3 1820  
687 0 0 6 762 1563 0 0 10 /**
 *
 */ 1 4 this 3 1820  
688 0 0 4 763 1593 0 0 10 /**
 *
 */ 2 4 this 3 1820  3 out 1 1824  
689 0 0 4 764 1593 0 0 10 /**
 *
 */ 3 4 this 3 1820  3 out 1 1824  12 indent_level 1 1584  
690 0 0 7 765 1598 0 0 0 0 
691 0 0 7 767 1826 0 0 93 /**
 * The parameters 'compress' and 'bvh' are only used if 'dynamic' is set to
 * FALSE.
 */ 4 4 mesh 1 1819  7 dynamic 1 1588  8 compress 1 1588  3 bvh 1 1588  
692 0 0 7 767 1826 0 0 10 /**
 *
 */ 1 4 copy 1 1827  
693 0 0 7 768 1826 0 0 0 2 4 this 3 1826  4 copy 1 1827  
694 0 0 4 769 1593 0 0 10 /**
 *
 */ 3 4 this 3 1826  8 aabb_min 1 1680  8 aabb_max 1 1680  
695 0 0 6 770 1588 0 0 10 /**
 *
 */ 1 4 this 3 1827  
696 0 0 6 771 1588 0 0 10 /**
 *
 */ 1 4 this 3 1827  
697 0 0 7 772 1598 0 0 0 0 
698 0 0 7 783 1831 1441 0 0 1 6 param0 0 1829  
699 0 0 6 775 1588 0 0 10 /**
 *
 */ 1 4 this 3 1829  
700 0 0 6 776 1563 0 0 10 /**
 *
 */ 1 4 this 3 1829  
701 0 0 7 777 1583 0 0 10 /**
 *
 */ 1 4 this 3 1829  
702 0 0 7 778 1583 0 0 10 /**
 *
 */ 1 4 this 3 1829  
703 0 0 7 779 1583 0 0 10 /**
 *
 */ 1 4 this 3 1829  
704 0 0 7 780 1580 0 0 10 /**
 *
 */ 1 4 this 3 1829  
705 0 0 7 781 1580 0 0 10 /**
 *
 */ 1 4 this 3 1829  
706 0 0 7 782 1577 0 0 10 /**
 *
 */ 1 4 this 3 1829  
707 0 0 7 834 1716 1451 0 0 1 6 param0 0 1832  
708 0 0 4 786 1593 0 0 50 /**
 * Sets how stiff the suspension shall be.
 */ 2 4 this 3 1716  5 value 1 1563  
709 0 0 4 787 1593 0 0 109 /**
 * Sets the maximum distance the suspension can travel out of the resting
 * position in centimeters.
 */ 2 4 this 3 1716  5 value 1 1563  
710 0 0 4 788 1593 0 0 45 /**
 * Sets the slipperyness of the tyre.
 */ 2 4 this 3 1716  5 value 1 1563  
711 0 0 4 789 1593 0 0 66 /**
 * Sets the maximum suspension force the wheel can handle.
 */ 2 4 this 3 1716  5 value 1 1563  
712 0 0 4 790 1593 0 0 79 /**
 * Sets the damping forces applied when the suspension gets compressed.
 */ 2 4 this 3 1716  5 value 1 1563  
713 0 0 4 791 1593 0 0 71 /**
 * Sets the damping forces applied when the suspension relaxes.
 */ 2 4 this 3 1716  5 value 1 1563  
714 0 0 4 792 1593 0 0 249 /**
 * Defines a scaling factor for roll forces that affect the chassis.  0.0
 * means no roll - the chassis won't ever flip over - while 1.0 means original
 * physical behaviour.  Basically, this allows moving the center of mass up
 * and down.
 */ 2 4 this 3 1716  5 value 1 1563  
715 0 0 4 793 1593 0 0 33 /**
 * Sets the wheel radius.
 */ 2 4 this 3 1716  5 value 1 1563  
716 0 0 4 794 1593 0 0 35 /**
 * Sets the steering angle.
 */ 2 4 this 3 1716  5 value 1 1563  
717 0 0 4 795 1593 0 0 10 /**
 *
 */ 2 4 this 3 1716  5 value 1 1563  
718 0 0 4 796 1593 0 0 10 /**
 *
 */ 2 4 this 3 1716  5 value 1 1563  
719 0 0 4 797 1593 0 0 69 /**
 * Defines how much force should be used to rotate the wheel.
 */ 2 4 this 3 1716  5 value 1 1563  
720 0 0 4 798 1593 0 0 10 /**
 *
 */ 2 4 this 3 1716  5 value 1 1563  
721 0 0 4 799 1593 0 0 10 /**
 *
 */ 2 4 this 3 1716  5 value 1 1563  
722 0 0 4 800 1593 0 0 10 /**
 *
 */ 2 4 this 3 1716  5 value 1 1563  
723 0 0 4 801 1593 0 0 10 /**
 *
 */ 2 4 this 3 1716  5 value 1 1563  
724 0 0 4 802 1593 0 0 10 /**
 *
 */ 2 4 this 3 1716  5 value 1 1563  
725 0 0 4 803 1593 0 0 70 /**
 * Sets the point where the wheel is connected to the chassis.
 */ 2 4 this 3 1716  3 pos 1 1680  
726 0 0 4 804 1593 0 0 92 /**
 * Sets the wheel's forward vector.  (Most likely orthogonal to the axle
 * vector.)
 */ 2 4 this 3 1716  3 dir 1 1630  
727 0 0 4 805 1593 0 0 51 /**
 * Determines the wheel axle normal vector.
 */ 2 4 this 3 1716  4 axle 1 1630  
728 0 0 4 806 1593 0 0 10 /**
 *
 */ 2 4 this 3 1716  3 mat 1 1834  
729 0 0 4 807 1593 0 0 42 /**
 * Sets if the wheel is steerable.
 */ 2 4 this 3 1716  5 value 1 1588  
730 0 0 4 808 1593 0 0 86 /**
 * Sets the PandaNode which representates the visual appearance of this wheel.
 */ 2 4 this 3 1716  4 node 1 1577  
731 0 0 6 809 1563 0 0 83 /**
 * Returns the length of the suspension when the vehicle is standing still.
 */ 1 4 this 3 1832  
732 0 0 6 810 1563 0 0 51 /**
 * Returns the stiffness of the suspension.
 */ 1 4 this 3 1832  
733 0 0 6 811 1563 0 0 10 /**
 *
 */ 1 4 this 3 1832  
734 0 0 6 812 1563 0 0 46 /**
 * Returns how slippery the tyres are.
 */ 1 4 this 3 1832  
735 0 0 6 813 1563 0 0 72 /**
 * Returns the maximum force (weight) the suspension can handle.
 */ 1 4 this 3 1832  
736 0 0 6 814 1563 0 0 70 /**
 * Returns the  damping applied to the compressing suspension.
 */ 1 4 this 3 1832  
737 0 0 6 815 1563 0 0 66 /**
 * Returns the damping applied to the relaxing suspension.
 */ 1 4 this 3 1832  
738 0 0 6 816 1563 0 0 90 /**
 * Returns the factor by which roll forces are scaled.  See
 * set_roll_influence.
 */ 1 4 this 3 1832  
739 0 0 6 817 1563 0 0 36 /**
 * Returns the wheel radius.
 */ 1 4 this 3 1832  
740 0 0 6 818 1563 0 0 49 /**
 * Returns the steering angle in degrees.
 */ 1 4 this 3 1832  
741 0 0 6 819 1563 0 0 10 /**
 *
 */ 1 4 this 3 1832  
742 0 0 6 820 1563 0 0 10 /**
 *
 */ 1 4 this 3 1832  
743 0 0 6 821 1563 0 0 71 /**
 * Returns the amount of accelleration force currently applied.
 */ 1 4 this 3 1832  
744 0 0 6 822 1563 0 0 65 /**
 * Returns the amount of braking force currently applied.
 */ 1 4 this 3 1832  
745 0 0 6 823 1563 0 0 10 /**
 *
 */ 1 4 this 3 1832  
746 0 0 6 824 1563 0 0 10 /**
 *
 */ 1 4 this 3 1832  
747 0 0 6 825 1563 0 0 10 /**
 *
 */ 1 4 this 3 1832  
748 0 0 6 826 1563 0 0 10 /**
 *
 */ 1 4 this 3 1832  
749 0 0 7 827 1580 0 0 73 /**
 * Returns the point where the wheel is connected to the chassis.
 */ 1 4 this 3 1832  
750 0 0 7 828 1583 0 0 70 /**
 * Returns the wheel's forward vector relative to the chassis.
 */ 1 4 this 3 1832  
751 0 0 7 829 1583 0 0 55 /**
 * Returns the normal vector of the wheel axle.
 */ 1 4 this 3 1832  
752 0 0 7 830 1607 0 0 10 /**
 *
 */ 1 4 this 3 1832  
753 0 0 6 831 1588 0 0 46 /**
 * Determines if a wheel is steerable.
 */ 1 4 this 3 1832  
754 0 0 7 832 1577 0 0 142 /**
 * Returns the PandaNode which representates the visual appearance of this
 * wheel, if such a representation has been set previously.
 */ 1 4 this 3 1832  
755 0 0 7 833 1831 1441 0 10 /**
 *
 */ 1 4 this 3 1832  
756 0 0 6 2 1501 0 0 10 /**
 *
 */ 0 
757 0 0 6 3 1584 0 0 60 /**
 * Returns the version of the linked Bullet library.
 */ 0 
335
1501 12 BulletUpAxis 0 532481 12 BulletUpAxis 12 BulletUpAxis 0 0 0 0 0 0 0 0 0 0 3 4 X_up 4 X_up 0
0 4 Y_up 4 Y_up 0
1 4 Z_up 4 Z_up 0
2 0 0

1502 12 BulletRayHit 0 140289 12 BulletRayHit 12 BulletRayHit 0 0 0 0 767 0 7 760 761 762 763 764 765 766 0 0 0 0 0 10
/**
 *
 */

1503 22 BulletAllHitsRayResult 0 140289 22 BulletAllHitsRayResult 22 BulletAllHitsRayResult 0 0 0 0 777 0 7 770 771 772 773 774 775 776 1 1839 0 1 3 1504 768 769 0 0 10
/**
 *
 */

1504 24 AllHitsRayResultCallback 0 263169 42 btCollisionWorld::AllHitsRayResultCallback 42 btCollisionWorld::AllHitsRayResultCallback 1505 0 0 0 0 0 0 0 0 0 0 0 0

1505 16 btCollisionWorld 0 2048 16 btCollisionWorld 16 btCollisionWorld 0 0 0 0 0 0 0 0 0 0 0 0 0

1506 11 BulletShape 0 75777 11 BulletShape 11 BulletShape 0 0 0 0 0 0 12 778 779 780 781 782 783 784 785 786 787 788 789 0 0 1 0 1507 0 0 0 0 10
/**
 *
 */

1507 27 TypedWritableReferenceCount 0 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1508 33 BulletBaseCharacterControllerNode 0 141313 33 BulletBaseCharacterControllerNode 33 BulletBaseCharacterControllerNode 0 0 0 0 791 0 1 790 0 0 1 0 1509 0 0 0 0 10
/**
 *
 */

1509 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

1510 14 BulletBodyNode 0 75777 14 BulletBodyNode 14 BulletBodyNode 0 0 0 0 0 0 43 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 1 1840 0 1 0 1509 0 0 0 0 10
/**
 *
 */

1511 14 BulletBoxShape 0 75777 14 BulletBoxShape 14 BulletBoxShape 0 0 0 1 835 0 0 5 836 837 838 839 840 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1512 18 BulletCapsuleShape 0 75777 18 BulletCapsuleShape 18 BulletCapsuleShape 0 0 0 1 841 0 0 4 842 843 844 845 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1513 29 BulletCharacterControllerNode 0 75777 29 BulletCharacterControllerNode 29 BulletCharacterControllerNode 0 0 0 1 846 791 0 15 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 0 0 1 0 1508 0 0 0 0 10
/**
 *
 */

1514 25 BulletClosestHitRayResult 0 140289 25 BulletClosestHitRayResult 25 BulletClosestHitRayResult 0 0 0 1 874 875 0 10 864 865 866 867 868 869 870 871 872 873 0 0 1 3 1515 862 863 0 0 10
/**
 *
 */

1515 24 ClosestRayResultCallback 0 263169 42 btCollisionWorld::ClosestRayResultCallback 42 btCollisionWorld::ClosestRayResultCallback 1505 0 0 0 0 0 0 0 0 0 0 0 0

1516 27 BulletClosestHitSweepResult 0 140289 27 BulletClosestHitSweepResult 27 BulletClosestHitSweepResult 0 0 0 1 886 887 0 8 878 879 880 881 882 883 884 885 0 0 1 3 1517 876 877 0 0 10
/**
 *
 */

1517 27 ClosestConvexResultCallback 0 263169 45 btCollisionWorld::ClosestConvexResultCallback 45 btCollisionWorld::ClosestConvexResultCallback 1505 0 0 0 0 0 0 0 0 0 0 0 0

1518 15 BulletConeShape 0 75777 15 BulletConeShape 15 BulletConeShape 0 0 0 1 888 0 0 4 889 890 891 892 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1519 16 BulletConstraint 0 75777 16 BulletConstraint 16 BulletConstraint 0 0 0 0 0 0 12 893 894 895 896 897 898 899 900 901 902 903 904 0 0 1 0 1520 0 0 0 1 1521 10
/**
 *
 */

1520 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1521 15 ConstraintParam 0 794624 33 BulletConstraint::ConstraintParam 33 BulletConstraint::ConstraintParam 1519 0 0 0 0 0 0 0 0 0 4 6 CP_erp 24 BulletConstraint::CP_erp 0
1 11 CP_stop_erp 29 BulletConstraint::CP_stop_erp 0
2 6 CP_cfm 24 BulletConstraint::CP_cfm 0
3 11 CP_stop_cfm 29 BulletConstraint::CP_stop_cfm 0
4 0 0

1522 25 BulletConeTwistConstraint 0 75777 25 BulletConeTwistConstraint 25 BulletConeTwistConstraint 0 0 0 1 905 0 0 13 906 907 908 909 910 911 912 913 914 915 916 917 918 0 0 1 0 1519 0 0 0 0 10
/**
 *
 */

1523 19 BulletManifoldPoint 0 26625 19 BulletManifoldPoint 19 BulletManifoldPoint 0 0 0 0 919 0 35 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 0 0 0 0 0 10
/**
 *
 */

1524 25 BulletContactCallbackData 0 141313 25 BulletContactCallbackData 25 BulletContactCallbackData 0 0 0 1 955 964 0 8 956 957 958 959 960 961 962 963 0 0 1 0 1525 0 0 0 0 10
/**
 *
 */

1525 12 CallbackData 0 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 348
/**
 * This is a generic data block that is passed along to a CallbackObject when
 * a callback is made.  It contains data specific to the particular callback
 * type in question.
 *
 * This is actually an abstract base class and contains no data.
 * Specializations of this class will contain the actual data relevant to each
 * callback type.
 */

1526 13 BulletContact 0 140289 13 BulletContact 13 BulletContact 0 0 0 0 972 0 7 965 966 967 968 969 970 971 0 0 0 0 0 10
/**
 *
 */

1527 19 BulletContactResult 0 140289 19 BulletContactResult 19 BulletContactResult 0 0 0 0 977 0 2 975 976 1 1841 0 1 3 1528 973 974 0 0 10
/**
 *
 */

1528 21 ContactResultCallback 0 263169 39 btCollisionWorld::ContactResultCallback 39 btCollisionWorld::ContactResultCallback 1505 0 0 0 0 0 0 0 0 0 0 0 0

1529 15 BulletDebugNode 0 75777 15 BulletDebugNode 15 BulletDebugNode 0 0 0 1 978 0 0 6 979 980 981 982 983 984 0 0 1 0 1530 0 0 0 0 10
/**
 *
 */

1530 8 GeomNode 0 2049 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

1531 15 BulletGhostNode 0 75777 15 BulletGhostNode 15 BulletGhostNode 0 0 0 1 985 0 0 3 986 987 988 1 1842 0 1 0 1510 0 0 0 0 10
/**
 *
 */

1532 19 BulletRigidBodyNode 0 75777 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 1 989 0 0 36 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 0 0 1 0 1510 0 0 0 0 10
/**
 *
 */

1533 25 BulletSoftBodyNodeElement 0 26625 25 BulletSoftBodyNodeElement 25 BulletSoftBodyNodeElement 0 0 0 1 1034 1026 0 7 1027 1028 1029 1030 1031 1032 1033 0 0 0 0 0 10
/**
 *
 */

1534 18 BulletSoftBodyNode 0 75777 18 BulletSoftBodyNode 18 BulletSoftBodyNode 0 0 0 0 0 0 45 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 2 1843 1844 0 1 0 1510 0 0 0 0 10
/**
 *
 */

1535 19 BulletVehicleTuning 0 141313 19 BulletVehicleTuning 19 BulletVehicleTuning 0 0 0 0 1092 0 12 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 0 0 0 0 0 10
/**
 *
 */

1536 13 BulletVehicle 0 75777 13 BulletVehicle 13 BulletVehicle 0 0 0 1 1093 0 0 15 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1 1845 0 1 0 1520 0 0 0 0 257
/**
 * Simulates a raycast vehicle which casts a ray per wheel at the ground as a
 * cheap replacement for complex suspension simulation.  The suspension can be
 * tuned in various ways.  It is possible to add a (probably) arbitrary number
 * of wheels.
 */

1537 11 BulletWorld 0 75777 11 BulletWorld 11 BulletWorld 0 0 0 1 1109 0 0 50 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 7 1846 1847 1848 1849 1850 1851 1852 0 1 0 1520 0 0 0 2 1538 1539 10
/**
 *
 */

1538 19 BroadphaseAlgorithm 0 794624 32 BulletWorld::BroadphaseAlgorithm 32 BulletWorld::BroadphaseAlgorithm 1537 0 0 0 0 0 0 0 0 0 2 18 BA_sweep_and_prune 31 BulletWorld::BA_sweep_and_prune 0
0 20 BA_dynamic_aabb_tree 33 BulletWorld::BA_dynamic_aabb_tree 0
1 0 16
// Configuration

1539 15 FilterAlgorithm 0 794624 28 BulletWorld::FilterAlgorithm 28 BulletWorld::FilterAlgorithm 1537 0 0 0 0 0 0 0 0 0 3 7 FA_mask 20 BulletWorld::FA_mask 0
0 14 FA_groups_mask 27 BulletWorld::FA_groups_mask 0
1 11 FA_callback 24 BulletWorld::FA_callback 0
2 0 0

1540 21 BulletConvexHullShape 0 75777 21 BulletConvexHullShape 21 BulletConvexHullShape 0 0 0 1 1160 0 0 5 1161 1162 1163 1164 1165 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1541 27 BulletConvexPointCloudShape 0 75777 27 BulletConvexPointCloudShape 27 BulletConvexPointCloudShape 0 0 0 1 1166 0 0 3 1167 1168 1169 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1542 19 BulletCylinderShape 0 75777 19 BulletCylinderShape 19 BulletCylinderShape 0 0 0 1 1170 0 0 5 1171 1172 1173 1174 1175 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1543 24 BulletFilterCallbackData 0 141313 24 BulletFilterCallbackData 24 BulletFilterCallbackData 0 0 0 1 1176 1182 0 5 1177 1178 1179 1180 1181 0 0 1 0 1525 0 0 0 0 10
/**
 *
 */

1544 26 BulletRotationalLimitMotor 0 26625 26 BulletRotationalLimitMotor 26 BulletRotationalLimitMotor 0 0 0 1 1183 1184 0 18 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 0 0 0 0 0 55
/**
 * Rotation Limit structure for generic joints.
 */

1545 29 BulletTranslationalLimitMotor 0 26625 29 BulletTranslationalLimitMotor 29 BulletTranslationalLimitMotor 0 0 0 1 1203 1204 0 17 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 0 0 0 0 0 55
/**
 * Rotation Limit structure for generic joints.
 */

1546 23 BulletGenericConstraint 0 75777 23 BulletGenericConstraint 23 BulletGenericConstraint 0 0 0 1 1222 0 0 11 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 0 0 1 0 1519 0 0 0 0 10
/**
 *
 */

1547 22 BulletHeightfieldShape 0 75777 22 BulletHeightfieldShape 22 BulletHeightfieldShape 0 0 0 1 1234 0 0 3 1235 1236 1237 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1548 12 BulletHelper 0 141313 12 BulletHelper 12 BulletHelper 0 0 0 1 1246 1247 0 8 1238 1239 1240 1241 1242 1243 1244 1245 0 0 0 0 0 10
/**
 *
 */

1549 21 BulletHingeConstraint 0 75777 21 BulletHingeConstraint 21 BulletHingeConstraint 0 0 0 1 1248 0 0 15 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 0 0 1 0 1519 0 0 0 0 158
/**
 * The hinge constraint lets two bodies rotate around a given axis while
 * adhering to specified limits.  It's motor can apply angular force to them.
 */

1550 23 BulletMinkowskiSumShape 0 75777 23 BulletMinkowskiSumShape 23 BulletMinkowskiSumShape 0 0 0 1 1264 0 0 9 1265 1266 1267 1268 1269 1270 1271 1272 1273 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1551 22 BulletMultiSphereShape 0 75777 22 BulletMultiSphereShape 22 BulletMultiSphereShape 0 0 0 1 1274 0 0 5 1275 1276 1277 1278 1279 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1552 24 BulletPersistentManifold 0 26625 24 BulletPersistentManifold 24 BulletPersistentManifold 0 0 0 1 1288 1280 0 7 1281 1282 1283 1284 1285 1286 1287 1 1853 0 0 0 0 10
/**
 *
 */

1553 16 BulletPlaneShape 0 75777 16 BulletPlaneShape 16 BulletPlaneShape 0 0 0 1 1289 0 0 5 1290 1291 1292 1293 1294 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1554 22 BulletSliderConstraint 0 75777 22 BulletSliderConstraint 22 BulletSliderConstraint 0 0 0 1 1295 0 0 26 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 0 0 1 0 1519 0 0 0 0 10
/**
 *
 */

1555 20 BulletSoftBodyConfig 0 26625 20 BulletSoftBodyConfig 20 BulletSoftBodyConfig 0 0 0 1 1376 1322 0 53 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 0 0 0 0 2 1556 1557 10
/**
 *
 */

1556 13 CollisionFlag 0 794624 35 BulletSoftBodyConfig::CollisionFlag 35 BulletSoftBodyConfig::CollisionFlag 1555 0 0 0 0 0 0 0 0 0 7 21 CF_rigid_vs_soft_mask 43 BulletSoftBodyConfig::CF_rigid_vs_soft_mask 34
// RVSmask: Rigid versus soft mask
15 17 CF_sdf_rigid_soft 39 BulletSoftBodyConfig::CF_sdf_rigid_soft 35
// SDF_RS:  SDF based rigid vs soft
1 21 CF_cluster_rigid_soft 43 BulletSoftBodyConfig::CF_cluster_rigid_soft 43
// CL_RS:   Cluster vs convex rigid vs soft
2 20 CF_soft_vs_soft_mask 42 BulletSoftBodyConfig::CF_soft_vs_soft_mask 33
// SVSmask: Soft versus soft mask
48 24 CF_vertex_face_soft_soft 46 BulletSoftBodyConfig::CF_vertex_face_soft_soft 48
// VF_SS:   Vertex vs face soft vs soft handling
16 20 CF_cluster_soft_soft 42 BulletSoftBodyConfig::CF_cluster_soft_soft 52
// CL_SS:   Cluster vs cluster soft vs soft handling
32 15 CF_cluster_self 37 BulletSoftBodyConfig::CF_cluster_self 44
// CL_SELF: Cluster soft body self collision
64 0 0

1557 9 AeroModel 0 794624 31 BulletSoftBodyConfig::AeroModel 31 BulletSoftBodyConfig::AeroModel 1555 0 0 0 0 0 0 0 0 0 5 15 AM_vertex_point 37 BulletSoftBodyConfig::AM_vertex_point 58
// V_Point:    Vertex normals are oriented toward velocity
0 19 AM_vertex_two_sided 41 BulletSoftBodyConfig::AM_vertex_two_sided 58
// V_TwoSided: Vertex normals are fliped to match velocity
1 19 AM_vertex_one_sided 41 BulletSoftBodyConfig::AM_vertex_one_sided 48
// V_OneSided: Vertex normals are taken as it is
2 17 AM_face_two_sided 39 BulletSoftBodyConfig::AM_face_two_sided 56
// F_TwoSided: Face normals are fliped to match velocity
3 17 AM_face_one_sided 39 BulletSoftBodyConfig::AM_face_one_sided 46
// F_OneSided: Face normals are taken as it is
4 0 0

1558 21 BulletSoftBodyControl 0 26625 21 BulletSoftBodyControl 21 BulletSoftBodyControl 0 0 0 1 1379 1380 0 4 1381 1382 1383 1384 0 0 1 3 1559 1377 1378 0 0 10
/**
 *
 */

1559 8 IControl 0 263169 28 btSoftBody::AJoint::IControl 28 btSoftBody::AJoint::IControl 1560 0 0 0 0 0 0 0 0 0 0 0 0

1560 6 AJoint 0 263168 18 btSoftBody::AJoint 18 btSoftBody::AJoint 1561 0 0 0 0 0 0 0 0 0 0 0 0

1561 10 btSoftBody 0 2048 10 btSoftBody 10 btSoftBody 0 0 0 0 0 0 0 0 0 0 0 0 0

1562 22 BulletSoftBodyMaterial 0 26625 22 BulletSoftBodyMaterial 22 BulletSoftBodyMaterial 0 0 0 1 1393 1385 3 1836 1837 1838 7 1386 1387 1388 1389 1390 1391 1392 0 0 0 0 0 10
/**
 *
 */

1563 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1564 0 0 0 0 0 0 0 0 0 0

1564 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1565 19 BulletSoftBodyShape 0 75777 19 BulletSoftBodyShape 19 BulletSoftBodyShape 0 0 0 0 0 0 2 1394 1395 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1566 23 BulletSoftBodyWorldInfo 0 26625 23 BulletSoftBodyWorldInfo 23 BulletSoftBodyWorldInfo 0 0 0 1 1408 1396 0 11 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 0 0 0 0 0 10
/**
 *
 */

1567 17 BulletSphereShape 0 75777 17 BulletSphereShape 17 BulletSphereShape 0 0 0 1 1409 0 0 4 1410 1411 1412 1413 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1568 25 BulletSphericalConstraint 0 75777 25 BulletSphericalConstraint 25 BulletSphericalConstraint 0 0 0 1 1414 0 0 5 1415 1416 1417 1418 1419 0 0 1 0 1519 0 0 0 0 328
/**
 * A constraint between two rigid bodies, each with a pivot point.  The pivot
 * points are described in the body's local space.  The constraint limits
 * movement of the two rigid bodies in such a way that the pivot points match
 * in global space.  The spherical constraint can be seen as a "ball and
 * socket" joint.
 */

1569 22 BulletTickCallbackData 0 141313 22 BulletTickCallbackData 22 BulletTickCallbackData 0 0 0 1 1420 1423 0 2 1421 1422 0 0 1 0 1525 0 0 0 0 10
/**
 *
 */

1570 18 BulletTriangleMesh 0 75777 18 BulletTriangleMesh 18 BulletTriangleMesh 0 0 0 1 1424 0 0 10 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 0 0 1 0 1507 0 0 0 0 10
/**
 *
 */

1571 23 BulletTriangleMeshShape 0 75777 23 BulletTriangleMeshShape 23 BulletTriangleMeshShape 0 0 0 1 1435 0 0 5 1436 1437 1438 1439 1440 0 0 1 0 1506 0 0 0 0 10
/**
 *
 */

1572 22 BulletWheelRaycastInfo 0 26625 22 BulletWheelRaycastInfo 22 BulletWheelRaycastInfo 0 0 0 1 1450 1441 0 8 1442 1443 1444 1445 1446 1447 1448 1449 0 0 0 0 0 10
/**
 *
 */

1573 11 BulletWheel 0 26625 11 BulletWheel 11 BulletWheel 0 0 0 1 1500 1451 0 48 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 0 0 0 0 0 145
/**
 * One wheel of a BulletVehicle.  Instances should not be created directly but
 * using the factory method BulletVehicle::create_wheel().
 */

1574 14 BulletRayHit * 0 8576 14 BulletRayHit * 14 BulletRayHit * 0 0 1502 0 0 0 0 0 0 0 0 0 0

1575 20 BulletRayHit const * 0 8576 20 BulletRayHit const * 20 BulletRayHit const * 0 0 1576 0 0 0 0 0 0 0 0 0 0

1576 18 BulletRayHit const 0 8832 18 BulletRayHit const 18 BulletRayHit const 0 0 1502 0 0 0 0 0 0 0 0 0 0

1577 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 1509 0 0 0 0 0 0 0 0 0 0

1578 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1579 0 0 0 0 0 0 0 0 0 0

1579 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1580 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1578 0 0 0 0 0 0 0 0 0 0

1581 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 1582 0 0 0 0 0 0 0 0 0 0

1582 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1583 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 1581 0 0 0 0 0 0 0 0 0 0

1584 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1585 24 BulletAllHitsRayResult * 0 8576 24 BulletAllHitsRayResult * 24 BulletAllHitsRayResult * 0 0 1503 0 0 0 0 0 0 0 0 0 0

1586 30 BulletAllHitsRayResult const * 0 8576 30 BulletAllHitsRayResult const * 30 BulletAllHitsRayResult const * 0 0 1587 0 0 0 0 0 0 0 0 0 0

1587 28 BulletAllHitsRayResult const 0 8832 28 BulletAllHitsRayResult const 28 BulletAllHitsRayResult const 0 0 1503 0 0 0 0 0 0 0 0 0 0

1588 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1589 26 AllHitsRayResultCallback * 0 8576 44 btCollisionWorld::AllHitsRayResultCallback * 44 btCollisionWorld::AllHitsRayResultCallback * 0 0 1504 0 0 0 0 0 0 0 0 0 0

1590 19 BulletShape const * 0 8576 19 BulletShape const * 19 BulletShape const * 0 0 1591 0 0 0 0 0 0 0 0 0 0

1591 17 BulletShape const 0 8832 17 BulletShape const 17 BulletShape const 0 0 1506 0 0 0 0 0 0 0 0 0 0

1592 13 BulletShape * 0 8576 13 BulletShape * 13 BulletShape * 0 0 1506 0 0 0 0 0 0 0 0 0 0

1593 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1594 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1595 14 BoundingSphere 0 2048 14 BoundingSphere 14 BoundingSphere 0 0 0 0 0 0 0 0 0 0 0 0 147
/**
 * This defines a bounding sphere, consisting of a center and a radius.  It is
 * always a sphere, and never an ellipsoid or other quadric.
 */

1596 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1595 0 0 0 0 0 0 0 0 0 0

1597 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1598 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1597 0 0 0 0 0 0 0 0 0 0

1599 16 BulletBodyNode * 0 8576 16 BulletBodyNode * 16 BulletBodyNode * 0 0 1510 0 0 0 0 0 0 0 0 0 0

1600 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 1601 0 0 0 0 0 0 0 0 0 0

1601 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 1602 0 0 0 0 0 0 0 0 0 0

1602 14 TransformState 0 2048 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

1603 22 BulletBodyNode const * 0 8576 22 BulletBodyNode const * 22 BulletBodyNode const * 0 0 1604 0 0 0 0 0 0 0 0 0 0

1604 20 BulletBodyNode const 0 8832 20 BulletBodyNode const 20 BulletBodyNode const 0 0 1510 0 0 0 0 0 0 0 0 0 0

1605 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1606 0 0 0 0 0 0 0 0 0 0

1606 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1607 10 LMatrix4 * 0 8576 10 LMatrix4 * 10 LMatrix4 * 0 0 1605 0 0 0 0 0 0 0 0 0 0

1608 15 CollisionNode * 0 8576 15 CollisionNode * 15 CollisionNode * 0 0 1609 0 0 0 0 0 0 0 0 0 0

1609 13 CollisionNode 0 2048 13 CollisionNode 13 CollisionNode 0 0 0 0 0 0 0 0 0 0 0 0 261
/**
 * A node in the scene graph that can hold any number of CollisionSolids.
 * This may either represent a bit of static geometry in the scene that things
 * will collide with, or an animated object twirling around in the world and
 * running into things.
 */

1610 13 CollideMask * 0 8576 13 CollideMask * 13 CollideMask * 0 0 1611 0 0 0 0 0 0 0 0 0 0

1611 11 CollideMask 0 2105344 11 CollideMask 11 CollideMask 0 0 1612 0 0 0 0 0 0 0 0 0 0

1612 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 1613 0 0 0 0 0 0 0 0 0 0

1613 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1614 10 bool const 0 8832 10 bool const 10 bool const 0 0 1588 0 0 0 0 0 0 0 0 0 0

1615 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 1616 0 0 0 0 0 0 0 0 0 0

1616 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 1617 0 0 0 0 0 0 0 0 0 0

1617 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 1618 0 0 0 0 0 0 0 0 0 0

1618 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1619 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 1617 0 0 0 0 0 0 0 0 0 0

1620 22 BulletBoxShape const * 0 8576 22 BulletBoxShape const * 22 BulletBoxShape const * 0 0 1621 0 0 0 0 0 0 0 0 0 0

1621 20 BulletBoxShape const 0 8832 20 BulletBoxShape const 20 BulletBoxShape const 0 0 1511 0 0 0 0 0 0 0 0 0 0

1622 16 BulletBoxShape * 0 8576 16 BulletBoxShape * 16 BulletBoxShape * 0 0 1511 0 0 0 0 0 0 0 0 0 0

1623 20 CollisionBox const * 0 8576 20 CollisionBox const * 20 CollisionBox const * 0 0 1624 0 0 0 0 0 0 0 0 0 0

1624 18 CollisionBox const 0 8832 18 CollisionBox const 18 CollisionBox const 0 0 1625 0 0 0 0 0 0 0 0 0 0

1625 12 CollisionBox 0 2048 12 CollisionBox 12 CollisionBox 0 0 0 0 0 0 0 0 0 0 0 0 47
/**
 * A cuboid collision volume or object.
 */

1626 26 BulletCapsuleShape const * 0 8576 26 BulletCapsuleShape const * 26 BulletCapsuleShape const * 0 0 1627 0 0 0 0 0 0 0 0 0 0

1627 24 BulletCapsuleShape const 0 8832 24 BulletCapsuleShape const 24 BulletCapsuleShape const 0 0 1512 0 0 0 0 0 0 0 0 0 0

1628 20 BulletCapsuleShape * 0 8576 20 BulletCapsuleShape * 20 BulletCapsuleShape * 0 0 1512 0 0 0 0 0 0 0 0 0 0

1629 31 BulletCharacterControllerNode * 0 8576 31 BulletCharacterControllerNode * 31 BulletCharacterControllerNode * 0 0 1513 0 0 0 0 0 0 0 0 0 0

1630 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 1631 0 0 0 0 0 0 0 0 0 0

1631 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 1581 0 0 0 0 0 0 0 0 0 0

1632 37 BulletCharacterControllerNode const * 0 8576 37 BulletCharacterControllerNode const * 37 BulletCharacterControllerNode const * 0 0 1633 0 0 0 0 0 0 0 0 0 0

1633 35 BulletCharacterControllerNode const 0 8832 35 BulletCharacterControllerNode const 35 BulletCharacterControllerNode const 0 0 1513 0 0 0 0 0 0 0 0 0 0

1634 33 BulletClosestHitRayResult const * 0 8576 33 BulletClosestHitRayResult const * 33 BulletClosestHitRayResult const * 0 0 1635 0 0 0 0 0 0 0 0 0 0

1635 31 BulletClosestHitRayResult const 0 8832 31 BulletClosestHitRayResult const 31 BulletClosestHitRayResult const 0 0 1514 0 0 0 0 0 0 0 0 0 0

1636 27 BulletClosestHitRayResult * 0 8576 27 BulletClosestHitRayResult * 27 BulletClosestHitRayResult * 0 0 1514 0 0 0 0 0 0 0 0 0 0

1637 26 ClosestRayResultCallback * 0 8576 44 btCollisionWorld::ClosestRayResultCallback * 44 btCollisionWorld::ClosestRayResultCallback * 0 0 1515 0 0 0 0 0 0 0 0 0 0

1638 35 BulletClosestHitSweepResult const * 0 8576 35 BulletClosestHitSweepResult const * 35 BulletClosestHitSweepResult const * 0 0 1639 0 0 0 0 0 0 0 0 0 0

1639 33 BulletClosestHitSweepResult const 0 8832 33 BulletClosestHitSweepResult const 33 BulletClosestHitSweepResult const 0 0 1516 0 0 0 0 0 0 0 0 0 0

1640 29 BulletClosestHitSweepResult * 0 8576 29 BulletClosestHitSweepResult * 29 BulletClosestHitSweepResult * 0 0 1516 0 0 0 0 0 0 0 0 0 0

1641 29 ClosestConvexResultCallback * 0 8576 47 btCollisionWorld::ClosestConvexResultCallback * 47 btCollisionWorld::ClosestConvexResultCallback * 0 0 1517 0 0 0 0 0 0 0 0 0 0

1642 23 BulletConeShape const * 0 8576 23 BulletConeShape const * 23 BulletConeShape const * 0 0 1643 0 0 0 0 0 0 0 0 0 0

1643 21 BulletConeShape const 0 8832 21 BulletConeShape const 21 BulletConeShape const 0 0 1518 0 0 0 0 0 0 0 0 0 0

1644 17 BulletConeShape * 0 8576 17 BulletConeShape * 17 BulletConeShape * 0 0 1518 0 0 0 0 0 0 0 0 0 0

1645 18 BulletConstraint * 0 8576 18 BulletConstraint * 18 BulletConstraint * 0 0 1519 0 0 0 0 0 0 0 0 0 0

1646 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 1532 0 0 0 0 0 0 0 0 0 0

1647 24 BulletConstraint const * 0 8576 24 BulletConstraint const * 24 BulletConstraint const * 0 0 1648 0 0 0 0 0 0 0 0 0 0

1648 22 BulletConstraint const 0 8832 22 BulletConstraint const 22 BulletConstraint const 0 0 1519 0 0 0 0 0 0 0 0 0 0

1649 27 BulletRigidBodyNode const * 0 8576 27 BulletRigidBodyNode const * 27 BulletRigidBodyNode const * 0 0 1650 0 0 0 0 0 0 0 0 0 0

1650 25 BulletRigidBodyNode const 0 8832 25 BulletRigidBodyNode const 25 BulletRigidBodyNode const 0 0 1532 0 0 0 0 0 0 0 0 0 0

1651 27 BulletConeTwistConstraint * 0 8576 27 BulletConeTwistConstraint * 27 BulletConeTwistConstraint * 0 0 1522 0 0 0 0 0 0 0 0 0 0

1652 33 BulletConeTwistConstraint const * 0 8576 33 BulletConeTwistConstraint const * 33 BulletConeTwistConstraint const * 0 0 1653 0 0 0 0 0 0 0 0 0 0

1653 31 BulletConeTwistConstraint const 0 8832 31 BulletConeTwistConstraint const 31 BulletConeTwistConstraint const 0 0 1522 0 0 0 0 0 0 0 0 0 0

1654 19 LQuaternion const * 0 8576 19 LQuaternion const * 19 LQuaternion const * 0 0 1655 0 0 0 0 0 0 0 0 0 0

1655 17 LQuaternion const 0 8832 17 LQuaternion const 17 LQuaternion const 0 0 1656 0 0 0 0 0 0 0 0 0 0

1656 11 LQuaternion 0 2105344 11 LQuaternion 11 LQuaternion 0 0 1657 0 0 0 0 0 0 0 0 0 0

1657 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1658 27 BulletManifoldPoint const * 0 8576 27 BulletManifoldPoint const * 27 BulletManifoldPoint const * 0 0 1659 0 0 0 0 0 0 0 0 0 0

1659 25 BulletManifoldPoint const 0 8832 25 BulletManifoldPoint const 25 BulletManifoldPoint const 0 0 1523 0 0 0 0 0 0 0 0 0 0

1660 21 BulletManifoldPoint * 0 8576 21 BulletManifoldPoint * 21 BulletManifoldPoint * 0 0 1523 0 0 0 0 0 0 0 0 0 0

1661 33 BulletContactCallbackData const * 0 8576 33 BulletContactCallbackData const * 33 BulletContactCallbackData const * 0 0 1662 0 0 0 0 0 0 0 0 0 0

1662 31 BulletContactCallbackData const 0 8832 31 BulletContactCallbackData const 31 BulletContactCallbackData const 0 0 1524 0 0 0 0 0 0 0 0 0 0

1663 27 BulletContactCallbackData * 0 8576 27 BulletContactCallbackData * 27 BulletContactCallbackData * 0 0 1524 0 0 0 0 0 0 0 0 0 0

1664 15 BulletContact * 0 8576 15 BulletContact * 15 BulletContact * 0 0 1526 0 0 0 0 0 0 0 0 0 0

1665 21 BulletContact const * 0 8576 21 BulletContact const * 21 BulletContact const * 0 0 1666 0 0 0 0 0 0 0 0 0 0

1666 19 BulletContact const 0 8832 19 BulletContact const 19 BulletContact const 0 0 1526 0 0 0 0 0 0 0 0 0 0

1667 27 BulletContactResult const * 0 8576 27 BulletContactResult const * 27 BulletContactResult const * 0 0 1668 0 0 0 0 0 0 0 0 0 0

1668 25 BulletContactResult const 0 8832 25 BulletContactResult const 25 BulletContactResult const 0 0 1527 0 0 0 0 0 0 0 0 0 0

1669 21 BulletContactResult * 0 8576 21 BulletContactResult * 21 BulletContactResult * 0 0 1527 0 0 0 0 0 0 0 0 0 0

1670 23 ContactResultCallback * 0 8576 41 btCollisionWorld::ContactResultCallback * 41 btCollisionWorld::ContactResultCallback * 0 0 1528 0 0 0 0 0 0 0 0 0 0

1671 23 BulletDebugNode const * 0 8576 23 BulletDebugNode const * 23 BulletDebugNode const * 0 0 1672 0 0 0 0 0 0 0 0 0 0

1672 21 BulletDebugNode const 0 8832 21 BulletDebugNode const 21 BulletDebugNode const 0 0 1529 0 0 0 0 0 0 0 0 0 0

1673 17 BulletDebugNode * 0 8576 17 BulletDebugNode * 17 BulletDebugNode * 0 0 1529 0 0 0 0 0 0 0 0 0 0

1674 17 BulletGhostNode * 0 8576 17 BulletGhostNode * 17 BulletGhostNode * 0 0 1531 0 0 0 0 0 0 0 0 0 0

1675 23 BulletGhostNode const * 0 8576 23 BulletGhostNode const * 23 BulletGhostNode const * 0 0 1676 0 0 0 0 0 0 0 0 0 0

1676 21 BulletGhostNode const 0 8832 21 BulletGhostNode const 21 BulletGhostNode const 0 0 1531 0 0 0 0 0 0 0 0 0 0

1677 8 LMatrix3 0 2105344 8 LMatrix3 8 LMatrix3 0 0 1678 0 0 0 0 0 0 0 0 0 0

1678 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1679 10 LMatrix3 * 0 8576 10 LMatrix3 * 10 LMatrix3 * 0 0 1677 0 0 0 0 0 0 0 0 0 0

1680 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1681 0 0 0 0 0 0 0 0 0 0

1681 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1578 0 0 0 0 0 0 0 0 0 0

1682 33 BulletSoftBodyNodeElement const * 0 8576 33 BulletSoftBodyNodeElement const * 33 BulletSoftBodyNodeElement const * 0 0 1683 0 0 0 0 0 0 0 0 0 0

1683 31 BulletSoftBodyNodeElement const 0 8832 31 BulletSoftBodyNodeElement const 31 BulletSoftBodyNodeElement const 0 0 1533 0 0 0 0 0 0 0 0 0 0

1684 27 BulletSoftBodyNodeElement * 0 8576 27 BulletSoftBodyNodeElement * 27 BulletSoftBodyNodeElement * 0 0 1533 0 0 0 0 0 0 0 0 0 0

1685 20 BulletSoftBodyNode * 0 8576 20 BulletSoftBodyNode * 20 BulletSoftBodyNode * 0 0 1534 0 0 0 0 0 0 0 0 0 0

1686 22 BulletSoftBodyConfig * 0 8576 22 BulletSoftBodyConfig * 22 BulletSoftBodyConfig * 0 0 1555 0 0 0 0 0 0 0 0 0 0

1687 25 BulletSoftBodyWorldInfo * 0 8576 25 BulletSoftBodyWorldInfo * 25 BulletSoftBodyWorldInfo * 0 0 1566 0 0 0 0 0 0 0 0 0 0

1688 24 BulletSoftBodyMaterial * 0 8576 24 BulletSoftBodyMaterial * 24 BulletSoftBodyMaterial * 0 0 1562 0 0 0 0 0 0 0 0 0 0

1689 26 BulletSoftBodyNode const * 0 8576 26 BulletSoftBodyNode const * 26 BulletSoftBodyNode const * 0 0 1690 0 0 0 0 0 0 0 0 0 0

1690 24 BulletSoftBodyNode const 0 8832 24 BulletSoftBodyNode const 24 BulletSoftBodyNode const 0 0 1534 0 0 0 0 0 0 0 0 0 0

1691 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

1692 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1691 0 0 0 0 0 0 0 0 0 0

1693 6 Geom * 0 8576 6 Geom * 6 Geom * 0 0 1694 0 0 0 0 0 0 0 0 0 0

1694 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

1695 21 NurbsCurveEvaluator * 0 8576 21 NurbsCurveEvaluator * 21 NurbsCurveEvaluator * 0 0 1696 0 0 0 0 0 0 0 0 0 0

1696 19 NurbsCurveEvaluator 0 2048 19 NurbsCurveEvaluator 19 NurbsCurveEvaluator 0 0 0 0 0 0 0 0 0 0 0 0 492
/**
 * This class is an abstraction for evaluating NURBS curves.  It accepts an
 * array of vertices, each of which may be in a different coordinate space (as
 * defined by a NodePath), as well as an optional knot vector.
 *
 * This is not related to NurbsCurve, CubicCurveseg or any of the
 * ParametricCurve-derived objects in this module.  It is a completely
 * parallel implementation of NURBS curves, and will probably eventually
 * replace the whole ParametricCurve class hierarchy.
 */

1697 23 NurbsSurfaceEvaluator * 0 8576 23 NurbsSurfaceEvaluator * 23 NurbsSurfaceEvaluator * 0 0 1698 0 0 0 0 0 0 0 0 0 0

1698 21 NurbsSurfaceEvaluator 0 2048 21 NurbsSurfaceEvaluator 21 NurbsSurfaceEvaluator 0 0 0 0 0 0 0 0 0 0 0 0 227
/**
 * This class is an abstraction for evaluating NURBS surfaces.  It accepts an
 * array of vertices, each of which may be in a different coordinate space (as
 * defined by a NodePath), as well as an optional knot vector.
 */

1699 23 BulletSoftBodyControl * 0 8576 23 BulletSoftBodyControl * 23 BulletSoftBodyControl * 0 0 1558 0 0 0 0 0 0 0 0 0 0

1700 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 1701 0 0 0 0 0 0 0 0 0 0

1701 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 1694 0 0 0 0 0 0 0 0 0 0

1702 15 PTA_LVecBase3 * 0 8576 15 PTA_LVecBase3 * 15 PTA_LVecBase3 * 0 0 1703 0 0 0 0 0 0 0 0 0 0

1703 13 PTA_LVecBase3 0 2105344 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1704 0 0 0 0 0 0 0 0 0 0

1704 14 PTA_LVecBase3f 0 2105344 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1705 0 0 0 0 0 0 0 0 0 0

1705 28 PointerToArray< LVecBase3f > 0 2048 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

1706 9 PTA_int * 0 8576 9 PTA_int * 9 PTA_int * 0 0 1707 0 0 0 0 0 0 0 0 0 0

1707 7 PTA_int 0 2105344 7 PTA_int 7 PTA_int 0 0 1708 0 0 0 0 0 0 0 0 0 0

1708 21 PointerToArray< int > 0 2048 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

1709 21 BulletVehicleTuning * 0 8576 21 BulletVehicleTuning * 21 BulletVehicleTuning * 0 0 1535 0 0 0 0 0 0 0 0 0 0

1710 27 BulletVehicleTuning const * 0 8576 27 BulletVehicleTuning const * 27 BulletVehicleTuning const * 0 0 1711 0 0 0 0 0 0 0 0 0 0

1711 25 BulletVehicleTuning const 0 8832 25 BulletVehicleTuning const 25 BulletVehicleTuning const 0 0 1535 0 0 0 0 0 0 0 0 0 0

1712 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 1537 0 0 0 0 0 0 0 0 0 0

1713 15 BulletVehicle * 0 8576 15 BulletVehicle * 15 BulletVehicle * 0 0 1536 0 0 0 0 0 0 0 0 0 0

1714 21 BulletVehicle const * 0 8576 21 BulletVehicle const * 21 BulletVehicle const * 0 0 1715 0 0 0 0 0 0 0 0 0 0

1715 19 BulletVehicle const 0 8832 19 BulletVehicle const 19 BulletVehicle const 0 0 1536 0 0 0 0 0 0 0 0 0 0

1716 13 BulletWheel * 0 8576 13 BulletWheel * 13 BulletWheel * 0 0 1573 0 0 0 0 0 0 0 0 0 0

1717 19 BulletWorld const * 0 8576 19 BulletWorld const * 19 BulletWorld const * 0 0 1718 0 0 0 0 0 0 0 0 0 0

1718 17 BulletWorld const 0 8832 17 BulletWorld const 17 BulletWorld const 0 0 1537 0 0 0 0 0 0 0 0 0 0

1719 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 1720 0 0 0 0 0 0 0 0 0 0

1720 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2348
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file): @code public: static TypeHandle
 * get_class_type() { return _type_handle; } static void init_type() {
 * <<<BaseClassOne>>>::init_type(); <<<BaseClassTwo>>>::init_type();
 * <<<BaseClassN>>>::init_type(); register_type(_type_handle,
 * "<<<ThisClassStringName>>>", <<<BaseClassOne>>>::get_class_type(),
 * <<<BaseClassTwo>>>::get_class_type(), <<<BaseClassN>>>::get_class_type());
 * } virtual TypeHandle get_type() const { return get_class_type(); } virtual
 * TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private: static TypeHandle _type_handle; @endcode
 *
 * @par In the class .cxx file: @code TypeHandle
 * <<<ThisClassStringName>>>::_type_handle; @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file: @code
 * ConfigureFn(config_<<<PackageName>>>) { <<<ClassOne>>>::init_type();
 * <<<ClassTwo>>>::init_type(); <<<ClassN>>>::init_type(); } @endcode
 */

1721 35 BulletBaseCharacterControllerNode * 0 8576 35 BulletBaseCharacterControllerNode * 35 BulletBaseCharacterControllerNode * 0 0 1508 0 0 0 0 0 0 0 0 0 0

1722 19 CollideMask const * 0 8576 19 CollideMask const * 19 CollideMask const * 0 0 1723 0 0 0 0 0 0 0 0 0 0

1723 17 CollideMask const 0 8832 17 CollideMask const 17 CollideMask const 0 0 1611 0 0 0 0 0 0 0 0 0 0

1724 26 BulletPersistentManifold * 0 8576 26 BulletPersistentManifold * 26 BulletPersistentManifold * 0 0 1552 0 0 0 0 0 0 0 0 0 0

1725 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1726 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1727 0 0 0 0 0 0 0 0 0 0

1727 14 CallbackObject 0 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 276
/**
 * This is a generic object that can be assigned to a callback at various
 * points in the rendering process.  This is actually a base class for a
 * handful of specialized callback object types.  You can also subclass it
 * yourself to make your own callback handler.
 */

1728 23 BulletConvexHullShape * 0 8576 23 BulletConvexHullShape * 23 BulletConvexHullShape * 0 0 1540 0 0 0 0 0 0 0 0 0 0

1729 29 BulletConvexHullShape const * 0 8576 29 BulletConvexHullShape const * 29 BulletConvexHullShape const * 0 0 1730 0 0 0 0 0 0 0 0 0 0

1730 27 BulletConvexHullShape const 0 8832 27 BulletConvexHullShape const 27 BulletConvexHullShape const 0 0 1540 0 0 0 0 0 0 0 0 0 0

1731 21 PTA_LVecBase3 const * 0 8576 21 PTA_LVecBase3 const * 21 PTA_LVecBase3 const * 0 0 1732 0 0 0 0 0 0 0 0 0 0

1732 19 PTA_LVecBase3 const 0 8832 19 PTA_LVecBase3 const 19 PTA_LVecBase3 const 0 0 1703 0 0 0 0 0 0 0 0 0 0

1733 35 BulletConvexPointCloudShape const * 0 8576 35 BulletConvexPointCloudShape const * 35 BulletConvexPointCloudShape const * 0 0 1734 0 0 0 0 0 0 0 0 0 0

1734 33 BulletConvexPointCloudShape const 0 8832 33 BulletConvexPointCloudShape const 33 BulletConvexPointCloudShape const 0 0 1541 0 0 0 0 0 0 0 0 0 0

1735 29 BulletConvexPointCloudShape * 0 8576 29 BulletConvexPointCloudShape * 29 BulletConvexPointCloudShape * 0 0 1541 0 0 0 0 0 0 0 0 0 0

1736 27 BulletCylinderShape const * 0 8576 27 BulletCylinderShape const * 27 BulletCylinderShape const * 0 0 1737 0 0 0 0 0 0 0 0 0 0

1737 25 BulletCylinderShape const 0 8832 25 BulletCylinderShape const 25 BulletCylinderShape const 0 0 1542 0 0 0 0 0 0 0 0 0 0

1738 21 BulletCylinderShape * 0 8576 21 BulletCylinderShape * 21 BulletCylinderShape * 0 0 1542 0 0 0 0 0 0 0 0 0 0

1739 32 BulletFilterCallbackData const * 0 8576 32 BulletFilterCallbackData const * 32 BulletFilterCallbackData const * 0 0 1740 0 0 0 0 0 0 0 0 0 0

1740 30 BulletFilterCallbackData const 0 8832 30 BulletFilterCallbackData const 30 BulletFilterCallbackData const 0 0 1543 0 0 0 0 0 0 0 0 0 0

1741 26 BulletFilterCallbackData * 0 8576 26 BulletFilterCallbackData * 26 BulletFilterCallbackData * 0 0 1543 0 0 0 0 0 0 0 0 0 0

1742 34 BulletRotationalLimitMotor const * 0 8576 34 BulletRotationalLimitMotor const * 34 BulletRotationalLimitMotor const * 0 0 1743 0 0 0 0 0 0 0 0 0 0

1743 32 BulletRotationalLimitMotor const 0 8832 32 BulletRotationalLimitMotor const 32 BulletRotationalLimitMotor const 0 0 1544 0 0 0 0 0 0 0 0 0 0

1744 28 BulletRotationalLimitMotor * 0 8576 28 BulletRotationalLimitMotor * 28 BulletRotationalLimitMotor * 0 0 1544 0 0 0 0 0 0 0 0 0 0

1745 37 BulletTranslationalLimitMotor const * 0 8576 37 BulletTranslationalLimitMotor const * 37 BulletTranslationalLimitMotor const * 0 0 1746 0 0 0 0 0 0 0 0 0 0

1746 35 BulletTranslationalLimitMotor const 0 8832 35 BulletTranslationalLimitMotor const 35 BulletTranslationalLimitMotor const 0 0 1545 0 0 0 0 0 0 0 0 0 0

1747 31 BulletTranslationalLimitMotor * 0 8576 31 BulletTranslationalLimitMotor * 31 BulletTranslationalLimitMotor * 0 0 1545 0 0 0 0 0 0 0 0 0 0

1748 25 BulletGenericConstraint * 0 8576 25 BulletGenericConstraint * 25 BulletGenericConstraint * 0 0 1546 0 0 0 0 0 0 0 0 0 0

1749 31 BulletGenericConstraint const * 0 8576 31 BulletGenericConstraint const * 31 BulletGenericConstraint const * 0 0 1750 0 0 0 0 0 0 0 0 0 0

1750 29 BulletGenericConstraint const 0 8832 29 BulletGenericConstraint const 29 BulletGenericConstraint const 0 0 1546 0 0 0 0 0 0 0 0 0 0

1751 30 BulletHeightfieldShape const * 0 8576 30 BulletHeightfieldShape const * 30 BulletHeightfieldShape const * 0 0 1752 0 0 0 0 0 0 0 0 0 0

1752 28 BulletHeightfieldShape const 0 8832 28 BulletHeightfieldShape const 28 BulletHeightfieldShape const 0 0 1547 0 0 0 0 0 0 0 0 0 0

1753 24 BulletHeightfieldShape * 0 8576 24 BulletHeightfieldShape * 24 BulletHeightfieldShape * 0 0 1547 0 0 0 0 0 0 0 0 0 0

1754 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 1755 0 0 0 0 0 0 0 0 0 0

1755 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 1756 0 0 0 0 0 0 0 0 0 0

1756 8 PNMImage 0 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 1516
/**
 * The name of this class derives from the fact that we originally implemented
 * it as a layer on top of the "pnm library", based on netpbm, which was built
 * to implement pbm, pgm, and pbm files, and is the underlying support of a
 * number of public-domain image file converters.  Nowadays we are no longer
 * derived directly from the pnm library, mainly to allow support of C++
 * iostreams instead of the C stdio FILE interface.
 *
 * Conceptually, a PNMImage is a two-dimensional array of xels, which are the
 * PNM-defined generic pixel type.  Each xel may have a red, green, and blue
 * component, or (if the image is grayscale) a gray component.  The image may
 * be read in, the individual xels manipulated, and written out again, or a
 * black image may be constructed from scratch.
 *
 * A PNMImage has a color space and a maxval, the combination of which defines
 * how a floating-point linear color value is encoded as an integer value in
 * memory.  The functions ending in _val operate on encoded colors, whereas
 * the regular ones work with linear floating-point values.  All operations
 * are color space correct unless otherwise specified.
 *
 * The image is of size XSize() by YSize() xels, numbered from top to bottom,
 * left to right, beginning at zero.
 *
 * Files can be specified by filename, or by an iostream pointer.  The
 * filename "-" refers to stdin or stdout.
 *
 * This class is not inherently thread-safe; use it from a single thread or
 * protect access using a mutex.
 */

1757 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1758 0 0 0 0 0 0 0 0 0 0

1758 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

1759 14 BulletHelper * 0 8576 14 BulletHelper * 14 BulletHelper * 0 0 1548 0 0 0 0 0 0 0 0 0 0

1760 20 BulletHelper const * 0 8576 20 BulletHelper const * 20 BulletHelper const * 0 0 1761 0 0 0 0 0 0 0 0 0 0

1761 18 BulletHelper const 0 8832 18 BulletHelper const 18 BulletHelper const 0 0 1548 0 0 0 0 0 0 0 0 0 0

1762 18 NodePathCollection 0 2048 18 NodePathCollection 18 NodePathCollection 0 0 0 0 0 0 0 0 0 0 0 0 178
/**
 * This is a set of zero or more NodePaths.  It's handy for returning from
 * functions that need to return multiple NodePaths (for instance,
 * NodePaths::get_children).
 */

1763 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 1764 0 0 0 0 0 0 0 0 0 0

1764 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

1765 20 NodePathCollection * 0 8576 20 NodePathCollection * 20 NodePathCollection * 0 0 1762 0 0 0 0 0 0 0 0 0 0

1766 12 InternalName 0 2048 12 InternalName 12 InternalName 0 0 0 0 0 0 0 0 0 0 0 0 514
/**
 * Encodes a string name in a hash table, mapping it to a pointer.  This is
 * used to tokenify names so they may be used efficiently in low-level Panda
 * structures, for instance to differentiate the multiple sets of texture
 * coordinates that might be stored on a Geom.
 *
 * InternalNames are hierarchical, with the '.' used by convention as a
 * separator character.  You can construct a single InternalName as a
 * composition of one or more other names, or by giving it a source string
 * directly.
 */

1767 14 InternalName * 0 8576 14 InternalName * 14 InternalName * 0 0 1766 0 0 0 0 0 0 0 0 0 0

1768 22 GeomVertexFormat const 0 8832 22 GeomVertexFormat const 22 GeomVertexFormat const 0 0 1769 0 0 0 0 0 0 0 0 0 0

1769 16 GeomVertexFormat 0 2048 16 GeomVertexFormat 16 GeomVertexFormat 0 0 0 0 0 0 0 0 0 0 0 0 924
/**
 * This class defines the physical layout of the vertex data stored within a
 * Geom.  The layout consists of a list of named columns, each of which has a
 * numeric type and a size.
 *
 * The columns are typically interleaved within a single array, but they may
 * also be distributed among multiple different arrays; at the extreme, each
 * column may be alone within its own array (which amounts to a parallel-array
 * definition).
 *
 * Thus, a GeomVertexFormat is really a list of GeomVertexArrayFormats, each
 * of which contains a list of columns.  However, a particular column name
 * should not appear more than once in the format, even between different
 * arrays.
 *
 * There are a handful of standard pre-defined GeomVertexFormat objects, or
 * you may define your own as needed.  You may record any combination of
 * standard and/or user-defined columns in your custom GeomVertexFormat
 * constructions.
 */

1770 24 GeomVertexFormat const * 0 8576 24 GeomVertexFormat const * 24 GeomVertexFormat const * 0 0 1768 0 0 0 0 0 0 0 0 0 0

1771 23 BulletHingeConstraint * 0 8576 23 BulletHingeConstraint * 23 BulletHingeConstraint * 0 0 1549 0 0 0 0 0 0 0 0 0 0

1772 29 BulletHingeConstraint const * 0 8576 29 BulletHingeConstraint const * 29 BulletHingeConstraint const * 0 0 1773 0 0 0 0 0 0 0 0 0 0

1773 27 BulletHingeConstraint const 0 8832 27 BulletHingeConstraint const 27 BulletHingeConstraint const 0 0 1549 0 0 0 0 0 0 0 0 0 0

1774 31 BulletMinkowskiSumShape const * 0 8576 31 BulletMinkowskiSumShape const * 31 BulletMinkowskiSumShape const * 0 0 1775 0 0 0 0 0 0 0 0 0 0

1775 29 BulletMinkowskiSumShape const 0 8832 29 BulletMinkowskiSumShape const 29 BulletMinkowskiSumShape const 0 0 1550 0 0 0 0 0 0 0 0 0 0

1776 25 BulletMinkowskiSumShape * 0 8576 25 BulletMinkowskiSumShape * 25 BulletMinkowskiSumShape * 0 0 1550 0 0 0 0 0 0 0 0 0 0

1777 30 BulletMultiSphereShape const * 0 8576 30 BulletMultiSphereShape const * 30 BulletMultiSphereShape const * 0 0 1778 0 0 0 0 0 0 0 0 0 0

1778 28 BulletMultiSphereShape const 0 8832 28 BulletMultiSphereShape const 28 BulletMultiSphereShape const 0 0 1551 0 0 0 0 0 0 0 0 0 0

1779 24 BulletMultiSphereShape * 0 8576 24 BulletMultiSphereShape * 24 BulletMultiSphereShape * 0 0 1551 0 0 0 0 0 0 0 0 0 0

1780 20 PTA_stdfloat const * 0 8576 20 PTA_stdfloat const * 20 PTA_stdfloat const * 0 0 1781 0 0 0 0 0 0 0 0 0 0

1781 18 PTA_stdfloat const 0 8832 18 PTA_stdfloat const 18 PTA_stdfloat const 0 0 1782 0 0 0 0 0 0 0 0 0 0

1782 12 PTA_stdfloat 0 2105344 12 PTA_stdfloat 12 PTA_stdfloat 0 0 1783 0 0 0 0 0 0 0 0 0 0

1783 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 1784 0 0 0 0 0 0 0 0 0 0

1784 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

1785 32 BulletPersistentManifold const * 0 8576 32 BulletPersistentManifold const * 32 BulletPersistentManifold const * 0 0 1786 0 0 0 0 0 0 0 0 0 0

1786 30 BulletPersistentManifold const 0 8832 30 BulletPersistentManifold const 30 BulletPersistentManifold const 0 0 1552 0 0 0 0 0 0 0 0 0 0

1787 24 BulletPlaneShape const * 0 8576 24 BulletPlaneShape const * 24 BulletPlaneShape const * 0 0 1788 0 0 0 0 0 0 0 0 0 0

1788 22 BulletPlaneShape const 0 8832 22 BulletPlaneShape const 22 BulletPlaneShape const 0 0 1553 0 0 0 0 0 0 0 0 0 0

1789 18 BulletPlaneShape * 0 8576 18 BulletPlaneShape * 18 BulletPlaneShape * 0 0 1553 0 0 0 0 0 0 0 0 0 0

1790 22 CollisionPlane const * 0 8576 22 CollisionPlane const * 22 CollisionPlane const * 0 0 1791 0 0 0 0 0 0 0 0 0 0

1791 20 CollisionPlane const 0 8832 20 CollisionPlane const 20 CollisionPlane const 0 0 1792 0 0 0 0 0 0 0 0 0 0

1792 14 CollisionPlane 0 2048 14 CollisionPlane 14 CollisionPlane 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1793 24 BulletSliderConstraint * 0 8576 24 BulletSliderConstraint * 24 BulletSliderConstraint * 0 0 1554 0 0 0 0 0 0 0 0 0 0

1794 30 BulletSliderConstraint const * 0 8576 30 BulletSliderConstraint const * 30 BulletSliderConstraint const * 0 0 1795 0 0 0 0 0 0 0 0 0 0

1795 28 BulletSliderConstraint const 0 8832 28 BulletSliderConstraint const 28 BulletSliderConstraint const 0 0 1554 0 0 0 0 0 0 0 0 0 0

1796 28 BulletSoftBodyConfig const * 0 8576 28 BulletSoftBodyConfig const * 28 BulletSoftBodyConfig const * 0 0 1797 0 0 0 0 0 0 0 0 0 0

1797 26 BulletSoftBodyConfig const 0 8832 26 BulletSoftBodyConfig const 26 BulletSoftBodyConfig const 0 0 1555 0 0 0 0 0 0 0 0 0 0

1798 10 IControl * 0 8576 30 btSoftBody::AJoint::IControl * 30 btSoftBody::AJoint::IControl * 0 0 1559 0 0 0 0 0 0 0 0 0 0

1799 30 BulletSoftBodyMaterial const * 0 8576 30 BulletSoftBodyMaterial const * 30 BulletSoftBodyMaterial const * 0 0 1800 0 0 0 0 0 0 0 0 0 0

1800 28 BulletSoftBodyMaterial const 0 8832 28 BulletSoftBodyMaterial const 28 BulletSoftBodyMaterial const 0 0 1562 0 0 0 0 0 0 0 0 0 0

1801 27 BulletSoftBodyShape const * 0 8576 27 BulletSoftBodyShape const * 27 BulletSoftBodyShape const * 0 0 1802 0 0 0 0 0 0 0 0 0 0

1802 25 BulletSoftBodyShape const 0 8832 25 BulletSoftBodyShape const 25 BulletSoftBodyShape const 0 0 1565 0 0 0 0 0 0 0 0 0 0

1803 31 BulletSoftBodyWorldInfo const * 0 8576 31 BulletSoftBodyWorldInfo const * 31 BulletSoftBodyWorldInfo const * 0 0 1804 0 0 0 0 0 0 0 0 0 0

1804 29 BulletSoftBodyWorldInfo const 0 8832 29 BulletSoftBodyWorldInfo const 29 BulletSoftBodyWorldInfo const 0 0 1566 0 0 0 0 0 0 0 0 0 0

1805 25 BulletSphereShape const * 0 8576 25 BulletSphereShape const * 25 BulletSphereShape const * 0 0 1806 0 0 0 0 0 0 0 0 0 0

1806 23 BulletSphereShape const 0 8832 23 BulletSphereShape const 23 BulletSphereShape const 0 0 1567 0 0 0 0 0 0 0 0 0 0

1807 19 BulletSphereShape * 0 8576 19 BulletSphereShape * 19 BulletSphereShape * 0 0 1567 0 0 0 0 0 0 0 0 0 0

1808 23 CollisionSphere const * 0 8576 23 CollisionSphere const * 23 CollisionSphere const * 0 0 1809 0 0 0 0 0 0 0 0 0 0

1809 21 CollisionSphere const 0 8832 21 CollisionSphere const 21 CollisionSphere const 0 0 1810 0 0 0 0 0 0 0 0 0 0

1810 15 CollisionSphere 0 2048 15 CollisionSphere 15 CollisionSphere 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * A spherical collision volume or object.
 */

1811 27 BulletSphericalConstraint * 0 8576 27 BulletSphericalConstraint * 27 BulletSphericalConstraint * 0 0 1568 0 0 0 0 0 0 0 0 0 0

1812 33 BulletSphericalConstraint const * 0 8576 33 BulletSphericalConstraint const * 33 BulletSphericalConstraint const * 0 0 1813 0 0 0 0 0 0 0 0 0 0

1813 31 BulletSphericalConstraint const 0 8832 31 BulletSphericalConstraint const 31 BulletSphericalConstraint const 0 0 1568 0 0 0 0 0 0 0 0 0 0

1814 10 btScalar * 0 8576 10 btScalar * 10 btScalar * 0 0 1815 0 0 0 0 0 0 0 0 0 0

1815 8 btScalar 0 2048 8 btScalar 8 btScalar 0 0 0 0 0 0 0 0 0 0 0 0 0

1816 24 BulletTickCallbackData * 0 8576 24 BulletTickCallbackData * 24 BulletTickCallbackData * 0 0 1569 0 0 0 0 0 0 0 0 0 0

1817 30 BulletTickCallbackData const * 0 8576 30 BulletTickCallbackData const * 30 BulletTickCallbackData const * 0 0 1818 0 0 0 0 0 0 0 0 0 0

1818 28 BulletTickCallbackData const 0 8832 28 BulletTickCallbackData const 28 BulletTickCallbackData const 0 0 1569 0 0 0 0 0 0 0 0 0 0

1819 20 BulletTriangleMesh * 0 8576 20 BulletTriangleMesh * 20 BulletTriangleMesh * 0 0 1570 0 0 0 0 0 0 0 0 0 0

1820 26 BulletTriangleMesh const * 0 8576 26 BulletTriangleMesh const * 26 BulletTriangleMesh const * 0 0 1821 0 0 0 0 0 0 0 0 0 0

1821 24 BulletTriangleMesh const 0 8832 24 BulletTriangleMesh const 24 BulletTriangleMesh const 0 0 1570 0 0 0 0 0 0 0 0 0 0

1822 15 PTA_int const * 0 8576 15 PTA_int const * 15 PTA_int const * 0 0 1823 0 0 0 0 0 0 0 0 0 0

1823 13 PTA_int const 0 8832 13 PTA_int const 13 PTA_int const 0 0 1707 0 0 0 0 0 0 0 0 0 0

1824 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1825 0 0 0 0 0 0 0 0 0 0

1825 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1826 25 BulletTriangleMeshShape * 0 8576 25 BulletTriangleMeshShape * 25 BulletTriangleMeshShape * 0 0 1571 0 0 0 0 0 0 0 0 0 0

1827 31 BulletTriangleMeshShape const * 0 8576 31 BulletTriangleMeshShape const * 31 BulletTriangleMeshShape const * 0 0 1828 0 0 0 0 0 0 0 0 0 0

1828 29 BulletTriangleMeshShape const 0 8832 29 BulletTriangleMeshShape const 29 BulletTriangleMeshShape const 0 0 1571 0 0 0 0 0 0 0 0 0 0

1829 30 BulletWheelRaycastInfo const * 0 8576 30 BulletWheelRaycastInfo const * 30 BulletWheelRaycastInfo const * 0 0 1830 0 0 0 0 0 0 0 0 0 0

1830 28 BulletWheelRaycastInfo const 0 8832 28 BulletWheelRaycastInfo const 28 BulletWheelRaycastInfo const 0 0 1572 0 0 0 0 0 0 0 0 0 0

1831 24 BulletWheelRaycastInfo * 0 8576 24 BulletWheelRaycastInfo * 24 BulletWheelRaycastInfo * 0 0 1572 0 0 0 0 0 0 0 0 0 0

1832 19 BulletWheel const * 0 8576 19 BulletWheel const * 19 BulletWheel const * 0 0 1833 0 0 0 0 0 0 0 0 0 0

1833 17 BulletWheel const 0 8832 17 BulletWheel const 17 BulletWheel const 0 0 1573 0 0 0 0 0 0 0 0 0 0

1834 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1835 0 0 0 0 0 0 0 0 0 0

1835 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1605 0 0 0 0 0 0 0 0 0 0

0
3
1836 16 linear_stiffness 0 6 1563 1388 1387 0 0 0 0 40 BulletSoftBodyMaterial::linear_stiffness 0

1837 17 angular_stiffness 0 6 1563 1390 1389 0 0 0 0 41 BulletSoftBodyMaterial::angular_stiffness 0

1838 19 volume_preservation 0 6 1563 1392 1391 0 0 0 0 43 BulletSoftBodyMaterial::volume_preservation 0

15
1839 8 get_hits 0 775 776 32 BulletAllHitsRayResult::get_hits 0

1840 10 get_shapes 0 794 795 26 BulletBodyNode::get_shapes 0

1841 12 get_contacts 0 975 976 33 BulletContactResult::get_contacts 0

1842 21 get_overlapping_nodes 0 986 987 38 BulletGhostNode::get_overlapping_nodes 0

1843 13 get_materials 0 1068 1069 33 BulletSoftBodyNode::get_materials 0

1844 9 get_nodes 0 1071 1072 29 BulletSoftBodyNode::get_nodes 0

1845 10 get_wheels 0 1105 1106 25 BulletVehicle::get_wheels 0

1846 10 get_ghosts 0 1120 1121 23 BulletWorld::get_ghosts 0

1847 16 get_rigid_bodies 0 1122 1123 29 BulletWorld::get_rigid_bodies 0

1848 15 get_soft_bodies 0 1124 1125 28 BulletWorld::get_soft_bodies 0

1849 14 get_characters 0 1126 1127 27 BulletWorld::get_characters 0

1850 12 get_vehicles 0 1130 1131 25 BulletWorld::get_vehicles 0

1851 15 get_constraints 0 1132 1133 28 BulletWorld::get_constraints 0

1852 13 get_manifolds 0 1140 1141 26 BulletWorld::get_manifolds 0

1853 19 get_manifold_points 0 1283 1284 45 BulletPersistentManifold::get_manifold_points 0

